{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "baee6dfd-b9cd-431a-b456-caefd16b6e94",
        "name": "Clear Cache",
        "item": [
          {
            "id": "39f7c9c5-dc80-40f5-b365-96adfeac8213",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f790a903-9030-44c0-bc5f-e8193d6ac612",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ce881a1d-c124-496c-b10d-3057349bbb18"
                }
              }
            ]
          },
          {
            "id": "f31ae428-009b-4a73-ab24-b05b5dd7d942",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b20130a-46e1-4cbc-a532-9d080baee81f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "33db1758-f646-4224-b1a0-472eeafd4ff7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8528d9af-fcfb-46d3-a740-0731fa507109",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4ad1b884-32cf-4c17-b313-fd9dd6601a6a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "88dba678-adcf-4e37-8a70-c1b95e2004a4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4233990-9bea-4406-9f1b-afeda216d1a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "312170f2-cc3e-40fd-8860-4a42052adca8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d56b3e7e-813a-4f52-9156-52d7a994b2ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb9f4842-97a7-4431-8b01-8d2f99a91210"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3058c815-c61a-4116-b7e0-11abcf6fb105",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a13f4c4e-6a1a-48a2-a741-64d977ca4b1f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad92a2b4-92f1-4be9-b34f-de91e8dbb2a0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cb7fe9ec-0770-4040-bf83-ef0509c12173"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fef5da1-2e31-48d0-b632-911343b3d533",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd3a046e-6bbf-4c1f-a3e3-62455e995763"
            }
          }
        ]
      },
      {
        "id": "d5b9342a-907e-4995-b392-102f36816f78",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "65363128-42d2-4a8d-a83a-30b097aa8287",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6dcde28a-fe02-4176-88ba-a7a8cb83af02",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d58edce6-dcab-4f83-a54a-a10a37dd17a0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c22e680-6222-4a6b-b099-6c400fae30c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bc9885b-c89b-4548-961d-4efd84104a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866b8d62-ab11-48cc-bf1e-20caeb9cd950",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8d5ba0-137f-415d-9ee0-56471d7d598e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c50fce3-34fe-4224-9cbc-88a070f712f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae04eb9-49ad-41ee-b4e1-05a9ff175de2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62893aec-9d7c-44ee-9d68-a44be693a5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11dc4c83-05ee-4c7c-9334-467aade05165"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4d3f7f64-23d9-4233-baae-bfaedf83c342",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f9f0057-4edf-4b6e-86ec-38999cfab893",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0f94ec-20a7-44b4-83fc-88555d1f266d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b2d9ac5-acba-4e8f-8286-7a7e770cd049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549a383f-f412-4ffd-bd30-89292c8392f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0761dc05-564d-4efc-a1fe-0cab0bf2a011"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1dab5e62-53ec-4bcc-ae1c-80e944d61feb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b789bfb4-be3e-4cd3-af15-c26f0b2ca8eb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e579f50-ee41-4d7f-b1b3-4ed7648a5d26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6f5b96f6-0f88-4e4a-b76e-3be26a522a5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5b3f685-0abd-4fc8-aaa3-2664e32cff9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "aa80130e-9621-425a-8aa4-44adb1960b4f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da6ec718-ba21-42d3-8870-c310ffa70509",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4eea8308-c3e4-4254-a183-dc30516b8356"
            }
          }
        ]
      },
      {
        "id": "c8b47573-84d5-44c0-85e3-0fa2407d1122",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5eb78799-8a33-421b-9ab3-ae204235bcad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8b9de44d-e6a1-4d81-bf8f-eda35947f1de",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7045a880-d924-4195-999f-39a101ed9aa9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133d2ef2-80a7-4c7a-8ff2-16543ad96c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46685a35-779e-46bb-8cd8-0bfa3e22ee5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780a434a-f371-48e6-aa6c-930e61c1be86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "527128be-3e9f-4ba1-95b2-9172471aa08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9c0342-7776-49a1-8859-bc7cfa1b553d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7432d42b-232e-4720-bdbe-c60de6c30939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53476271-6424-4543-9f8d-e541fc35a45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b8ed60-8097-4d4a-8b91-3a551c0d7344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e429514-475c-4b38-b1be-fabcafdf7718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c6bb9e-0fd8-486e-83c7-ed6b4e963c05",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcad0575-3694-4879-9897-2575d6b4ace5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d381edc-86d8-41d6-bfa3-1b9176d5a62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8b19d9-35c9-4204-9b14-a42207ca7ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfab2b9e-cfeb-4073-abd6-c06672568330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27565231-c55b-444f-9861-9725b5cb3f8d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72822d74-6670-4e5b-afec-244082a96551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d414bba5-f5cd-417b-9e3e-0cfda78220b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a8782c-48f0-4de4-85c3-f16ec89b7bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60640ff3-888b-4cd8-9c0e-a0222306248e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248f09a1-7b50-4d43-a3a0-d428c4178ff6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622b36ef-e682-4f6d-be70-604e4341cf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4eaf4a2-8e82-4a52-9c82-2e5e34963a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e788eb64-002b-497c-af7a-e82299625ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "744fd66c-a186-491f-ab87-c0c40f3e6bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b01abf-1f4e-45d7-9616-a7df9814115d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e82232b-8f72-4e54-966b-4199af0778b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a52a439-019d-49b0-a272-136834e2f95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cdab18-f146-4179-9435-b932be872295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cde84109-47e4-438c-ba7a-c7539ccc39bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664c6514-64e1-4201-9ab6-cf790e21c6f0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8efa191-5a41-452e-b8cc-959a43c67251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54418daf-c11c-4d85-83ee-caa34492d100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14c455e-c290-4bb7-b728-9ed918eb8d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "248fb9f2-62f2-4981-b401-4dbf6b99c27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c437f4-8d0b-4a6e-bdb1-c5fe9f3828ac",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32c4e7a-a6ca-4c00-a29f-71e5df50222a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef0e18a-d08e-4ea5-9a18-77310210990b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8846f7-8555-4ee7-9e8a-0361d06e7405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efb0e6aa-0441-4142-bd69-fbe6f26a4bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d4821a-ab89-403f-a6eb-45c2374fd297",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e838e14c-71ea-4dfb-aaae-ce88ed2184bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e93f9be-0ce5-404a-8a30-c634f74b12cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee821f1d-2c3a-472f-b910-07f611c8904a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "531ea554-a561-4b0e-bfa5-9e6c5d805d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5604ad45-24ac-4afd-a858-2007f32201db",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8655098-e2c2-47b1-b299-2f7c8d045a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e707ad54-fd9a-41a4-a43d-67c27fd92a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea04181-8716-4973-b29f-4614d647b566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5ffcd18-92b9-46f4-a090-8039c103e9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ff9217-adb0-4204-9d69-a0e8f1d04146",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a488b088-9601-460d-9bd8-b1560eafe852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1e827e-c16e-463c-9e32-5148cda8cfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e186876-e8f6-4be7-9e6b-97a6eb777ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d44acae3-f4cd-4e55-9665-d267f320532c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a52706-a422-483f-85b5-48d0cf5664cd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7f25f2-3ec5-4521-86fc-8583e6557dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d07e29-89c2-4a6b-8bdb-30ed07bc7801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e7cc83-26a5-4d1d-8347-18f0f58bbfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be31de9d-59b4-4d58-a6da-af36fc76b809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1837e153-4643-4475-87fb-d75e30b0fee7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc1775a-5afa-4042-be34-730cde383339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100a8bba-ccdf-4598-be00-2179c3c2747f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2332fc2-a4b4-4703-a5c2-ba37ec883b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d043d4a-1859-4a76-b5a4-cd0e5b4c056d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76daae31-9085-4460-a04d-27c1b69a07af",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e97eb47-78e0-4252-90a8-fed712305fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7108b0-e70d-4c6e-a8a6-fc685bd2f432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a7b646-22e2-45b3-aefb-7cfea24e8bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3163786-4a1e-45a3-84c2-69fdf4a42850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6ea2f3-2c04-4893-86b2-0d99214bf568",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5485be22-6642-475f-ab76-6fc462e56e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835b1caa-02fd-480e-8f19-50f1a56cd77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220c44d1-fa86-4517-bd64-fd6910c5334b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f2625da-7435-493f-b8b3-02d9cfee9b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5823355-50c8-4873-b174-b4432c2aff42",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5dfef2f-4376-4388-ac77-0cd68ba15600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e21cd0-9b81-4fe5-9879-84f53413e985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fece55ff-272c-459d-868e-d8939527a8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e43af858-b9cd-49e5-ae59-c3e574997254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0535cd-6bac-40c8-a149-222d2aa1eb58",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f260270c-7891-41bf-9c75-b444e154d9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bbdb39-b7bb-4926-aa1a-5704a9f366ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d68998b-fb93-4184-ac58-c910da56c78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45eafa9a-2622-4665-b774-4bf467bd6d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea63bc0-fe6b-4e37-b674-a0e0a26c2b76",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee7c71e-df87-4b1e-a91f-ae671c27c031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04db7db-04e9-4246-b462-05cc91d70ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17eb9ac2-e86d-470b-8b82-7e494cc5b94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "14d4cd55-073e-48bb-b18a-e3a68b94b07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618dbe19-fe39-485c-997f-2bc7aede083b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c293594-1220-41f1-8b56-098519d9e36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ad3dc0c-20c1-4c52-b615-eefce17c7710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f695f32-b112-429f-a752-30d691291d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7414a79e-00c6-4c7b-9b8f-9707dba0e953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c48bcc-c694-4654-a092-d26332297690",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d421111b-6d45-47b2-adaa-936d63a3e5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb4ac7e-b6da-4551-9cbe-a5f879739235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9f8849-a719-4eb5-83e1-31e88f3d50fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d0b30f-baae-483b-b204-264f8663f93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3858d4b-f3a9-4964-abc3-5fc78b26bf28",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2762eef0-a6c2-4fe1-a878-214ddb8ab23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4bc921-1308-4e31-88f5-4db244ca8f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73041e2d-e4ca-414b-80d3-52d5c4c22c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e69d5ba-481e-4164-9eea-8d7311f8fb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de52321-1ce6-49c3-9f81-1cf39feeeb05",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f06b6fb-d467-4f94-90ce-5b6a8377e017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0171368-02ef-4cac-b32b-e55c4f50fd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bef213-3988-4952-964f-578139ce7651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d069c0f2-61c5-4cc8-a70e-759fbe61e9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed924a6-a9fc-4ef4-8b7c-2d4b09c4dc98",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fd4b78-2075-4ae7-9db6-4ecd911c048e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294fedc5-8264-4132-9df2-8301edc911b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3222c7-06a9-4dff-99a9-cda1d13b715e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42ce2f2b-a496-4077-a6af-e8ef22334d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a42380-fc83-4977-9169-91262afabf13",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cea9cf0-800c-408d-be7f-19d36c13a0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349ab4da-24a0-4625-8c7a-97381555c952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ad332e-72a1-4f68-b708-7adfd86aac28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e2d7b9e-32b6-4d8e-9015-3e629710a8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dbbd7d-c11f-48e0-93ac-35ce47024fbf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faa82c3-a47c-4f65-9f83-2bb26c2661e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88cb507-e2c9-402a-b759-15cdc289d7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a4daa7-94f5-4c1e-a904-a1ce7fc65fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad29de25-122e-483c-a5d4-9ef7e9ed9765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e95e70-9a05-46dc-8f49-6712b3c9e964",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871f7144-ec67-4164-b514-f8ac698d9852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28e871c-96d4-4afe-a567-479ebeeda32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840214c9-8cb3-45d8-9d7b-d9b64bc3755b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12348f9c-1dbb-4452-9cd1-8e6723808e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065db70a-f806-4195-86e4-e0680544de5f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf2ac0f-3660-4855-a4d6-304e64cbc164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85661e4e-0d2e-4842-a7a7-9d7084ea5fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35858fdb-d8d0-4f06-924d-c39264fe4b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a187a8f-0d2b-478e-8347-d36682c8146b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e931f3f-5ffe-47d3-871e-16cbd342039a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf9f1fa-8e44-45a9-bed9-ddf41d0bf0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026df801-c7ed-4449-b674-53741cbec0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb3ae52-da45-4534-8356-8442433bcf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90ba132d-5efd-40ca-b499-908dfbc6941b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee88f0b-a071-44ce-8b80-abef7f2d3643",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319d8fda-bbfc-4e9d-96de-5d778f1d5456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53d2658-f8f3-42bb-8373-58d0a139be11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfb1d1b-9fb0-4cf1-9321-a78c76d1d232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "52b9a26c-104b-44b3-a892-de3ac580e280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97476a6a-3443-46a0-a3e1-04a9b4284120",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9023fdc-efa4-4f33-b3a8-ec707bae5bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3211a289-a95f-43cb-87a8-6515dc66305d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ac5b97-77ab-4ee2-b15b-0f741bed8fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c653549-ef29-4c3c-b07f-a32f6794be1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ef138d-fd08-461e-854e-5f1a91371998",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0406d0-56b0-4658-9795-0f1e6a0f24a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108c5a85-6370-4bc3-8029-09c4e7a835ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8d0f14-7d3d-4a4d-9096-02136c132667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57dea912-1fd7-498b-a1a2-568d651e382e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22a3571-c6c7-4a38-96b4-5054eb49ae2e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6393952b-b1ef-482e-bc13-eafec149b4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e8665e-72cb-42a6-b65b-ff86d44b5020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e03b83-5de9-4155-b61c-e6b56f60217c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a660c21-89f5-44ab-a024-f0074585b6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e81fb31-141d-4ac6-a0ad-221d560f1028",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41531284-b5b6-4b0e-b0da-f45ec1a04649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfdda4ed-a0b5-4d47-a5fc-ef3195fe256f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a6f9c8-0872-441a-b5c0-f38d86b2a47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11d3afa0-d7a0-4c97-a265-f29ee4e59a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfbd183-bd04-465b-8c94-e39bdfd7c39f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6b7017-cb4d-422f-bedf-3284447923ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c16af3e-723c-40c1-93be-4d42bc07ac39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa2f332-6984-4e1e-a81b-10cd91eca363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84327edd-3e68-4d40-b918-64f4156e31d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c9f24e-2b81-4492-8d33-571cfe1da8ad",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f30941-cf90-45ac-8709-08fb4ddd4fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d073e11b-357d-4942-80a1-2953a2471321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31a5c25-6027-4e8f-adaa-fcad3d944f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a186ef5e-bf8e-4ed8-b29f-2fbb9db7f80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836b6fd1-9e8b-4aa8-8d52-926b9c7730de",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4720ea80-0cbb-437c-946f-b290b577d3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0557cdc3-6d4e-4ae6-ad31-13696dde208e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b28422-6807-43c3-8dc1-717b35230a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97de3b8f-777d-4f73-a5b3-69f2c630e1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e06e0c9-cfd8-4605-8b5e-b8f7044347e6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf1a95f-9884-404a-87e5-6aea5797b9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ceba2d-e6c4-4fd1-a771-3e6c467f1bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55de564-c43f-446e-830c-71908f85bd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcb4db4-f278-44ae-8a8b-0cee340cd2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6692fe-6c9b-4f5b-9b8a-b4731e56cbae",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d6dc92-bdee-4d9c-a93a-101659a58995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022a2b9e-80b3-417a-9444-2d3fcdbaec50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebe92d3-176c-4eec-8763-9f621581e65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c43acb4-bccc-4c96-8a8d-20c7bb64c189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55fe2e0-5da3-4bca-a6df-f02aada0fa6f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20529e0-5898-48a6-b5d3-bae555573609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31cdf41c-d3de-4ab6-a9ad-56c6207094db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e48ad8-ecb1-443c-bacd-2bb0e6cca293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c53ee0-7c15-42cf-99f4-84308358fbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79abdc3-4984-4eee-9940-eecc78e863e9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1aaf39-d5bc-4832-831a-a2d6a42a02a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ef5667-65db-4c5a-80ee-5744e40a354d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860ba71e-40fa-4e37-9fa8-c52263474eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "28238004-50a6-45ea-8ef6-a2e9c239c3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc5ae6d-95ee-48fc-a23e-1e95e2b1c7bb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc936d60-307d-418a-a6f5-17daf91debaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ccd7c1d-b10a-4629-8875-cd806497b60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82045c7-399c-4175-9b95-7ac4e7b1a018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b827432-79f5-410b-8141-11c74a61baaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd589596-d0f1-45ca-a021-51185824ee6d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9418619-14bf-43b7-b91c-bc50455cdf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6599d86-8789-4fcf-a0f6-e90a79127d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ecfe52-3c0b-4411-9d08-77161760d3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "64bcdac8-330c-4024-bf40-67f618af9f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114ab046-b326-4871-b727-34fce64b4dc4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56304300-cf10-45bc-bb5e-db2f1ac8b942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597437c5-7160-484f-974b-875b2170fd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac27e8d-58ab-4f48-abd0-decfc66bcafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "deca3711-6b50-4ccd-8136-235da6651666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f532485-ebe2-4367-816e-bb08f2d70067",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbc66d9-47c0-4446-8314-34c941a69163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb3e5f4-5845-42ce-afb5-92d36a645095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0552f2f3-1ee3-4dc7-9430-a455542a1b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f376995-89b6-4bfb-9edb-1637848f20fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e1c508-fb20-4f5e-b7a0-1e9ba7394461",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7264fdb-9904-47fb-bfd2-77b32737b4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf9fe45-1e05-47a0-ba79-5643dd60a000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203a4f7a-0022-4c99-a44b-6e25ab62b031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "40f16f96-d922-4fbf-b681-ff8185f6ef21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be8ca4d-2003-4dc5-9538-c7a74ba189d4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8f3051-196a-455c-8fa4-2b372fe8ae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e99b21-5560-4ab0-af88-31202056e645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9892070e-13a4-4a94-a68b-3b8c22ed7e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd8c391-90f1-46d6-8943-a0bc1752d21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd3ce63-4a92-417a-90d6-b7e8a906399b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a413bef-d504-4cda-a66e-05820d128a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c5d59e-4e2f-476e-afaa-6ac2f26d1f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f332fe-d0d0-4257-98df-ba8d35324bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1b7d0a-04b1-4389-a7f7-535713720138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23355cef-2fd6-4641-b350-bbde3ce4da86",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12ecd52-3c8b-4e84-b68d-706a3bccaa8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652220c9-4800-467f-9c45-429f40cd6681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19959e0-9726-4573-97a8-fcb1a04cb95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7615165-7ff0-45a0-9de4-4621a1a2929e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea20e09a-d29d-4cd5-802c-dfe8ac930860",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb90289c-65d3-4fa0-96c9-851cae5ff9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83f1c07-152d-4c3a-babf-6309e258eaa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f360e7fd-0ab3-4a3b-833d-ac26cccfab00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a2cc46-252b-4fa2-8695-00a04f0cf80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100f8da3-5a26-47c7-b95b-848a02de721b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3fa06d-3459-480e-abbb-aed6727a6ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300ac5ce-dc6f-4a96-993b-e9535727f2f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d769386-5101-4617-a48a-4c0e8a1df621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf438f7-e6c1-48fa-a17f-e5a599c7126f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ede7f68-05e0-4f47-84c9-2f3f6c4e34b8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0b5226-1d6e-4e25-9109-c879f7601527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3186a0af-6017-4f37-a72c-db29e173dd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6528cc70-3f77-4fee-bd54-586eade952a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f35cd12-74c6-4f0f-9b6c-34940b0a196f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928a7c8d-0eb8-428f-acf9-7063cd6aedf2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c697c4-626e-4997-a378-053159060b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0829e54-6a5a-4507-92b9-63ee4e345a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553f8d8a-548b-4b3c-b94b-a7226344ac69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d867612-6799-4fe2-9c34-3321e4e9d339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6ff017-820d-4928-aa5f-a4775a648a1b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f963c3e6-020b-410c-aeeb-c4c3826a0787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd0b212-62dd-4842-80ae-910e5376dc22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7847b351-c3a3-4652-bfd0-bbc4e0888e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4cc189-8330-4473-ab8c-8fef339f4427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8da8a37-3640-4e0e-a6d4-9257bfc2b4c1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cc29b4-baab-42ae-95b0-e2680230e215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7659a3-c58e-412e-9788-65d63db8385b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5c74bc-cfd0-4bb6-8396-1fb1097292d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4954bedc-fd43-4b2a-a133-e6c0f564e218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb1310d-1342-4358-8ce1-f09ec6af64e6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c69ce2-a1c1-4931-bbd4-084664e33e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c841f3-ed15-495f-af64-bc93442f5e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffd23b0-0df9-4f97-9ed0-ae31d577e502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91ee9e1a-db38-4410-807e-dcb739b90882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dbd7f6-bbf5-4e26-8e37-e526b0cc9722",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937d063f-3f3c-489f-82f8-e64bc4514e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d78f6a-c3fc-4565-a566-4c39b2443a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eed6806-42ad-4fa5-9a4f-d61930f7a015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "99abba82-8d43-408a-9156-aafaa71be2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679cdbbc-c31f-4dd5-ad2e-135c959ddfbe",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff07e8d-69cf-4d4b-9557-2d1dad13215e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100f7e9e-48b2-4ec9-adaf-092e4b9750f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f55b44c-f683-41a5-b33b-0bb1afa26788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1e2598-e6bc-4f70-98d8-2c0ba465385a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd4b1ba-d05a-4188-bacb-446feabdf030",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db3d3dd-46f9-4a4b-b82a-4a486fc7b6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1cb22fe-4888-411a-be9a-bff09daece41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cf6f0c-27d5-438f-82ce-3bc543de8742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f943b7-d729-4e3a-ba36-0718729f8276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e40a8f-318f-4649-8555-1adcb32bdb86",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dff076-b5ae-4035-9a04-2fa132102932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4bf73c-8566-4b5d-9ff5-fc68cf850751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644b7ea9-fbdf-462d-93fc-af30baf4a64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "deb80513-d223-44cf-ae48-7e3762b99c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb30401-99fd-4f15-a304-032e4b1c2a27",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0c55ca-a13e-46b7-8841-696a485ae0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f8bbde-9c36-4a82-8413-0a63ce19a952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5b05e2-c2b5-470c-b1a3-76195863b316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "86477dd9-7cce-42cb-abdb-c69f60601679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8a743b-dd35-42bb-922f-6cf0b41fea5e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553872cd-5bfc-46ec-8d60-5d43dccf96a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6d3059-3109-4734-b769-44b9945ca186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200f1811-2fb0-4e31-bc87-ed15f311677d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3488ca-a09c-4618-b9f2-9dcbc421e797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddad873d-bf58-4d5a-b611-0614c2976df6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5811e0-3e76-4966-ba40-9951d8e9365d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c424f089-8614-4c33-8da3-537925f25d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1167823c-857d-4376-91db-04b77f9b45d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "47120ff2-a8da-44fa-99e0-3a0119fb1d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08fd7bd-aad3-4a2c-bd93-664f90311ef7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a4ad6b-1321-4011-95a4-12791e256160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb21a57-1412-4b99-a77f-4e79ce3e827e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cde548d-27ab-480d-b819-7df6bfd9c863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a09433f-3d1e-4aff-9ab3-5dab56796bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6faa7029-2f76-4ceb-98b9-f85356394bbf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511a6969-f223-49c6-b9d6-d03a9ef50e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901c2072-7914-44bc-8b4e-a704f683b212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda99895-5a7f-404a-8713-0bd9e796f7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d18da701-8e91-4942-831d-ba859c235959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67706cbc-74ca-44d3-aa63-5b0bcadd3337",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77f1fc2-0f31-4161-8c2b-ab0303d44a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fcde141-250b-4717-86d8-b6f584fdbfd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c20503-70e3-444e-a114-a284bf055507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e29a2e23-4a94-4795-8513-42062e845029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252cad28-5d86-4a30-b1a3-c0c251cc71b8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bafc2f-76dc-42b8-a9a4-4ffd71bf37c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63eef0b-b8c5-44a8-a560-25b724fcdc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f42357-8e5a-4c3e-b728-37a8c077b707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "666dfe22-b108-49c1-969e-a89ec1dd46c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2b42af-3168-48ae-bd90-2b31e698880c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171a5f47-bd92-4862-b2f2-fddbc3842d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9672d89-8f32-4fbb-b79d-b165eac4063a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60d5761-1e0e-4b89-a9eb-f0a9efd796ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c82f6b05-553a-468e-a2e1-a9a78a9e2536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9166b33a-1a19-4b67-b43f-c48fa38e83af",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c293f9-c4f3-4be3-963a-8c811cb29cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2484d829-3b66-4c36-86cf-825f134d7fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81718525-3340-44c3-9c3e-2f5983f1b5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "de8a748a-3483-45a5-84a7-ddee3dd80698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e325669e-eb59-45c8-b8d8-a0142ed7a67b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfe4caf-27d6-4e5f-a1ce-8afa977f27e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2f3099-3172-4f39-98f1-71311225531b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b539066b-6c02-4598-b160-d327e7bdce78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aae5c98-7a4d-4c27-aea6-98c280c86b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0964f05d-548f-4935-9677-b17cb3d44ff5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92868ade-3a10-4ddd-b610-b40eb3e268c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e6d760-c875-4d15-a2c9-d62e667b50c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de554c2a-cba6-4503-ba1e-0fd75b75cc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "724ef63f-e2c5-406c-a1ab-32c84615de1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5e9c17-91a0-408e-a405-4c5d45d72b23",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3fca73-e8b1-4b5e-9dd4-16ba17d277d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fae4968-cf2a-47ab-83e8-3b6b88d50ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4818b5-218b-49ac-92c9-a894d00665a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "812b87cf-4471-412c-8f96-32151efc28af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873953e5-e73b-4160-8374-1ca319b9e7e1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11673a1-c4fd-4170-85dc-9d0c076c7814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e040c2de-7211-4a0d-9a7e-fb4ef206a330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31da6a51-6f99-45ff-a185-c19b8901f7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4acae31-3996-4b3d-88f6-8c1444c63120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7240c267-a4f7-4057-ba52-0a2502fd3b8e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2ebc31-64e1-48c5-98f5-341661f67996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff038a1-96e3-4e5f-a0f7-fde51c53a949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1618fc3f-1d9b-4ed0-90af-882d070bf112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a292484-e359-415e-b96c-75ea87b370b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee77518-df40-47d0-8631-6e6fdb1901e9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098b04db-db93-48fc-a175-f0db28fa41c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c79824-819a-4e57-b05b-edbaf3529979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2036f4-96c1-44a1-8a3b-93feb0dfd647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "752c32b9-3d86-4997-b149-8ad3f64ecef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cc893c-c873-4814-9245-c956faff2226",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3a77d0-32c6-4e78-a211-bc20f6161518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f26501b-0547-4b65-b2c7-ed7f808150eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b536e0-7230-4b21-a069-e0500b71067e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6793521-7b2f-4696-8294-c0ccd3efa852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9965a7a-4541-4c6b-ad59-e395f9ce1029",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fced344-9689-4f86-9dd6-13e8390188b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4e7d92-ec2c-49dd-bf33-c988a2c17439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b0b601-a6e0-4fcf-870b-fa66ef2634fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d286d759-ae98-4fdf-a702-5ee639b325c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd67a6fb-0f9d-4fef-b2d3-9910e421274b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f0af5d-8e75-456e-9780-db0305a87b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d8df08-6b64-4e5e-b92b-f51f0108fbf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5133a9-02e6-4fb3-a38e-7659bbcda2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47a5db9-3035-47eb-b2d5-639002b1d102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108cc12f-0331-4bd9-bdda-467a1243000c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bb9b2d-161c-4015-9d43-8e046e659f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c870c5f-be44-47e4-af8f-6591ee2d1d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e00aea-a68f-49a4-a3ed-1ecc1ace309e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c27b304-0b0f-41b7-b37c-66870dd5ed65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b3a61f-da06-4d35-b5ee-593724547cb2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb351e7-5aa7-4837-a833-676acca37954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4498b479-8eb1-47cf-a094-a91c5176e2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23163e1f-b852-4419-b4f6-a8d21b673cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03144531-9dbe-4459-a855-16443a82b3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa193586-fb0f-462a-bf81-94a9790c1578",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb295c0-746c-42f9-aa2f-3ab6bf892948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8c01b3-58d4-4ed0-a5eb-adffae79b0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55430ab4-16a6-4e83-8b61-23c4578100ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ebc7a3-085d-4f3f-a63b-c5d5a952f9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e826d5-09dd-43c7-ba0e-ef60ae64ce22",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcad836-f5ac-4279-bdbd-9d701592eaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09786e4-90c6-424c-bc32-4546804fdcd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f72bb40-33ae-4286-bcb1-135b976a7142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb49c859-290b-4e76-ac90-a33cb7f481f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192b3963-7ccf-4b8d-9887-407602ea35d6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42446d57-c4a1-460c-8bc2-9c4aafb77e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a639cb-c1b4-41f2-bf62-9168aa465df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431f6f67-a49f-4065-b639-06fe863ea9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6fb431-d064-43ef-b25c-6f59fc984093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3f45a2-eac9-4523-a122-e060def74d6f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d17d15-b1f7-4225-8cdb-2122da65273f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801a8fe7-1e28-4987-adbe-80c001927226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6994d03b-c7ac-4f43-bf7f-968e1ffffc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e817732b-ba93-40bb-99ff-e878b85bcc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51699746-87dc-4b4c-b9a2-9630942cc656",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29721060-60b0-4be8-9dd2-00604e45e418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88ce153-05a9-4603-a724-c6e3e29075cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05f0e7d-095f-4c6e-851a-0c564d224845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87245623-f42c-41ba-bffc-6b82f1e9a150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc7dbff-eecc-4942-9019-ec72c725eee7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06a3089-f0e1-4349-a2ca-83a28492ab04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bc92e7-e39a-442c-a4a3-476f47c26d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdaefc4-973f-4fa3-b713-cb1cae60c30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "53f95ec6-aa67-4b37-acd7-e3e7616c853c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6770cb-72ad-4383-8901-e14c51e4e8c1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0dee875-4383-4774-991e-3d769be1f7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76fea2c4-9412-4b4a-93db-6b6b8d3d83bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ebd9ae-d1fc-4e29-b6d3-5b4c202baab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "608318e8-f35a-4b7b-98ea-6491f8242be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837f8e68-e3d5-4ee2-b7e8-68a8e997728e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668ea3a3-82bc-465d-bdfb-5ce0a57fe5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952ad9a3-b5d6-480e-b58b-9bc665c4b27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25715245-12a5-4f7f-a72f-cb4b3a38de69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fd0448-f0b2-4ec2-ad03-29f6e416561c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076a0b08-ff75-4a02-b7c4-b342b5e641f7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08c2605-9dcf-460d-90f9-3b2e32b6e735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b050e517-42d6-4cc3-b381-06f63ca11787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3237d1-9cae-423e-be91-6e9eedfe355d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca70ad4a-ebd9-4fbf-bb70-e6b0bdf21321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8252caa-5753-4a4a-8e47-fbca983765af",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ca8f15-018c-4e77-954d-60169e7d1523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6445e187-6b7d-44cd-8974-1dec8f466101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff129f5-fc5a-4b24-add7-9b8a5ec55fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f92c82e-d12b-4d34-8f70-462035ca57b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc1a4a6-d092-4a95-aec1-456229c4a8f0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592acb24-d7c6-4edc-8bda-7e69639b68b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9a2587-56af-4ab6-ae58-9d1dd7373d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e9e354-62ab-4158-a884-5d80a53958cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e623305e-c790-42b2-9a86-fa9765190f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e378ddd5-e709-46fa-b1fd-4b6b865865ba",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad8ede5-685e-4a18-8bf8-0e38954a6583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50cf6bc4-b9cb-4022-9d22-e42dc2df792f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99c5835-2efc-46ee-8ef7-3fe0f6f2208e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "432635e9-3646-498b-b668-a08a63078600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e686f9d-5606-48db-82a1-21e35d857ea3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05afa4ca-e373-4f9f-ae62-4a36b7f7f93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "590bf41a-4a70-48dd-8f58-fb556e9654d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdd0054-cdd2-4868-a709-146197d293ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "deb2b5ca-88de-42dd-a2a0-999265d05889"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "accd91a3-374b-4220-b29a-5fea04b028ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3da6169-68d9-45e5-9019-0485ed0ba8ca",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba01378-d4e6-4a7a-92e0-e29a4a8592a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1283919e-b429-4dad-9fc9-fc0785465eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add0016a-d0a7-4184-bd35-0169e88a410e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9419376-1318-4c8c-a1c1-f6d368397fda"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "273bddb0-7f4a-48fb-8b26-569b356a8d80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c07e1c17-0210-417f-ae4c-88aa220ff6b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acb9df56-ef94-43c9-a61d-1be4a6959500",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "060ed7ba-44d4-4207-acca-92606bd22755"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "68defb40-223b-458a-8af4-025006f5a671",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b19bdca2-a418-4ce2-8432-cce4cf5efca7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a20610ce-c683-47f4-9dcc-7bc37fb09d59",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43bd43a9-bb99-43d4-b328-f688f0fa9c92"
                }
              }
            ]
          },
          {
            "id": "feed62ff-71d2-4a38-a3c4-4d968e9c6f92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "818970f5-bf67-465e-b5d5-75e77b10183d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b5e78b2-0a40-47f0-a087-d7f8731f5d1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3c7391e-6fa9-424a-b41e-0688d5bb8a2d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19ab1775-776c-4ac8-9dde-588890faca06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2621d928-67eb-4651-8a59-c371a2239f86"
                    }
                  }
                ]
              },
              {
                "id": "1de41ba6-e358-4bc1-b99e-b2a4cbdf13ee",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16488d8a-9604-4f56-80fc-2c7f8cad60e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e1410c5-7bac-4be4-b375-3efc0ca83d64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "720e3bdb-7c52-4c87-822e-f7e7ccc306bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5030de6f-919e-4d08-b42a-045aba88b18d"
                    }
                  }
                ]
              },
              {
                "id": "c453fe35-aaba-4304-9349-928338cb8700",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5ef1d2b-5d46-4c1e-9bdb-0689a6db6539",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a297d033-33ee-4023-81c7-787f865d4ab6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82a2e8d0-ef11-4c4a-b65b-f58aae306146",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e8d11d6-983a-4374-99e5-23cff391c1cb"
                    }
                  }
                ]
              },
              {
                "id": "b28828d3-5c8e-43e4-95b4-e59bb470f0ac",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "970b9ee4-18ff-48c0-a0c8-f8f29b039238",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a61c1e2a-794a-4b57-bdc2-0c845a6836f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aceeecce-8f30-4a06-a53b-af2f091d5c6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b5a07449-75ac-4713-be53-d2545c45196f"
                    }
                  }
                ]
              },
              {
                "id": "bc6c4f21-7155-49e9-afca-ecc83033720e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c70903d9-1273-4a56-821b-7146fda0f005",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71108f21-f829-4924-b4c3-12c6d09fdb73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90d3620b-f6b5-45f1-8ede-38c787b31b83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "acf65f9c-dd61-4a00-9774-44775a11e526"
                    }
                  }
                ]
              },
              {
                "id": "489c1e9f-686a-4e44-92d8-06439108382d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7acdc10-7412-45f3-806d-562fe33be912",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a7a364b-3f2a-4423-abdf-d24f97ee93a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14f848e1-89f6-4d23-b505-39d9f9178cca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6cbb514-2e76-4043-a9e5-32e8e84ddec7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4ee9c50-031f-4cfe-9c88-c1c479c46ed5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "96e92e5c-f409-4294-98d7-f2b5aba48346"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "25907e3e-1fa1-4c38-8779-040d64fc0906",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb2d43ce-812e-443b-bbfa-86231612bf40"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44ed60a8-994d-4426-8e86-a4e83e8d8be8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c002fb66-b6d3-4c47-bd84-54a58b26f1b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1049b9b-eb16-4ee9-9db2-d4c6e5f8badd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e38aab3f-4965-4e8f-8b01-35dfb2b13076"
            }
          }
        ]
      },
      {
        "id": "6def7f59-3b8c-490e-8488-d893cac38405",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d2f20fc7-137f-439f-95ab-3c2e48131d75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36f5cb2b-df29-468e-9372-3233423d4d88",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e4a2d793-e628-4e54-acc1-03e7d33810e3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ba0bab-90a6-40a2-82c8-10cfdfd69dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c664907b-fb29-49dc-a193-2899c9706d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a25931-3291-4174-9c17-bc297a2ab4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c755c24b-0218-49d2-aa08-55087b305f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a9fb29-5d62-4f62-a1bd-509d72a3812d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114619e7-ac13-428d-a10e-5839abf485b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfbba66-3e42-4028-9b76-be48ad999e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f9ad22-3209-4104-9b91-7644447ad072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "597802e7-ec26-4b21-a2ab-424969d9fa1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7a0474-c5d6-4b95-b171-d45217178224",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ecfa93-3e72-4c81-90c5-3d7f64ab5f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6fb5c1-28b1-48f9-a26f-dfc80b728b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3772fa00-0c3f-4028-b0c3-d68da36440e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfabcd7a-4213-477a-9b9b-0cec8f2763cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b0eab1-0722-4c23-a7da-68584154ddc4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2546550d-e3ed-424b-8f3c-7f1f584305a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecdd79b-b663-4e5c-a17f-a1ec9459268e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d70dba-be43-41c7-97cc-b86362196906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "126b5d6d-6840-4db6-b4b4-eb78a13079ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e15de15-2c48-4fc6-a6bd-f783b78ae316",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe83f212-25f4-4b0e-a8ea-424729defc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027923d1-7039-4c3e-acd0-39ba21e9bd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01bf9bf-1bbc-49b9-a91b-d22cce1196ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0eae3dd-b076-4056-9722-6007bd396bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1643f4b7-e1ff-4a11-af7f-b5b9935d07c8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47622fa-ca14-4afe-8e18-e014688ec0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596a644e-3a6b-4978-a7bc-edb1706c8c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23842f08-b9ef-4a44-88fd-6f4793a97780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18c2f194-d64f-421d-ad46-5095328ee98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bbb4ff-31ed-4a83-adc4-65c37596d918",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81de45f1-b73e-4ac8-8081-6732149c7c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171e0763-9e53-4d62-9124-9b01af6c91b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e59f620-df14-4938-a996-dedf719ab470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa64f700-be00-4271-9562-1040e528ea2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9387981-0365-44e4-9bce-2f8256b61a54",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3deafb17-b892-417e-8e78-a622bd52ff70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444dbe75-a69b-4040-89c7-ec38fd9b6659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07d269a-af98-4eb4-a2ce-4b550761f54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "857e8c6a-def7-48ea-ae75-fef3b8f54fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f899496-8cce-4f18-b18f-4d7e9924f3e0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5d1395-5043-41d0-8b0c-4e34e35f81f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04053d70-7779-4b58-9a72-2eaf603b70dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90ceab1-5622-4e87-8c75-eb2fa3f0e836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18b1f303-165b-430f-9401-3bf7afea538b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2446026f-6331-4bae-ae76-1ff54242cb92",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39190c86-5f7b-47de-97f2-25454ca44799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2599d19d-020a-442d-b552-3695cdce4b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3379d589-cdf2-44a5-9ec4-eeee99c341e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7357f293-161a-437e-8e22-f4597226085f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34adae2-8faa-4521-93e6-a2c7b29a9f96",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09254824-8000-4cf6-86c8-a5be3c6c1d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab58f921-585e-456d-8ce4-5b31f07af674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fff1e32-e471-47c7-af6d-b609394b7631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa58f02-99fc-48f5-bb70-65b3b6d5c9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93ef471-04f3-4b79-9dd3-6806cadbd0c3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a491afd-2f32-493a-a7fa-cdc0b1a1eeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865b5326-1022-4a58-95f1-062ff9d28741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7013b797-76d4-4bae-b31e-a11e1d7ef92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fefcd8d8-0205-4014-9d56-ab314f4d19ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1256897b-1be8-48cc-aace-6461b542d7f1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c27e5a3-bed1-4437-98c4-d749720ac32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4683ab2-91a0-4e87-9ef5-f06e497225bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2567f04a-6151-44ce-b731-4e2222dd47e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbdb707-7217-4220-a530-b17b0dfa3c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd911227-be26-4700-a8a1-e0ac3a2c3c25",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294f444f-7deb-488d-8ef4-a817b313c116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909caea6-598b-4e78-9cca-61e3c1b452f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c665658-ae53-4e30-9c81-9d9e212c9f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "371c1eaf-4302-4865-88e7-08010c69a6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5afbd21-d585-484e-8ae7-ee161b7bbe1f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72785317-4bc0-4f0c-a977-c5b5a11dc884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713d6c19-bc52-462b-8b2d-5fa6f4ee4feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185a8163-5fb2-40fb-84d4-57ec83bc70b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "875da1a6-5995-4291-88bd-a66b6276fe7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13f5f6a-677e-4872-a69b-99f252e663dd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23073b1b-05ef-4ba0-8528-be8d41806561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a9d79c-88cf-4072-b1f3-66263552c676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a50bf3-28f8-4035-9004-5c4c5099e5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9805c330-27d4-40af-97fa-bd9edba578a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1daa713-081e-4859-84ec-04d4e52e1c20",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb85ae2-1beb-4a61-913b-00d1100b0b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a199ae7-50bd-41da-81a3-138962a5eb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29de8c55-df1b-4315-a8bd-b8dbb0af2a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0d270a-6ab4-44e4-b2fe-36fd536a213a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfde456b-97f2-45b8-bded-72b4654c31ec",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b288dbfe-3c6a-4146-a482-6191dcc5d678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c3bea6-317d-4136-a68b-63c62444082b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00bda9a-4bbd-428d-bf5b-bcfa33d4816a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "93961001-51bc-43f6-aaa1-639df96d26c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270c4b9e-d8d1-41fe-bf70-d21d566a19ad",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154e7578-35f1-4689-90c4-1a918de77900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f3542f-86ac-4985-b445-3e050c9e2795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27aa3c69-54b5-4d46-9e81-0e8cf27f8137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0065f4c-e562-42b1-a7af-1c93b86eed54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195608a9-fb6e-4ba2-8c44-b0d20e5bdafd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a795600-654b-45a3-9d2e-35ae1731c724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f906d5-ed5f-4be5-a542-f2a99d9dd6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b99055a-553d-4d37-b50a-ca583ff99d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c82bfe0d-7fb2-4c45-af79-d7e2e941524f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3c8283-596b-45c4-b7b5-a90e7e0416b6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e34d145-5fa9-4c22-9d5b-80e0323e6f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853dbd8b-d08f-45ec-96f2-400e36e5d3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2b4c46-b3e7-46aa-9721-7e49310c419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb4b1f6-d868-4c57-8edf-fd514d4c626f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490f6788-65ea-414e-971b-81c77264f5c1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac9cee4-98de-4ee3-bff7-2c85f077243b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a6a8c6-28ad-4bb6-b798-f29e6d8bc68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1713be2-7165-4db8-9238-6567476c7c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d91b22-ce5a-4bf3-8568-60a7400e5863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f57119-dbab-4acb-a590-14cffae2cce9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcc3851-1cbc-4f3c-a9a4-b299047c0815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318ee86c-e2c1-4c86-825e-0c08ea47d99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fbf522-86a7-4807-a5da-bc64b6b4db0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41fdf631-83e5-4e2e-bd1c-cda674b0b887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3be81cc-63b3-4f4c-856a-18864d3b25db",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5fcea4-d373-47dd-9e81-7f2c7befb3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d044b172-78ff-4c47-99fd-8be68c5ef11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a328873-36ba-4d84-8825-a42723c2bdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e09b6d2-d02a-49f0-a1f5-bf6da450fdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79a996e-c2cc-4f4b-9638-edfaee5ca21d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e9e1e9-ae61-4ba8-a1d9-c16f10202995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55df0a24-6152-4ae6-92a9-e868a64cd4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8278c42-8427-4f3c-a354-b1c27b5065b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57abeca5-6f73-4a94-bad7-2a1156ddf98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a1407c-dd07-42b9-b8c3-8d6cd7803b1f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9885a494-e02f-48a6-a3e9-b8712e220828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3279b9-ac88-458c-a9fb-2ceedc62aa2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f343507d-4d56-4e5f-9d15-c851883e5791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2aa2c57-d10a-4fe4-a4f4-61a1972e7677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1e0c11-1edb-4ca1-8dc9-44fb270c6283",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd6e6c8-136c-487d-804d-7dd4c8964f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9813911a-c8bb-4c7c-8c23-bec8f82dd817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c51e4dc-75a9-47d6-9ae3-1021b59230f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad0d0acc-de4c-4890-b8ab-64e03e86c10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d2954b-8a34-49df-9d13-0556e4b24129",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a81808d-00eb-41ef-acf7-7267fb61f210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a501d6-5903-40ac-9033-76ad735d87c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dac3f9-add7-427b-ba37-de5c0e466662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65ee2c68-8ae6-4ce0-b121-8dc6ea144ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7d0cb0-bf5c-4fa6-b20f-ceff220a8587",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9004151d-2f4b-4fe5-bb6e-12c81dd71534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d122dbcd-5eb4-4100-8345-12b874d00fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9827d241-b846-4e0b-a7e1-db56bca80dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec731a63-7195-46b6-8458-5f7eeabb4232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18128cae-3901-43bc-8cc4-baa4ef2166b1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f961750c-f23d-4909-a4b8-0a719662c745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "354e2a36-0482-491b-8467-22288fba90b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd0e8c3-33a8-4bcb-b49c-2a3c770995a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5a3fa7-b861-461c-bd3a-073694c0b15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e387f5ae-a5d1-40bc-877d-44b59c6f7c3f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996f2b56-70bb-41a5-9ec7-cc4f9014b686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334a7449-86b5-45b8-a246-1c89ad3b2fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f2d309-7d47-45d1-99be-284296f17ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0cfcaf8-ac5a-4401-b5b7-4bc90d93e7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3402c4-529f-4847-9237-0e1268a7e7a6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18716ca7-ba3a-47cb-a8b3-6484f8d3232e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909f92ee-d916-4d63-9baa-e413cf7a680f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa61e98-df43-488c-b8d8-bf663b904da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c80a065-918b-47e4-80a9-85d59913dae2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "04ecce93-4ebf-4873-b314-7a86d405b785",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce1f7d8c-9c23-41b4-9ee4-6c800214c768",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5251fe98-2537-46da-b8fe-7c4ba6804497",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "80bb57db-81c3-4271-be53-0ddd670cf0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736414e8-7530-4b31-b4c4-45ff9e0729ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e76ef41-67f4-4a16-92f9-49783affe4a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59c84382-0ffa-460d-abdd-6f732247ced7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54259070-3323-4741-b8c9-1fa25baef5b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79b53157-0e4e-42bf-9828-a4bd51af7b7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d91f75ef-4bd7-4fb1-a92d-23448daead03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78239cce-f4a4-4203-bd59-7e3882e7810f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ce68248a-df9d-4a14-a626-b42c7ae3a9f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8473af9-24d1-404e-8bd6-ac46e947bc50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac1a99cf-0be0-4f4e-8f2a-6adc994a508c"
            }
          }
        ]
      },
      {
        "id": "6099c87b-09c2-4d42-a46f-a05d7054a9f7",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "b755de89-68c9-41e5-8a8a-1134b72aa10c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94f5f949-a2fa-4985-afea-0cd29b6c7ec5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c4ecfe3-e1d3-416d-a173-d26e5e3b1313",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76635173-0c62-43e7-91cf-61cbe2981364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38159406-543d-47c2-8261-11789b5546ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f734a5-77a9-4e6e-9ed2-72afd655334e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc89601a-811e-4601-a615-bf040411adf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e77342c-bfdd-4da6-bf13-f362c0587340",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf3a409-f1e4-44a4-9537-5e31bd9e9154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5264408b-5b69-4abe-8919-88f21a7887e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcb854f-4c42-402a-b272-d0de8f884110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c772cc8-a3b6-4984-bd07-6719b674ff28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d58151f-c774-440a-9e4d-42910d21be7e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9433b4c-405d-4b6c-9d37-75f8bb953887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50d5e20-0185-44d8-bfa7-9e9566ad2e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a400d0-6a79-4e3a-9513-1d23f91b65be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63536d00-0b09-4648-96f6-2eacfec6f927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fa08a5-8193-412b-9c48-3a570e687059",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0db33b-bf01-40e0-836c-ad7a77a49119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac90b48-aa0a-46ed-a864-528d1e7210a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c373ad3d-7dca-4286-8012-f2b2f22e4587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7be7cd9c-6bb8-464a-8e53-706bed1f0529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0642e287-ca4b-4285-b323-9eb36feb8180",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553d7551-08f4-4a0d-97eb-c1ba909d8ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de370d8-0d4f-4292-96ca-1f14c9091903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a845fda-8328-47fb-ae46-1387afdc864c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26e5cf0c-470f-4f15-955e-ed29280b00ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83e5c17-a907-4e63-bc18-17215f13fabc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc27a4c-8dee-4314-97b6-93ae56662369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28092cf5-2318-48c1-b8d3-38122446f880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f355d419-40d7-4e7a-b2bb-a94f163b899b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd29e7b-2a01-4c1d-8ddf-35c04bc6cd5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59375ca3-d078-420b-9e76-daaf90bcbeaa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206a656c-1d42-44d6-b606-4f8d996a99b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbe29a4-97a2-4c85-af4f-746fca444546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e386d1f4-07f0-4da9-b4bb-59a3c524d931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cef4bbb-8876-440c-ad9d-670aaa352d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbf9cc1-7f89-44da-984e-efe402847fcb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ca96f3-97e0-4a2e-bedd-159773ca211f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7067397-942c-4237-9d94-31c90d406b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0bf7d7-a4c4-483a-ac0c-5f5694e019f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f87efc-74b6-465e-ad63-c102f4f4c35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fb8307-c6de-468e-90b7-b2c1333bc494",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ad8716-d6b2-42e0-983c-60860175ce39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edeb1d7-9574-4791-88e9-1f093db68661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524bd197-8e6d-4800-b239-0d02024c63e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47809c18-3833-4e1e-8255-3294cd7cb860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b9dab1-8eb9-436e-b402-fea170902232",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf787683-500e-4aa1-96d5-cf5abec05c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d710c68-6e4f-4d01-814a-9a7db29c2160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd97293-e759-4d7f-83f1-c0e654ebf716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0b82da-ea35-49ce-aedb-4c0c2b85d4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426f7580-5283-44d8-9a73-c173dc76d905",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33772539-b659-4522-89de-78f11c52c000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403810b5-0a34-45ce-a467-5e3a0da36ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816b1153-9718-47b4-855d-a79b13f07ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb38d0a-1b6b-4225-b308-0b08013fdaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baaed21-4f88-449b-8b36-5dbe421800d7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73460a61-d20e-4b0c-8867-bbbbf059d995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ef8c12-d331-4333-aa75-f6d31472ea5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bc1726-a0d2-426d-8707-f9163c02dcb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c83498-f2ba-4d09-8c1c-e972bd6bb1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbafaf8-b252-44b2-88a5-7c45f8bd53d9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23670c3c-519b-46eb-a034-7288fae40eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d811eeb-d0e5-4e87-930b-d1a01bfce842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba3861d-b99f-41df-b9d1-e38b81a724a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c309191-21cf-426d-acca-0795ffa39556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18272a38-c972-4991-a38a-f9ab93e8998d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8598167-05e9-4bf5-b8d8-5d9d71ee5084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fab7a18-2165-4b6f-ae8f-d49e05bb83ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e4b036-539f-49a0-8e9c-bce2fefcf593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8030d1de-2f59-4466-b838-43b72d29bc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9738a579-c263-4a22-babb-c575d7d82a65",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd99ad7-de49-466e-b30c-e639c15e2bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a633c3-c7d1-41c2-a7c7-88ccc159f211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215aa1ec-18f5-4dd8-9c83-509cf749f917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ace4ee0-4262-42ec-8e17-5edc84b1ae28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a043c4ed-a056-4505-8e71-eafde1062198",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26126683-253b-418a-9561-b66c62b775b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0916fa7-5a5e-4904-86ae-61dfedc8bea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a8dd27-8078-4c51-ac5e-4ad1141dc221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b890c855-0670-41bb-a226-1ea3be1811df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8baa8c00-7161-41e2-9af2-d8de6bda3c90",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31bd527-c6aa-47ae-b30f-d1ace14f8309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ac7804a-dfd0-47c9-abda-5c4e44ba8dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e73420e-46bd-4a24-8398-3957e0945add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ed1f2d-33c9-453f-94ae-5d989b0d5cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8ba20e-3709-493d-ad11-e3d68cfea5b6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad78fe89-dccd-4fb3-a2fe-19e50ad1586e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83df9364-8aba-4d7c-8b96-4eb1f0afd893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03dc10f-1d24-42c5-9b00-c18307a9174e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3bad76e-5f04-4738-91e0-a524a8b4f9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faba480e-fe0f-4680-a12d-186c5e6aa715",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab8d00e-69fb-439c-b55d-7b43c71f1155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2656b9e4-f681-439c-ac1b-cd3c2441baab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e8fc4d-fb1b-4acc-ab3b-d4905ada857b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae488a1c-7650-4d3c-8fd8-1955daf1551a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8779f53c-d559-47d3-9b36-9d722e5d461a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d526a1-7598-4a7d-960e-12f1e607442e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af447ccc-2ff2-41b1-b56b-ec9803623390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae52eec-105d-49ff-bb91-1c5643acff6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e839e5ae-018b-49ff-b0b4-4664a31ec584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45e1238-5e05-407f-a8a2-bac079ac5b0e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d0716a-e956-4019-8ab1-43084efdf2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5601b05-a224-44c8-ae8f-522262ccab27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44423f9-c102-4a92-be7f-2048f71dd9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0fa9dc-cf34-4600-8050-b92d43083f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc7e938-fecc-4011-8456-a234939d16f8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dcfe8c-c980-4d04-9061-e0d74d77e874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592c917e-7a44-4a2d-af7c-f244bb63594a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea4bc1d-3cc7-440f-b304-e018f33df0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92627b99-fb02-4bef-abce-64a9a54347e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d2ec34-0dea-4721-9841-976aceb19d9b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaedaa0-49da-472c-8fe6-5ed7f7f8d8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c57130c-c95e-49e6-8a93-aef509d588cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b22ae28-c237-43d0-b9a4-94e5adeb1f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35844038-44e8-4d16-af89-6d17b3b91e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33bffbe5-bf15-4922-801f-4d85dbd5a6bc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fa624c-ed79-4df7-9aec-f05c481c4fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa738fb-1f45-4709-b14a-1b3ed0addb48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f533556c-82a9-42a2-8cc6-6c72fc4b513a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69dcb617-0108-45b4-a757-8f7a98387ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18bc9c9-0849-48e8-a5b9-ff4ec340b9c8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f657d8ed-0c3b-4c2b-ba58-552e21a8d494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511c1ee6-8f58-4617-939d-1b5cd716dd95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f15841-f3e3-4bd2-9027-51faae703a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "599d8c38-2142-45fd-b135-5b6f13615350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05a9db7-0eec-4371-adbb-6070ec0ef373",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c6590b-98f3-4d79-a6e7-cf2de55db177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f753121d-908b-4f56-91b4-ed8b9f0da6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fa6718-efa1-4921-b0b0-2b8a43ce18cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61376b4d-d7e3-467c-a37d-6566e6ed1d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd97c31-ca26-487d-843a-cae59ae556c8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44735367-ba14-4ebd-abe9-8f060b7dce55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b086b66d-375b-4a97-a4ea-16630a492b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8bba64-fbb3-4297-a062-d0f65c3f6774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1632672-1e69-4c22-8faf-8a0ce2d2b723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b73044-a67e-4bee-bddc-85dba1f66716",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89370a4-8c50-481a-a850-faa17b1ca426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1598a5-ba2c-4cc1-92c2-899867610dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc79e4a-cf62-4c79-aa2a-de6b7abcf12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0889c283-e5d2-4acd-ae79-a0200dcfe28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4225510-4dda-4012-b288-f4a8f01d4196",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186ebd9a-76ed-4384-90a8-6f4e7948de70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a52552-33e7-492c-9056-60675b88eb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70642077-6458-4f6f-8320-7e7d809d3241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85d7c051-79a9-4302-8a70-ec94ecc0d6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d3e6bd-37cb-4d56-8ccf-85f1f763744b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b0143a-2a9e-4dce-bb65-867a5992d76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762e8ba8-c1f2-4362-bb52-43cabe5cb6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7302ab-bc8c-4d69-9992-e11c92da7ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57af4ac2-8380-4c94-a9ca-e7e0fc259680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de46ace1-fd6d-400c-ac57-87949b6082de",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7000be08-3e68-4b4f-a1ee-a411ee6385cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35ccf38-23f3-4eb2-9d1d-bcb5001ffe82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5990ce2c-b91f-4e76-90bb-9331435c840d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e00d728-f2ed-47fb-9add-65ed2f13aceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7167075-dffa-43a3-bbaa-202ba5877f31",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0ecc43-9482-4252-8c01-8504af404ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706079e8-c42d-424c-a516-c97769bbc792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ca4175-f592-43ca-8d9d-2e79df819dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f20e9d7-7c30-4a48-9d8f-d7c92a7cae12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aaf1f85-85fa-48cf-81aa-9ce2097518fe",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5652ab-e472-49e3-a04a-ba9e2f89defc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21cc6672-9a0b-416d-8886-9b7cc7d75905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115e7fcb-c88a-42f0-8395-01edf321bb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abb33c55-f583-4cfb-9b54-89ef5e671b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f3c4cb-91e2-485d-977b-48f7ba12916d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f961af-e57b-4ddf-b8c8-db3d51b078c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9267fbb-e76d-4fa5-9103-d79bc982c55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35180cd8-c2f2-4647-8ca9-d0a48fcb4a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd0742d-a559-49be-8a10-4550a1c48a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c31297-193a-43f2-a7d0-f6e92b9653d4",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a02e8c3-9eb5-4b17-8b71-fce5cab4ab7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc87918-4d71-4b04-969f-26644196143d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57e2156-79e5-40b3-88d8-92dc825d6e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c482bc2-1095-4bc2-9b9b-2992e897b092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d44cce8-8bc9-4a50-acce-8bb4ddd781fc",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d4eb13-7e85-4083-92f3-c6509c27f9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f36263-a853-48cf-89ac-51065e292763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a427368-f3eb-4838-8c39-1aafad85c55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b406151-bad5-492b-a2e5-926b2c279fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbb2da2-103d-446c-b054-2cd9f16203d6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f913817-cffe-41d7-8106-0fe9de894806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b329df1a-9175-4f5f-80c4-9077e55aa7b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cd9110-7af7-457e-92d6-9b9bd6d5e500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a84c3bb-816d-447a-ade0-99029030ad71"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6da67430-5136-4fc3-a796-ede39f9301f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f41dad93-acb8-46d8-a005-401f25de00a0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8629d63-81e3-459c-bde1-ff2bf00df415",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cb01f3e1-f666-448f-bfa0-464d8267e5af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc29c75-51e9-43c9-b79e-15c434a44767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d5a32be-430a-47db-885b-82cfa66967ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75a1c00d-25b1-4e24-8ab2-036fc9532ac8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11389351-1e71-4c04-a176-3714a0126483"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a5a1ff5-0f2b-414d-b49d-8785cfc92290",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fec555ee-a080-4de7-8a11-58f98678b1d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fc56160-db28-4085-877d-7daa3201dd37",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1437293d-28e4-4019-990c-8ecc71261d78"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ecaa9770-d158-4855-bb87-7ddcc55f36db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eabe64b6-d0ba-4971-9fd6-1809972726c2"
            }
          }
        ]
      },
      {
        "id": "38b367ed-f143-4181-89c6-b9367f64abe7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d199b218-296d-40ab-bddd-939102d0b281",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e571c6b5-d299-4d4a-bc61-ee885f7e2885",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f3dffae3-daa5-47e4-b02a-90323e66c999",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609cd514-ad76-4dcc-ba74-aaa52b416876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "199e5952-1037-4113-b468-9165cedf7f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf55786-7733-4b9f-9cd1-dcf871411148",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d063b93b-c0f7-4528-926e-c5ebe30287f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f7a296-026f-4bce-850c-e9ebac0a25d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f9c1e6-b1e5-4218-8c03-fcc6f68111e9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7908987-317f-48b5-99a9-4d89c039f204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f210b8-8330-4b08-9b08-2c04ebd3db2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d8ba52-089f-4620-9c36-e6144b7877a3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf9ece7-2bc9-46e5-ac23-5d8170aa0b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca40781-a389-4224-8f51-940189df9b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecc1f40-8ff6-405e-b27e-3f9d7dac1a41",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0be83a-a9c5-4a38-9a2f-148c55b8c1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc9b0fd-fb8f-4b70-9cc7-c323cce3e3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858078a6-2a60-4591-a26e-f07e88ddc65a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4c2c99-997e-4202-ae74-df7776997e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81a5cfc-823b-4bd1-872c-8cc83bc0758a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d512729a-a570-4794-948f-dec4552d2212",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7787fa4b-35dc-45fb-93c3-162c24a449ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa1eb2c-02fc-43cf-9ca1-c763630df22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8861c127-797c-496f-b9b0-05974d7c8ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76556a60-1973-4612-9af4-59971fdce578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f1df9f-3101-4a6b-b384-d952ca9d3558",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6538aeec-d222-4f57-8838-77c3feb1a17b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f58cf2d2-1661-40f8-8640-268c698594b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0da55a-85a2-48e6-993d-c28036045a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb01004-5b85-4495-859e-cfe434243574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a50c7d7-680d-4444-bab1-4e413409bc21",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea11643-b28f-42fd-86c6-f0db4597bcf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dc95e7d-48ae-40cf-91ea-f6a4d75a83e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda72a9a-3158-4883-897e-fe12491661c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f8778e-b55c-4b61-9e2e-865cc9340067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4245439d-b777-48ca-aace-6070b0437568",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bd79f3-1f89-4f2f-82fc-a737fa69dc0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77fb7de9-eae3-4d39-a999-e70c2094d80b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658074ce-9ec9-488e-a141-beab65a65be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a01f1a-81c3-4687-944a-2172fb5f3a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97eb479f-9b2d-4d4f-b7b9-7ae5678ce88b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09448f5a-d811-4148-bee9-bd71d5fca2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d5172b-fbd1-49ac-95eb-46e000fa93a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbaff9d-459e-4ec8-8ff6-4bccfd5bbc8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3c7012-9d09-4bfc-935c-4f177a2b9750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1853bd2-fccb-4c9f-9cd3-914d2846f593",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb42ab4-a99b-4678-8d04-df640c12db55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949b547c-522d-4485-933c-72a0ec78ba27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a128d7cb-6fd2-4d9d-9803-14c2294d8c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8d6b0a-52eb-473a-9e36-4dbb48069f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1e873c-ca20-4fbe-aa3d-242905c09546",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662480de-4b41-45f8-92cd-56f95dd7283a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8926090-a9fd-4c76-b0ad-457dcffd9c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81971239-8191-4d8d-bf6a-42cfe3894c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c47d6b8-67b7-4df5-b450-66b976d9d75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2890fbab-6b5b-49ac-a334-c2b9a20062f8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6299a37e-9e96-4978-a942-7b53d196d9b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1048ebac-27aa-42c4-a668-496ff28cd6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383de0a2-56d7-44ea-9c85-3db402ae8960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7023d1d-6f3f-494c-b214-70a653016d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2f00cb-0c9f-41e0-b284-9101efd89049",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ae7d87-3b62-4855-b10f-c602be11a235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a421c0-0f71-4897-b1a7-3a5a5aaf3ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac7e89c-7810-4ddc-b66b-33b9efb00448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b6acd1-4d41-4c8e-b203-f55a55835f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210d6936-1075-45af-944b-025ab1911dc4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcf8cde-b85a-4552-8c3f-76a15a5c80cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae28fcf-af6c-4b02-9d79-d2a7ced0300d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e2bdf0-0906-4b94-9ea4-8053b17fcf39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0e76ef-acf8-4e2c-b24f-e929be1a299e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b88d89-dc93-47d8-8126-960795fcbab3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd2c688-ef6c-4480-9b66-5e97ff20192d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63ae990-73d6-4a8c-ba54-690f4c8eda24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168aab52-e3e5-4155-9778-3c395ab26125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c160f5d-d1ba-44b5-a187-0a062c503ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba38020-3e7f-4fea-b13a-51ca6ff51c31",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8add8b8-5906-4cab-9638-a1bd6789c1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c0c72d-ce96-466c-96cb-e486b681edcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29521b1-828e-432c-8845-756d24be35c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccaadf5-0dcd-4c8c-af6e-4a7786f3f128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad8cfdc-7f38-43bc-9692-ce46599be913",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0ce4f8-0025-40d4-8379-d2507a78ead6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d62bf5d-7cf2-475d-9530-9415cb81dc32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716271cd-8fb2-4414-89b9-307304b795ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277244c4-5a79-4234-8e7f-5eecb813ad13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d3f740-2a54-4bc2-af09-68f5f942e740",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37345a1-3662-4611-b2a4-3519ae9d96e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d9cdc1-143e-4e64-8116-7d9b6d73fe14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b704a8a0-cf5a-4968-a8f3-d2a2e3f882d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4247c64-93ee-42c0-a9be-b842d004e6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17010077-80e7-40c7-9bb6-e533fd5f2650",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea881cd-f4c1-47ab-b78f-92b4153fb620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db932dc-f92e-45e7-b5c2-f451f3cd2a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713ce7cb-c185-4eab-a429-dc1c0c173ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bd94c2f-43b5-45f2-a80e-5df7396affdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85286cf-53d6-4ea2-8edc-4e172e0b9a6c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd676461-2359-4050-be3d-e0bc50fbf8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e17025-9975-4ef8-adbe-06099fe90192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24008a67-ecd5-4765-b7f0-dd815c1eaa25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b90266-7ddc-41c2-92aa-3442be9a227b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24eae070-8e01-4fb4-9315-d416e2ef77e8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c267473-c227-4d82-b149-4d6ea0775546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91a1714-5a48-4da6-9eaf-358e9db4191b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c41b583-a08d-4f6a-b139-dcd6af4a4931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b632d9-05a2-4254-b3d6-d80a953aae5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da306cd9-9193-401c-b84d-745a10bc8c3c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0384953-0381-4876-8a94-71fedf63c379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b92e2ea-c07b-4f1b-b097-2d8e77b1d740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ea1981-0573-4bfa-8191-c516a7614b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f4a619-5814-4f57-a5ac-1f33d9595ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ead731-a5bd-4167-9d45-b2512b6912f7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df217789-c147-4375-971e-32d621e1f764",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f36e781-55e0-475f-bc86-2067f2d4e429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d03388-0e4e-480f-b722-7bd090272ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e789db1-7b38-4d38-af99-6d1961403803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966cdd0d-02fd-4d4f-b409-c69cf2045452",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd2f61e-26b8-4bd7-9768-608518439150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a2f0a5-c4fe-4577-b1d3-e690ad9d321d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0f1da8-1d1e-4dce-bc97-82f654e1ef10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dae96f8-d5c4-46fe-9340-e0b5fcb87513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7d73cf-987d-41cf-a330-37d2293425f4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db291bc-e44f-42b2-9dca-18e3b807fc5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9614f928-1853-4aab-8d54-583643ec0662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b43aeb7-764d-4112-83f8-8126ceedea0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812a55e3-1cfe-40dd-9f8f-373097e753a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fdc87b-e5d4-4b3a-8d0e-dd489677853e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3db1346-0e74-43fe-853b-7ffdaf6f8747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5398c65-ce61-4429-966a-08526f96459e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e01350-1f9f-448a-a753-181679f64bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e169c4-e993-4597-83dc-8527fb4b9dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86981518-da94-473b-97e3-4e5f26ba1d7d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee077e42-f9cc-4f21-a421-89cc2d134ceb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c21a9787-1576-49f3-b99b-2c474ffef3b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ce81bd-96d5-4db2-a985-0646e4a51d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6613a93-4090-4900-8b6f-27599d938fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcf8bc8-2e5f-460b-b51d-740b61206785",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a62e5c3-7623-45a5-a3c4-259c6d8c6847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0277426-f91e-4881-bc80-e32d3ce3b538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fd2da8-a3a5-4af2-a310-cff7d186ec17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2d8bcd-704b-44a9-8122-b9bae889b599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53544783-ac44-4311-8069-63b94f82daa6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5a298d-2445-4c64-8617-a48f7bdc0018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7069a98-4600-4a9f-b686-5b4aad4d8016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbda4a59-6511-4518-bc08-5ac7c55fdf3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38dd8ff9-391b-426f-83f5-75d6895eacab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38827e01-bf84-4cac-8bf9-124eaf83e2df",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaccce7b-1c8c-4f1d-a971-bbd577c6769d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1813d95d-f80a-4e66-a39f-5411462f55d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbeb1f8a-4d23-4681-92f4-b62728035b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2284a72c-84e6-47cd-b7a0-7fa5e969ecfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc4bae3-84e8-4e59-bfbb-33271715d8a0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23fcbf6-2c60-4e30-a6e9-4beffedb0e3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d09e9caa-b1e1-4400-9339-3a2b8d9a15e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30db9566-9574-4848-9c3c-a04b6bdade22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26aefdc1-1dca-4fad-8f43-913e296ebb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd5678f-3595-4ff8-b064-a64e9fcec5ed",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afb87fd-91d5-4f39-8667-fd7e47150909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de8d3721-681f-454d-863a-dd11bdf7b7fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce46708-0d02-4bee-8181-335baec6fcfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c81958c7-9af4-4bc6-9216-6d9ea1a586e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abdf8c1a-97f1-4c0c-a4cd-87efd865e9e2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e0c3d9-05a8-4896-aaf2-c71db16b5154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4077cc70-16a8-489f-8687-7d2c920bb274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdfb4ea-8b67-4b9f-a375-939bf5049670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd775cb3-3ae1-482d-9787-a40eb8639139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33076742-a4ae-4472-aa25-8bfc7d9ef74d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f71929-e9c0-475c-8c0b-35ac05c7094c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7ff505-ce34-4f0d-b800-a86049bea5c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce2469e-e89f-4816-b5cf-60222e0ebe4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fc2423-bbd8-46ba-9583-215715fdff43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc18ecd4-f301-406f-9731-ca8e87daf91f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e3b211-7bbe-43e9-ac83-4f5e9199c336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbf4fc7-78dc-46cf-8d1c-5315bb2ec8c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bbb501-5cd0-48ee-8cb5-0023850331c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42ae54e-8939-4f9c-8e8e-5fe3b64a1cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebd827e-fb32-40cc-ae9b-f726ee033902",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30898502-9de8-472a-b344-8daaf9b58c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779ce1a7-8bcd-4e83-974a-0d5c5f980e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6773f5e-ac2e-40de-8c98-54ade9393439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27a146a-ddc1-4866-93fd-cb186921330a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc62f5f3-b688-4500-9ae8-40771481db25",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf8e617-c9ab-4a65-8152-cecbab41cefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4822c4-9f0f-46ce-b382-3663afd708ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2859f44f-453c-4e66-ac09-744bc1cc6c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3b15d8-a55d-4b83-bcab-a8e3f55b16ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0126a053-1163-4a93-ba30-02112bf1bfe0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fc703b-3995-40fe-8968-1df20d58cd37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59dc742f-211c-41aa-bc6a-f9af0957e0f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9960a8c-42cd-459e-bc02-4020ee67be1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bbfcb07-5e59-4fe9-a4e9-d54b17bdab94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c88aa4-0509-4ea0-88c9-132fea8b29b0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92c383e-e028-4f02-8c01-1814d4c646f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67f33c8-3255-4073-9042-d9f86401b24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d77731-93e8-421e-bc3c-a002eb358bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d1305b-717a-4ec7-92c6-f5446d090452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8418c343-1f23-426b-bc64-92560ec7aef6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4adde2-dcdd-4648-8cfb-276b624dcb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9928869e-4882-4151-86ee-64b4ff49af52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93b2fdb-a838-4d2a-997f-d587f33b785f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692c5ee2-b68e-488b-9214-5566f3cb1d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4414a17d-b93d-4878-8df5-bf831c0d7f48",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f07a3e5-99f0-4992-83de-662785ce2fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689c335c-346d-4899-b8d4-e1fc196fdee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df7994b-d33b-4342-808f-e5f0134ffae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce47f3c-f8a2-400a-8b2f-fc27c1108902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ab38a9-f699-450a-a21c-300b1de4e461",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6b6f12-5c92-4191-9202-376fd0edc9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de48c550-2186-4ab4-93c2-11f489709d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d94739-431c-47c0-961d-50aa2da3fbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9919b23-1ba9-4830-868b-fd5f0dace735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4048b7c0-7e8e-4b56-8b65-82ec00799daa",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffe6572-080b-467c-9b0b-13c6528983c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48b8088-a9b3-4d11-82ba-d76e62eee5e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf74658-8cc1-4744-876e-7badc66620a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09eb9958-5bc2-40c0-8ba4-47123279b189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2b0a8a-e0ed-4902-995f-14d112591c63",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6668d26-e65b-493c-b339-a67bb64c4b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c46d36-cb4d-4a28-ba0d-02616508a2cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30937d4-6416-4314-a0a9-3ecec528828b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec055005-1c0d-4502-b536-94b72757b0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32985300-f450-4d0b-8ae9-dbaa1fc781b2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d069554-e91b-4224-9d6b-d69e1e20ccfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788748e1-0a7e-4088-8a42-ddceb834508d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43ba0cd-4067-4b2b-ba62-375aeb85625f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a36987a-62d8-4551-a8a2-6257ddf97f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbe4e3a-96d2-4e7e-875f-74c9c82cd3c1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310e1d6e-e877-44e6-b627-823f6b9d3e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572baaef-d9f4-4ef8-8bb4-b9504d159fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7caaca-33cc-40b2-b9c4-612b3db46ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7cc9f8-1531-45a1-862a-9edf1a4f9ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f8a92b-9e11-45c6-8ed0-730bcac1f788",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c41d974-5ed6-4cad-b453-4f41a9c7a679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2fc46d-4fdc-42a7-ab83-cb5772a9c981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9176219-815c-4d49-bc77-aa57a18e3d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c9d369-512e-4df4-99b7-c4a58af7e4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fdf771-3388-411f-a3b6-a18b3a80845a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238a97c9-692e-4874-a6e3-98f5b79cff84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8480a714-fd7a-4cc4-bd35-48f0bdb3a236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db667993-c981-430d-be66-d439887b27fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04048223-5dc6-4c30-b9d1-52496456a8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55682c80-6d34-4d61-9c2e-a7467427d162",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1a48e6-660e-4f0f-a940-f91ee7b5f2f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fd7a00-2d86-4844-8fc7-5e64903a878f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8081b9-09d4-43d2-90aa-195a97224cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f87378d-c37f-4974-b38d-0222e8fcc255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487275e7-3665-4f80-a94e-980308aae55a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8e7456-d328-4644-9b75-1e92098dbc8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b724902-301b-4a48-9434-dece2e6e0b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bcb4bb-bdfe-4c11-8b69-2ad7ea56a3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2679ddc-2d12-40df-9985-e39a32283cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f5ae70-f8be-4926-97a3-356f51e7c0c3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd6dbf7-c03c-4fe8-88c4-f58852639bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c63a602-3aaf-4b5b-87f5-ece06548ac49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57de5b9-1920-43f1-aee8-670ff36cd9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76dd01e-07e5-4b52-bf61-dc4ffafd8d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ec2656-99a1-4521-a73c-15b473af7b02",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd9fd5f-0d64-4ad8-bae1-d7f1407d994a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8f49dc-72ee-419e-a583-3565a9109dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8586848b-07f6-4e9d-8bc1-fbc270513da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0650eb5c-a30d-4ed2-855a-794a77a82575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9463841e-dc0a-46bf-9bbd-0ab14bd9e09d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52722656-4e3a-4de5-8720-55c6d6b7c6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513dcbd3-66ad-46ca-8ca5-a9ccd60ca032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737f10fe-c1fb-4a3a-bcf0-f61c365ed1f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a883b1-bb63-44e7-be79-1f61daebe96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcae7d2a-777b-4100-a0e6-f1ac8029bb09",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e4da97-d8e4-49a8-b994-87b0f35b473d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bbfa77-83c4-4498-a617-28f3b6e722be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ade622-4186-4a0a-af94-43f7201ee814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5326667-cf63-4f62-890d-ed60b384bf58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb417b90-6db8-4524-b791-5d907092771b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908ad383-2c3d-43ba-92ae-ad7654b3e223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59f2ee1-dc47-4b47-a72f-967f1c514eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb30317e-d461-46a0-9c6f-fc580b935d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4c53df-9941-4070-b583-b1f5b304b6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b574546-0812-4537-accf-6a6fb8d11e30",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5c0cb5-feb1-4945-91ea-a6e37a203c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295855d8-6198-465e-807c-a797b2e14728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d55efdf-81e9-4055-8767-47b8e8a0d89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4502bba-0b8b-434f-8869-6ebafb2939b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca35a31-d82a-4e21-b8e3-485cb839592d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70770184-5f24-457f-8f97-e0ab328f6fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2524ae2-61bc-4317-ae91-13e0149693f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca72483-41a5-4a01-81ec-00fe0bed74dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ecc818-d40b-4d43-bcfc-c463e6e3cf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4820322a-5ab2-4018-86bf-b17bef687644",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9dc7df-db0b-4711-b943-bf6da061570a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4c09c3-6fd4-4a6d-93ca-b0ec51a62d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3818bd2b-6ace-401d-a5ea-425930c09ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613d8ced-4d37-4442-9879-fa85410a1940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4b0031-aa06-4f28-82ca-5831a200d13c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad09cf22-0b6e-4789-8510-a02ab7724961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9133eb70-ad72-4f2d-9da8-3ec1152a0971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66709ab-4976-46d3-9974-18179e6ddc9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e38bda-4eae-4b7f-b85a-90111279aeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ae88ff-a7db-4ade-a8e5-34d1d108918a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9384ea9-3487-4d4c-90c5-dca7ac5f496b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbc79d5-620f-46db-bf10-b71f86f1af4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0789cafc-acf0-4528-a99a-adae2f947c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71db272b-5f02-4d3e-a085-596abd31b866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841f1f96-086e-4966-91d9-f24baadcd670",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a966738-235f-4172-803c-d4e8b5102b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab0b3ac-68c8-44d2-a69a-9f7b657a0823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d6fe66-e877-4b5f-8bf0-f46ea146b0a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880c0643-4007-4cf0-ae29-057b65975991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635a2d56-3495-48a8-a5d0-b41b56353811",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d454170f-53c5-4262-9805-14bfdffbb91d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57fc9564-6cc2-4f9e-873e-e1d0a3479bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362c1767-733f-474d-b690-1d4a4fb3ccf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b7e8e30-9ead-4d5c-850e-6e5286d1fec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9578dd-8afd-4ba8-8721-1889d5f0ad9d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afe7842-c136-4200-ac0a-9ba1b38c6860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "645edfbe-c23c-4508-8547-78db84da2158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7096a8-7f0b-4af2-97ff-2f079a845589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a4415a-fa98-48b0-8754-5b7de1897b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278d82b2-f4d9-4199-a589-3be742e2df18",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f9ad68-7e2d-4316-9b9c-673e50b7fdae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f403e7d-7d7a-4992-9cad-d5bd8643f200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7c1332-8244-4060-be43-da447a4e185f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae75c6b-3de1-4ef6-a853-030501c333cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d83aeff-04f3-40f7-bb8c-a3a6fc60c067",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62a6ba4-5795-4f23-b8c7-cfbc4d5319c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1df71ad-d07a-401d-a634-7acc4facc7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6b4dc2-4814-4291-bb78-97ceb16e2c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3057838a-9654-404a-abe0-bf8c129dcc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d31906-f187-49d4-b200-61a464c7fdc1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6978cb-96ba-476e-a336-4001ab0a73e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfc5b13e-8d04-4b19-b729-fedb681b7de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e68ca7f-e6ba-470c-859a-c2fd7a155758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48e9a6f-e85e-4646-82eb-51d906e1e5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effda3f8-4c1b-4a87-96dd-4d24acc11944",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b06470c-9236-440e-8e69-db3a0ebea003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04a0c0d3-e768-44aa-9ae5-19f25f74f77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f2fffa-efea-4833-9a0c-2af875ff7ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3b0534-4ae5-4173-b4fd-b471b5704922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc01218-478f-4c37-9a84-1c3c00e0261f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fb9b93-4e9c-45fa-bece-1d2cc8fcf2cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28152630-bb0b-4f87-bdce-2683af141a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c49bbb-d555-42bc-87b5-acc92a4b41bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4decb6-6a65-4cd3-a854-459feb9bdfb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfa4413-283f-4543-9db2-1055694c9d75",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99ed1ae-9520-46e2-bf52-1930d1c6a62d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "787b39b9-18f8-4ff9-9d69-81d61aacf505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2b49c6-4c2f-4f2d-97f1-7141c9010d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606a615a-5e89-4990-9ce4-0993d75d6960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71974756-862f-48c5-9d82-31eade6fc222",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8371557d-2866-4bc4-bfe3-5b1c929f8668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8849ccf6-424b-439b-a0ae-77d0695db436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a39bbf-00ff-4c95-a814-96c9908d53ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc14b71-bf2f-4ae5-95bb-2ea485420785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491a19bb-5fa8-46b2-9d24-0b62969b6599",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ab8107-d74b-42da-8b77-6a091c09e81b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e6f6caf-bdd1-4605-a4fe-15909972f20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5d823e-4508-4542-ad8c-2e24aec37466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ae34c6-4e80-43bc-9780-95c4e7b5aefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380ffeee-3f8f-4b45-9f28-59636a36e793",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4aaf676-119d-48f4-a57a-0519741446bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "150f9e98-186e-47a3-8d09-72d1520a1d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acbd92f-f8f7-4222-a8c5-438e089cea96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c1e2b9-c594-42e5-a93a-ca33d8cd6831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be23c0e0-b8be-47c2-a1fd-80096263e8ae",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d745d7e-f0d6-4c34-a829-bb41342fafdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6040e099-6071-4113-8ffc-4d2120ddccbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43d5ae8-38b2-406e-bbe1-243f1be13613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b02477-3ea3-4116-acff-46861221c93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf97c34-a587-48b2-9490-7cf7232f407f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c757c1-a2fb-42d8-828b-00185c1b1e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef37cfdd-059c-4d56-83c2-cd95eba4fa42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7996a25d-f3e5-483a-b03b-b9db1ada71c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26dc1c66-14c8-40c9-a1f0-c60111e603f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaa1e4d-24dd-4cbb-a0f4-2a493a542a2e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a32f8c0-859c-45fb-94ee-886f3590f5c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c96d6a-27ef-43d2-a11c-42f840f60ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d46a943-6002-4c4e-a928-4864a329e29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b466e3f-ed99-494f-80a5-df3fc0554603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3fbc17-c775-4922-aa7a-add4068466d9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a1f194-a424-4fa9-a5d0-dd3be72a1552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d53e100-0e51-4223-96ff-bc7b55f9876a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5a613e-ed6c-4d60-8237-8ec9cbf91180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70523cd-2893-43c8-b305-8985c784dbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de065292-dbcb-41df-b5d2-a307b59b4c04",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6637e9-9a7f-4085-a0c3-ce83f443472d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58ca876c-1314-4d05-a9b1-03be54afd55a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87d410b-6778-44e3-8a2a-8a939323e7a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669d893a-f156-4428-b6d8-1814653ec90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e16dd8f-1fbd-43ce-99a9-031ed7312416",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f11461-f2bb-4c2d-9130-b91550c685de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c2798c4-3d3a-4394-8fa2-ee791f9e94ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4a646e-a110-42a2-a6f9-3650c0604e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bd7fe27-6a46-4b6a-b0bb-baceb8417b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88dd336-98d2-45e0-be37-18f337860d85",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a10130-c5f5-41b7-a3f9-673378bc1a0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b56f761-835e-4346-a804-7cec81232742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864c5064-0445-47dd-b6c5-892b9c74fea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082a6696-c79d-41b6-9c9f-533f60a47166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb81270-de41-4ffb-833f-20ad190ba510",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9fa8aa-6a00-45f5-9b85-003f29552b37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d420b278-ba71-467e-8bcb-732791b28205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93568b7-b22f-4f6d-9c6b-6173c5a0a66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fdb917-4c58-448a-bcf3-25d95c6cc2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5d00d6-d800-4513-8035-8d0c5564c2bc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56a2207-06fb-49ae-86ca-a390b70f0fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f353f920-ac2c-4dc8-9738-d1a7aa2ce962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629f0c3d-2cf8-4280-9b5e-0a4d15a1a159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1853a6cd-6a88-4242-aa13-d606bec2ddc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992674fd-90f1-49d6-9908-407a5a46e99f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc706da-cfe3-41cd-93b5-3c59598cf82e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef23cb71-88d2-45c3-878f-013381eb7b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d497b463-731e-4dd8-85a8-57528b82476e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac18e055-d741-4126-b14f-60cada41b17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3320e575-e5a5-45be-ae49-7bc2e12b73dc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e764665-bfdf-4f1b-9b99-86be3cf1b27c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e16770a-d8a4-4675-8d30-7b6b3df55692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba1918d-c296-45bf-9e08-30c7e499801e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d38912-f59a-47bd-a628-1072dbf20e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8b6852-d202-4457-98cc-c1cab861c919",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b974e3-d480-4075-bd73-23c4b69eb09e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f97ff9d-bfb6-4d81-a58e-edb1d8f97671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ec99b2-b4c8-424b-ba8e-b74b4d09df4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb5ec2e-5f78-4e60-a90a-9c1ca62acc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617b4d11-69ac-4f06-8d87-2834da97e54f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800d95cd-846d-4ed0-aecf-7613cfeb443c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c70b4a2-5e02-4afc-99d5-4e8b9ec6233a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981cc277-d1fa-4fd1-a951-d1574118c9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b09e832-6577-4f2d-8dd6-f1d620297d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a73951-c189-4bd8-a39e-b2d32be93510",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd29aea-eb89-4602-b905-d5987083c1d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c09b2e2-658c-4a6c-b99c-e99d1579fc5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcd1e1e-a8c1-403e-8eb1-a385ba8c8a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45394cf-20a0-4797-9f37-8d2c3c2c099b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec8c4e1-61cf-4801-9d8c-2019daddcf0e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cb8c19-5c4b-4fea-b49d-041df0d55b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fcb1ad7-79ca-4dc4-966c-d44d4d0ad058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf23136d-09f8-4a4e-9960-8fcaef727bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f46cfda-8239-45b3-ab18-dad6831fd397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d572b723-7f42-49c3-9a7f-4a223bcc9d88",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226fd3a4-2996-437c-b359-87391d16ef33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f072998f-60fb-4d7c-ad12-59e3689fc7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582deb3a-f0b8-4856-aee8-4dcaeb6c34b0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95309a23-5525-47d0-891c-1d9649a1bd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920383f8-eae2-4d35-9900-f68b4b1a1ac8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d9fa2f-b580-4dad-8f2d-15246a437937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f12e0340-b539-4984-a2ca-47bb8db8c5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb10cac5-62b4-42f0-9441-7163e376cb78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a1f044-42a6-44e4-8bd4-bada3bf22b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72475ff-2a1c-4f0a-979c-d466cd3522a8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605714cd-bf2e-42cd-bf3a-1901b0206072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca61a95e-bbbc-4598-a27c-63c38d562690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f51af29-63a7-4157-85aa-4f0fffedc045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c9e323-dc34-4cfc-902a-08b974d7b96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2103207b-f8aa-4e31-933e-376ca177e7c9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59fb495e-76cf-47cd-a1e2-5981bff40cdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ab433e1-b574-4907-b1a6-598ca046d6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc6cc2b-a4e6-400d-8afc-6d03891e8517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6066711-07e5-4d74-8f18-d67f86a90d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479982d5-f323-45e0-879e-69220d3c2930",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4a3642-32b3-49c5-84e9-f6b59353d71e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4312bc0-83ed-495c-a06e-2311c2229488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae30cf6-ee52-4b1b-b2bf-4c3fda3f9def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ffc3d0-3685-4df0-bdba-614609d9dd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9011b3-312f-4f5a-99b5-2923df3dbf53",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a0ca44-8df9-4180-bd2d-35fbf9c44286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02cd6b48-f4f9-4f90-b94c-1f46d7bc3d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c472c6c1-2937-4ecd-aba6-8cb37b8cae70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f94c9d5-62c8-4b38-b57f-b633929b8609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2634ffb-9ada-462a-8631-b84bbb82e659",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9103ddc8-b591-42d1-95a0-b3ac8c159721",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6fcc677-f2ac-44f0-9275-0d0a2faf73f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2847cf6-905a-49e9-8ad3-32457d7446ba",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04830b38-ee67-4c9e-81cc-64814807552d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38603a56-ac1c-47a9-bfe4-750e91b9670f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb36b085-6101-484f-a33a-cd4d4a9484c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69c2c36e-4cd8-44db-8be2-eaf52d5b5439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d10e16-abd6-456b-961a-ee2ffe52cf90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3489701b-0fe7-4a18-a4eb-da5b023438f3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "315acfff-e317-43cf-898d-a1354c873f55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b58c9072-b288-4d30-ba2e-5c3f9ec47229"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27b94127-219c-4f85-8b8d-278f2dfb0559",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2189d11-1f23-46e7-8ea9-590afaf91636"
                    }
                  }
                ]
              },
              {
                "id": "4529fc18-7e4c-4d59-ae44-2fc92b297e10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6c4b918-8fd7-434f-868e-803f5d220d35",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514d1687-cfd5-4fd7-a010-8dbaa1ad2017",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5ed2b291-061a-4fee-9ae2-26676e5127b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6721d2d8-f967-40a0-b3e3-ddfd3b31bff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef353417-cab7-4eb7-9bca-3d6c99c6e828"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8493ee2a-81b1-4d23-be5b-fdca3d42aee9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a9ae375-bb0d-452d-9718-a496eef016bc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a33298b-9dcf-47fb-a9c5-31dfeab93c70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f57f0f4-bb73-42e3-a305-992ee6f44aae"
                    }
                  }
                ]
              },
              {
                "id": "e864078a-cff3-4fa4-8cd0-79d9446614c0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1c7ca1ad-bade-4406-ab59-66466c94acac",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769af3ab-2f77-4f61-ba88-2cffdfac3139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9b9c598f-c123-4240-a598-12704394be1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b557994-7271-44e3-8a9a-5913a8a83b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858af618-3df2-4b9a-bd1b-870ca6d7c2c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "da44d8c6-d131-4874-b5aa-0157e2a150e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e20570bc-b5ec-4938-b57e-a1bc87a12699",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3197a1f-3291-46ed-8754-d86028f7c07f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6077f2ac-6a6f-4494-a2ad-013ce5516803"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9236d11f-6315-42e9-b7ab-01cc5fb9809d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b04f190-0c4e-457b-a289-6554b120eecb"
                    }
                  }
                ]
              },
              {
                "id": "6e522b06-ebf1-4c6d-8312-81d57d9db5f2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fcc2c11-536c-49a4-af78-65566cd35a77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e6653f9a-1ba3-4ce5-add5-9aa95ca28e29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e7913d5-677b-4c97-9038-d44273b6842a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bd8de5a-5ead-42e8-918c-fa1a34e8a909"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b2e155c-a23f-48eb-83fc-4dd2f63f37e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "36af9e99-f916-4700-82d0-20dabd8a3cbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eaf5eae0-7c3f-43ca-b18c-1a47284225bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5b51605-a9a2-418d-8a29-08ce19c54449"
            }
          }
        ]
      },
      {
        "id": "e87fa60f-584a-4bb4-85cf-746193a6ae88",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b14a9d46-b3a8-4127-8582-fe4454735263",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3586100-a202-442e-8121-e8b851bbba2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce60581d-2d41-4b93-89ef-64261f3d7cff",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4bbae8-c8e9-4700-9cf1-84dcf2413e8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0be0fa99-2508-4057-9d2f-ae3d3bbec090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a57e96-a925-4d40-917f-32066d9d0db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "755808d4-1632-493d-bb36-99d670e76165"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56e52c2f-1abe-4010-aa50-dc357efbfc35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0c504a1-309c-44c1-9e59-7a8958856321"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35fd494a-d7b4-44f8-8455-5ab059338a8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e900178f-b5e3-46b6-a4ea-2c342580777e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f8aca94-3afa-4545-a1b6-48bf5a8c3e82",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "db2ea86b-7840-4319-9790-95ed3b9a7e29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d994a50-84fa-4b02-8a1c-94a5c6bb7632",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0acbfca4-b3d2-47f8-95cf-8eff60081c08"
            }
          }
        ]
      },
      {
        "id": "4f1e19ad-8682-4968-be50-3648a409bfab",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f87d889e-b141-4a33-a49c-9508848f8e40",
            "name": "Negative Testing",
            "item": [
              {
                "id": "312d3fce-ce92-40de-83a4-86e1dd261872",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9972effe-38f3-4874-92b0-d7e38a85524a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afdc75e-a2b1-4aaf-a76c-c7b7baa18cf6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48af9cee-6ead-4b4f-9358-e43567cb4aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58ed213-6df6-4dbe-95b7-27481aecea02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3ff2d11-c08c-41bd-9da7-7d9fddfe2f59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5c9f367-c9e6-4cc5-bc3a-62a2498b90db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "356a45c8-aa81-4921-9687-d8bb317a730f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37526970-c15a-4c09-bc2e-deabccc85289",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "722af579-ade1-4ed2-a64d-91bfcb8952aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30a0106b-97e1-4162-9955-ba05eee5556e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6ce99413-1511-48d5-a36b-95f83fcd7008"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97f8bc02-84ed-465d-8c78-136310fa4898",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c055d0e-9b83-4368-99b8-67cd7046abb3"
            }
          }
        ]
      },
      {
        "id": "c8fd7d20-e131-4f0b-a028-e832717a792a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "70897b81-1034-4e31-acbe-b53640c1e0f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29d58099-f52c-4071-a10b-b4f6afdacaeb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ebdfedf3-a6d2-4b74-bac6-447e648368b6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24be5d4b-b50f-4581-b024-8e53f478ee9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07582661-7737-45e1-a70b-4f765c08d59c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fc9c19-bb71-4198-9193-5c63abdd76cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66a9373d-2e20-4577-91c0-91529ed38de3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1874699c-a13e-4ecd-ada7-fd11d84ff623",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3768815-d5e6-4b04-aba4-67c7489ed648"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "722670f5-4439-4514-8839-5d6a60c9320c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b691a788-dfb3-4498-8142-2baff8d51457"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3539c483-5a97-41ac-a3f9-066e7add74b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "52c78aab-2ea2-4d4f-9bef-b76d82a945ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8796a50-1028-44f1-8387-73111f0d7995",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "929cb82b-ba2e-42eb-92f1-ea4b556f63bb"
            }
          }
        ]
      },
      {
        "id": "e44b0da0-c577-43a6-90ae-527e69fd8595",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0685aee-42fe-4b12-819c-bfc02396c72b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d30a44e-fef9-42d4-9997-7cdf0ff2e1d5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c4c72ebe-8437-4e24-8050-40c213f3fcf6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9736d64-0e6e-46d0-8b23-0ca4749dc939",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b5642f4-a543-4e6b-9c49-e045b662158f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 104.8978873239437,
      "responseMin": 9,
      "responseMax": 2302,
      "responseSd": 266.37523860527153,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694133142198,
      "completed": 1694133186405
    },
    "executions": [
      {
        "id": "39f7c9c5-dc80-40f5-b365-96adfeac8213",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ee3d38a6-efb1-45a3-9b8d-38b7593c6a2c",
          "httpRequestId": "3e4e7898-8466-4e3e-a7ce-6aba0dcccf1a"
        },
        "item": {
          "id": "39f7c9c5-dc80-40f5-b365-96adfeac8213",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a9f46e5f-05d6-48df-8dfa-efdc8ece256b",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "f31ae428-009b-4a73-ab24-b05b5dd7d942",
        "cursor": {
          "ref": "0db4117c-3cca-4b90-8c1f-e213e086d52c",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c72685-d5bd-4c69-ab0f-ec7dd2d9a47e"
        },
        "item": {
          "id": "f31ae428-009b-4a73-ab24-b05b5dd7d942",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "992d8255-a205-4bc5-b5d5-cbc4f4ef6f75",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "88dba678-adcf-4e37-8a70-c1b95e2004a4",
        "cursor": {
          "ref": "c7e06d8f-9274-4335-b24c-26dc2c55c96f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8dfcfb59-c654-4636-ad5e-2210f014b85a"
        },
        "item": {
          "id": "88dba678-adcf-4e37-8a70-c1b95e2004a4",
          "name": "did_json"
        },
        "response": {
          "id": "c97a09c2-4def-484b-b0c3-02f76a36380b",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58edce6-dcab-4f83-a54a-a10a37dd17a0",
        "cursor": {
          "ref": "b78dff25-3b07-4b96-929d-723eb01273d8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "467ce084-6cc9-4b2e-8f9d-8bc76e327c9f"
        },
        "item": {
          "id": "d58edce6-dcab-4f83-a54a-a10a37dd17a0",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f044c52-a27f-4671-b056-5bc4b509a211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58edce6-dcab-4f83-a54a-a10a37dd17a0",
        "cursor": {
          "ref": "b78dff25-3b07-4b96-929d-723eb01273d8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "467ce084-6cc9-4b2e-8f9d-8bc76e327c9f"
        },
        "item": {
          "id": "d58edce6-dcab-4f83-a54a-a10a37dd17a0",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f044c52-a27f-4671-b056-5bc4b509a211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866b8d62-ab11-48cc-bf1e-20caeb9cd950",
        "cursor": {
          "ref": "363d78b9-3572-4859-a806-69900dd0e1bc",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7e2ce4b5-3370-4f5a-8184-bc58f25cdbd2"
        },
        "item": {
          "id": "866b8d62-ab11-48cc-bf1e-20caeb9cd950",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3846035f-2217-4ed8-8841-ae664fde092b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 163,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae04eb9-49ad-41ee-b4e1-05a9ff175de2",
        "cursor": {
          "ref": "b76f2ded-0f64-47c2-a587-fa005c0524a1",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e00b91c7-43f1-4cae-9a2c-0846a206e23d"
        },
        "item": {
          "id": "2ae04eb9-49ad-41ee-b4e1-05a9ff175de2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "734504bb-0fc4-4fdc-a6cc-4ca71aef61e0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9f0057-4edf-4b6e-86ec-38999cfab893",
        "cursor": {
          "ref": "a2333cb9-62a7-42aa-ad11-7b2e145e0c3c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f3317862-e358-4786-8445-a431753ca17f"
        },
        "item": {
          "id": "2f9f0057-4edf-4b6e-86ec-38999cfab893",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7ff72e5b-1df9-4667-bca8-2e18fdfb1f6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b789bfb4-be3e-4cd3-af15-c26f0b2ca8eb",
        "cursor": {
          "ref": "5cbe29ea-bf3f-40af-a4d3-908e7fb86393",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c9009e5a-d2be-4fac-8518-2d37aca93bcd"
        },
        "item": {
          "id": "b789bfb4-be3e-4cd3-af15-c26f0b2ca8eb",
          "name": "identifiers"
        },
        "response": {
          "id": "834c6fae-e9f4-4ade-b780-018dbeac0d11",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7045a880-d924-4195-999f-39a101ed9aa9",
        "cursor": {
          "ref": "259b7cd1-b31c-41c1-bcf5-cedaa24b4b76",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "efdd23eb-d794-4d1b-8748-e8aad4d04c37"
        },
        "item": {
          "id": "7045a880-d924-4195-999f-39a101ed9aa9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1493d07f-72ae-442d-a51b-7f047ea49703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9c0342-7776-49a1-8859-bc7cfa1b553d",
        "cursor": {
          "ref": "dcb070e4-656a-4a83-b3db-4d0b60e098f5",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3a649f06-5cd5-4c09-a45d-2e2a07f00fa3"
        },
        "item": {
          "id": "fb9c0342-7776-49a1-8859-bc7cfa1b553d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2de0d751-9711-4b63-b69f-a58d2d2f82a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c6bb9e-0fd8-486e-83c7-ed6b4e963c05",
        "cursor": {
          "ref": "8a4227f1-509f-412c-9562-f67da592e580",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e17d9706-b34f-428c-9a40-50b68e5c6f9e"
        },
        "item": {
          "id": "66c6bb9e-0fd8-486e-83c7-ed6b4e963c05",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "66d493d2-86af-4beb-92b1-58126a97dce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27565231-c55b-444f-9861-9725b5cb3f8d",
        "cursor": {
          "ref": "abc8a592-421e-4e22-b49f-1e2b6705037a",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f0e97dd6-2f5c-435a-8bd6-43dd5f2d705c"
        },
        "item": {
          "id": "27565231-c55b-444f-9861-9725b5cb3f8d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d767b8a2-8700-451d-a124-a05c44e93dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248f09a1-7b50-4d43-a3a0-d428c4178ff6",
        "cursor": {
          "ref": "de9058d8-c8c2-4015-8a55-829113870268",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3a47181a-2886-4b9f-b286-96747ac43753"
        },
        "item": {
          "id": "248f09a1-7b50-4d43-a3a0-d428c4178ff6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5ae24e37-3daa-4019-bfab-f6f92a710972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b01abf-1f4e-45d7-9616-a7df9814115d",
        "cursor": {
          "ref": "bdd58f5e-3432-482e-bdba-aef6d88c3e15",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "50997274-9a68-4bbe-b93d-21d5e2871b4d"
        },
        "item": {
          "id": "e8b01abf-1f4e-45d7-9616-a7df9814115d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e6c74318-c5a6-4d41-9b92-e83c18c1e72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664c6514-64e1-4201-9ab6-cf790e21c6f0",
        "cursor": {
          "ref": "4c00dd45-063d-444f-bd6f-a3fa6bd90ce0",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0b569102-d9d3-412a-8ec7-e8d0c32f9b20"
        },
        "item": {
          "id": "664c6514-64e1-4201-9ab6-cf790e21c6f0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5adffe95-91db-47a9-8b00-1ede694654ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c437f4-8d0b-4a6e-bdb1-c5fe9f3828ac",
        "cursor": {
          "ref": "4de49764-bd39-46c1-a0fe-0921be2f4261",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "94c84680-a239-404d-85a2-1c000c07307e"
        },
        "item": {
          "id": "58c437f4-8d0b-4a6e-bdb1-c5fe9f3828ac",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b58d567d-ce54-42b5-a55c-63bca5bd7eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d4821a-ab89-403f-a6eb-45c2374fd297",
        "cursor": {
          "ref": "fdf5bb29-8b2b-4ce2-be87-96e881cbab95",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "59fa63c6-7c7e-40d5-8ee4-0dd705e3aa3d"
        },
        "item": {
          "id": "52d4821a-ab89-403f-a6eb-45c2374fd297",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "21152e9a-98f8-4855-9f74-3630575627d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5604ad45-24ac-4afd-a858-2007f32201db",
        "cursor": {
          "ref": "80a40c94-73a1-441c-9dc4-79637b0a6289",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "22795dad-ac3d-4389-a8b1-a34ec030d724"
        },
        "item": {
          "id": "5604ad45-24ac-4afd-a858-2007f32201db",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9fd75441-6180-4fa4-9755-44cbee8501f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ff9217-adb0-4204-9d69-a0e8f1d04146",
        "cursor": {
          "ref": "5258cddd-0b21-4d86-9039-45c554875fb6",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "476b9fc7-3ed6-4c38-a8de-880e7feced25"
        },
        "item": {
          "id": "44ff9217-adb0-4204-9d69-a0e8f1d04146",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8e9b9568-13d2-42c3-a579-18359b2764f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a52706-a422-483f-85b5-48d0cf5664cd",
        "cursor": {
          "ref": "60d2553e-b79d-4f3b-860a-d2d67a640088",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1eb12877-c718-48bf-b163-77dd40c2cecc"
        },
        "item": {
          "id": "43a52706-a422-483f-85b5-48d0cf5664cd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ffc7f67a-ad34-419c-9ab9-d3a89323cd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1837e153-4643-4475-87fb-d75e30b0fee7",
        "cursor": {
          "ref": "c07d3880-657f-4ab0-9064-7f01ac7d368e",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "98116402-c01a-4a30-8259-88cc1ed21d7d"
        },
        "item": {
          "id": "1837e153-4643-4475-87fb-d75e30b0fee7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "81fc01b7-38b2-447a-8330-dc055fe0d812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76daae31-9085-4460-a04d-27c1b69a07af",
        "cursor": {
          "ref": "62eb201a-7963-492a-9142-21eb67f0120f",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8af601de-b345-4338-8dcf-9f358a61e4e5"
        },
        "item": {
          "id": "76daae31-9085-4460-a04d-27c1b69a07af",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "eaccf9bb-d14c-4ff8-88ff-688d39138ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6ea2f3-2c04-4893-86b2-0d99214bf568",
        "cursor": {
          "ref": "8bb33801-f09b-476e-a57f-999c08a5a30c",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eb7cabed-ff4e-4a71-9cc5-a30aed5326bc"
        },
        "item": {
          "id": "da6ea2f3-2c04-4893-86b2-0d99214bf568",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d82292b4-5f69-48d1-bddf-eac557bb1043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5823355-50c8-4873-b174-b4432c2aff42",
        "cursor": {
          "ref": "7a1bd322-ae49-4fdf-917a-76cfbf99a1b2",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "db707fb3-96a1-436e-8644-73819dcdbddc"
        },
        "item": {
          "id": "e5823355-50c8-4873-b174-b4432c2aff42",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6e8e8c2b-8281-4605-8781-36a4d6cd6983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0535cd-6bac-40c8-a149-222d2aa1eb58",
        "cursor": {
          "ref": "998cafa9-daab-4d60-8b30-fdb37630e515",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5ad18d8b-4693-402d-bc7a-3e98aacd0f78"
        },
        "item": {
          "id": "be0535cd-6bac-40c8-a149-222d2aa1eb58",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "01b84bce-f5f6-4136-825d-6c3aecd48668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea63bc0-fe6b-4e37-b674-a0e0a26c2b76",
        "cursor": {
          "ref": "3b495caf-9d85-4d02-926c-7e4d5aa19de3",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4a8cdf4d-dcb0-4314-8536-bb2d3ce52bb4"
        },
        "item": {
          "id": "4ea63bc0-fe6b-4e37-b674-a0e0a26c2b76",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3f4e96dd-143d-433a-b599-f291f1fe0e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618dbe19-fe39-485c-997f-2bc7aede083b",
        "cursor": {
          "ref": "84833124-d04e-4428-bc6a-1001989a2b02",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a1c51f3f-fc16-46bf-80bf-7b875b1b2034"
        },
        "item": {
          "id": "618dbe19-fe39-485c-997f-2bc7aede083b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6e7f836a-739f-4ecf-b13a-779a3248da0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c48bcc-c694-4654-a092-d26332297690",
        "cursor": {
          "ref": "1a4be1c5-68b7-4ac7-b04a-a65d3f2b950f",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "761a7c8a-af33-462c-ae3a-7879d1807217"
        },
        "item": {
          "id": "05c48bcc-c694-4654-a092-d26332297690",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "19ee1f30-6ad0-4b29-a673-1c86a1e27ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3858d4b-f3a9-4964-abc3-5fc78b26bf28",
        "cursor": {
          "ref": "56389977-c70e-4004-9228-60926d4c5d66",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cbb95f1c-0ce7-4c92-8b52-54ca84b8cf3c"
        },
        "item": {
          "id": "c3858d4b-f3a9-4964-abc3-5fc78b26bf28",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dae050ac-8633-49db-90eb-041dd3780ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de52321-1ce6-49c3-9f81-1cf39feeeb05",
        "cursor": {
          "ref": "7ed9dd29-33cf-41ad-8443-83568487e9ac",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ce792c25-a021-4967-9fef-dd40ddec91da"
        },
        "item": {
          "id": "9de52321-1ce6-49c3-9f81-1cf39feeeb05",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f17dd45a-a619-4b04-a90b-3b6cc22e63f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed924a6-a9fc-4ef4-8b7c-2d4b09c4dc98",
        "cursor": {
          "ref": "6135a41b-aaf9-41b0-9231-edb7c049976f",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1e826cdb-522a-42bb-83f4-6c7b21344406"
        },
        "item": {
          "id": "aed924a6-a9fc-4ef4-8b7c-2d4b09c4dc98",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0c63cabf-b58b-418c-908f-a9d15aeee993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a42380-fc83-4977-9169-91262afabf13",
        "cursor": {
          "ref": "e5da51b1-e430-4158-9c0f-059b69aeb08c",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "38fc7f1e-8487-47ea-97e0-7a4a0a034761"
        },
        "item": {
          "id": "b2a42380-fc83-4977-9169-91262afabf13",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fd960f5a-c2c0-4fd0-ac45-7ecc1534ce90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dbbd7d-c11f-48e0-93ac-35ce47024fbf",
        "cursor": {
          "ref": "79c21fe9-aede-4b42-9759-ea0e5ad2c1ed",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "abafe2a1-ef25-4b5e-8a14-798b6ab9e19f"
        },
        "item": {
          "id": "66dbbd7d-c11f-48e0-93ac-35ce47024fbf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "de55b8e3-59dc-48ef-9dcd-0cbc2b9d0871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e95e70-9a05-46dc-8f49-6712b3c9e964",
        "cursor": {
          "ref": "fa55970e-da09-4429-9967-104d964d9285",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7b0760ee-aea4-47e7-996d-f208d8db9a16"
        },
        "item": {
          "id": "e3e95e70-9a05-46dc-8f49-6712b3c9e964",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5ff2a79e-a69d-4152-ab52-e3cbebd83d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065db70a-f806-4195-86e4-e0680544de5f",
        "cursor": {
          "ref": "13e0ba05-7eb5-4bbe-a845-309f92ec819c",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c2125f2a-4f2d-48f2-bd69-1131c5b03148"
        },
        "item": {
          "id": "065db70a-f806-4195-86e4-e0680544de5f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "80d34c44-7ae6-4b00-ba87-8d45c384f774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e931f3f-5ffe-47d3-871e-16cbd342039a",
        "cursor": {
          "ref": "5bbceb5e-a7c7-495e-8419-52a32e46abcf",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7dce38ff-9b12-418d-bc73-35e1d3fe6272"
        },
        "item": {
          "id": "0e931f3f-5ffe-47d3-871e-16cbd342039a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f6a4e089-4f9c-4131-a466-98c3c39eebc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee88f0b-a071-44ce-8b80-abef7f2d3643",
        "cursor": {
          "ref": "ecde29a2-a32c-4031-a164-0152d7f65f90",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "30e07e23-8257-4e88-80f5-1ac605ef915a"
        },
        "item": {
          "id": "cee88f0b-a071-44ce-8b80-abef7f2d3643",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e427f1f0-7336-4e84-92c2-2413ed7904c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97476a6a-3443-46a0-a3e1-04a9b4284120",
        "cursor": {
          "ref": "8147ecf3-c66c-44a3-b4c3-84917fc105c3",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "638f3dd3-fbcd-4177-837e-3c2ce5863d7c"
        },
        "item": {
          "id": "97476a6a-3443-46a0-a3e1-04a9b4284120",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "14f97089-b987-4f5f-bc5e-44b628475d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ef138d-fd08-461e-854e-5f1a91371998",
        "cursor": {
          "ref": "cd4a4cdd-9ef1-4fe7-bae4-96c48c756c23",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "19fccfcd-81b7-41a9-87ce-4cb4bfb7b6a6"
        },
        "item": {
          "id": "f3ef138d-fd08-461e-854e-5f1a91371998",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "964fbe0d-dafd-4716-be13-a762b5bfe5cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a22a3571-c6c7-4a38-96b4-5054eb49ae2e",
        "cursor": {
          "ref": "ac36f041-4523-4c1c-921e-f7d8a5dc2fea",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9db2225c-dd64-4d33-b0f6-af1b9dfc1583"
        },
        "item": {
          "id": "a22a3571-c6c7-4a38-96b4-5054eb49ae2e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "46669eb5-957f-4c5a-a0aa-1522c21cef2c",
          "status": "Created",
          "code": 201,
          "responseTime": 2302,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3e81fb31-141d-4ac6-a0ad-221d560f1028",
        "cursor": {
          "ref": "1edcf1c8-9adc-4153-9bbd-7304f6132591",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2159cc9b-ea86-4d77-9b9a-c5cbf97c150e"
        },
        "item": {
          "id": "3e81fb31-141d-4ac6-a0ad-221d560f1028",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c0c7a1b1-bfc6-4b89-ac90-4366144caf9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9dfbd183-bd04-465b-8c94-e39bdfd7c39f",
        "cursor": {
          "ref": "700b12ae-5b64-4808-a321-a7ce65cd868a",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "25d8b703-2f8d-4525-9bc2-a1eb9eff436f"
        },
        "item": {
          "id": "9dfbd183-bd04-465b-8c94-e39bdfd7c39f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4b00bdc8-3782-4b96-a8dd-b52d43e8c5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c9f24e-2b81-4492-8d33-571cfe1da8ad",
        "cursor": {
          "ref": "4a669038-eda5-4cf9-a601-7009d09b3881",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0c3044dd-e172-470e-a774-33e66426627a"
        },
        "item": {
          "id": "d9c9f24e-2b81-4492-8d33-571cfe1da8ad",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3bb704bf-de06-4026-829e-0ccd1197203a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "836b6fd1-9e8b-4aa8-8d52-926b9c7730de",
        "cursor": {
          "ref": "625fb8eb-4a55-4fe3-89ad-f501c7eebc37",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9a45671f-84b3-4c02-bf75-df51809055c9"
        },
        "item": {
          "id": "836b6fd1-9e8b-4aa8-8d52-926b9c7730de",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bde79773-356c-497c-9d6c-d7fb8ee6e61e",
          "status": "Created",
          "code": 201,
          "responseTime": 1202,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6e06e0c9-cfd8-4605-8b5e-b8f7044347e6",
        "cursor": {
          "ref": "d6c2e066-9ea3-4ff2-a289-c3a26585a178",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "85f303e5-b568-4d79-8439-6f68a3b6bf5d"
        },
        "item": {
          "id": "6e06e0c9-cfd8-4605-8b5e-b8f7044347e6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "393ca5f8-c20d-45c4-8c96-60297e90a0ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "dc6692fe-6c9b-4f5b-9b8a-b4731e56cbae",
        "cursor": {
          "ref": "b3b151e6-375d-4319-a1a9-782d2fc218d4",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1d0bf3a3-ff12-4537-9788-ca8d439bcced"
        },
        "item": {
          "id": "dc6692fe-6c9b-4f5b-9b8a-b4731e56cbae",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "072da938-9556-41f7-a253-648c0e6a189c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 738,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c55fe2e0-5da3-4bca-a6df-f02aada0fa6f",
        "cursor": {
          "ref": "e369e72d-a3a3-40a2-be56-3f650fac9893",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "33270bdd-9f3b-41e9-8cb6-dff2e09e80e5"
        },
        "item": {
          "id": "c55fe2e0-5da3-4bca-a6df-f02aada0fa6f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "83dad5fe-0373-4ccb-82ed-556bb78c8810",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a79abdc3-4984-4eee-9940-eecc78e863e9",
        "cursor": {
          "ref": "d526f4e9-fb6d-4563-862e-2e9fdd12a52d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5df9ed10-ddfc-47d8-9651-738f08bd16c4"
        },
        "item": {
          "id": "a79abdc3-4984-4eee-9940-eecc78e863e9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "af0a53ab-bc94-4377-842f-94ae72fb8897",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "dfc5ae6d-95ee-48fc-a23e-1e95e2b1c7bb",
        "cursor": {
          "ref": "6563ef22-6f26-4d69-a27c-8d10d20fc0de",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "03b084c4-5fba-480c-b29c-36df5ce30e47"
        },
        "item": {
          "id": "dfc5ae6d-95ee-48fc-a23e-1e95e2b1c7bb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dc51c7c0-95ab-4c3b-afd2-dbe38713d011",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "fd589596-d0f1-45ca-a021-51185824ee6d",
        "cursor": {
          "ref": "62db9018-46aa-45dd-9882-06adab452b27",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b255cda6-94fa-40f7-aa42-4c8604443d19"
        },
        "item": {
          "id": "fd589596-d0f1-45ca-a021-51185824ee6d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "eb94fdbb-b4ea-4a5e-89d2-b58ff5d6da1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "114ab046-b326-4871-b727-34fce64b4dc4",
        "cursor": {
          "ref": "467533d6-7976-414b-9931-9ae1acd3550b",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ff923cbb-ca51-4f41-8fe0-f3ef696e86e5"
        },
        "item": {
          "id": "114ab046-b326-4871-b727-34fce64b4dc4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "44c4c09a-f744-411c-8d97-9f82dfb3267d",
          "status": "Created",
          "code": 201,
          "responseTime": 1130,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2f532485-ebe2-4367-816e-bb08f2d70067",
        "cursor": {
          "ref": "12248439-90a3-4d3a-9279-8c4813941f80",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "233a5303-d4f0-412c-9ea1-9b0afcb3566b"
        },
        "item": {
          "id": "2f532485-ebe2-4367-816e-bb08f2d70067",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "07a1c434-86b0-4b03-a403-412f465f01a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e1c508-fb20-4f5e-b7a0-1e9ba7394461",
        "cursor": {
          "ref": "27913ecd-a494-495a-9146-bd7e0b8fb432",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e91855f9-8ccf-4866-bf94-90caf0b65c46"
        },
        "item": {
          "id": "93e1c508-fb20-4f5e-b7a0-1e9ba7394461",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9b2205f1-0cea-4711-94e6-6cf2ba3151ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be8ca4d-2003-4dc5-9538-c7a74ba189d4",
        "cursor": {
          "ref": "6819788e-567b-477a-990c-3c588f9f4ae5",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2c0d6550-d76d-44da-b3cf-c167bf35f315"
        },
        "item": {
          "id": "2be8ca4d-2003-4dc5-9538-c7a74ba189d4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f523ee34-d26f-4972-a4d5-e794cd395f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd3ce63-4a92-417a-90d6-b7e8a906399b",
        "cursor": {
          "ref": "5549156e-96c3-4c8b-bc51-99cedfc02497",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e81e84ec-f823-444a-9e70-abeaba2849a4"
        },
        "item": {
          "id": "2dd3ce63-4a92-417a-90d6-b7e8a906399b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e3961ff0-6c73-4343-9191-af4c57fbfc4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23355cef-2fd6-4641-b350-bbde3ce4da86",
        "cursor": {
          "ref": "66fd7f8c-3602-4bd0-922c-6cad483cf4b3",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b3af2e09-4701-4b9b-aaef-7ad11fc32abb"
        },
        "item": {
          "id": "23355cef-2fd6-4641-b350-bbde3ce4da86",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5a357a4d-7406-4e62-a299-6565b62d4325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea20e09a-d29d-4cd5-802c-dfe8ac930860",
        "cursor": {
          "ref": "fa638354-4b6d-41f4-847f-d6ea56f10010",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f6d980c3-59f3-4429-a2da-d3c0eb6572e5"
        },
        "item": {
          "id": "ea20e09a-d29d-4cd5-802c-dfe8ac930860",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e5d2fbbf-7fd3-4830-a39e-d1b8999f9864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100f8da3-5a26-47c7-b95b-848a02de721b",
        "cursor": {
          "ref": "946ce466-bf09-4cc0-a3a5-d930b211769c",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f0ab2cc5-9da0-446f-92ef-ede9c438c02c"
        },
        "item": {
          "id": "100f8da3-5a26-47c7-b95b-848a02de721b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "db91bcdb-4e20-4309-9146-e81924fc27b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ede7f68-05e0-4f47-84c9-2f3f6c4e34b8",
        "cursor": {
          "ref": "2f70750b-fc03-4d18-b1a1-09261fdccba8",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "61823a2e-7fc3-4504-a20a-ccac336b4f8c"
        },
        "item": {
          "id": "4ede7f68-05e0-4f47-84c9-2f3f6c4e34b8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "83ec31b6-96eb-4956-bbf0-17518401c89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928a7c8d-0eb8-428f-acf9-7063cd6aedf2",
        "cursor": {
          "ref": "49396c79-6bb3-42eb-bcaa-d07717d13e70",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b198cd57-b3f0-40a4-b672-f30d89c40b27"
        },
        "item": {
          "id": "928a7c8d-0eb8-428f-acf9-7063cd6aedf2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4c64751a-4a36-4ba8-9a68-70cb1ca5cc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6ff017-820d-4928-aa5f-a4775a648a1b",
        "cursor": {
          "ref": "998a9ca1-845a-474d-8e80-76b0fa3315b8",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0375c97e-f6f6-4fc9-9250-0e0269d2d166"
        },
        "item": {
          "id": "fc6ff017-820d-4928-aa5f-a4775a648a1b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e5cc581e-0771-4a7c-98c8-f1a79783f000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8da8a37-3640-4e0e-a6d4-9257bfc2b4c1",
        "cursor": {
          "ref": "2e0aaf40-d42e-4252-a6f2-9ace64778208",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "794a1bcc-da89-4e71-bf77-fd56c8d95f79"
        },
        "item": {
          "id": "b8da8a37-3640-4e0e-a6d4-9257bfc2b4c1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2e926257-21c3-47a7-8edd-4f3fb278328f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb1310d-1342-4358-8ce1-f09ec6af64e6",
        "cursor": {
          "ref": "876791fe-e37d-4735-8317-b86c92f15369",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "55b8656b-02c8-4fdb-b2d6-9acd759d9fc2"
        },
        "item": {
          "id": "adb1310d-1342-4358-8ce1-f09ec6af64e6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4324f35d-10de-45ea-85be-647085b9b211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7dbd7f6-bbf5-4e26-8e37-e526b0cc9722",
        "cursor": {
          "ref": "f6cccfae-07d3-4fb8-b2d2-e8b60693f81e",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d428e0ca-1f5e-4d90-89bf-e1e93491d1d5"
        },
        "item": {
          "id": "a7dbd7f6-bbf5-4e26-8e37-e526b0cc9722",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a08cc64a-9836-4866-8daa-54025129df94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679cdbbc-c31f-4dd5-ad2e-135c959ddfbe",
        "cursor": {
          "ref": "0a0bcc89-0b1b-4436-b794-cd798c3b977b",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e50a2b97-8a17-45c9-9617-33d9668343ab"
        },
        "item": {
          "id": "679cdbbc-c31f-4dd5-ad2e-135c959ddfbe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0891ad1b-16b7-43d1-bf28-b49759d784cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 726,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "dcd4b1ba-d05a-4188-bacb-446feabdf030",
        "cursor": {
          "ref": "a985e656-953f-4078-b668-71692b4fb614",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "711cf412-8660-45fa-ab2b-9798ca0ccddd"
        },
        "item": {
          "id": "dcd4b1ba-d05a-4188-bacb-446feabdf030",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5095d027-7656-4513-9de9-f25244e2c074",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 722,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "36e40a8f-318f-4649-8555-1adcb32bdb86",
        "cursor": {
          "ref": "873f0c3a-5b5a-4873-8cab-d9e2b3d928f0",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0dcf84ef-cc5a-4300-a5d7-eb0630b5327d"
        },
        "item": {
          "id": "36e40a8f-318f-4649-8555-1adcb32bdb86",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2abf765d-aa62-49b2-9267-0f760ff89a88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ccb30401-99fd-4f15-a304-032e4b1c2a27",
        "cursor": {
          "ref": "9c41596a-e812-41fb-9c36-d444ed7e69ed",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0fa5a905-e509-4435-8a90-29bbf7548872"
        },
        "item": {
          "id": "ccb30401-99fd-4f15-a304-032e4b1c2a27",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "eda61754-b9ad-4f27-99ee-fcd57661b25b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 742,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bc8a743b-dd35-42bb-922f-6cf0b41fea5e",
        "cursor": {
          "ref": "0d25758c-cc6d-4f78-8f16-2690bb682efe",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1b58f328-d081-477e-9ea8-97d8196ffc43"
        },
        "item": {
          "id": "bc8a743b-dd35-42bb-922f-6cf0b41fea5e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e24a1762-bfbd-477e-a54e-a2f5c41978b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ddad873d-bf58-4d5a-b611-0614c2976df6",
        "cursor": {
          "ref": "7acb4416-a42a-489a-84d7-9cd6f47155c1",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e18acb2e-26b7-4691-991b-73af02e862b6"
        },
        "item": {
          "id": "ddad873d-bf58-4d5a-b611-0614c2976df6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fced9af9-d094-4d7a-bf4c-809825a7a239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08fd7bd-aad3-4a2c-bd93-664f90311ef7",
        "cursor": {
          "ref": "35d9bd23-9527-408b-9365-6edef20c0814",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "aefe18f5-5918-46e4-a0f8-86e9a3fe6d31"
        },
        "item": {
          "id": "a08fd7bd-aad3-4a2c-bd93-664f90311ef7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7569df5c-bab3-4d16-b519-b833cab8f872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faa7029-2f76-4ceb-98b9-f85356394bbf",
        "cursor": {
          "ref": "b87588d7-8a44-4155-905c-b5695c09ce51",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f330abf5-a35e-43ea-ab92-cfbbc4793efd"
        },
        "item": {
          "id": "6faa7029-2f76-4ceb-98b9-f85356394bbf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7158d002-affe-4d81-a0dc-76982c5bf30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67706cbc-74ca-44d3-aa63-5b0bcadd3337",
        "cursor": {
          "ref": "d920abdf-ca07-4171-85e2-87b625a9260f",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9eb6500f-5d70-409d-9da9-6b3ff05ad857"
        },
        "item": {
          "id": "67706cbc-74ca-44d3-aa63-5b0bcadd3337",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "39dc010a-2f23-4487-8f60-838d6424603a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252cad28-5d86-4a30-b1a3-c0c251cc71b8",
        "cursor": {
          "ref": "c108087e-60f7-44c4-b26c-10c329235a38",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5be5b89b-ac65-4eb9-bca3-88034d3a47f2"
        },
        "item": {
          "id": "252cad28-5d86-4a30-b1a3-c0c251cc71b8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fbeaf2db-7431-4572-bb94-a746e54b92b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2b42af-3168-48ae-bd90-2b31e698880c",
        "cursor": {
          "ref": "bf55cc14-7f33-459f-a756-75865fd3a0d9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6f8242e4-eb9b-4ced-9ad1-851d8812ac32"
        },
        "item": {
          "id": "dd2b42af-3168-48ae-bd90-2b31e698880c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "189c3058-ddca-49ea-90e6-69d7b4fca847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9166b33a-1a19-4b67-b43f-c48fa38e83af",
        "cursor": {
          "ref": "72a78fef-b003-4a1a-9312-8af15d6146c5",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "51c4aa87-0ee4-4f51-9971-b34843aca53b"
        },
        "item": {
          "id": "9166b33a-1a19-4b67-b43f-c48fa38e83af",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "33b09ec5-1b21-40fb-be1c-d5a5c9f54417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e325669e-eb59-45c8-b8d8-a0142ed7a67b",
        "cursor": {
          "ref": "9bfff099-b1ca-401c-823b-699e0e18694a",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ddcd909c-a2bc-4cb8-9124-9265da8d9d84"
        },
        "item": {
          "id": "e325669e-eb59-45c8-b8d8-a0142ed7a67b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "25ec77b8-f943-4eae-af41-a8e328db48f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0964f05d-548f-4935-9677-b17cb3d44ff5",
        "cursor": {
          "ref": "c23246c4-7081-47da-a890-c6fae983e62d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "aac7b4fa-8c7f-43a9-96a5-d1ab06bda259"
        },
        "item": {
          "id": "0964f05d-548f-4935-9677-b17cb3d44ff5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0030a839-85aa-486a-b719-8b16ad237e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5e9c17-91a0-408e-a405-4c5d45d72b23",
        "cursor": {
          "ref": "b3a48ee2-c951-4019-850d-06e7560032fc",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e459dc52-57bf-4062-aba1-ba6a42505945"
        },
        "item": {
          "id": "7a5e9c17-91a0-408e-a405-4c5d45d72b23",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "58cebd36-dafc-430a-ba9a-859adcbba0fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873953e5-e73b-4160-8374-1ca319b9e7e1",
        "cursor": {
          "ref": "7f55813c-c5d3-40db-ae7d-7a4441c0862a",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e70b940a-873b-4114-8887-7de8c710b2c8"
        },
        "item": {
          "id": "873953e5-e73b-4160-8374-1ca319b9e7e1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f9889dc0-cc60-4411-81d6-f3da5e585b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7240c267-a4f7-4057-ba52-0a2502fd3b8e",
        "cursor": {
          "ref": "f7be936f-3806-4812-81c8-b71621ac7255",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "26457a6b-78b3-44f1-911d-46e5bcea2392"
        },
        "item": {
          "id": "7240c267-a4f7-4057-ba52-0a2502fd3b8e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "db22b279-549b-4687-b73d-d94d63b5b42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee77518-df40-47d0-8631-6e6fdb1901e9",
        "cursor": {
          "ref": "15cbbd26-5e54-440c-9681-89f9d4f985e0",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5093fa98-a28d-4020-a04a-cdf545cb97c1"
        },
        "item": {
          "id": "8ee77518-df40-47d0-8631-6e6fdb1901e9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "403eff38-7db6-4a2c-bd87-c9750fd8853c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cc893c-c873-4814-9245-c956faff2226",
        "cursor": {
          "ref": "227a608a-85f0-4510-9f03-2da6058a0cc8",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dc641886-6cb1-407b-bedb-1076538ab5a9"
        },
        "item": {
          "id": "38cc893c-c873-4814-9245-c956faff2226",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "187141f7-7e06-4516-9c93-6bb3e77a3c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9965a7a-4541-4c6b-ad59-e395f9ce1029",
        "cursor": {
          "ref": "11b9a1ce-dde2-40a3-ad36-986005b8b84d",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9cd8c4ef-aef9-4779-a4b0-d2f29d0745b8"
        },
        "item": {
          "id": "a9965a7a-4541-4c6b-ad59-e395f9ce1029",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a8b171e5-60fd-4250-8592-1839f0fefe05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd67a6fb-0f9d-4fef-b2d3-9910e421274b",
        "cursor": {
          "ref": "a70957ff-0ea0-4eb5-a691-c8fd29e3cba1",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8c427155-3e71-41f6-9a6c-345304e2e88d"
        },
        "item": {
          "id": "bd67a6fb-0f9d-4fef-b2d3-9910e421274b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0d30b7ed-df32-48f8-b758-111bb69b39dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108cc12f-0331-4bd9-bdda-467a1243000c",
        "cursor": {
          "ref": "c4f55978-ef59-4d8f-889d-dba4bc56a325",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "088a1bcc-1e1a-4506-99c3-7071883a9269"
        },
        "item": {
          "id": "108cc12f-0331-4bd9-bdda-467a1243000c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ce3d1140-a749-487f-8ff7-a6327365f7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b3a61f-da06-4d35-b5ee-593724547cb2",
        "cursor": {
          "ref": "7107caf7-e146-4d8c-beec-d04fc5e7cdac",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "398240d9-cab7-4428-b911-54fac9d25389"
        },
        "item": {
          "id": "29b3a61f-da06-4d35-b5ee-593724547cb2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a01c3f8b-340c-48ba-af99-530a012b6f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa193586-fb0f-462a-bf81-94a9790c1578",
        "cursor": {
          "ref": "ff8dfc56-20fd-4840-af16-fc22d5d739fe",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4f41969d-9281-493f-a636-fdd06379ccc4"
        },
        "item": {
          "id": "fa193586-fb0f-462a-bf81-94a9790c1578",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "74f568f1-4444-430a-9c15-dcff97aae2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e826d5-09dd-43c7-ba0e-ef60ae64ce22",
        "cursor": {
          "ref": "7fc4045f-e1ca-447b-8995-9c2a838b4538",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "41746868-2cae-4c43-83b8-3d9ac768064f"
        },
        "item": {
          "id": "30e826d5-09dd-43c7-ba0e-ef60ae64ce22",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c28910ac-655e-48d2-9a6a-30ecd7603b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192b3963-7ccf-4b8d-9887-407602ea35d6",
        "cursor": {
          "ref": "a972c46f-b6a7-400e-ae22-19f8f106ac3b",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "427403d8-e946-4279-a003-bba4cbeaf432"
        },
        "item": {
          "id": "192b3963-7ccf-4b8d-9887-407602ea35d6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ede145f2-14f0-4513-a48c-7e42aac9814e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3f45a2-eac9-4523-a122-e060def74d6f",
        "cursor": {
          "ref": "68bc0941-b712-4392-b07f-6005148fecb3",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fa1ee1c6-7f39-4e2f-b461-b5978896495b"
        },
        "item": {
          "id": "8d3f45a2-eac9-4523-a122-e060def74d6f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "481e4d53-5d89-48b8-83bc-765ba00e0a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51699746-87dc-4b4c-b9a2-9630942cc656",
        "cursor": {
          "ref": "1046d76a-170b-4b6b-b37e-2103cf765490",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b28b74e8-b5b9-4422-903d-9a6366831d2d"
        },
        "item": {
          "id": "51699746-87dc-4b4c-b9a2-9630942cc656",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a5855c8e-2edc-4900-bc06-6c8814984569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc7dbff-eecc-4942-9019-ec72c725eee7",
        "cursor": {
          "ref": "6ee6f6f0-88fd-44c6-8c9c-172931b9c0cb",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9a4a5229-b467-48ea-99d1-3b13a04fbccd"
        },
        "item": {
          "id": "6bc7dbff-eecc-4942-9019-ec72c725eee7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "88554e51-138f-42c1-9972-ce9b0b231df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6770cb-72ad-4383-8901-e14c51e4e8c1",
        "cursor": {
          "ref": "af8ec184-579c-46cd-841e-02f7be4ce086",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1ffe8a64-d257-4ac8-b338-5cddb2636116"
        },
        "item": {
          "id": "2c6770cb-72ad-4383-8901-e14c51e4e8c1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7b095123-3e4c-4474-a717-c395a36a0e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837f8e68-e3d5-4ee2-b7e8-68a8e997728e",
        "cursor": {
          "ref": "bf19353a-99e7-43ba-86fa-f5715940f00b",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "08d86c2c-7ee8-40c8-8b35-730aa3a875fa"
        },
        "item": {
          "id": "837f8e68-e3d5-4ee2-b7e8-68a8e997728e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f89de535-942a-4ff8-9b49-1773d2a1fa9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076a0b08-ff75-4a02-b7c4-b342b5e641f7",
        "cursor": {
          "ref": "907cebdc-0a5a-4166-8d1f-4c8bc39f359e",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6e204b1b-24d1-494b-8a16-bbba57a17402"
        },
        "item": {
          "id": "076a0b08-ff75-4a02-b7c4-b342b5e641f7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dc7b8101-a7b6-4471-aee8-09e463cf6e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8252caa-5753-4a4a-8e47-fbca983765af",
        "cursor": {
          "ref": "cd2dc221-89c4-4e57-b9df-2cc0edfca1df",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "851c7ca5-7041-4d01-a09d-88fb807cd68d"
        },
        "item": {
          "id": "a8252caa-5753-4a4a-8e47-fbca983765af",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9b0d5580-2530-409d-9d5f-940b73facf88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc1a4a6-d092-4a95-aec1-456229c4a8f0",
        "cursor": {
          "ref": "3092c61f-744b-4c74-9163-6f146379925c",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f848aa92-5c5f-4ae3-83f9-1213a65b8900"
        },
        "item": {
          "id": "ccc1a4a6-d092-4a95-aec1-456229c4a8f0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "22f31112-56d7-42ff-84d4-07d9cbbab1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e378ddd5-e709-46fa-b1fd-4b6b865865ba",
        "cursor": {
          "ref": "d9672efe-ce5d-4ad6-a95b-f73c23e95c82",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f87584db-8252-4062-be61-5e4e249e3a1b"
        },
        "item": {
          "id": "e378ddd5-e709-46fa-b1fd-4b6b865865ba",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a483b47e-a776-4148-9e58-c583a0b61992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e686f9d-5606-48db-82a1-21e35d857ea3",
        "cursor": {
          "ref": "f5bfb1e6-007b-4602-bd11-e15644ffdb93",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0cdf3b33-76d8-4199-abf8-e6fc7172d90f"
        },
        "item": {
          "id": "2e686f9d-5606-48db-82a1-21e35d857ea3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0f36a92a-b61b-4dd9-a830-b709b4a44207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3da6169-68d9-45e5-9019-0485ed0ba8ca",
        "cursor": {
          "ref": "83d603cc-4e5a-4ba3-a949-0933f34af94e",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bfc1e262-a31e-4eae-9ca9-461b355410ce"
        },
        "item": {
          "id": "d3da6169-68d9-45e5-9019-0485ed0ba8ca",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6f637857-3627-4ce6-ae6c-b41a29b2e8ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818970f5-bf67-465e-b5d5-75e77b10183d",
        "cursor": {
          "ref": "eb8558a2-7f8b-44b0-bbbb-2f37107d9df7",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ffe3f4ae-def2-4cd4-8114-75f5200a0c47"
        },
        "item": {
          "id": "818970f5-bf67-465e-b5d5-75e77b10183d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "11e7ee21-eb40-4113-be88-2c8c4d21a099",
          "status": "Created",
          "code": 201,
          "responseTime": 1086,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de41ba6-e358-4bc1-b99e-b2a4cbdf13ee",
        "cursor": {
          "ref": "6871ea36-acaa-4aa4-a593-949737c01d3f",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2dfa7b40-ff4f-44dc-9535-2a0d3892d196"
        },
        "item": {
          "id": "1de41ba6-e358-4bc1-b99e-b2a4cbdf13ee",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "aba3d15c-5477-49fd-9b14-55e8fe692119",
          "status": "Created",
          "code": 201,
          "responseTime": 1038,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c453fe35-aaba-4304-9349-928338cb8700",
        "cursor": {
          "ref": "74915181-f468-49e7-9dc6-b95e5b460810",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b9514411-5a5d-4f09-84f2-3ca51f34cf37"
        },
        "item": {
          "id": "c453fe35-aaba-4304-9349-928338cb8700",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0ff22270-7faa-43fe-81b7-e33c248c768a",
          "status": "Created",
          "code": 201,
          "responseTime": 1109,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28828d3-5c8e-43e4-95b4-e59bb470f0ac",
        "cursor": {
          "ref": "29872ed7-a732-43ab-b4b5-2bfb7fadf55c",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "373d4190-9579-4659-8720-8ce3ed1f2a39"
        },
        "item": {
          "id": "b28828d3-5c8e-43e4-95b4-e59bb470f0ac",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bdb73ed1-7b1f-4427-a6a6-e4404813ee21",
          "status": "Created",
          "code": 201,
          "responseTime": 1000,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6c4f21-7155-49e9-afca-ecc83033720e",
        "cursor": {
          "ref": "ac198d64-79d9-4900-8b77-9b8612e9873c",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "15f93fc5-0fce-416b-933e-53791ae02136"
        },
        "item": {
          "id": "bc6c4f21-7155-49e9-afca-ecc83033720e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d439a4b3-89a0-431a-897c-9d6da1bd8144",
          "status": "Created",
          "code": 201,
          "responseTime": 1010,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "489c1e9f-686a-4e44-92d8-06439108382d",
        "cursor": {
          "ref": "b3cb64c7-b86d-4688-b259-1aa526a3bfa9",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "af90e75b-81fb-47f0-b7c8-69da7a0f9c57"
        },
        "item": {
          "id": "489c1e9f-686a-4e44-92d8-06439108382d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "771341d8-ad3c-44f2-a804-b184c38d62f9",
          "status": "Created",
          "code": 201,
          "responseTime": 1483,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a2d793-e628-4e54-acc1-03e7d33810e3",
        "cursor": {
          "ref": "c522845a-e67e-499f-a78d-41eea18429aa",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "01f9afa5-b1a8-461d-9cc1-11a5e9c56fef"
        },
        "item": {
          "id": "e4a2d793-e628-4e54-acc1-03e7d33810e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "88c56306-63cc-438e-8e4a-afef1a71c6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a9fb29-5d62-4f62-a1bd-509d72a3812d",
        "cursor": {
          "ref": "bcd522a7-51f1-4fe7-872f-2ea71f33a776",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0b2666ff-cf25-4f79-8f30-78b766fc66b5"
        },
        "item": {
          "id": "13a9fb29-5d62-4f62-a1bd-509d72a3812d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "eae69548-940d-4416-92a5-1604045826da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7a0474-c5d6-4b95-b171-d45217178224",
        "cursor": {
          "ref": "8db80719-f3e1-4ba8-b8a8-2612bd0b17cc",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7f85e0bb-14a4-4334-b8ae-d2aacfde832f"
        },
        "item": {
          "id": "fa7a0474-c5d6-4b95-b171-d45217178224",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ac6d6c23-ed65-4c80-874f-84a528109d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b0eab1-0722-4c23-a7da-68584154ddc4",
        "cursor": {
          "ref": "1a15378a-a6fc-47c7-b5dc-3543e4392538",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dad6b25a-2727-4dcd-889d-bfb15078aad8"
        },
        "item": {
          "id": "b1b0eab1-0722-4c23-a7da-68584154ddc4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "809891b1-9d2a-496f-947e-df1d0e5c691b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e15de15-2c48-4fc6-a6bd-f783b78ae316",
        "cursor": {
          "ref": "8d1b3edd-4493-49e1-aa43-9bbfc2a98c41",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c7b126d3-87dc-4430-abc8-e8bd4881d8cb"
        },
        "item": {
          "id": "6e15de15-2c48-4fc6-a6bd-f783b78ae316",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ef0eeb2a-56f3-46a6-86e7-4ef6a0224573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1643f4b7-e1ff-4a11-af7f-b5b9935d07c8",
        "cursor": {
          "ref": "fed7df08-2cd1-442a-aee7-c86fb09d7bae",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4704a2bc-93ba-4333-872a-50fc8fb87d47"
        },
        "item": {
          "id": "1643f4b7-e1ff-4a11-af7f-b5b9935d07c8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "74a7b187-cdf3-49cf-9534-2929813c837c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bbb4ff-31ed-4a83-adc4-65c37596d918",
        "cursor": {
          "ref": "0ae97648-5716-4c5e-89c1-0077a14374af",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6d70f86a-4971-4c02-88cd-073e30222cad"
        },
        "item": {
          "id": "f0bbb4ff-31ed-4a83-adc4-65c37596d918",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "21c87146-8d2a-44de-a77a-a2748ad95a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9387981-0365-44e4-9bce-2f8256b61a54",
        "cursor": {
          "ref": "ba066993-06aa-4cb0-9ac8-f3ca4d922147",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "648f132a-a731-4967-a350-e4930196975b"
        },
        "item": {
          "id": "f9387981-0365-44e4-9bce-2f8256b61a54",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "650ac4f9-c72d-49cd-a70e-4553b5bb980a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f899496-8cce-4f18-b18f-4d7e9924f3e0",
        "cursor": {
          "ref": "81240dfa-00e6-443d-bf2f-a9e00b116627",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a9791347-94b1-478b-a2bd-d7544c9a81fe"
        },
        "item": {
          "id": "0f899496-8cce-4f18-b18f-4d7e9924f3e0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "10bf0d89-b299-4768-ae3c-f05f8283d537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2446026f-6331-4bae-ae76-1ff54242cb92",
        "cursor": {
          "ref": "eec15969-e526-4a60-9cd4-5a7c2ae04145",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "eca3c129-8558-494f-9c66-e38906b492ee"
        },
        "item": {
          "id": "2446026f-6331-4bae-ae76-1ff54242cb92",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "88019033-fbf3-4ef0-ba28-b4794bba0153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34adae2-8faa-4521-93e6-a2c7b29a9f96",
        "cursor": {
          "ref": "f868f197-a711-4c19-8c1b-f7877a9e3bb7",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4c6698cf-42b9-4ae1-a943-bf27f694a5a0"
        },
        "item": {
          "id": "d34adae2-8faa-4521-93e6-a2c7b29a9f96",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1e84ea8f-1b85-4c36-8296-e0c072f42042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93ef471-04f3-4b79-9dd3-6806cadbd0c3",
        "cursor": {
          "ref": "3ed7c887-180a-464e-9163-65ac86388269",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "25cce83e-feb1-4260-ada6-dcabdb91f48e"
        },
        "item": {
          "id": "f93ef471-04f3-4b79-9dd3-6806cadbd0c3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a0a0406d-a3c9-477e-9a5e-72d0edcadcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1256897b-1be8-48cc-aace-6461b542d7f1",
        "cursor": {
          "ref": "b75cbf2a-4eb0-4583-9d6e-eb50249cd94a",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f14bc771-baf3-4b8c-81ce-f95cbccff7b4"
        },
        "item": {
          "id": "1256897b-1be8-48cc-aace-6461b542d7f1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8a02272f-ae4c-449e-b5c8-789f8ad5460b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd911227-be26-4700-a8a1-e0ac3a2c3c25",
        "cursor": {
          "ref": "ec393921-f596-4c5f-9c64-46edb8ab4e45",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bef3eebf-53b3-429e-92dd-4bf9813d8a8f"
        },
        "item": {
          "id": "fd911227-be26-4700-a8a1-e0ac3a2c3c25",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "eb4c63fc-41bb-4625-b1a5-71d12c8cbf2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5afbd21-d585-484e-8ae7-ee161b7bbe1f",
        "cursor": {
          "ref": "f27f5258-0c07-4aad-8e06-38a7387b93f5",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3e9197b7-7cb5-42a3-8b17-0d2d98225ec3"
        },
        "item": {
          "id": "c5afbd21-d585-484e-8ae7-ee161b7bbe1f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ca6504a1-3fb1-4714-a1b9-17d1165774f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13f5f6a-677e-4872-a69b-99f252e663dd",
        "cursor": {
          "ref": "1ad97af2-5f08-408f-a355-0756f68d7e0d",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a77aadfe-2c57-453d-b5a3-05cd1af7dccd"
        },
        "item": {
          "id": "b13f5f6a-677e-4872-a69b-99f252e663dd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c8510ab6-dd37-4aa7-937a-4c97c226ba1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1daa713-081e-4859-84ec-04d4e52e1c20",
        "cursor": {
          "ref": "fcc5643f-d19d-451f-9373-aec09248f325",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "03e6a031-48c2-4c9f-a485-582e84c1a351"
        },
        "item": {
          "id": "f1daa713-081e-4859-84ec-04d4e52e1c20",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8f35fe50-b76b-44aa-bb55-328dccc3d511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfde456b-97f2-45b8-bded-72b4654c31ec",
        "cursor": {
          "ref": "4847070b-8a08-4fe4-ba3a-58ca2dfff8dc",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "27f135cc-ecf8-4301-ba36-47abaac777fe"
        },
        "item": {
          "id": "dfde456b-97f2-45b8-bded-72b4654c31ec",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8b9f6421-14bd-4668-a7d9-151086c473fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270c4b9e-d8d1-41fe-bf70-d21d566a19ad",
        "cursor": {
          "ref": "49ea13d5-846b-4d9a-b13f-f7da02698439",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "53d41d04-dcb4-483f-9137-81cc0b03a831"
        },
        "item": {
          "id": "270c4b9e-d8d1-41fe-bf70-d21d566a19ad",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2e440c93-5cbc-4f2e-90fc-06e3938ac0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195608a9-fb6e-4ba2-8c44-b0d20e5bdafd",
        "cursor": {
          "ref": "9b19716b-df61-40cf-92cd-f1e0d392ac71",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6ae61f0d-566b-4821-8c53-bdcb9a6ac064"
        },
        "item": {
          "id": "195608a9-fb6e-4ba2-8c44-b0d20e5bdafd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9bfefa14-b0fa-4106-863d-f3ce20382fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3c8283-596b-45c4-b7b5-a90e7e0416b6",
        "cursor": {
          "ref": "5d9bf75b-ec16-4e45-8933-2b1882ac8b58",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "61517968-e431-4f84-a2fb-43decb056c40"
        },
        "item": {
          "id": "9c3c8283-596b-45c4-b7b5-a90e7e0416b6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c64bbb86-fd18-45e7-9a9d-9e2ad0179865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490f6788-65ea-414e-971b-81c77264f5c1",
        "cursor": {
          "ref": "c2e92713-1b0e-45a8-9fee-a356ede5e1b7",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a2af355e-fd30-430a-b2ea-397ef4938134"
        },
        "item": {
          "id": "490f6788-65ea-414e-971b-81c77264f5c1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "48822ca7-54d6-4d7b-94bc-43e2c1f6c9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f57119-dbab-4acb-a590-14cffae2cce9",
        "cursor": {
          "ref": "0cb5f700-0b07-407d-a882-febf267d334f",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "512d705d-826e-4571-9515-486ab3b88670"
        },
        "item": {
          "id": "f8f57119-dbab-4acb-a590-14cffae2cce9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "de01bee4-c85e-4776-9188-5d8070a1133d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3be81cc-63b3-4f4c-856a-18864d3b25db",
        "cursor": {
          "ref": "2829faa5-5f10-4e44-9238-9fad1d9e537d",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ca95d943-db77-4fd4-9b5c-2092d23a82b4"
        },
        "item": {
          "id": "f3be81cc-63b3-4f4c-856a-18864d3b25db",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e3c4f356-9f94-4ed5-b207-d8335136fb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79a996e-c2cc-4f4b-9638-edfaee5ca21d",
        "cursor": {
          "ref": "0c747218-7a2f-49d4-b529-dbd68b877501",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e77b2e80-4008-483c-a4ed-f718e7d47422"
        },
        "item": {
          "id": "e79a996e-c2cc-4f4b-9638-edfaee5ca21d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "448e2340-c600-4f46-9890-17951a304322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a1407c-dd07-42b9-b8c3-8d6cd7803b1f",
        "cursor": {
          "ref": "05ce4816-9148-4a46-8730-da5cc2fce19b",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "82f1487d-ca74-43ef-8649-8b8efec0a484"
        },
        "item": {
          "id": "e5a1407c-dd07-42b9-b8c3-8d6cd7803b1f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "25f71df8-9f89-4630-896f-8cb457e7451e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1e0c11-1edb-4ca1-8dc9-44fb270c6283",
        "cursor": {
          "ref": "ee7af797-384f-4b5c-b205-a8d090ddef4c",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "41698ab1-9e8e-4588-8515-1cf5a048a697"
        },
        "item": {
          "id": "0d1e0c11-1edb-4ca1-8dc9-44fb270c6283",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4d284f37-11c3-4242-8c38-d44df0eaff8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d2954b-8a34-49df-9d13-0556e4b24129",
        "cursor": {
          "ref": "75ee9b9d-76c6-478c-8a92-b80e3165bb52",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "817aaf67-8d3a-490f-acb1-71fb7c181d75"
        },
        "item": {
          "id": "a7d2954b-8a34-49df-9d13-0556e4b24129",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "671e844a-9dd5-46f1-bea3-6362d4bfd635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7d0cb0-bf5c-4fa6-b20f-ceff220a8587",
        "cursor": {
          "ref": "bc8be0b9-0ae3-49ec-9401-35249066d09e",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7b16ff27-0489-4ed6-9f54-2cddbb523f98"
        },
        "item": {
          "id": "ec7d0cb0-bf5c-4fa6-b20f-ceff220a8587",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "05c80101-3037-402e-bd4f-2fee9cce83c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18128cae-3901-43bc-8cc4-baa4ef2166b1",
        "cursor": {
          "ref": "730402ea-91fa-4c1a-8170-551e3e5c4ac0",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "835fd596-6605-44d9-875b-36eb454d3d03"
        },
        "item": {
          "id": "18128cae-3901-43bc-8cc4-baa4ef2166b1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "738e3176-6109-4d6d-bd55-6cf2eab8b402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e387f5ae-a5d1-40bc-877d-44b59c6f7c3f",
        "cursor": {
          "ref": "f7012d2c-2761-4fa6-aee5-27b696d1a2e2",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d60b86fd-a86f-48bc-817a-4c7d0f56faee"
        },
        "item": {
          "id": "e387f5ae-a5d1-40bc-877d-44b59c6f7c3f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6cf4672a-bf9c-4cfe-9698-29483a20a348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3402c4-529f-4847-9237-0e1268a7e7a6",
        "cursor": {
          "ref": "51810234-fa8b-496b-a953-505e2c4e50ba",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ad6eb2c4-e41a-47dd-bdf3-e55b71a5d62a"
        },
        "item": {
          "id": "9c3402c4-529f-4847-9237-0e1268a7e7a6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0394f32f-c3ea-4fa7-914d-f23545149fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1f7d8c-9c23-41b4-9ee4-6c800214c768",
        "cursor": {
          "ref": "d7d2fecc-b8fa-45f2-a1ae-ea3553a57d07",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "98c54f78-4e64-4899-9c6b-ce6ade9af01e"
        },
        "item": {
          "id": "ce1f7d8c-9c23-41b4-9ee4-6c800214c768",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4d4b7274-14b4-4606-b19d-57062ea59bff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4ecfe3-e1d3-416d-a173-d26e5e3b1313",
        "cursor": {
          "ref": "74ec6bb2-f818-47bc-8c4c-8c667d8aec9f",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8d16fc5b-4ed4-4098-ba54-e74eb6efc781"
        },
        "item": {
          "id": "9c4ecfe3-e1d3-416d-a173-d26e5e3b1313",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "354cda2c-fe02-47ca-b236-735d6a949177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e77342c-bfdd-4da6-bf13-f362c0587340",
        "cursor": {
          "ref": "f0a275e7-9295-464e-993f-30cacd9586fd",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b1b92d6f-0cba-4ec8-a3ec-1db664c9b11e"
        },
        "item": {
          "id": "5e77342c-bfdd-4da6-bf13-f362c0587340",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f34968d9-e1dd-4ed2-b930-3170a3451ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d58151f-c774-440a-9e4d-42910d21be7e",
        "cursor": {
          "ref": "4cd26b89-1881-4d7f-bf44-0ccac992a73b",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9755caea-cb0f-488a-ac92-9c890088b566"
        },
        "item": {
          "id": "9d58151f-c774-440a-9e4d-42910d21be7e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1a08af3e-6321-47a4-86b5-edd821f4436f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fa08a5-8193-412b-9c48-3a570e687059",
        "cursor": {
          "ref": "d15c313c-db18-441e-bd32-f510b608e79a",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6592cdb4-9807-4a20-898a-6812b82761d2"
        },
        "item": {
          "id": "28fa08a5-8193-412b-9c48-3a570e687059",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b3c5e5b9-2b07-4fc3-8cb3-087358971c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0642e287-ca4b-4285-b323-9eb36feb8180",
        "cursor": {
          "ref": "96f0bc44-07e9-4318-a9f1-f06402ebdb7d",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3df584f6-cc33-40f1-9c74-f47e675f3912"
        },
        "item": {
          "id": "0642e287-ca4b-4285-b323-9eb36feb8180",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5f4c40bb-e0b0-4017-baef-b3c094b2a162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83e5c17-a907-4e63-bc18-17215f13fabc",
        "cursor": {
          "ref": "ccd6a65e-49bc-4413-adf7-63c6db722b8e",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fb85f0bd-cf40-48db-8327-b3e9329137ef"
        },
        "item": {
          "id": "e83e5c17-a907-4e63-bc18-17215f13fabc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "db75e16f-01e0-48b3-a741-17365ad8031e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59375ca3-d078-420b-9e76-daaf90bcbeaa",
        "cursor": {
          "ref": "a189368f-0d75-4e46-80af-9d4657e1d46f",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d74cf011-0e5f-4b8e-aaef-cc05fb334dfa"
        },
        "item": {
          "id": "59375ca3-d078-420b-9e76-daaf90bcbeaa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bd83ba25-808e-4384-a43b-018ea967ca2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbf9cc1-7f89-44da-984e-efe402847fcb",
        "cursor": {
          "ref": "71e9d3ad-fbb3-4727-bb4a-1286d1d0380c",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7ab66af0-d6e5-4e91-9bed-27cc6f5857b5"
        },
        "item": {
          "id": "6dbf9cc1-7f89-44da-984e-efe402847fcb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3109c161-db73-490a-92d0-90adffa99227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fb8307-c6de-468e-90b7-b2c1333bc494",
        "cursor": {
          "ref": "b7ebb0ed-151e-42f6-b91d-b88642c7dc72",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e8d5f899-7332-4e89-91ab-ff2c9e5fce5e"
        },
        "item": {
          "id": "96fb8307-c6de-468e-90b7-b2c1333bc494",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e666b215-7243-4ac6-b210-e36aca1a6208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b9dab1-8eb9-436e-b402-fea170902232",
        "cursor": {
          "ref": "4c161fbf-e25e-49b6-886b-298dd5ab190c",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f2319ae2-5c38-486f-8970-81f68ecd2b13"
        },
        "item": {
          "id": "50b9dab1-8eb9-436e-b402-fea170902232",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "16e70867-e81c-4671-abbd-e3b13701acda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426f7580-5283-44d8-9a73-c173dc76d905",
        "cursor": {
          "ref": "efe58d13-f9b4-4844-aa56-26541220e242",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bd72a287-c190-460f-8b5c-3c2c8d37bf11"
        },
        "item": {
          "id": "426f7580-5283-44d8-9a73-c173dc76d905",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "54a58a46-6b74-4f53-9741-477faca15d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3baaed21-4f88-449b-8b36-5dbe421800d7",
        "cursor": {
          "ref": "505397fb-4080-430c-ad12-6d45323b63e0",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "eee838d7-1419-41d2-9644-fbbf160fad5c"
        },
        "item": {
          "id": "3baaed21-4f88-449b-8b36-5dbe421800d7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "40dd97ab-818c-48a1-919e-d5edfca2dbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbafaf8-b252-44b2-88a5-7c45f8bd53d9",
        "cursor": {
          "ref": "50096247-4bad-4fab-a98c-752862c94605",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "909a51bc-11b9-42f8-9201-14231557be4c"
        },
        "item": {
          "id": "0fbafaf8-b252-44b2-88a5-7c45f8bd53d9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1ff29bc8-e291-453b-867f-fe12460feafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18272a38-c972-4991-a38a-f9ab93e8998d",
        "cursor": {
          "ref": "d040099d-90e0-4135-9593-792dbb6b435d",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "40e308db-e988-41c4-9f19-2f9a7e684558"
        },
        "item": {
          "id": "18272a38-c972-4991-a38a-f9ab93e8998d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "938c6e0b-a64e-4b48-b3c8-73200923437c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9738a579-c263-4a22-babb-c575d7d82a65",
        "cursor": {
          "ref": "a836475f-b699-4060-9163-feff2ccab136",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bba4cbb3-2eb9-4792-8c78-af7e2ed5f339"
        },
        "item": {
          "id": "9738a579-c263-4a22-babb-c575d7d82a65",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6db484c0-0fc0-4207-9011-caa3d117787b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a043c4ed-a056-4505-8e71-eafde1062198",
        "cursor": {
          "ref": "7ecaccea-9a84-48f1-aaa7-2d74a349339d",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "48ba8335-95e5-4b48-a723-59787d261db2"
        },
        "item": {
          "id": "a043c4ed-a056-4505-8e71-eafde1062198",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0082a112-33f4-4e9a-a52b-8ca78d2fae37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8baa8c00-7161-41e2-9af2-d8de6bda3c90",
        "cursor": {
          "ref": "646d4f18-e71f-4053-878b-12341babaa79",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3cc7479f-c909-4550-81f0-f48305a46317"
        },
        "item": {
          "id": "8baa8c00-7161-41e2-9af2-d8de6bda3c90",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f3c656c4-d6ab-4735-a3b8-d4312880e42e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8ba20e-3709-493d-ad11-e3d68cfea5b6",
        "cursor": {
          "ref": "5f80b7e2-07e1-44f8-8de8-8c326f1ac89d",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1f287ae4-8983-4e16-8bc1-32919eb42c9c"
        },
        "item": {
          "id": "ad8ba20e-3709-493d-ad11-e3d68cfea5b6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f84607e1-7d06-4d81-831e-aafba35bfc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faba480e-fe0f-4680-a12d-186c5e6aa715",
        "cursor": {
          "ref": "0a6ffc30-9b19-4e96-9081-c2a272b32d7f",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "be598f8e-8dce-4d70-ad88-7720682b685f"
        },
        "item": {
          "id": "faba480e-fe0f-4680-a12d-186c5e6aa715",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9e0d07e0-2464-411f-9b48-f0eaa8883a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8779f53c-d559-47d3-9b36-9d722e5d461a",
        "cursor": {
          "ref": "08a7d597-bc3d-4e2e-a0d0-116b8adf4639",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c9a50a68-702a-4d84-b102-4062b6bcbc69"
        },
        "item": {
          "id": "8779f53c-d559-47d3-9b36-9d722e5d461a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "43fad3bc-5b97-4ae7-bf87-f834433cfb6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45e1238-5e05-407f-a8a2-bac079ac5b0e",
        "cursor": {
          "ref": "6b956c7a-0046-4924-a97f-82023b6dfdd3",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "264b0d8b-31a5-4a76-9799-4b35b10728a5"
        },
        "item": {
          "id": "f45e1238-5e05-407f-a8a2-bac079ac5b0e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "997bcb9d-7c27-4e25-b480-b4111fab9b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc7e938-fecc-4011-8456-a234939d16f8",
        "cursor": {
          "ref": "6ecf9966-d73e-4d14-9c48-380826377627",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2691345a-e107-4b76-b518-adcd0d3087c2"
        },
        "item": {
          "id": "6fc7e938-fecc-4011-8456-a234939d16f8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e038a10f-e905-4e34-96bb-a12cc225c48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d2ec34-0dea-4721-9841-976aceb19d9b",
        "cursor": {
          "ref": "4e7b944a-a97b-48cc-a8e3-452fccaeac42",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f3158e51-1b1f-4685-9545-e080a61d8b08"
        },
        "item": {
          "id": "85d2ec34-0dea-4721-9841-976aceb19d9b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cc8928f6-8c6e-4028-bcbf-4644db8b1049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33bffbe5-bf15-4922-801f-4d85dbd5a6bc",
        "cursor": {
          "ref": "79032460-fe81-4f40-97e3-9309185a35b9",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9b668fa5-cb14-46a7-b02a-6900458927a3"
        },
        "item": {
          "id": "33bffbe5-bf15-4922-801f-4d85dbd5a6bc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b4d11864-fa82-4ec6-bac2-b1f11fe81e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18bc9c9-0849-48e8-a5b9-ff4ec340b9c8",
        "cursor": {
          "ref": "48f0147f-5d25-47e2-b5de-476f92b9d41f",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d4a65775-4c12-4333-80de-52ed56534db2"
        },
        "item": {
          "id": "d18bc9c9-0849-48e8-a5b9-ff4ec340b9c8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1d1d39e4-64d2-46ef-aa03-03b7cf985d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05a9db7-0eec-4371-adbb-6070ec0ef373",
        "cursor": {
          "ref": "4c50ca87-7814-48d3-a31e-aafda5eafa8b",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cbf94ac7-822c-44d6-93e2-deb7826759d5"
        },
        "item": {
          "id": "b05a9db7-0eec-4371-adbb-6070ec0ef373",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d835448c-9881-48d5-a84d-71125d131c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd97c31-ca26-487d-843a-cae59ae556c8",
        "cursor": {
          "ref": "67701f53-acd2-4c44-8d8a-ea8141a01b63",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4368a3f1-fa5b-44c9-b97d-1daa49fc4c05"
        },
        "item": {
          "id": "0dd97c31-ca26-487d-843a-cae59ae556c8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4955ee0f-afcc-4718-88a4-2aafef971f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b73044-a67e-4bee-bddc-85dba1f66716",
        "cursor": {
          "ref": "4ae532c3-2037-4cc8-a4d6-eb266e85ac82",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8805d2da-0e46-435b-860c-07297353d873"
        },
        "item": {
          "id": "b2b73044-a67e-4bee-bddc-85dba1f66716",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dfd33638-52b2-45db-a836-4ff53a92d43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4225510-4dda-4012-b288-f4a8f01d4196",
        "cursor": {
          "ref": "717fd0db-7a73-4b10-90e6-06b2abd9cfa3",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2c9ab74d-f867-4462-be56-a2f681427124"
        },
        "item": {
          "id": "e4225510-4dda-4012-b288-f4a8f01d4196",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "24bc606b-71f2-4b2e-ac93-f6598a8d614f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d3e6bd-37cb-4d56-8ccf-85f1f763744b",
        "cursor": {
          "ref": "9bfa8a36-1232-4b0f-bef4-01aed4933303",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "780f0a0b-5f49-4185-9bfb-a3398b787f6a"
        },
        "item": {
          "id": "40d3e6bd-37cb-4d56-8ccf-85f1f763744b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2154aa56-f299-43a9-ac1d-70784929245a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de46ace1-fd6d-400c-ac57-87949b6082de",
        "cursor": {
          "ref": "7d390040-f674-497c-9059-78025cecdf99",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ece74094-bb64-45b1-b565-eaba3127819e"
        },
        "item": {
          "id": "de46ace1-fd6d-400c-ac57-87949b6082de",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "25034a57-0349-48e0-9b89-240a2e34422d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7167075-dffa-43a3-bbaa-202ba5877f31",
        "cursor": {
          "ref": "842edc16-e013-49d7-ba50-1f1f315e35c7",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cc52498f-9a00-4170-95b7-3887662c1fd0"
        },
        "item": {
          "id": "a7167075-dffa-43a3-bbaa-202ba5877f31",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b6b5ca0a-e4a0-459d-848d-cec0f1845e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aaf1f85-85fa-48cf-81aa-9ce2097518fe",
        "cursor": {
          "ref": "bac5c08a-397d-4233-b4b8-1917e513881f",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "592dbb2d-1b61-45e9-897e-eb3c27d1b107"
        },
        "item": {
          "id": "0aaf1f85-85fa-48cf-81aa-9ce2097518fe",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e0b08a95-17eb-4aec-9d84-8bb311a25b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f3c4cb-91e2-485d-977b-48f7ba12916d",
        "cursor": {
          "ref": "dd0beb99-4b9c-4fd9-a042-4e8de83bc3ef",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3bca97ba-c0cc-43ba-9ec4-6a84d359f678"
        },
        "item": {
          "id": "92f3c4cb-91e2-485d-977b-48f7ba12916d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "71033a53-d6ef-4b20-b885-5a0d84b20756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c31297-193a-43f2-a7d0-f6e92b9653d4",
        "cursor": {
          "ref": "20830322-64da-4bce-ad95-562b0db89314",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "989b4c12-eabf-4463-b297-864c64d330b5"
        },
        "item": {
          "id": "41c31297-193a-43f2-a7d0-f6e92b9653d4",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "091e9c56-f535-4ee8-be2a-1051332202e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d44cce8-8bc9-4a50-acce-8bb4ddd781fc",
        "cursor": {
          "ref": "65c1875e-ca17-4b89-a74e-6527d36a3aee",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "395ae658-2372-43c7-9bac-113ee1167e37"
        },
        "item": {
          "id": "9d44cce8-8bc9-4a50-acce-8bb4ddd781fc",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cc469e26-f799-4568-a662-bbb1bff41dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbb2da2-103d-446c-b054-2cd9f16203d6",
        "cursor": {
          "ref": "0dea2af6-c728-485e-bdcb-e5a77ff48261",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ae382588-5a5a-4967-8d92-863fc8daa17e"
        },
        "item": {
          "id": "3cbb2da2-103d-446c-b054-2cd9f16203d6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "49e972ca-3782-439b-b83c-387527639a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41dad93-acb8-46d8-a005-401f25de00a0",
        "cursor": {
          "ref": "60d80378-2e9d-4f9c-af04-c0fa487fba29",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "55c30b95-68be-42fa-980f-3ccacf4c70ad"
        },
        "item": {
          "id": "f41dad93-acb8-46d8-a005-401f25de00a0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "74ee1115-72f4-4bdd-86f1-97f40eb2f70e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dffae3-daa5-47e4-b02a-90323e66c999",
        "cursor": {
          "ref": "0c1f5941-c4fd-47e7-aac1-83c58d799d48",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f847470d-6085-44a8-9d01-eeb1c3458b28"
        },
        "item": {
          "id": "f3dffae3-daa5-47e4-b02a-90323e66c999",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9e7adfff-cf9a-4ef6-ae1a-9670cc112e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf55786-7733-4b9f-9cd1-dcf871411148",
        "cursor": {
          "ref": "da13efb9-a1e3-4ec4-92be-1cad2d9a85b9",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2165df89-7a22-4be4-a853-a74cb268531a"
        },
        "item": {
          "id": "bcf55786-7733-4b9f-9cd1-dcf871411148",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f7cd29fd-8072-4359-9c8e-62989e254335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f9c1e6-b1e5-4218-8c03-fcc6f68111e9",
        "cursor": {
          "ref": "b6ee014e-6718-4d0a-9ad0-8c8d1f087602",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a5907fc4-8b58-4486-b5b3-1446bdeffb0d"
        },
        "item": {
          "id": "e2f9c1e6-b1e5-4218-8c03-fcc6f68111e9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ea7a918a-b123-4ccd-bfd7-131336b147e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d8ba52-089f-4620-9c36-e6144b7877a3",
        "cursor": {
          "ref": "c412b66f-dc82-4923-aacc-44265ac28897",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5067211f-a1ee-4560-a09d-a8c102eb58e4"
        },
        "item": {
          "id": "b4d8ba52-089f-4620-9c36-e6144b7877a3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a7aee6b6-fb72-410a-8891-1128472fe9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecc1f40-8ff6-405e-b27e-3f9d7dac1a41",
        "cursor": {
          "ref": "5c8d0ff6-478a-46ce-98d4-cfad06424468",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f179c08c-8a55-45e8-96a4-6da4d0135e41"
        },
        "item": {
          "id": "eecc1f40-8ff6-405e-b27e-3f9d7dac1a41",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b15c8737-4158-4f43-9816-de750579ff30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858078a6-2a60-4591-a26e-f07e88ddc65a",
        "cursor": {
          "ref": "6f8ec268-7f14-46dc-b026-a935e0f4bfc4",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "21b696ab-5dac-4ca5-894c-1d55755b41c3"
        },
        "item": {
          "id": "858078a6-2a60-4591-a26e-f07e88ddc65a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f6e50948-3089-4939-93d2-da456d86b92c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d512729a-a570-4794-948f-dec4552d2212",
        "cursor": {
          "ref": "acb307a8-d35e-4ff7-bdad-837d327a0685",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f5d07cf6-6894-4b8c-8985-934622423c88"
        },
        "item": {
          "id": "d512729a-a570-4794-948f-dec4552d2212",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f703cd74-a8d9-4562-bbd8-5247666af08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f1df9f-3101-4a6b-b384-d952ca9d3558",
        "cursor": {
          "ref": "0c1f20cf-dc4f-4d41-933b-f60d667dbc08",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ddf34004-b776-4e4e-8297-ee5c838ce9a6"
        },
        "item": {
          "id": "44f1df9f-3101-4a6b-b384-d952ca9d3558",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cd3b5b9e-4b13-476b-bd16-541e9d6c5c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a50c7d7-680d-4444-bab1-4e413409bc21",
        "cursor": {
          "ref": "0e66a1d2-1263-42db-878b-106b63381bbd",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2bb82821-cdad-4833-b9df-0848782b11e1"
        },
        "item": {
          "id": "9a50c7d7-680d-4444-bab1-4e413409bc21",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e8b6411f-6680-4345-9889-e81fb2dd7cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4245439d-b777-48ca-aace-6070b0437568",
        "cursor": {
          "ref": "9681ecb9-a2c8-4610-8b18-bd5bafbe9ae8",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bd0c98e7-13bd-4448-9e50-af9cda5a8d49"
        },
        "item": {
          "id": "4245439d-b777-48ca-aace-6070b0437568",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1b3a096d-c935-4d42-856a-10277aca72a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97eb479f-9b2d-4d4f-b7b9-7ae5678ce88b",
        "cursor": {
          "ref": "38161f6a-e5f5-4746-b304-e162b631a649",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d6435937-f69a-401e-995c-e03cc994c00f"
        },
        "item": {
          "id": "97eb479f-9b2d-4d4f-b7b9-7ae5678ce88b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b7560195-c982-4ede-a029-d53d8b462109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1853bd2-fccb-4c9f-9cd3-914d2846f593",
        "cursor": {
          "ref": "91461c41-d604-430a-bc32-fa78ff2b4ad5",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "34d305f5-2f77-49bf-8fbe-4ed7bf0924e2"
        },
        "item": {
          "id": "b1853bd2-fccb-4c9f-9cd3-914d2846f593",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9b87cf00-b91b-40a9-8489-20ded0a8eb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1e873c-ca20-4fbe-aa3d-242905c09546",
        "cursor": {
          "ref": "71d7c556-ab58-4792-947b-ae3819de9b07",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "46f3cd75-62d9-4d05-b331-d83b1b39f967"
        },
        "item": {
          "id": "de1e873c-ca20-4fbe-aa3d-242905c09546",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "04f408f1-ace8-49fb-8674-79ce10718ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2890fbab-6b5b-49ac-a334-c2b9a20062f8",
        "cursor": {
          "ref": "bb4d3c8f-8610-4db9-aed3-139d6b80bb8c",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ce4e5e16-640b-4312-8c9c-8e841bb9e5be"
        },
        "item": {
          "id": "2890fbab-6b5b-49ac-a334-c2b9a20062f8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bac786d4-6a05-4aeb-8b9f-96882988b098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2f00cb-0c9f-41e0-b284-9101efd89049",
        "cursor": {
          "ref": "5eb91984-6a83-47ab-a5dc-4251d97bf5bf",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3ed4b03e-4623-4744-9f9a-e2e5a00f2e2f"
        },
        "item": {
          "id": "1d2f00cb-0c9f-41e0-b284-9101efd89049",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "20810de6-6ee9-48bf-b0c4-0f7c80dcafd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210d6936-1075-45af-944b-025ab1911dc4",
        "cursor": {
          "ref": "acac7627-62c0-4d58-9665-ae5f1a2e0479",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "12a4a655-e177-4942-83d9-91f550b49a6a"
        },
        "item": {
          "id": "210d6936-1075-45af-944b-025ab1911dc4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0e3f725e-ee09-43de-b929-86e9813c2298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b88d89-dc93-47d8-8126-960795fcbab3",
        "cursor": {
          "ref": "77644ff0-d25d-4bd0-ad7d-71d79d6cf7d8",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "095ea41e-0e73-4b72-b5f4-a0b66a5067ef"
        },
        "item": {
          "id": "52b88d89-dc93-47d8-8126-960795fcbab3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "52d4fe7b-ad83-4729-9c30-ccf7cfbe3cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba38020-3e7f-4fea-b13a-51ca6ff51c31",
        "cursor": {
          "ref": "65624006-4aaf-4334-8a43-ce6ebdf5ee64",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8a9fd8b4-0af2-473d-b23c-561193e49565"
        },
        "item": {
          "id": "9ba38020-3e7f-4fea-b13a-51ca6ff51c31",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b4a652c7-4457-49c1-814f-7c464a203576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad8cfdc-7f38-43bc-9692-ce46599be913",
        "cursor": {
          "ref": "4837663c-c220-4d89-ac7a-5c5d539823ae",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2e8440ff-7d9b-4151-b68e-f47e23f92353"
        },
        "item": {
          "id": "5ad8cfdc-7f38-43bc-9692-ce46599be913",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2515bc9e-06cd-48ae-b078-c48989ed33b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d3f740-2a54-4bc2-af09-68f5f942e740",
        "cursor": {
          "ref": "ebf37ccd-f26b-4e88-a475-2517dfc5ec96",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "984150f1-1051-4cf0-9022-0129d8b2e269"
        },
        "item": {
          "id": "45d3f740-2a54-4bc2-af09-68f5f942e740",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4eb65079-760b-4aaf-9b64-6bc5a70ffb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17010077-80e7-40c7-9bb6-e533fd5f2650",
        "cursor": {
          "ref": "66b7d2d8-ab40-4be2-8a56-f0a32bf8b098",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "93704048-73e1-4b3c-a312-2911526ccd0d"
        },
        "item": {
          "id": "17010077-80e7-40c7-9bb6-e533fd5f2650",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6c9de798-772a-4a2d-95de-f5d4eb7894de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85286cf-53d6-4ea2-8edc-4e172e0b9a6c",
        "cursor": {
          "ref": "c32bcfe6-7052-46df-b6ca-c91285393275",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "824f1809-6828-425e-829e-f23b137db6d4"
        },
        "item": {
          "id": "a85286cf-53d6-4ea2-8edc-4e172e0b9a6c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "45efe277-6301-4420-9ac4-7277ffce49b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24eae070-8e01-4fb4-9315-d416e2ef77e8",
        "cursor": {
          "ref": "04dcc637-bda7-44f9-9b53-f65d7caddd16",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "db86f255-f0a8-49c1-a057-24a4f54b0846"
        },
        "item": {
          "id": "24eae070-8e01-4fb4-9315-d416e2ef77e8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3d30234e-83ea-437d-9ee4-4af56bf2023b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da306cd9-9193-401c-b84d-745a10bc8c3c",
        "cursor": {
          "ref": "e9b3ad36-6543-4a4a-a9c2-83e986bebd7a",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2a270054-fdf2-4560-ba41-8c0e9f5a336e"
        },
        "item": {
          "id": "da306cd9-9193-401c-b84d-745a10bc8c3c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4d31aa51-814b-4d89-98f0-12c88a3aaeeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ead731-a5bd-4167-9d45-b2512b6912f7",
        "cursor": {
          "ref": "13d3aa85-99b4-4b7d-8dc7-0c60eba2dae2",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "965d6f5a-d22e-45c3-b9c0-e8b93e7495c5"
        },
        "item": {
          "id": "c9ead731-a5bd-4167-9d45-b2512b6912f7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "53a2173c-e7e6-4335-8999-d74dcc88613a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966cdd0d-02fd-4d4f-b409-c69cf2045452",
        "cursor": {
          "ref": "3e069ccf-1e66-46e9-bcbb-fb9200fd20c8",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "18823d0e-cd32-440e-8bd8-c89ca1c3ed11"
        },
        "item": {
          "id": "966cdd0d-02fd-4d4f-b409-c69cf2045452",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e61d2631-270d-4d82-ae3f-a90bad588286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7d73cf-987d-41cf-a330-37d2293425f4",
        "cursor": {
          "ref": "dd1086b7-97df-4dae-9689-14c1d21c4cbb",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "68a5a2c7-f584-4702-9d6d-3c962352a5ed"
        },
        "item": {
          "id": "8e7d73cf-987d-41cf-a330-37d2293425f4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3824e509-3760-41ad-b170-131801e2e4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fdc87b-e5d4-4b3a-8d0e-dd489677853e",
        "cursor": {
          "ref": "bf77addb-0c83-4774-b6e0-89c7e8f9b678",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "541aa72f-7664-4fb8-951e-6f370409e293"
        },
        "item": {
          "id": "94fdc87b-e5d4-4b3a-8d0e-dd489677853e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dff40928-f96b-4a78-ac8f-5752da539715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86981518-da94-473b-97e3-4e5f26ba1d7d",
        "cursor": {
          "ref": "aa36a09e-df0c-4fdc-95c0-0518442aac9a",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "251ebd3c-af7d-4ce7-b2ef-9d98caacbfbd"
        },
        "item": {
          "id": "86981518-da94-473b-97e3-4e5f26ba1d7d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f4dfaaba-3eb6-43f0-8b12-7d0b4a53b0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcf8bc8-2e5f-460b-b51d-740b61206785",
        "cursor": {
          "ref": "5b352ea2-0093-4dc5-93d5-77b54342246c",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "44e4a03a-0a29-4ca8-aba0-ce805a2fe50c"
        },
        "item": {
          "id": "9dcf8bc8-2e5f-460b-b51d-740b61206785",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1e85a26d-e5ae-4624-97f0-102213525b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53544783-ac44-4311-8069-63b94f82daa6",
        "cursor": {
          "ref": "26e3215c-8df0-4f89-86b3-4315dacca535",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "682210ff-94ea-48bd-b5aa-c7e8936ea8db"
        },
        "item": {
          "id": "53544783-ac44-4311-8069-63b94f82daa6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c8fd64b5-4403-41ae-a3f4-a8cfde508b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38827e01-bf84-4cac-8bf9-124eaf83e2df",
        "cursor": {
          "ref": "6d0a9b9e-e2ea-452d-b645-6bd3a2afe4ee",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "df1d25b0-fcc2-4205-9e86-6f92de41efc2"
        },
        "item": {
          "id": "38827e01-bf84-4cac-8bf9-124eaf83e2df",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c366d5cc-78c7-4240-b90f-3650dc47d5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc4bae3-84e8-4e59-bfbb-33271715d8a0",
        "cursor": {
          "ref": "146ab9dd-e229-4967-955e-2b4c3ef8cb44",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3ab2e715-243b-4dc9-9252-1634d7c559dc"
        },
        "item": {
          "id": "5dc4bae3-84e8-4e59-bfbb-33271715d8a0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "be95a45e-90c3-4075-896c-8d94b4cebaa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd5678f-3595-4ff8-b064-a64e9fcec5ed",
        "cursor": {
          "ref": "275109f9-e41e-415b-9b64-35293570cd6a",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c49d31a9-2dd2-4360-b79e-b01161a7e8d0"
        },
        "item": {
          "id": "4dd5678f-3595-4ff8-b064-a64e9fcec5ed",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e47c90ba-7a99-4f64-bd2c-3b433e56169d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abdf8c1a-97f1-4c0c-a4cd-87efd865e9e2",
        "cursor": {
          "ref": "66928223-088f-4114-a09c-bb58a84bbbe6",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f2483be2-6aa2-4016-9201-3f2459dc96a5"
        },
        "item": {
          "id": "abdf8c1a-97f1-4c0c-a4cd-87efd865e9e2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a53fbf2c-4ea4-4316-968d-d117dd43e950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33076742-a4ae-4472-aa25-8bfc7d9ef74d",
        "cursor": {
          "ref": "1f9d985d-08a4-4caf-9aae-3a26e744e992",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "05372c80-9214-453d-8101-25f411e3b9ac"
        },
        "item": {
          "id": "33076742-a4ae-4472-aa25-8bfc7d9ef74d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "af28da10-9ae8-4ad7-9db0-831dcb3305fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "dc18ecd4-f301-406f-9731-ca8e87daf91f",
        "cursor": {
          "ref": "b628918a-fc2e-4e9a-a945-f7b8e545d1fc",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "20d63aaa-acf5-48f6-8df7-92bb2b6aae46"
        },
        "item": {
          "id": "dc18ecd4-f301-406f-9731-ca8e87daf91f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d2a3af3e-25ca-4e82-acac-a579734c95b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8ebd827e-fb32-40cc-ae9b-f726ee033902",
        "cursor": {
          "ref": "542dccbe-78f1-41a6-9420-22dcca180d99",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9a3c5e23-e03c-47c0-96f4-4c52d4b3ae57"
        },
        "item": {
          "id": "8ebd827e-fb32-40cc-ae9b-f726ee033902",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "44c2c4df-1517-4ed0-aad5-a51b5f733f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "dc62f5f3-b688-4500-9ae8-40771481db25",
        "cursor": {
          "ref": "a23d4cae-11d6-4b29-9c55-16d367ada5c8",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "058e5326-4611-45a3-98c0-8ea73ab0fb59"
        },
        "item": {
          "id": "dc62f5f3-b688-4500-9ae8-40771481db25",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "10581a29-e8a2-413e-8c50-76033d1a52b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0126a053-1163-4a93-ba30-02112bf1bfe0",
        "cursor": {
          "ref": "b4e57e59-3a70-40a0-b468-6e4cf852c176",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4309ea05-3899-4039-938b-5bb24c0e149e"
        },
        "item": {
          "id": "0126a053-1163-4a93-ba30-02112bf1bfe0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3989c2bf-cb12-41c7-8b9e-6d880a48f584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "d6c88aa4-0509-4ea0-88c9-132fea8b29b0",
        "cursor": {
          "ref": "71b5fbc3-7420-46c2-8bc5-c752c376ce30",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "74976c74-0bdf-4858-ba85-5a28b6cb229a"
        },
        "item": {
          "id": "d6c88aa4-0509-4ea0-88c9-132fea8b29b0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "005728de-f930-469f-bcd1-6b42d5c67db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 864,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8418c343-1f23-426b-bc64-92560ec7aef6",
        "cursor": {
          "ref": "ddbbbdb4-4f33-46e4-9288-c5bd74e013d6",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "25a3620e-266f-46b5-99ce-09b075d7e94c"
        },
        "item": {
          "id": "8418c343-1f23-426b-bc64-92560ec7aef6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "63fc5d4f-9f61-479b-ad21-c227ae1df056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4414a17d-b93d-4878-8df5-bf831c0d7f48",
        "cursor": {
          "ref": "c17267cb-44e2-4d02-b049-4adecd32282d",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d1a9d92a-49dd-4227-b728-721233405269"
        },
        "item": {
          "id": "4414a17d-b93d-4878-8df5-bf831c0d7f48",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "11322633-3a35-497f-8bc3-3adef65888e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "b6ab38a9-f699-450a-a21c-300b1de4e461",
        "cursor": {
          "ref": "20f8b940-d327-4c11-b508-0a33d8ede530",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6bd651e5-0e28-4555-b439-ed29f3e49b6d"
        },
        "item": {
          "id": "b6ab38a9-f699-450a-a21c-300b1de4e461",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bc67ea79-bda1-48c7-8e50-5c53ec3dbbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4048b7c0-7e8e-4b56-8b65-82ec00799daa",
        "cursor": {
          "ref": "c8737e40-88ae-4b03-a981-7ec241cf7d2d",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0d9b0f4f-b76e-4f2e-9dfd-14a64fb5f399"
        },
        "item": {
          "id": "4048b7c0-7e8e-4b56-8b65-82ec00799daa",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a6e21d1f-46f7-4976-a2c2-ec97a5b24bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0e2b0a8a-e0ed-4902-995f-14d112591c63",
        "cursor": {
          "ref": "e0267dcc-3329-4e2f-8724-b3fd7fc8b9af",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8489e1a7-f6da-4d3e-a747-f54566466e2e"
        },
        "item": {
          "id": "0e2b0a8a-e0ed-4902-995f-14d112591c63",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c309714b-f856-49dd-b36b-cba67016b2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32985300-f450-4d0b-8ae9-dbaa1fc781b2",
        "cursor": {
          "ref": "1183b53a-b843-45ad-aba9-efd917452d35",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2bf120b5-2f6b-4ce8-a262-0fc472ab40d1"
        },
        "item": {
          "id": "32985300-f450-4d0b-8ae9-dbaa1fc781b2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "82ba73c8-e199-4d1f-b78a-345b360a1ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbe4e3a-96d2-4e7e-875f-74c9c82cd3c1",
        "cursor": {
          "ref": "56da3ac1-5d59-4c5e-85e3-e30488e620b8",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f997770d-60f9-4bac-aada-292d868bcc7d"
        },
        "item": {
          "id": "2fbe4e3a-96d2-4e7e-875f-74c9c82cd3c1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "545670d9-e343-4fc7-a1a4-559c50a02c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f8a92b-9e11-45c6-8ed0-730bcac1f788",
        "cursor": {
          "ref": "63e01f91-36cb-40a0-8e83-da3fd8ba4b33",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3e5a2679-3ec9-4bc7-84b9-bbd9517d0dd2"
        },
        "item": {
          "id": "28f8a92b-9e11-45c6-8ed0-730bcac1f788",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9a047b75-caa2-4403-b384-a4033ff9d13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fdf771-3388-411f-a3b6-a18b3a80845a",
        "cursor": {
          "ref": "c11d6bee-a5f0-42f1-bb5b-4420977412cc",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "79141c55-801a-453e-816d-2493c6283585"
        },
        "item": {
          "id": "f6fdf771-3388-411f-a3b6-a18b3a80845a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "98b73f23-f040-4046-9761-5f04782ad351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55682c80-6d34-4d61-9c2e-a7467427d162",
        "cursor": {
          "ref": "1473b3bf-69c7-4df3-833f-4f80f7ee0abb",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "913e3998-fe11-48b4-ae4a-9053ee6f78e4"
        },
        "item": {
          "id": "55682c80-6d34-4d61-9c2e-a7467427d162",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "101ad1ef-9d3c-4dbc-902a-709e4af2a909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487275e7-3665-4f80-a94e-980308aae55a",
        "cursor": {
          "ref": "b0b55065-3059-4d72-96b6-89ecd2c8f850",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "061e8861-7602-4ff7-963e-762ccce69c5a"
        },
        "item": {
          "id": "487275e7-3665-4f80-a94e-980308aae55a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3e701c2b-fca4-4593-ba42-609d6755cfeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f5ae70-f8be-4926-97a3-356f51e7c0c3",
        "cursor": {
          "ref": "c0aab119-ecc0-4af1-86cb-df99139c4693",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a2a45a7a-1b4b-4702-a78b-aed937751750"
        },
        "item": {
          "id": "a0f5ae70-f8be-4926-97a3-356f51e7c0c3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "414881cb-44f4-40c2-bee8-6524550b3c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ec2656-99a1-4521-a73c-15b473af7b02",
        "cursor": {
          "ref": "d07cd9b7-6a07-4042-9615-fd929d396fae",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2e70dbab-63d5-49f4-94be-7e7cd5d17da8"
        },
        "item": {
          "id": "59ec2656-99a1-4521-a73c-15b473af7b02",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f2ab3ff0-e3e0-44c0-b5ff-c845d0fa456f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9463841e-dc0a-46bf-9bbd-0ab14bd9e09d",
        "cursor": {
          "ref": "4a11ed22-96e8-4a69-9c40-b39b037dc59f",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "348ff396-12b0-415a-bbd6-b19b89a88f99"
        },
        "item": {
          "id": "9463841e-dc0a-46bf-9bbd-0ab14bd9e09d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ac541579-79f7-4f98-b6ed-bda137c5ce26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcae7d2a-777b-4100-a0e6-f1ac8029bb09",
        "cursor": {
          "ref": "df5d47c0-10d7-4a88-a6db-c6e98696e432",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3591f331-9946-46ef-a6a9-099368ca1c15"
        },
        "item": {
          "id": "fcae7d2a-777b-4100-a0e6-f1ac8029bb09",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5ad04e58-3dda-48d5-ade0-2d1961dabf2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb417b90-6db8-4524-b791-5d907092771b",
        "cursor": {
          "ref": "ab6d96df-f076-4135-8254-c97fe8637aac",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ce02c1ef-4486-49f7-a114-49a691b48622"
        },
        "item": {
          "id": "fb417b90-6db8-4524-b791-5d907092771b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3c35239d-4592-48e2-9809-cad644d99355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b574546-0812-4537-accf-6a6fb8d11e30",
        "cursor": {
          "ref": "90dc1fa1-c7f5-4e64-875c-f29d91d9e81e",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1ae1adb3-f219-403f-9d6b-710cce5a1c70"
        },
        "item": {
          "id": "7b574546-0812-4537-accf-6a6fb8d11e30",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cedb5888-8259-4d07-9d17-41c8bd81895e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca35a31-d82a-4e21-b8e3-485cb839592d",
        "cursor": {
          "ref": "100c1b31-9e81-4225-adb0-6501ce61151f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d42bb5db-e060-4674-aeca-f438c9532f68"
        },
        "item": {
          "id": "9ca35a31-d82a-4e21-b8e3-485cb839592d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "78d24720-1f11-45c7-bd86-791bfcc1aefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 729,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "4820322a-5ab2-4018-86bf-b17bef687644",
        "cursor": {
          "ref": "210ac41a-f606-44c6-9b36-12b6ae0c6031",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1960f57d-f699-4c2c-8f86-d20558f9f798"
        },
        "item": {
          "id": "4820322a-5ab2-4018-86bf-b17bef687644",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0ed8cd08-0540-456f-9795-a3ffeb6584a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 729,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "0b4b0031-aa06-4f28-82ca-5831a200d13c",
        "cursor": {
          "ref": "f256951b-3b8c-47a0-a7bf-08009d84f54e",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f49e8173-bef2-497f-8897-bf99dcf99fd6"
        },
        "item": {
          "id": "0b4b0031-aa06-4f28-82ca-5831a200d13c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7b9b256d-b306-427f-ac0e-39c0fb2e22e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "60ae88ff-a7db-4ade-a8e5-34d1d108918a",
        "cursor": {
          "ref": "a51ef218-2e71-49ca-b601-077acde3d13d",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "669e5803-631c-4dfe-92bb-8dbbcaee64b6"
        },
        "item": {
          "id": "60ae88ff-a7db-4ade-a8e5-34d1d108918a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2238ed81-b1af-4067-a6b9-a50b6fd72971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 775,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "841f1f96-086e-4966-91d9-f24baadcd670",
        "cursor": {
          "ref": "c893d990-c5e3-48af-a4dc-04fb19f79304",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f54ecd3d-ee78-46f6-b2f6-ffc601417cbb"
        },
        "item": {
          "id": "841f1f96-086e-4966-91d9-f24baadcd670",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "eb5b7910-9f80-4cb6-bf24-c29b3334e5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "635a2d56-3495-48a8-a5d0-b41b56353811",
        "cursor": {
          "ref": "11fc2731-ee21-4534-892d-586a6d331ed2",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d148183b-b846-4c69-b9bd-934e235f9533"
        },
        "item": {
          "id": "635a2d56-3495-48a8-a5d0-b41b56353811",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8e204181-928e-4c08-98d2-f85180c4ee90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9578dd-8afd-4ba8-8721-1889d5f0ad9d",
        "cursor": {
          "ref": "d6e8a678-d970-4988-b88b-ad725a292853",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2c5c5877-eaac-4a76-9c44-e876edc95d05"
        },
        "item": {
          "id": "2a9578dd-8afd-4ba8-8721-1889d5f0ad9d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "526fe579-f250-45f5-ba67-a5273d40c49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278d82b2-f4d9-4199-a589-3be742e2df18",
        "cursor": {
          "ref": "ce9e72c4-7db6-4106-94f2-63d76788da0b",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "96aee86d-11b0-4b99-904f-17f564bb1fad"
        },
        "item": {
          "id": "278d82b2-f4d9-4199-a589-3be742e2df18",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "00372395-001f-471b-812b-c1b380b41832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d83aeff-04f3-40f7-bb8c-a3a6fc60c067",
        "cursor": {
          "ref": "3bc99787-3b4d-46b8-b3b5-e0e24afeb22f",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bcc3d482-d890-4caf-bfb1-03ea3e7128c9"
        },
        "item": {
          "id": "8d83aeff-04f3-40f7-bb8c-a3a6fc60c067",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9a250c12-f8e2-4d35-815e-153f31c8c41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d31906-f187-49d4-b200-61a464c7fdc1",
        "cursor": {
          "ref": "1a533ea3-19a4-4f03-9dcb-2a942fe74cb0",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3c1ecfe3-fab0-4a2a-a1f6-d686182f4882"
        },
        "item": {
          "id": "96d31906-f187-49d4-b200-61a464c7fdc1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0cab4bb5-d77e-420a-aa31-a054ce84e74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effda3f8-4c1b-4a87-96dd-4d24acc11944",
        "cursor": {
          "ref": "fc787bc1-8552-4821-8877-76435b69b3e3",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "28ea77e4-7237-4d48-aa02-4168086f6357"
        },
        "item": {
          "id": "effda3f8-4c1b-4a87-96dd-4d24acc11944",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cfc7f382-07eb-4e5c-867a-22fbed37ae21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc01218-478f-4c37-9a84-1c3c00e0261f",
        "cursor": {
          "ref": "bcbe83b9-3201-4013-a94b-f97b328abef5",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8576b9ec-edf9-41d0-8e34-636a0988b26e"
        },
        "item": {
          "id": "acc01218-478f-4c37-9a84-1c3c00e0261f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7d0ad92b-88c4-4afc-a131-f187a68efc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfa4413-283f-4543-9db2-1055694c9d75",
        "cursor": {
          "ref": "f2f17a8d-75ab-4c09-b602-553196b54243",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a3e5c788-06e4-439c-be0d-42ca8e767f32"
        },
        "item": {
          "id": "2cfa4413-283f-4543-9db2-1055694c9d75",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9e2693d1-97b8-4fe2-944c-857ced915ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71974756-862f-48c5-9d82-31eade6fc222",
        "cursor": {
          "ref": "a2b241f0-d413-4d2f-9c81-75d1bcd9f577",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "546ec398-fc1f-4191-a50a-5fd1eeb9aa91"
        },
        "item": {
          "id": "71974756-862f-48c5-9d82-31eade6fc222",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1785306b-0d42-4d78-813f-34307c524745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491a19bb-5fa8-46b2-9d24-0b62969b6599",
        "cursor": {
          "ref": "41cbdfcc-38d8-478b-b2eb-008dcf4b0b18",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bbfc12bd-e1bd-4166-9579-bbf30d025625"
        },
        "item": {
          "id": "491a19bb-5fa8-46b2-9d24-0b62969b6599",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d27b5891-8af4-49db-b803-02b068f29d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380ffeee-3f8f-4b45-9f28-59636a36e793",
        "cursor": {
          "ref": "61eca0fc-7e9e-4c52-a0db-7e01d0eb2c03",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9599a0b0-4daa-4295-b4ac-8464fa78ba6d"
        },
        "item": {
          "id": "380ffeee-3f8f-4b45-9f28-59636a36e793",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7f3bd6bc-ca88-453b-9543-ae3f3c6eff9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be23c0e0-b8be-47c2-a1fd-80096263e8ae",
        "cursor": {
          "ref": "25a6f1e3-4e09-4a58-8de0-e513502009b1",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f44eff86-15bb-45df-a54f-d029b131c2ed"
        },
        "item": {
          "id": "be23c0e0-b8be-47c2-a1fd-80096263e8ae",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6324428a-c20e-4b9b-ac3c-0f4635d1cf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf97c34-a587-48b2-9490-7cf7232f407f",
        "cursor": {
          "ref": "f8c4d6ac-89be-4dc2-8b0c-aa9b2d0a1d81",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "eb73ebfd-983d-4724-86d3-c05e4f122118"
        },
        "item": {
          "id": "daf97c34-a587-48b2-9490-7cf7232f407f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3b87c388-f61a-419d-a93e-820ab26c0a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfaa1e4d-24dd-4cbb-a0f4-2a493a542a2e",
        "cursor": {
          "ref": "ff284689-81c7-4956-930c-4dd92e4f8ea5",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "90003f8b-cb1a-4246-a919-ee182904cff6"
        },
        "item": {
          "id": "dfaa1e4d-24dd-4cbb-a0f4-2a493a542a2e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3942a7b2-35b5-4096-bf87-ff13100d4c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3fbc17-c775-4922-aa7a-add4068466d9",
        "cursor": {
          "ref": "c7cc6002-1ab1-486e-8595-619c1c3b583f",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "454316b1-b958-4858-90b0-5d9f4b73261b"
        },
        "item": {
          "id": "4c3fbc17-c775-4922-aa7a-add4068466d9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "68d4a12a-e618-453a-aff5-9a03d90eb624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de065292-dbcb-41df-b5d2-a307b59b4c04",
        "cursor": {
          "ref": "8e801401-b8bd-4313-a28e-92e3daf89d4b",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "8a9ae25a-a710-497b-aa70-5c9c4c49cade"
        },
        "item": {
          "id": "de065292-dbcb-41df-b5d2-a307b59b4c04",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "eaf8ad6b-81bc-4203-bea5-a1e5a04e33b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e16dd8f-1fbd-43ce-99a9-031ed7312416",
        "cursor": {
          "ref": "48818391-433e-469c-81d2-4071792cf53a",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2955e8c1-1f4a-4654-a42a-4d89020287fc"
        },
        "item": {
          "id": "0e16dd8f-1fbd-43ce-99a9-031ed7312416",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b6d5f818-c09d-4689-a0cf-704cb97b264a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88dd336-98d2-45e0-be37-18f337860d85",
        "cursor": {
          "ref": "7f81a287-eb3f-4b95-a64a-2f98c64e31ff",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8ef0330f-ea0b-4e08-8fe8-41f18c517f85"
        },
        "item": {
          "id": "e88dd336-98d2-45e0-be37-18f337860d85",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ddde3467-271c-4261-b7e6-4d64dfabb628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb81270-de41-4ffb-833f-20ad190ba510",
        "cursor": {
          "ref": "60334129-df10-4366-9649-7afc7791b5c4",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "149ce73a-8ca8-494e-955c-2a9d87501c64"
        },
        "item": {
          "id": "dbb81270-de41-4ffb-833f-20ad190ba510",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bceedd3f-23d2-4af7-a9be-9d28d1f51d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5d00d6-d800-4513-8035-8d0c5564c2bc",
        "cursor": {
          "ref": "29e30e4c-338b-4425-8114-d9de141ddc04",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "6f3019dd-cd42-47a7-afae-dbbf1af26e24"
        },
        "item": {
          "id": "fe5d00d6-d800-4513-8035-8d0c5564c2bc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a31fe088-c40f-407c-89e7-52817c364a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992674fd-90f1-49d6-9908-407a5a46e99f",
        "cursor": {
          "ref": "6943cb12-000d-45ad-9b43-f416ef36dadd",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e397d2aa-6cac-4cc8-bb16-387760f72526"
        },
        "item": {
          "id": "992674fd-90f1-49d6-9908-407a5a46e99f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7842bb89-84ab-4256-ad20-1fe1ca4933cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3320e575-e5a5-45be-ae49-7bc2e12b73dc",
        "cursor": {
          "ref": "c92468bc-f6a9-4b7e-a4b6-91b490361c09",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7731dd38-ad37-4668-b5d9-47fc6d05a012"
        },
        "item": {
          "id": "3320e575-e5a5-45be-ae49-7bc2e12b73dc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "49b6c3fe-8177-4c75-90e1-bc1f3fa61c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8b6852-d202-4457-98cc-c1cab861c919",
        "cursor": {
          "ref": "01ce833e-88e1-4206-80ed-0896f39f86b9",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "86e3923d-4d22-43f6-8b4a-5cf963ee34e5"
        },
        "item": {
          "id": "fc8b6852-d202-4457-98cc-c1cab861c919",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7447281e-61c7-4e78-883e-ad6e6b43db35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617b4d11-69ac-4f06-8d87-2834da97e54f",
        "cursor": {
          "ref": "1b869ceb-1a8c-47c4-bdbd-e14c2947a1eb",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e02bc6e0-789e-4af7-91db-501857810ec4"
        },
        "item": {
          "id": "617b4d11-69ac-4f06-8d87-2834da97e54f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e50af0bd-04ad-4703-bb1c-7c15e79d892e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a73951-c189-4bd8-a39e-b2d32be93510",
        "cursor": {
          "ref": "9a832c97-205f-4ba6-93ba-a608eefbcf5c",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "aabf5019-a3c8-4d82-808f-fb04d6d5c8ed"
        },
        "item": {
          "id": "00a73951-c189-4bd8-a39e-b2d32be93510",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "749f163c-1f9b-4802-82cf-ccf2bd862b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec8c4e1-61cf-4801-9d8c-2019daddcf0e",
        "cursor": {
          "ref": "47b26476-3725-458a-bb8f-9da17694a613",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c0a2d252-2b0d-40d2-8880-76f566cc8a78"
        },
        "item": {
          "id": "3ec8c4e1-61cf-4801-9d8c-2019daddcf0e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fed8d0ee-7758-4f46-9c9a-17be2d7d5e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d572b723-7f42-49c3-9a7f-4a223bcc9d88",
        "cursor": {
          "ref": "3d06a4c9-b8ba-4630-98bf-56e6be4d4cd0",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7328c43a-8aa4-4938-86d6-187a5bce2048"
        },
        "item": {
          "id": "d572b723-7f42-49c3-9a7f-4a223bcc9d88",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0833ff19-9623-4328-b4f0-a2a1582666b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920383f8-eae2-4d35-9900-f68b4b1a1ac8",
        "cursor": {
          "ref": "f46c07bf-774c-46dc-8378-b442f4f74701",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e42b7c26-f9a6-44e6-98bd-da627a0c3735"
        },
        "item": {
          "id": "920383f8-eae2-4d35-9900-f68b4b1a1ac8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7ffa5b8d-5ade-4da5-af2a-4bbbc7af16a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72475ff-2a1c-4f0a-979c-d466cd3522a8",
        "cursor": {
          "ref": "d482a0a7-5455-4935-b548-3edf7e83961f",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "5d3d9b87-6300-41cc-8c82-1123db772b50"
        },
        "item": {
          "id": "d72475ff-2a1c-4f0a-979c-d466cd3522a8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8b8975dd-b7e7-4469-ac40-4c90ec15c2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2103207b-f8aa-4e31-933e-376ca177e7c9",
        "cursor": {
          "ref": "0beae8b1-26be-4cd3-820d-e767a1e4085c",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "046865d4-9265-4021-89d2-13c8f5d8506c"
        },
        "item": {
          "id": "2103207b-f8aa-4e31-933e-376ca177e7c9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d020077b-5f44-428f-954b-a2ec360090ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479982d5-f323-45e0-879e-69220d3c2930",
        "cursor": {
          "ref": "3a48009d-3786-4ef3-b532-03a0671c8a0f",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1c9a92f7-8648-4c6a-8947-1ce064c3c647"
        },
        "item": {
          "id": "479982d5-f323-45e0-879e-69220d3c2930",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "172803c5-fee1-4311-a6cd-831abbd54c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9011b3-312f-4f5a-99b5-2923df3dbf53",
        "cursor": {
          "ref": "3c418b19-99dc-4573-8594-bd6ccec89889",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "56d7c845-a1e4-4e09-9766-259a888d20b4"
        },
        "item": {
          "id": "dd9011b3-312f-4f5a-99b5-2923df3dbf53",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f0b6723a-4527-463f-815f-19eee5825c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2634ffb-9ada-462a-8631-b84bbb82e659",
        "cursor": {
          "ref": "1e34e87a-aaf4-4cae-8e66-f8826b32ddc4",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "5e329526-e1e3-490c-b7fc-5d2976c3e699"
        },
        "item": {
          "id": "f2634ffb-9ada-462a-8631-b84bbb82e659",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e13a9e05-c928-434c-b517-6a050dfcd123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38603a56-ac1c-47a9-bfe4-750e91b9670f",
        "cursor": {
          "ref": "e375bb12-1fea-4d81-b6e9-38703f86245e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "28b8093a-5055-46fc-801e-35db16f98ef0"
        },
        "item": {
          "id": "38603a56-ac1c-47a9-bfe4-750e91b9670f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "37e16b11-b494-4372-8659-7f938d573f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c4b918-8fd7-434f-868e-803f5d220d35",
        "cursor": {
          "ref": "7bf54e10-9b16-4419-a53c-208c96c85775",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d8dea899-7126-41a8-8223-7a8fcf64553b"
        },
        "item": {
          "id": "e6c4b918-8fd7-434f-868e-803f5d220d35",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9d21e2f6-ca8f-4cd6-a370-46e7d726bed8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7ca1ad-bade-4406-ab59-66466c94acac",
        "cursor": {
          "ref": "61ed8497-49b1-4b73-8eaa-ed9bf07e2a42",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ac4db158-8ae5-495b-84a9-7dc930bada2e"
        },
        "item": {
          "id": "1c7ca1ad-bade-4406-ab59-66466c94acac",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "32b9260e-fd15-4e81-8def-aa3c9ef568f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20570bc-b5ec-4938-b57e-a1bc87a12699",
        "cursor": {
          "ref": "d83ceecb-b9a3-4afc-9cc7-334eb251330d",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ccf67ead-5487-428a-8b11-9686bbbf7b80"
        },
        "item": {
          "id": "e20570bc-b5ec-4938-b57e-a1bc87a12699",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a177cc1d-fa10-4fb7-87e5-bb1c9db21f47",
          "status": "OK",
          "code": 200,
          "responseTime": 837,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e522b06-ebf1-4c6d-8312-81d57d9db5f2",
        "cursor": {
          "ref": "f084a7c8-2acd-4436-948b-9d3b9cf98257",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7703f721-460a-4eda-9ccd-1fcf23a4fbd4"
        },
        "item": {
          "id": "6e522b06-ebf1-4c6d-8312-81d57d9db5f2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9e982fc6-026c-4878-8555-bdf890648e8d",
          "status": "OK",
          "code": 200,
          "responseTime": 1341,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce60581d-2d41-4b93-89ef-64261f3d7cff",
        "cursor": {
          "ref": "2e33efe1-cc96-4fb5-b142-a4eefa5addb2",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "972a415c-fe99-4a0d-afc2-f61d676e6883"
        },
        "item": {
          "id": "ce60581d-2d41-4b93-89ef-64261f3d7cff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "da3ee40a-bc75-4cbb-9ccf-79b981df2f31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce60581d-2d41-4b93-89ef-64261f3d7cff",
        "cursor": {
          "ref": "2e33efe1-cc96-4fb5-b142-a4eefa5addb2",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "972a415c-fe99-4a0d-afc2-f61d676e6883"
        },
        "item": {
          "id": "ce60581d-2d41-4b93-89ef-64261f3d7cff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "da3ee40a-bc75-4cbb-9ccf-79b981df2f31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9972effe-38f3-4874-92b0-d7e38a85524a",
        "cursor": {
          "ref": "498f5923-d64b-43d7-99ad-30c1e01e57cc",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "53ae4604-bb77-4720-acd1-34e1fcd66344"
        },
        "item": {
          "id": "9972effe-38f3-4874-92b0-d7e38a85524a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2db08a9f-36dd-4a50-a90f-919987148633",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdfedf3-a6d2-4b74-bac6-447e648368b6",
        "cursor": {
          "ref": "11e50486-c63a-4226-8d01-ab7bd7d9d766",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7d9902b3-aafa-4241-839d-cefd79213e69"
        },
        "item": {
          "id": "ebdfedf3-a6d2-4b74-bac6-447e648368b6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c7b45da4-d245-4644-9906-859280d9b0a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}