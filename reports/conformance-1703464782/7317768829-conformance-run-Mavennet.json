{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "933742a2-0d13-44cb-ac53-796b69c496ad",
        "name": "Clear Cache",
        "item": [
          {
            "id": "40620faa-8bf8-4b40-9cbc-16652c6314a5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0bfe7019-5d69-47e8-8847-e40fca4117f2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e5f67fc1-5e98-4ad4-80eb-9aaa6bbda28c"
                }
              }
            ]
          },
          {
            "id": "92075e59-290a-4ce8-94f4-b3cb74d9ccc6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d64b835c-f2d8-4d3f-aaea-368fcb66229f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e2570d6b-d359-4e59-ab2a-7a1e73e96db9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "61c2d7bd-cda8-4a06-bdae-a083e2ba502f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "52441169-4721-4ace-8929-3494e4082c2c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3858656-f22f-4ee2-83a4-54a55984f414",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3244884-00a0-49fb-92fc-33932c6cee81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63c0a2b8-d104-4770-bfb1-89ec23cea3e8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39be745c-3718-4ffa-afed-3cc82d2a2c9b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f860b0e-a365-4cb0-b282-f63291c474dc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b5542e4-7af5-4630-97b7-b5aa9c64ff31",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "406c4c56-aaea-420c-b88b-51ea2fd308db"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da933217-34c7-415e-b738-7859e2d3be58",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0fdb2263-fe88-471c-af63-e787770e5536"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6abc9482-c4e0-4bcb-bd10-a9d704213dff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2b8caa1-3c58-4cb0-92f8-4df563153178"
            }
          }
        ]
      },
      {
        "id": "441c5e84-4a2b-473b-a7d4-4325a7a76d11",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bd93d48a-ed68-4170-a136-d3b42c0c468d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b264ec9-3815-4e70-ac1a-008bf5e3cee8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a968a3c-2cfc-450f-a49c-89ee313e15da",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f7feaa-bd4c-479c-af83-8c5ff1332f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c8f0f47-d01d-4f92-aeb2-914191bcbefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c145216-b3a2-40a5-bff4-c3cdfa05b132",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51676427-7509-4707-bdf5-2b70ab2361b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7781b9ab-fea0-4b24-8423-b30ea4696165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c8f44a-eeb9-4794-b79a-a1bcbfb5478d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c336ac5-aaaf-4b75-a6f1-b7325b013e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e9d5954-823d-497c-bffd-f207609f7120"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f038a26-9835-4163-b485-eb9a8b400167",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2eb40acb-85e4-4066-8c1e-c5a01630efcd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcca270-fd9c-4282-b635-8fc02ad1d1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a52e51d0-5e6e-4024-a21f-ff5e30a30cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0d396b-2b62-43d3-9d2b-67e1af42bc4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612e647e-b4df-4f36-ab45-ecc0f09f11ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9926c775-b676-4cd2-9ea3-dfb7dbe03bdf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3612dd03-1557-4423-a998-ea44848957ca",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "178158a9-39bd-4f74-ac8b-682148f09b85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fba3a869-990b-415c-b620-7351d3f1f933"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6bfb7804-5054-4d71-b05c-395f2cd3e0dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "049c5732-3053-40cf-b5cc-2b8bd07079e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "050c7b11-c25b-45df-b207-1b569bce0f44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ae8267d-4300-43e0-8019-2379689651e2"
            }
          }
        ]
      },
      {
        "id": "3050f8f3-b28b-491a-8b5e-dff1deae5ed3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3c433c23-2797-44f1-b512-e8d3b3c3d2ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a646a083-63d6-4833-840a-2f53d12aa7b7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "22de024f-109c-496c-b34c-bccbfcd47df3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db39122-340f-4fd6-91ff-70e1abb75937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d2a192-d62e-491a-9921-1dc706c0eece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2990fc44-75e4-4f70-ac94-d40651684df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f532a34e-f5cf-428a-9a6c-d1b86a480625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc05d3d4-cedc-4293-acf0-ac3357b90f93",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73292d37-d574-41d5-b4b3-b72a3b6f3f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80742d0-dab0-47a0-815a-93c113b6c6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d517636a-e8c9-49f9-be75-ca850d2d1fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13abc91e-a5bc-41be-beca-f98898e1f607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69448fc2-2958-469d-8f77-40a7d3ab884c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb62e4c-f99e-4a44-b0bb-bc253b597143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feeff5ef-de9c-47f9-9329-3a174a20c253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5feea3bd-e3f0-4ed3-be5d-a7d763cb2218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "271a5fea-37b5-4eec-a052-0c8a91fccb6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c297f55-a788-415c-af26-f2da66bfed53",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c095ba76-acc2-4a4a-bb0b-dd3862c25e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fe4a32-46e2-4c71-b891-3cbcc650a3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550bd57d-a614-4d24-a70e-24664bd9f516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74faf1d1-508a-4375-8846-a918378b9601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c755206c-984e-4140-8b90-b704dc0e0386",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdbf0ab-d967-4f06-98a4-29e8aec0f8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5056d1c0-8c04-44bd-b236-dfa584aad16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05550ae-756a-4262-ae2e-3efa5b376e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c581d6de-6d53-4773-ae4f-f4d5599c8058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c40eb70-2b15-47c0-a117-1e895c5c8af7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f66f821-6d98-4a8e-8d05-21402ad55241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51d82e1-b3be-4705-8299-bbaa74b78712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3af2a1-a85f-4336-8ac1-07d246063c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51329a34-24be-4dac-a736-9a2b920ad8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c987de97-59aa-469a-b010-837693ca656f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1c93d0-08c1-4c58-a899-3a13bd5d1c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d69b542-7324-43dc-b3bf-99b3af60f295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f701f2a-1b4e-4ebd-9799-eee6b8ad0313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e67bdb3-5923-4ebd-854b-6bbd2b1bf390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6477b205-1bb8-4256-9853-d2c3858f460b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786b2656-5b52-488e-a0c0-96c7bd6d846c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa089e8-f660-4b7c-9a9a-10624a0c0675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46167064-bc54-4e69-ba25-6ec2c90c66c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c24bfd29-1341-4362-b09a-e25f45a9b181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eba7922-6fe3-4804-a040-259802705ad6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937d64fc-673b-4c9d-af66-2ee3672677a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76486175-9f81-434b-a44d-08e5299a5b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16f087e-a16c-4be9-8f49-7174f114cd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ab2134a-35a2-4037-bbb3-48c998809478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0db4b7-b67a-49e8-a8b4-0e1a62fc2ded",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a87547e-c62b-4b69-a183-360b920c7558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e9617f-ae6f-4b8e-b128-dd0d6b236af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d791a1-d752-4690-aa66-5734540e064b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2be0398-cf5b-403a-a9a9-12d6b1a21990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5d406f-7498-44a9-8011-de2e7df380c8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ea9f55-feeb-40ca-8b34-4017724e2847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbe167c-49d3-4a36-8b94-da4b5d813b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb643272-f30e-4ee8-a105-5fbfebba8765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61f96d9c-60de-4e4b-b460-e271dd15a149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c62201-4a17-4fc7-af74-a47d008cfea1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acedf71-2e05-48dd-a86a-b3179c199520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20a94d5-7348-4440-90c2-b884238784c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a179403-671c-441d-89cc-edb8d35b1d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59fb80c0-cd79-4ae8-8784-d2df2dcc9544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2feec5-a5f7-44c8-be99-768e4f856d48",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e82b073-70fc-4129-af3a-710ad27740c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7250249b-6afd-4ea9-9ee2-d4a04672e637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea1151b-610c-45a4-82ae-c8bf4052eea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5029896c-4347-4dc8-8c89-924d8f7c3430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97f4f8f-4472-4192-bca5-db153659b3a2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058e8c63-55d2-4acd-9ca6-f872b6fa7cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1cc2939-c2f5-43fb-be50-e81771b00d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb9a56c-a862-4751-8dec-85c304105557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46810719-223a-400c-a0fa-88d743b7cc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e79a2a4-d401-4fda-a991-d8806abeb1c1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29355bb2-bb22-449c-a02b-448d0da232c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d680c8e-a408-4682-a999-4446b8a5dd9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887ec982-9efd-4124-8f0a-c86b61a08148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a78d65e-ea2c-4df3-95de-380c038a8cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1aa586d-e07c-4d01-af37-3bf5a5f08f6b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d80a24-a8de-4ac2-8389-97682cba397c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4dd4579-3269-40aa-bbc6-f23f9918bfca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3f33e8-72ce-41da-bf3a-a9b2f91b803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ccb830d-d571-4ff6-b443-bc1120ba8e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dc66c4-d936-4b6c-ae11-ae7d4bc9c174",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d811f9c-4c3c-4358-bfd4-10bb284b45a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf116ac-018f-4f86-874d-1e415287a9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d11eac2-11fb-407a-94d1-e76948752b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eccaf4c6-3353-4a5e-856b-80d785c8ae25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5837b21-dafc-4dc8-b3ad-520217b5faa5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08c17e8-ea2a-4f97-9260-0b2b3299fd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a017d05c-d81d-4ae3-8cbe-4fe039ed5c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198e507c-eb05-4fc8-8dcb-e2e21926834d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2438df92-60d8-4b87-9be6-92d19a59a6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c725e952-0bf0-4fb7-a692-857290a1f127",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fe5475-b08e-413c-bb45-3c73136785f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69de37bd-20d8-4551-910f-39e015425eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac619f7c-1212-415d-8eb1-87550bc9d4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c433be9c-f221-470f-9252-24a6695ce6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5176afa1-910b-4459-bfe0-9335f45d2517",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8e156f-a6c1-4fd7-822f-7d7e890c0d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10c507a-8ef4-4cbc-af3c-7ab27ac881bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b052c1ce-265f-49e6-93b5-b514bee687c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9684bda8-7455-41ad-b05f-072a683f5131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4464c625-7c11-41cd-9073-d61d86b178c0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0739e49c-3e9c-4cb0-a17e-15863e197c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0473791f-fd37-4608-9fee-d89c30a07603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b8b34c-6c6d-40ee-a58b-4cc0206b7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90a835f3-d926-46c3-82b7-9ea68c8e6ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc1bae3-3507-432d-9ee1-097a19bf9045",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88e9ed5-3330-4c7c-bfff-5fa61a237cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f89277-0f4e-4d3e-9ec6-22b436802dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a15ab7-663a-4ce2-9835-a586a83a6250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2bbc8e-83be-44bb-9937-31ad2386f869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f331fc-f1f2-4dd8-9eb5-3091928804c6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51ec9bb-92ee-4f30-9e28-0170438d3c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca186e08-7d44-4bda-9117-31e4006d3c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e605b32a-258b-4b21-ab27-4802cbc6da22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a34dbdac-44df-45bf-8f24-39242b469bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ade7516-315c-4ace-9cab-ba9291cb4f41",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11559ac-0db9-4999-abe7-c0bf7839771d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ece1f28-eb58-45d1-abf9-30c024f6d941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77125464-b8e0-4c24-8c50-5268de4486e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a07b3079-ba74-4f87-afe5-4e5edaaf578e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80655878-3559-4179-a6c8-f503d0ee8163",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9136776-f83b-4c7d-8dff-c07e42b262df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a559bc7c-8496-469c-bf38-e7a281382824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a4ef2b-f9e4-4013-82a8-99336e5127fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa6f323-d727-4b64-9393-fb562fba8847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b8d72e-0a56-464d-a9ec-938ddf259e0f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4f9ab9-60f1-4313-a4c1-282a766f7b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f8ed16b-ad47-4f7d-b46d-f21304666ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb5a1a3-6d8b-4ce9-9024-52ae953060be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fac31aad-e836-470a-9870-b441b465f0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26eb28ab-5e9f-497e-abc3-bc2baad43110",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914eac16-1bdc-4c01-b734-1710216e25f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec8def0-4210-4d69-87b8-9b29a53a2bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2ee7d7-7050-4172-b721-bea9a0cd3157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b500a2e-e7ea-436a-962d-246fcd666206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b63d95-c367-477b-b52a-57384a5b12a5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fe2b93-63fc-4008-8d6b-ae3f37dedca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73931d9a-2f4a-4f9f-a9bc-5eb6f3f53fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ad1c90-106f-4d35-a07f-0aae975c41f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09c58f05-4696-4fa7-8929-183cf38302fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61230bc1-4ced-4d9f-89c4-1f9675400d17",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e23c28b-1025-4050-8307-2f34ec3cf216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e062140-bdcc-481a-a8a2-1997b621d512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4bff6f-997b-403b-b0c9-4343545fc5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aefade8c-a5bf-4f0b-b5cb-120161d85203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0664ec2c-26c9-4c73-9892-326b0f14d3c5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3cc8f1-e932-4b80-bf2e-18d21abf8655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6114f5-c14a-44c8-ab19-79f9f32d42e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df7b73f-fbb5-4a96-9900-9790c3b1b1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac97d96-d17e-427c-a218-73bde7d7596f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b383884-96e4-4fed-8303-936e73f44deb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f16856f-30e9-456d-9e5e-569d26ca1393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a9279f-98aa-4b21-88cd-64a98a0afc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef17880-e675-45a7-85ac-8170a432d41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f926ca-d607-46ba-a528-5ab00eec9d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da037a3c-d8ed-4176-98a0-3ae6842c4bc5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1b4296-9773-42f9-a0ab-3a29fb7a1c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ea8e61-f2e1-46e0-aa67-58122d66c0cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7763627a-1673-4bff-bfba-eefedd21994c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3054206-b1e7-4115-b4c9-c02ddc77c651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34dd53d-7657-4628-898b-5cd79a72ea45",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53c23ca-36f8-4e6c-b1a5-355c077c4f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d81564-f3ee-49d8-a174-2450fdce202a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691729f7-a505-4809-b1b9-7cc7f9c46c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "853088b2-4ca3-4735-b79e-70879da58a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43bcc73-723c-4fa6-b51e-dbcfa80b9dc1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ad82c7-cf8b-4dfb-a13a-5799ead8a729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed288ffc-fc78-419e-b4df-dc04051ba159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2af1f71-c0e3-415b-bf2d-f7f5a9b27791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "035a5645-79b0-4118-afde-e5aab257b79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0564bcd-e981-4417-8ce7-566969a70b0d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837567e3-4b61-49c7-abfb-d60776b1fb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a4fac1-e132-4ca9-872e-bd560194ca69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b668bdc-9882-4bd2-bd1e-fefe7478aef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b94475e5-c8b5-4684-8c7a-09cf95f86db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f2e6df-9ca6-4056-8368-9d0ce03fcb0a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3b1192-b62c-4784-9edb-b26682128eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb73b0b3-6ee1-4cb2-8f26-90374a986b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318c305b-62d7-49ef-8ce1-30f812770153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4b16bb-d82a-4df6-b2c7-51926641888c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0506e71-f910-4dae-826a-fcee6895d888",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae096d2-029d-4d6b-8b55-859eb26e412c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf624a0-2aaf-428b-a713-80d5a1640463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c78a20-219e-41df-94c4-3550fca8d056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7cb770-e5c2-4255-a9d1-d65203c05b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f069060-caec-49ec-ad27-4e36b7a32e5e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3455c249-cd5b-4f03-9edd-cbd1def05a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f94161-0c31-4084-b656-6890e6de6cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c666ee-96b6-4bae-81e9-0700a4489e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e022aace-e053-4173-afda-341c7f089285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969f492f-641b-4f90-a7ea-87e9e7a5bca7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a827391c-fd4d-445e-bc24-a00a066ef4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb19fec1-3563-4315-a7a8-9bdba96c4afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7deabbcc-7417-4680-bf7b-17bcd60b5ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0fd233-7944-4a5d-a87a-e801d42d29d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de431d25-ba11-4e4b-8e9c-dc9a9e0902ec",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbe9092-b0aa-474c-b517-728b4bdae1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efef1b2e-a796-4e03-bb29-72a61e277a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bee94b8-662b-4117-a587-2249647e6dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6aae1cf5-98da-4be9-b239-9e96b53b5c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e06155a-707d-4c70-b9c6-deb150a537e0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246955f2-5fc5-4751-986d-5deea28bb8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee409bbf-91aa-4315-b49c-501b5c619187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303f72e0-6014-44bd-a922-e93e372361fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "936f38fa-0429-47d8-bc29-d8f211e1e836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea4efe8-57dc-4aff-b807-ef4b5b5b83d7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c0f67f-c3f7-4726-bced-b258c755c0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa28556-c096-421c-9016-1e4c20a4c590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065980f4-d9b5-42b5-ab7c-4ce8c2de3190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4372ff-e6c0-4b41-b499-c354077d75f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5abb46b-4408-4e9c-aca8-a754b22b2d11",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46ac3bd-2f94-4438-abdb-099c273f081d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3225754-cb2a-4455-9037-da460989f98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a6e226-ace1-4cbc-8325-4843c2c90744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5b0306-58b5-4b2b-b571-2670c8bd1f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca4d98f-2c15-47ac-a041-23cc0645e4f8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f0e6b4-703f-4a30-93f0-fc03104d80d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937465ae-eedc-4972-908a-e7d185279600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3eeef57-07a5-4bdd-adbc-bb8008e95695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "083f53f8-def8-481b-a255-0cc158f01529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817c1c8d-a61b-4cb1-afe5-594c5ee50ed8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b251eb9b-5f5c-48d7-981a-30896edd71d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9de21b-bfaa-4f2e-8f71-3ad6d0efa197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4f486f-ce39-4af0-bfeb-94756e2f8e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "68aecb67-bcba-4d1d-bbc0-df32a9910800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3dba7f3-4078-4012-94c1-80e442e3a91a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9c69a5-f3af-42db-8210-707afe537e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07ef0c5-2d98-466a-9ab9-0368a157d9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c578e570-0e99-4f54-b915-909d98f0afef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1d17e2-6362-4aec-923b-9a78ab8f9bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b558470f-4f16-4b84-89fc-21bb4a6da355",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e663bbc0-fbe4-4f32-a362-d9ca7d63ca31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca932b91-d704-48c1-9676-128abe6b69c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a77926-e4fe-4a06-ac8f-b034364c1b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "512c77b5-e1e5-4407-ad9a-236b9fa04125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1b62d4-cd55-4a16-bffe-cf4173467671",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75f8ac2-f0ec-48f3-8b0a-72729c88ec49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894cea8e-4dea-440e-805f-1990c12187e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfd4e73-0d8b-4631-9b1c-7d62a48f7f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61d1434b-500d-4646-ab6a-852ce199e81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3ea83f-7855-4a09-ab3b-754c75bf26fa",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2bdb6e-433d-48a2-8083-bb93a1581377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de25473-a165-4d0a-b5ba-12a32da99dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2189ac-3128-429a-b203-d756fac01dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50aec12e-3cfe-4ccb-8466-7a7bef2aa2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9365796-612a-444e-a4b7-4d4ef4bdba72",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0ef1b4-ce4d-4150-a7b2-e46f9e4d6e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca5ac42-7f3a-46ac-a85a-fc9d46cf28d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e98bb5-379b-4e5e-a303-63f27c056c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2702bd38-2d3f-4779-a437-b7b461cb1ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d4bab5-99a7-49e3-be7b-e033c7aec7c9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b673278-aedd-4975-a2e9-8bf138cbff0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99f1747-6ad8-458c-8ce2-ab241be569a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9534170e-b8c0-4ba3-9334-dc5b2e2779f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "64d0dfc9-b220-4df5-8d2b-431cc7143740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536fc54f-1749-443a-b8c0-c5a40ef25ed0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf1fec4-4ab2-40bd-a6ec-5d0ee205db4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e3084d-d750-4fd9-b30a-65ffddca3ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b108ad84-2ac2-49ab-aa75-6f6ca56681a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5ad46b-75ee-4f43-a9f9-92320aaedf6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fcfa4e-c93d-4b1c-8884-cadaa52f2478",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd9b0c0-8fb1-4779-b89b-e00004f6edb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6a95c5-4a2e-4dbd-9392-5c49cb5e9482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b6e8f0-ca19-4c05-baca-4b0a8412628e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a4d66a-a66c-46f6-97c2-8eb6f5fef814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa1420f-e518-4ae8-a459-b6d566a43e00",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8754c3b5-c07c-4290-b6ba-98cb6e8642cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf506f5d-7fd1-4840-af42-4b545dd415ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571491e3-9b16-45b5-8786-91201cca040f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bffc3f-8a99-44dd-a612-3ff098c474d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d314ff11-22c5-4cbb-ba07-142929e7d578",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12fae88-6f4e-46df-aef5-eacc37f7cc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877a774d-2d52-41b7-af7e-2ecab2235e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5201cbf0-4a67-4e9d-8942-ca871969da46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f47b42b8-af23-46f7-940e-f4588eee2d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e99b988-5e6e-40d4-94e2-6ce8debbb5d7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228833b7-04ec-4902-b818-d4239fc02b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d126df-ecad-41ae-9c31-d7a5c5b55a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d68064-26fa-4a83-8d80-3bac790d33d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "67026e2c-8b14-402c-a68a-df2385b36686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9552c3f4-46ed-467d-9f4d-3b1ef4c7e80e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc6059a-20b5-4c71-ab30-8b96dd779ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726358ab-d622-40d7-8710-ad8fc538d23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e021ba3a-18a5-472a-9646-a64e0acc6fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55c3937d-8cbb-4ffc-a5bc-1e1e53249881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633bd7b9-6659-4acb-b0ab-5c3e4ffb106a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736355cc-6c22-4035-a1f8-c6c0e5d92d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f332fa-9ad0-4598-9a72-e6f575f85598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577a2d5c-1705-480f-9030-90533ba0e87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2be37f8b-2569-4c88-89fb-79dff80be718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02527101-7f2c-4226-9d2a-b26822bb2669",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebaf91c-a070-4bc6-8c8f-8d62ad51ba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b2b4b8-771d-4f82-83d1-9526e5244939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d1ab9f-fffe-4f0c-9de3-381f7762b2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "09c19eca-4310-4580-b24c-c85ffbe2d822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8114cb01-01ce-48d5-9648-da1752b3967f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84756b69-36d4-41d1-a29c-7c89807f6577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79b67e7-1fde-4a7d-8136-b550282f190b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae60864a-5ba6-4f0d-9be3-01705910f29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "79c63e8a-c435-485c-8594-99600934f343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd17f87-ecac-4e18-8390-7ceb564d17e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1565db-84a0-464f-b2ae-947ae0c743e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2947842-8535-4dbd-b6a6-2cc92701e5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157dbc6c-bba8-4022-9665-f37dc8d06398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "48d3fdc3-6b49-4552-952d-36071dd8fdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae246888-0232-4b8e-9615-1b50d3ca5af8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee4f212-0b46-41bb-936d-0712c9a3a9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75aa749a-97bb-4ff7-a105-9ad05f065fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df71379d-f37e-4b35-89b5-080c5906dcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a21e37e1-0791-4c2a-a37f-06c8d80f2f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aaf05c9-86e6-4c63-9259-3a21b6e8eaf0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84c4bea-075a-4876-a01d-0790d0387801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb998bc-0028-40d1-bd75-4387b6a0b2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f2efb9-d301-4df8-aab9-d1ec69842a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2355d904-acae-4566-8d58-39ebe62488eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5f0074-ce06-4ff0-9d8c-3069595cee85",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f554992f-1784-4ec0-be1b-3f645004a3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70aa4fbf-0087-47b2-8413-d403f26ffe21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5df4d1-ac65-4943-af98-ee2fac72b51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4866ad-aa18-419f-9e97-573b557defa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a33ffc5-e1d1-46d9-9129-5b0e3ff9371f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0410d4-1961-4704-a3d2-fc42f193f93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e16a2e5-3a1e-4e54-acff-17d94a895a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09572e0-7175-42a6-a859-156b1f79376f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c82eca1f-9a7d-45f8-bfb5-19997b437b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1703a40-acf9-4a9a-874a-9117e05ce4fe",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2270122d-a17c-4969-84d6-10c4bafedaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66b6c5f-e407-4793-954c-1cbd9d38d7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0430116-9e34-4b94-9df5-fcf6323c5a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6d9c3d-452b-41c4-956d-dcac56ffadd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a44032-445a-466b-94a1-92b17a7dac3c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6966b97-48da-42ed-90e9-3c5e9ac7b1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab8f277-bbbb-4e87-affd-2e42391c2106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46906fc9-5a60-4294-a433-4df186c13959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0683b9d7-43b8-4275-a59c-561356d69b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df65863-31ea-4376-910a-f5f99d0ed7aa",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8189b9-9eec-402a-9d43-ad56e1fa69d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5880a6-b26e-44a9-8040-fe5e9228921d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20788f3f-9bb6-4dc0-bbfc-1300b697d3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "21c013ff-f95e-4d9e-9ad2-c2e7e8dcdb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3206574-db87-4f13-8b33-03d81b31c90c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27000906-ad1d-4a01-8c3d-eb2c3d269ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b958c6ff-d8ad-4220-81c8-3521087f3fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4550770b-3808-4c02-9356-0dd35dc41987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "127a6675-379e-4ca0-800f-a7878a48d0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c26ec83-9d92-4b19-a9e4-66c8c04f4153",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e1c4b9-9430-4594-b3ec-86b0b565bae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d65ce7-0520-42f1-9897-f6d0855209f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b444175-d8b1-47ee-a7c3-e4723e050532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3e72b3-02c3-4f51-9e3e-2ec1e43bccd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d405966-fb24-4c6c-8727-4e8724bb85ce",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf7dc78-eb3d-4246-ab7b-4f3eb0a2d90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53fb901-a3c9-4e22-8a2c-e65210cb8406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742048c3-3d42-4deb-a26d-4344227d9eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b0c3c9-b003-40a9-afb9-5ceccf3ac8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6c0206-f3ba-4919-bbf4-0566c3d51a1f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fbe62f-bc30-4fc5-9de9-48ff8aa5c18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75b91c2-094a-4209-a380-8e09aad26edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5800853d-5055-48a4-83ec-c566c31bfe75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca57808f-1c7c-4871-9ec1-483bcfb8a5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e1f54c-10e4-4177-a1f2-8dc105b74791",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0ed2a7-9940-457f-abe6-8a2c6d79a6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f480fd4a-2299-487f-b0b6-13c51280b6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4f16fa-5b05-4b29-8588-df03a13309d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41e6172c-7a91-46c4-9cec-c6a6c7c97fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41dd5137-d694-4629-9a2e-a0c1415f4755",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f31d69-b2a1-422f-844d-a1d29ce20b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b051bb1-8c9e-492e-80b0-baff93452e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024cf645-41e6-43fa-94e7-4441f8bf61ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5facd081-2bf1-4d2b-a3d6-2580b02755d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d9cc31-458f-47d9-bde5-59b4fdcac949",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9c4a2d-dbca-4f21-8052-985707400734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656ee60d-ec4c-4acc-9455-c7a85a0b734f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c733329-9b4e-475a-9082-88699ebd746c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f96d0e-c1da-4e2e-b645-bcd6969d7055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9318a2-81c0-4024-b575-3974c6a223a5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac9010a-33a4-4e40-b374-783f5a6a27a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc637539-a326-430d-bc0a-b1fdb2696515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273fbc51-bf1d-45c3-a317-4f84b8989e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df91f2d2-e22b-4101-ac7f-3dd9509dcd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687c31d5-7b14-469c-acaa-5127e9d9ea0a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e8406b-36f9-4a41-8b19-93985e80e0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1a747c-bd82-4141-96dd-e705bc162ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4d0b64-1092-436c-aefe-9e55f9e753b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb7078e-5709-48f2-80bb-72719db58d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4b5eb8-9e03-48f1-bd16-b221448a8286",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02b9221-5ef7-475d-ae19-eeec42487ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c68f46-6538-4eb4-b60c-ffbc73f6b89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7820a30-2618-4a8b-8cb8-89e0d8e135bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0864cb5b-a4ba-4598-b113-e5940cee67ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e3c575-d4c3-4ad4-bd32-49739d956f73",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2876e9-176f-4a54-961d-337ab55b359f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3514179c-32a4-4de4-bc3b-340a10de46b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d34b24f-d56b-4458-b66f-beeaca2f6668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "10ba5250-f14b-4da6-89ad-c9a241a32950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020f702d-5edc-401b-af5f-1d239f737a44",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075f3a64-a36b-4283-93b2-ce417f657a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88ccab9-389b-4da7-86ac-175f344ad23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e91cd0c-edc5-4a4e-be3e-624d3b089db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57a5f98b-9df0-4227-a506-a9756de95a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a409bd-6e77-4785-bad8-85c4656dddec",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acaaba1-f543-40d7-ab1e-f1082493f54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37484d8f-3a57-40df-9edd-d715652530c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212531cf-4072-437c-a179-5ff91cf91f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b030be2-324a-45b5-8d78-53ad6711e89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f4f234-3f83-423a-b762-a74087170938",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81aa34fe-77d8-4e24-840d-2ed4884d63c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be30b3c-bb9f-4bb8-a041-d5e412ed6855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe77d490-596a-4243-ae0e-b7b41d191c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74fab977-6b4e-4f8d-a643-5b640308aa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3f67c8-3ca0-4c69-8a8c-89190222a803",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c1265b-6ceb-498b-abae-ca72b33f45ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb5c104-1954-4a53-bd54-862f15cc875c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb61f10-1797-4a5f-a09d-06ed7d0626a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "931022a7-eb36-40a3-935b-2a40674adc84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92990c49-b3b3-46f2-b2e4-4ece33a58503",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06756c20-fee5-4e95-b39e-6de36ee3c13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b54f0c5-26cb-4e58-acd6-4387013b5700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b558504-f444-49ae-9a66-9a793127b46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9667c3-f7c6-4bd7-97b0-a26f9925df46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc70aa70-6dae-4f3c-b207-b67514aa7429",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc695ef-660a-4605-bb9f-aeb7a7540a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b184c6-c5df-45f2-a340-373c35971cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec91fe87-a91f-42c9-9fd3-b19484bd53d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89fd41b0-9be0-478e-be0d-54d090fbcd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b552140-cd21-4987-b5f0-8563d00f944f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427dc3b1-2ce4-46e3-83c9-e31916a437cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239c09e8-6c98-4164-8e6d-904b792c5556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3186a611-e6c9-4b21-9703-fdad04e79ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39737661-b692-4157-bb27-8c8685c39bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19694928-d327-41d1-b973-051e960086e4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530ca669-ed58-42f6-ae49-2b7a93b95c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13097d74-b2f0-4b45-8eb6-dc596d2c4f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798961b8-4ae9-4b81-9ec9-86770229d4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "97d08930-822c-4d8b-93d4-89768a633b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1089626e-c96c-41aa-8d89-2146e015e348",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4902aa-fa9a-499f-8278-8da5d23c74bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e18ff8-ad92-4907-949e-9a466cc2b684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f11ec96-fcea-46d5-bc5e-088f3a1f775c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d349531-a780-4a2d-9686-76a801ebfda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c61e0c-9463-4e51-be00-573a593f52e8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0c785e-78dd-455c-9998-548d7ce37e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178c575b-36f4-4bcc-823a-cb1c030eee87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29a2c60-cb91-4de0-a9aa-9be9568c3677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af95c180-435f-48d3-91e7-d4ca99ceb7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b1777c-b6c4-45d7-a75f-f2c5dc08b58a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83bc596-d49a-43fc-b8bb-0a1071deab56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e55a739-8543-4de4-9c35-3e86c5310140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fccb4d-04cb-4673-ade3-4fdd519b7fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9256f1c5-73b6-49a1-ba3f-b0992b054738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc3d1b5-1a3e-4d76-9437-2625598a8938",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3485ef-bfc1-4f18-8cc0-1dc493d22c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d765d12-7900-492d-806e-d3b2a1ab73f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369fa119-a5f5-43f1-b24a-0d2cee033a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "375aa4d8-315f-450a-b9be-5adbd00bd702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468eb0d0-bfc3-4402-8627-e5e79370e9f4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005e2c2d-efe4-48ae-a25d-8da2033775a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a03e49bc-832b-4677-b1ee-a7bd28db1b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ef1769-513d-4bfc-9f84-3859c9053bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e295e8b1-b002-4ef3-803b-15c4622c6e36"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ad342d51-7f65-4672-beec-9351a59b6e16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b11e5af7-966e-4549-9f00-246698b2697a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f40324-2a64-40a3-a869-2c059afcd06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7795a722-5415-44ed-bf47-3ae46ce776bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4920d66-4989-4a6b-a81a-75acbef01a9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86707343-da23-449e-b205-ef49e868706a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d29feb5c-4e7e-4ef1-adb0-cceb654b7bbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed4c005d-c2e9-4fdb-b332-d5f3643aaca7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "397c81f7-f3f9-49a5-bfd7-1a62bf7d18b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72ef84d1-b626-4586-9bc1-f8ec35b841fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "17490f50-8cde-43e3-b9bc-13bfd0ef953d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93a79a04-41fe-4513-b1e6-8e397ccb2eb3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "01768468-6640-477e-bb7f-75dde6c028a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c35b32ba-4883-4548-956d-389da3d0d8a2"
                }
              }
            ]
          },
          {
            "id": "56d36051-3694-4d79-bc40-918847238e97",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8644d27-a6ee-41fa-ad01-5ea2f045884e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a0bf8cc1-23cb-40d1-b240-e2a9c0770cf4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf450112-0865-488e-8d64-26cf444f4da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2ae1eb43-7895-4f53-9962-fb579840f5c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7611bc93-8c0e-486a-a094-2520c400d980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b2fade-6df1-41e9-ac98-78dc54f79d52"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ceabdfa6-b32b-4d6e-8917-cad5afa99259",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "022d3f94-3855-484d-8f4d-9a4775b886d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dca0085a-6a3c-4f29-9ce9-5f44ff7db9ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43a84158-2150-4a8b-a4d7-8e44abd4760f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "135be7ab-6a0a-4d03-a750-ce6f0d5fc799"
                    }
                  }
                ]
              },
              {
                "id": "d515bdf5-c3c2-4ea5-ac8b-2db0f3ef028c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2a424e2-a2ee-4b24-88b8-c26be1c0d1f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9791788a-675b-4482-95d7-c7c3627f7bc7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8975116a-133e-425b-b131-197aa1a23d57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e185de00-629a-4113-acd6-f69c33f227f9"
                    }
                  }
                ]
              },
              {
                "id": "cf14314d-b331-489e-9de3-211ee8ad228e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55b76ad3-3674-4778-ad2c-049e91931330",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3af94827-970f-4423-9ba9-873d0e81c966"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86f1d122-bd4f-4e1f-bf97-576c40de388b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e25800f6-67de-4e0a-b5e4-43b07059e269"
                    }
                  }
                ]
              },
              {
                "id": "879e4998-d661-40b5-aeab-9e0b57f49e19",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8831a686-cb52-4a76-b53e-583134848534",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b58d86cd-f75d-4acf-871d-4c54053b19f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9de16372-1db6-4217-a02d-0496327d409d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2776b1bf-cfaa-4d78-946d-6c4d72e90ef9"
                    }
                  }
                ]
              },
              {
                "id": "fd0a6fb6-ffa2-4572-8694-1c482d3f245d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c048695f-06bf-4550-a180-da1537875910",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47f720b6-7e23-4008-acf7-2cdbe5799d08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ae03dbc-5076-468e-a983-40b4df22b5ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0dc81653-7b1b-4557-8615-37e87ec797e0"
                    }
                  }
                ]
              },
              {
                "id": "da36c19e-1c20-429b-b126-5b8d673f5e04",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fd1c7c2-a76c-4e27-9dec-9aeb495bd683",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5125a8cf-97e0-4a31-b59f-aa7482c05bea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f05a6b1-2e03-45d9-989a-7cf53ee13e06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6cbb6457-5b36-44da-b4e3-69a69207f3c6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7eb5e71-b030-43db-806c-f79178d9efeb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2832c147-be69-461e-8bbb-b41c774234a7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8626d851-2d40-4588-bfed-8dc493e236f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4fcaffa-84ee-4f96-a485-9aa9e9839d78"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da563fb4-9760-4891-b3c8-888bf235ec42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "19bbffa7-b04e-4182-ae9e-ebbdeac85898"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa2bc70c-35d0-4a9b-817b-d08cf03d4bf9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af5910b2-6b99-42ba-9b0d-a801267de86c"
            }
          }
        ]
      },
      {
        "id": "2643fe91-8624-4dbd-9fe6-cdb591160873",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "679cd8f3-30a8-4194-af18-2a1aa3ee0cbb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67b07000-67e0-4433-be25-19d202b6ed73",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4fc36348-ff1a-48db-bbb4-2b328b7644fc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c47432-35e8-4426-9f2b-b4fe71d49846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1376e7fb-f68b-4e75-bd5a-975d18e9c8de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c53e1e3-5343-4bef-80f3-e238808b0b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3273060-40b8-45cd-9593-5e724aa77754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38151391-6929-432a-9fd6-1ca7824401ae",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf75a98-f7e8-47c6-a486-8021be1d12fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f63439-d329-4081-8d4b-30908cb14526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2875e8a4-53c5-4d42-a2e7-c0f3853b35b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "521c1064-7a63-471c-ab36-f232a70c328c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf622ec-e92b-4868-8f88-bd950b3485a3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1426904f-f49e-48f2-93fb-51be49b80eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd2ea7a-182c-4021-858f-7d89e36e0859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f0934b-210c-4434-9e1f-f6722141a7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6829c3-4fe4-40cf-a284-afb501b6a64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9351ff67-57ad-487b-ad4c-24d66e650215",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f305d237-dec4-4abe-86f7-cd50c8b09d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced79d20-c152-4f66-9cea-c14a9866a436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11de000a-ac44-4d84-806e-c1bfd6bfa565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3511271-4280-4b9c-9e8d-b2885dd06129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335fbcc2-3a90-4773-a1cf-c65251cffabd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768aa289-783b-4a5b-8437-0be8ec4bf747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0e38ce-c31d-4830-96f7-9b18c61092a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4005d43f-1517-4b30-9d23-12822632a805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf62f47-c4ff-4261-9c5e-9ec82ec74f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4349391-12cd-4ba7-aaa3-7d7426214f38",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2983ab0a-64de-48fb-99f6-d131a03c2f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce21370-69a9-4247-8c4b-8514c4deb445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4737c4-915a-4005-8c6f-78cdc88014c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8af7f0-8fdd-48d4-9181-6cb31f3ce5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f383fa4-cd46-4826-86a6-f5b43591e5f0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df834400-8b9a-478f-bbd6-3e006df9e9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce66b62-b3ad-4c37-b0bd-bccc00782435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209fad51-ba0a-4550-8502-a179d68bd272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "51f764f3-c9bf-4537-9979-e6d2c76b6ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9042f01-670d-4ade-aace-59941a285b7f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d50199c-37bd-476a-8e83-3b6b674b0b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2350deb-8df9-4f2f-83da-b2df979fd77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac739a60-42d3-4d10-b5e5-43d49ebc0a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc20f0ed-4660-4a35-a339-5c5f375cc733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4075c939-761a-4530-b01a-f80b017fc49a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31310741-6ae1-44e7-b991-89edc05fd355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8c7311-0226-491e-bec7-38f9ec813b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54170419-84b5-484c-be4c-acd09d47551f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d964891-79b9-482c-b853-06ba48c05165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c80e30b-f801-4518-bb98-2b2cd2a296e0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ab7b94-fcc1-4518-b973-8164cec004b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd819495-6dd7-451c-8688-15c7315a332e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb24213b-c800-465e-b74d-12928cacdae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d6268b-4480-40f9-b8cc-de0e50bff148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229b3684-74c8-41d5-b081-62e5a4bfe05a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f1d6c6-e4b5-4dfa-9361-83f8c4fc09be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09476958-4c7f-45f3-93ff-2090d3342034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75dc49db-f9d3-4123-9e35-6ea582a62eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb5ac12-3688-46f6-afce-3f92e7ff633e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2c24c2-5081-4832-8bb6-3280d215fca0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fb8bd0-2035-4f9d-abc6-5fdf3af197b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa02dc6-9d68-40bd-81e9-de2d5702135a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5040931f-e129-4d9d-9d42-1cc4d56407b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e96b4e90-7cd8-45d6-b7fc-faf3740a1d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d0ba4b-32d0-43e0-97b2-991e84202ad7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a4af97-3945-411b-b220-ffa4968fe06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e736ca26-eeb0-48de-98e1-1fbe53f1c55c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aee711-a130-4047-bfeb-e7e231f2e6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c352dd73-db24-4c10-9f55-f5567cc1d3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9eda15-2505-448b-bf04-d148643d8620",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2eaba4-e170-43ba-a38e-cc94b3643fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40d74b7-b365-48a5-8f5a-5415857d425a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37ba36b-5ffa-4651-80a7-8e90456b7a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "171d650e-ef11-460b-ba8d-d54d6dea3b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813d21e9-80c3-4492-a0d0-34f3be2bfb56",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8779a750-b7d9-491a-b5d2-2e1dbcb45fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1de5ec-144d-4091-8570-7da4ff786513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4faeee75-1e6e-4a3f-9daf-2f2f73e1b047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9542c15d-96de-4a24-90a6-0870e3b05798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054dcd1c-9e98-4d24-96c7-a42b04283755",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ed6b65-33f4-466a-b16e-261e582e0d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b56549-3669-4564-ab6e-4f55645ceecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ed9892-8b99-4293-8712-3631ff0e60ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5678506d-31e0-4f39-ba87-640d92da9f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e796c6-fbcb-4971-a83f-35f51397e78a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9784a152-a61f-40c2-969f-a17ef91d173e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd10405e-149b-4550-9e9b-6c7f70682bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5961ee5-5f06-4e7f-82f2-27f669adf86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cde331ad-57ef-4e36-b995-9f7cbf5cd468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10feb67f-0be1-4d7f-8f6c-9084a6fcd291",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854e3ea8-8b2f-4195-9c5f-ae7cf059e809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bab6526-6e0f-4155-b561-37e23ab4453b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a69f916-36e6-440c-b47e-efc428e6892d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "67537122-6de9-479e-8969-bf428f1e205a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e84aa4-956d-413c-8f06-b00689622408",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e7897f-fb1b-43e2-a1fe-b37d17b30f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ddec3e-0d4f-488d-bd8c-9b0e027d2646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14d1738-09be-4af7-9abf-c810fb6b4f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "285cd4c1-64f0-4dea-88b8-45db58422b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b8f951-7bd6-4805-ba3a-b6c3a62c56a7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1d5504-9945-42aa-90b8-c963b10aaf6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec256a84-19fb-4498-95a9-39daff40c643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4515f176-bbbc-41d2-a942-81bc27ddd922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7829bf8-1d8e-4bee-9b14-9183b59a868b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed98fff2-092f-4442-b8e1-1d42a68161ab",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71564587-36d9-487e-8a61-ce35e01abc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d24841e-798b-4f01-964f-9aeb73720027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3face7cf-6fe2-409a-b3a3-e63b6f5612c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4342d339-b160-419b-baf7-1d731e7a32ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffccf610-9cbc-42a5-9592-0ebb80dfb405",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee2eaa8-3777-4046-94db-2dcd06d9af40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7f8bad-264b-49b9-8574-dfcd3818b50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b9cc11-1a4d-48ca-9121-a642f612592e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "219ea587-56fe-4a2b-aab1-2d87190f6b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e245e6-f218-4972-9891-a6b53fdab5ee",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9376473-fbd0-4924-b253-e22c73398d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1276e5d4-693b-4487-b0a0-34a42e99b61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29c568e-00dd-4039-8803-29f431ab0e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d38cedf2-2427-4dc9-956b-9928bad57f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07ca39a-ac91-478d-a92a-7f46d4d13657",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427213eb-3eb1-4c10-abcc-02876e7a45b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac78b3d-d134-4483-ad00-7b435b8b997e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316b15d9-84c3-4601-9482-9ea56e907470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "098437d6-0a45-49ee-8c93-da493071250e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c3343d-c4f7-4c0e-81d6-ccdd03125f66",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed2afc5-0d59-4d19-a9f3-3fda141599a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d8b9a4-0cde-4293-98d2-517944cc0687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad52980-f515-4581-b2a0-5e8b5141c359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4357ed8-44f9-41f7-a05d-0d35be3ffc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69104707-18ce-4596-aeb5-26198153f039",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e411b8-1cfe-4d0c-bbe0-c83c842f8b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa51603-f355-44eb-ac31-94f2d01d187e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ede982c-c445-4314-a1dd-d1be841dc291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07d9bc3e-bad0-4e67-8890-185b2c8bf03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2633a593-3311-478e-a07e-c77f15002072",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e64b28-398a-4b2e-bee9-9c248466f559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83651977-089e-46e9-86fc-45cf3e453dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7f9bad-b1fa-46a8-9982-5861979d61ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa9669b-bff2-42dc-be93-4df8829ba008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd717c2-4b9f-4f7d-964c-e18cfb1bfaec",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be71e3dd-0053-40f8-9c23-77cfe2f7687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309cf6d2-c5e4-43b3-8a36-1190e6a17a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f00b40-bbc9-44c7-b324-293b938e98cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "859c01ac-a1a2-411e-8afd-244a29cd6b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf79fab6-96ed-4816-836a-2ccf5ede8160",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b765de-27e7-4ce3-bfbd-696731277f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60042bee-6daa-4a6d-b36a-2bc5706c693d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852d5fa3-0f18-4659-afcf-e4d177074445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8fc38d-0dbe-4a00-9dee-86f17a32359e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6be833f-8a2a-4e62-833b-19a2a4f50af3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93cec0e-96e6-404f-b29e-9e540d5da7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab366135-11be-4932-91e4-461c036c0a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef41aef-0e49-4796-b2dd-ca2216f4bef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61ded33d-ddc8-4a1c-acbc-32b242978a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32939497-d7d5-4e19-8a34-aee89906ff42",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32ad5d4-e46b-47bd-aa1f-49189d18bf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb1332b-ca27-43d7-b4bb-a487ab3179b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce0b362-0131-4f18-a774-0038ee210111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcc465de-db55-48e1-8019-881d39720567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6034a382-1e9d-43d1-89bb-cbf5d009e6de",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150410e2-4a77-4dbd-9c1d-9467dea5c407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51fbbc76-df6e-4e9d-b327-ebb7772651b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4486394-2a99-4ac7-baf8-9478eaced0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "518ff10a-8da7-4144-9033-9509986c1844"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba751405-0f16-470d-b157-a63c402cfa06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52bf2520-e4de-4140-a55d-32ebe2238cff",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d4b906-0f17-4fb3-9678-d9f5e57e0270",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b9c651-56dd-490c-9be3-656d1610301d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b74bd41-3098-4bde-9b7c-e46ecc8aca0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5488df7c-9ecb-40f4-a4ce-d62dd27bcf93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4714699-6159-4f63-adc6-8ffad8edbddc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41e3ef90-7e25-40de-a357-ffa7512c6283"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1c4a689-174a-4375-83e3-545e71e37bc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7585daf2-2251-4926-857d-852c5a639d45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0061362-8b23-4c2d-85aa-d7ba04c07165",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9114ff0a-a64a-4392-8d3f-fbe51b4244d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7a4e17b-aa02-4f30-bad8-128245e40548",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14d4c419-16d3-49d0-b421-24ca5c4424e9"
            }
          }
        ]
      },
      {
        "id": "46f1c961-66ed-4938-9945-c469777d669c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "be9ca7dd-69a9-4696-85a8-6e2a525aff2d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba21755e-3362-4393-bbd5-51527db713c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e5e10c58-23c2-447e-a37d-1c600c0f5f8e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6450016a-6e88-48b9-b88b-85af6fb79078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb983ee0-4f4a-4ccd-9876-f7749d35b7a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e8d58b-0b93-4fb8-ad2a-dd497f187afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5726b1-26ec-460e-8c83-798c9c11b35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceead61b-bd14-4041-8952-3758ff2e79be",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755aa412-8d70-4d0b-a295-c8ea6dc2f1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2fb5f5-77d0-4f6b-9663-bdc088a23468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62abcf0b-6da3-43d8-9fdf-941743eef2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf2e1d9-2466-4507-bfb0-3b128f451265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098d11f4-7b71-41ed-aedf-8a5fb6bf159c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4da0dd-6edc-4473-8024-b58b1a04584e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2f5d39-6227-4d8f-9c52-3f190230e01d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24332ef-12ab-43f8-aafd-5de10107b598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22b22f4a-5ffd-4b0a-bacb-1b794bf9c328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c763a756-4b1d-4a53-b344-f542955884e2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e3850d-b8fb-46ce-937c-71de0964727b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8fb6d9c-1797-43c3-91ae-fcdc6b0e94f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b6a122-75f1-42a4-89d2-921ad0aa267a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58910918-9085-435b-9a95-0349ca6e807a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e405a93b-9828-43b2-8e99-ebdf91895c18",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6697ad9-3b64-46bd-bd21-4a0e6e70d035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0a5e4b-eea9-41e4-8b7b-2f6866435315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748bc5ab-5819-4492-b9d1-e054423ed7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "40abe769-b564-43ab-b396-6472f6991d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a65a04-753c-4411-8a9a-d18e47281c64",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23620601-9b8f-484c-b5fd-95a8e81e9b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1978e9a9-c0ac-4c1f-9267-2f7dc8894854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada436a5-0158-4487-bc49-1920a55218ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fddb5aec-b17d-4c37-84bf-720aabea44e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c21382f-6b1c-495e-b4ec-de2d11f67544",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6833b94-bee9-46cf-9962-82e6494f2db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad85635e-b291-4ee1-8c9f-cc240f0b314d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e9536b-2771-45a3-abef-8de112906a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "376318d6-7991-42a6-8579-850faae8ad2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781b99d5-e668-411a-81d5-4201530eb41d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017ebf5b-85d9-4592-b654-0bf07ec41ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aafb9c0f-0289-49e4-addf-b415b54618cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0db3bce-a113-4c57-80fb-abaadb4e41be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b81754c-fda2-43f5-8f49-41063a62e0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8049d2-fb01-48bd-866a-45d6cff3a9db",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63074e2-2b20-4d08-bc91-2b60a6eb6f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fcb35f8-0d34-4024-a96d-81f6a3610ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4533444e-3948-469e-933b-0177d2940137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c18096df-7651-469e-abc9-f4e98d37118b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db21534-f2c5-484a-8906-8247d721fcd8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6b01e8-b784-46c9-b48f-53a7e2629049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670e8751-0d8d-4d24-a0d7-e236546ef6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9639eb-8055-43b2-b804-69c3d9474987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b965c4-ce1c-40d6-81dc-f83e541b89ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee6fdd9-8fa1-4ec7-a4cc-44ec674518cd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bca48e-30c5-4688-be58-8a1567f851a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc58fb03-b9da-49c5-ad31-d0ef05150782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ecc40c-39b0-44d8-aed2-79297f57f8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "63376743-9c04-45b3-b1fc-39f8053af3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a327791e-a89d-414d-aa12-5e2483518d7a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550ba55d-fa80-4e36-ba35-7e83f7a6f897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc100740-1b80-416c-9075-5886912415d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107ab8b6-dbd3-4045-89cb-aea19da05195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67073759-b991-4554-8ef1-42f8c9fd8f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55ad2f8-053a-46b7-a791-57b33cf79945",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3a7330-9b9d-4eb5-87fa-803f98166f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b8408d-fa3e-4c57-ad6a-5689d4ade121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fab4107-4f20-42f4-9ccd-8ff42820a954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d31532d9-30e9-417f-94e7-1cd10966b503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4afba5-fcb2-4413-9c86-96ef8b56173b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804b99ca-6a19-4a76-988a-3a68655f6127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d50222-5b90-4085-99ab-4b8c88837ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5863ba-bd69-4483-8c52-9772d48f3497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8c3e83-2cb3-4fae-8191-5646289cc9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17945f84-1a99-456c-9a3f-b604980e86df",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7413524a-e3d7-41b0-bb76-42cecd17680d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7f46ae-3832-4d59-a74a-ff615b2f4061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2f1c82-76c6-4876-a143-1172c96dadee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e81f434-4020-4276-b381-f851ab4ada9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df33132-548c-4c94-8e58-87c473be9e6d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46294cdb-70d0-4f26-8af1-d82c99c9f221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d16b743-4e7a-485e-b404-562126b5c6e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a855e1d-af99-4b27-b9ef-edaf894204f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f4cb14-40f9-4b90-82bd-39489b7956e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26efd8ac-83c5-4a2f-8c5e-ce6dc0625bdc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4778a4c-b870-46e4-a275-07652ca48fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356043d5-b197-4ce0-9b55-2565584d579e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbc2cfe-bacb-4ce7-9bcc-891824447f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b53b2849-e7ff-4bac-b609-14d632fbc2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be86832a-1918-47d4-a766-99b153984881",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89f3e23-1a41-4ef4-a681-f0b8da33df3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab81843-5cfd-4ba6-a6c4-51c96ee2e1bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1d6e9b-2a8f-48e3-a68f-f8c769903915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c7c738-cd1c-4298-a186-e2abacfa4b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370e383f-6ae1-49f8-8129-b7e94529934d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4693290-dc96-4ae6-9d60-18d426143565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c56741a-8249-4d18-be84-7307bab1d2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb54ef0-053e-4020-8452-674e237f4cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc63150-5b20-446f-bf51-fe8462404b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad45f94-664a-4473-bf39-ca96cd61b5e3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bf3e67-b80b-42ed-bd6b-d03b86e3e84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ffb2e3-0589-4734-80a9-028d3fda9093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae99deb9-2e89-40e3-b83f-716a7f683746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3aa6570-63fe-4d9f-b521-f8764d31f5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0907b090-6043-4bf7-96b5-066167cd25f7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bdb097-1399-48c0-951d-68b31d80079c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44092305-cea5-4e17-abac-9cf244eafe55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15b921b-bddb-4a87-8c2c-77fb4fd0cb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e436c1-cb28-4d8f-a8f3-e1c4588a2b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ad1f40-f8c2-4429-98ca-c16f553ae24a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cd047f-5ca3-452e-b5bf-576840e8ad48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730914e2-09c1-47db-bf1e-3c43a7da25c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25df6843-0988-4258-b53b-d2b1b344e151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "544bdddb-fcb0-4a17-a0f3-969a270bd384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17287914-8389-4aa9-8d71-d6d37cb1b953",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78e5374-5f57-4ab0-9439-12ccf7c3896a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e635ea5-2827-4b2b-87bd-421c2f76a8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8900dec9-5861-4656-958b-7a96cc776ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29103ef2-a2ee-4cf7-bfa9-e25feeb34c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8996ed-d9cf-4394-b26b-ee5bb92d14f2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3229826-3d88-40e5-845c-15f91e18655d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c68e01-75c9-4bde-ba5f-4e4f86446097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af40df30-d3c9-4762-ab5c-ca82131a5c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f50f66-9c8e-4978-bf39-4b92e5f2c2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ee95aa-3a6d-4495-aaf2-c5ebb6504c44",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa1a8fb-df71-4fdc-895f-bc102b2f5b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe74c74e-82d2-4429-a66a-c507d99a5a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5649ff7-24c5-4db5-9e89-9a52c2fc3f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f91db7c0-90cb-49ec-82f4-b25726928e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa4c6ea-2737-4d73-97cf-7aee28569cfc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb586e6d-9be3-466b-926a-3d756d33775e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6d0372-2774-4a93-8b0e-0257efdc6ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c233beb5-2628-48d5-a2ea-d98dfd509c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb056189-46a6-49bf-92f1-f4e922655ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0988ce38-ceed-4db1-ac2b-17dcb0455192",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fc2dd4-cc6e-4b01-9cb1-41f99e1eb86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79762c48-e763-438c-bef2-468da9ed3ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473b4dc3-1e56-4ec1-832b-dd150dd07135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b91be5f-9e31-403c-9e2d-735bf27e5fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc5d90e-b34d-4741-9a07-9360323cc41b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45f6dfe-3fd9-4e72-9a8e-8ff6a4254144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac389464-c32c-4a18-9d96-a537df582270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adfdf17-3dfa-44fc-a89e-b5fc897ad97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a74f3ee0-fd22-4168-874f-8cb432971253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e7db08-7a49-4b22-ab10-cb7ae70856e4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e04a3c-2fba-4cf1-bc7b-b195bf39f3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d9e8d4-e91c-4def-8fba-adf9a45b6893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99037d4c-717c-46de-aae3-9763f43cc681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96418349-8fbb-4614-adac-cc1b1c0a52a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a51cd7-b76c-4663-8a3c-fe5c529940c2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8388fcd-cd4e-4c89-a97b-07c5a5c3e0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2595f6fd-050f-4d9c-bec4-3c811276c41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6741dcb4-1cf6-4a59-9550-ebc96d7ca520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59af8acd-7e63-4540-b05b-2ee7dcac17a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a1c22e-000c-447e-acf0-ad5a3c94da8d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f53a8f3-ae8f-4a7d-9abb-cfaf9d1f64d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3180f68d-f77a-4ded-b9b8-d81386bc27a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffc4505-4092-4e26-bfec-e999be3e0f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3260c40a-8b18-4c33-b3c2-98b7c394b803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcd1187-4d55-4d77-9ede-5b200d6508b8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7248025-8883-47f0-9a2d-aa33e3d9f0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c906b90-e595-45e1-b855-73d4ec6793ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a763b0c-e968-4930-a984-9f9354dd1aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dbbc353-7a32-46bd-a120-f22d10bcb1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea33bd6d-d36c-4ced-83e8-904b7c4d3913",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ff7eae-5592-4d90-b2b4-17dcf12cb830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f67031-f7cd-4963-86d3-061fcbd0707b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f59083-f918-4a27-b959-8d6f38748b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0396233d-7e92-41a6-816e-b5bc8773151c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b5f5b8-ea83-417a-bce7-e18b47b5f330",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a763b5-32d0-4714-bfe8-4eee5f4266f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0e4c9b-a32a-4bf5-aee3-0a6305f4596e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c18eba-f898-4707-80cd-6c76ddf00293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3aaf20f-ed5b-4514-83da-5c7b29eb36cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f94dd9-d522-4c14-b51a-6e27c1ab1514",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f92155-e100-41b9-b287-b92f13802b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c47f0b9f-60fe-48b8-ae41-bf72c5cdb827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83c67f9-0f10-4c64-807e-f48e8a92f3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82e7aba0-47d8-4c89-887e-892119a65c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7453b68-2387-4dc4-8746-27dc2c0f8c11",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037c6496-c22c-46f1-a975-2eb0a43a0e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6924bdc-2d30-488d-896d-88c90cef8596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677e9754-1ca8-439d-ae3d-c0982986b0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3cf762e-e904-4dbb-b559-c383513e7112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c915bd-a2f0-4f02-9a1e-fba16fe4213c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d69ca6-6678-4d39-a2d4-74d875dfe7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2232ed-5dee-45f4-a5a3-8a0c5f61c937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abce78cc-aef2-469f-9a74-c11f874246ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f596e0-18f5-48dd-8b0f-0d76394611ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61065bd2-633f-4472-8ee8-8cf4431dc4d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72bcf1e4-983e-4f89-adb2-e117dde371eb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d76d16-9821-48c9-beb1-e27d4e31ecbb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3219b782-06f4-412a-895f-2636fce6a5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e6b8a6-711d-43af-9255-2b9e08c41d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b9f9be4-8b1c-46f8-88c0-f6278ed98599"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84063e64-9568-48d2-af27-75e06c045c48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09671e2a-0b89-4585-9ff3-c69e0b87e5cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e137a556-82c7-4791-85ce-1cb464a178b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e6d316e-effa-4738-8034-ca955fcb8782"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "540cd0f9-de13-4aaa-9565-89ce7ca9da76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9ee63168-8eaf-47fa-ae48-2c1f0233e5ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f97c702-4366-4df6-844f-5297b02585ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "322fb42d-b570-4e33-af75-ecbdbe76dff6"
            }
          }
        ]
      },
      {
        "id": "54c981b5-72d1-4b82-afee-7cdc74ffd216",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2d57625e-0299-42f8-b51d-b2c4b8a4a0da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8b52b693-a56b-44b0-ab05-5ab2b5187803",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "30f5d064-a224-4500-ae93-435a0ca77b15",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b21666-c099-4c5e-b90f-89ba04b70f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1aa2bb4-b3dd-457e-8d5c-8c211f2e6699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a683f96-0d2f-441f-b682-7a67a01694e7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e4b911-bef7-486a-a960-3c94c633c27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45677df-f961-49b3-99a1-d29a224b882c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f3d092-3776-47dc-aff4-c3640adff95d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a837a0e6-e734-4c88-816a-5843824d412f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397e880b-17e1-4914-9e61-ea50cc121c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48109fc-1336-4e98-8427-d932460cad34",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336b9cc1-22cb-430e-ba34-c73bfc748f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b20065d-821e-45ce-93b5-c9703bc9aadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5781288c-263c-435e-83cc-a6804064536d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df61323-999c-4847-9970-5e2e1f9b9e1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155337b2-1379-4d98-a5c0-b17ff048188c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5036016a-a868-4a34-8db2-ce8a1815ecad",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc390ac-8d37-4281-a42b-a8d42e226a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b97ed40-f0d7-4bfa-8487-007cdcad3716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fd927e-4192-452d-b158-0267808933b0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea10fe4-6f3b-4046-862e-91a041c57894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0869a8-fa12-460f-be60-d1664f958a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9214ac0c-8d3d-4814-b919-4cbfb9b42d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9667339-37f8-45ac-8721-b7b372a6f443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858c0989-a680-4ffd-822a-bd44dfd1f1bc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b353e842-4850-4e02-82c3-45f86b164552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcfaa207-33a7-411f-bf01-8967886a4ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb33804-5706-4d00-9027-0df91454685e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a6b825-45e3-4dc7-b72e-67e29905c0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ed6b4a-682d-44bf-afc9-9768edeee4eb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be44115-f2e1-4951-b55d-cb3f56daf6c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f88ca895-f4fc-40fc-855c-6b4057a368db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71db8da-db86-4673-8662-6a0fa7c815f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357b4f77-efe3-4d52-8739-47b7b2f07cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f554ad0-b9dd-4752-9dff-b584d2b5824c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fabf9f1-b77c-4caa-a32d-9d13fe6133e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0f74aff-fc8b-45d5-8939-26dad65c95b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665192c7-34cb-4cf0-a8ff-0de3c6bd07f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7c98b7-4288-45bf-b074-4d597438b5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdb78c6-6a7b-49ec-bc84-1ba1d65b02e8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763f3039-105a-40da-9d24-f846645f25b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54babcfc-b398-466f-bf4c-a7ae9b91b1cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1155e77c-06e8-4d12-9671-0b639c65f16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa8b7e7a-3535-4d87-bccb-77d60f6aa415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976243de-7c82-489e-8623-7db57adca6fd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8490388d-529c-4fff-803b-176fc1afc44b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "203cc7a4-07ab-49e2-b263-45d49aa95df4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b38d78e-2668-478b-bc6d-47d928463257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144729aa-6a96-4eeb-97a2-2cab0b741517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f182d314-70eb-477b-92a4-7547f403b700",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccbfd32-126d-4d8d-845e-74b11d4b2a58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3fd44f3-2704-4a82-bcc1-d9197937c557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1df57bd-48ed-4902-8c3a-61f8f9613c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3927b800-e6eb-4112-85b2-de9e71d2c6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832b0075-6c4e-4814-88bb-cb0547284257",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df00113a-c189-4fc7-bdd4-17d19d6a132d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6404105-b5b7-4f25-9d1e-4ae46b02e1ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bec6724-3938-43db-a522-075ca30a4dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2ea14c-e51c-4d6c-aab1-0e4e4a60abfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66da9634-cdda-4b92-bbd6-2e4419f15c0b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f9e69e-9309-46f4-9bbe-ae023fde4294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c70dc27-0339-4175-92a7-92ec703e49b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4836d2e2-1ea1-4174-a0d4-788aee424729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b1806d-6edc-4019-a015-a0d855bfed0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fe41e5-fb2f-4bfc-9d18-2d3d0d515c85",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3395e60b-5d5c-4bc5-88c9-c72e5a9a1be4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b96e7e1-adb0-49e0-b7ae-e9c4824347f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ea907c-44e8-4dcc-8f0c-7df3fd222733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de69f91-c4a1-4545-ad9a-deeb7bd4a0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5735b4aa-dcae-43e9-816d-31634a6c81be",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9956439c-88bd-4aa4-8343-26585a6de55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b049559-43c1-4b2b-9e6c-3629fb463047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a82767b-7cff-4cb3-9248-bb504a6b3c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a4d16b-7151-4484-b792-338ce7b50fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9c92b6-0845-4897-bff9-2bced61f5d9a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b37d9c2-f0c9-44f3-a92e-a0a1fa2457ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c91535e-f47f-400a-b30c-1a12593ba56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f33051-20f1-49cb-a203-ff2e79f00375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86f0c41-55d8-42a3-aabf-7f1ea0644e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a1bbcc-e33a-470b-8b07-48d422a13673",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01342203-1f10-42af-a13f-362dc93dc9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b564f9c-1e87-4e80-9aeb-d52ab24f4140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d053a0-2f9c-43a6-a90c-61942298ef9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd23cdb4-5cba-43dd-aa3e-21f46b554bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05374771-1c15-4692-8145-e6f2dcf11cd0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263c2a9b-6163-4eee-bcc4-53a3b245cd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3b0c73-e48b-41cf-a97e-b139fee41a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05735702-f4ab-42ee-b5d8-4984feafce49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef8bb57-08e6-466a-b4f1-68de25102f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6eff778-3c9c-44b1-a429-e45c61575c96",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bb8777-1c7b-4181-8dc9-0b84f2662181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57e2109-9186-4176-856d-e8575442cad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98d465d-454d-4143-a609-caf699aebe89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7a9d88-6079-477a-b8eb-51d81804e4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a9bd4c-b20e-4e7b-bb08-2b77f12d2783",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016c9062-779c-4d14-a003-529fd7df7710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c24252-a819-4404-a82b-ec0d885405e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82571946-c972-4b3d-9265-24599444cbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8833b536-1294-41e7-8392-9b1b630bc97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1efe7d6-cbc3-4808-9e91-eac1c032f2ff",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6e1baf-c7b6-46d8-96da-dcb2afbf2a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3be56e-cfdb-4955-a319-52b8b85529f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f94064-a7e0-4b9a-8398-1dd02cdbaf2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414b73f3-28e0-4395-871c-07a529ac9e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78bdfdd-f850-40ec-9811-303da6f0e80d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b108752-74d9-4eec-b90c-3a43aa92d57c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73efd7fa-fef3-48a4-a312-9828bf51703e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cad0ee-b255-432f-88a4-cb81059d3203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd71f779-6c9c-4acf-8c5c-bd4e84ae3538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4aa4e49-c966-44c1-ae2c-34c075e2f162",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff6c76f-93c6-424b-8b33-dea7a8ca26b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e74b1bf6-d534-4292-935d-72ed851cea96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d4a10f-276b-46f6-85b2-7bc6734ce0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391df2cf-f923-48cf-a8b8-7baf0770aff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e520f5-9e72-47a5-b345-4b0e18e052c3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fab50ae-6243-4322-ac2b-e065169690a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90245bbd-402e-4398-9bc0-88ac0e94bb28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e1455e-a0bf-42ca-9184-d8bad6cb1d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802e59b6-db52-469b-824c-8ea20a1bbc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edc7003-3d97-46e3-bfd8-13c8b55552a8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740dcc37-ed6a-4cf9-a89a-bf034dd3f555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d92314bd-0486-499d-9a3c-294f83764cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d36f7c-00d3-43e9-99f1-2e8f5a47567f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82406433-5b44-48c1-ad06-7382f446f273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4c87b6-efea-434d-8289-6a94524c9ad4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7384ee6-9caf-4fa8-96a5-cb62deb7c31c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73e1389-04d1-4d45-9b9c-394cbe3458d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e8d850-b72a-41d1-a6df-29bea8a202b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06d4731-d1da-4468-b368-b9553f632f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4ea92f-998d-493c-8537-ee70779b55e1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942249d5-db3d-407e-9935-a42998b6eecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9141562f-45d0-4530-8410-24bab790156b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c47d1f-b1d4-43f7-8fab-d5d76ec54076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23058447-99b4-40d7-a71c-a1fe4fa7d735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a81823-d386-4a43-9993-6fd167e62833",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c804f0-2d86-4c68-bdf9-a8c983fc5ad7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6dc9127-342b-4a5d-9266-db9b18fb350f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fd5e23-ea58-4ce3-8bad-22f1e4961c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e22c18b-6f5d-4feb-a405-509cc8cf578e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2838c64-87db-4399-96ec-028007ba55a5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accf7b60-1519-4612-9365-ceabf4c89567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "012580c9-0024-49a8-88bb-4e020d5efeb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc817e62-4c91-495a-9051-7beee2e47633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7d55c7-ce6a-4863-8189-9e7f61719652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52371a5-4aae-4469-9791-a7f140063b16",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e051807a-cff6-4299-ae9c-a4cdac41fbed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4166081-06d8-4e8e-9c56-709a6da67d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73e325e-aa57-4fb6-9cc9-8394cfc23e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084afde4-cbb0-40d6-a224-cc0af3a30e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64498866-9539-4fd7-a431-e184b547f526",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d3b4ae-3a5a-4186-8719-15d28d1364e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51c76153-fed7-4041-98b7-6c10cbfd06d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9f4b02-2e52-45b1-bb14-5ac59d2a5280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88708fd4-63d3-4844-877a-1f9c2c8073e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bfbbd0-e457-4dda-8e94-7f4159cdb32e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030a6a27-57a4-4297-9a34-347e65c722c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5d0950e-adad-4ae6-a6ed-a411aa5e2e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2c2575-14ee-4b90-91f4-f9640b9a8ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c8ceb7-6b33-4840-b0f9-900daf9f45e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce30485-a98f-48f8-9e36-a47541f2d57f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1491f616-bdea-4acd-9479-db6f0aff751a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af31c1ad-e73b-4666-89e0-248346db64b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ac15fb-83c8-4e5a-8291-1d89d8a809c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b294c81-f64e-4ce0-9e3b-304711e6b372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd59d54-673d-439a-8b7e-e627da4a916a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1d47ad-d37f-4b24-afba-f832367745fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af50417-a83a-485d-ac11-42e16835c49d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f93eaf-af74-4ff9-ade1-60621bdfb7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b071047d-5161-44e2-910a-acc26c1f7677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91f3ab4-7a96-4af4-98cb-0b38c89034bd",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00e1c21-b050-4432-b0fc-4c3113b15dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56d13f3-4832-47a2-8c78-362bf93d7bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fcb9f6-7694-4083-89c3-934baa154539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b343542-4ac2-43f4-964a-1456a80d00f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b22c7ca-8497-43a1-8240-00ca843f755d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c66e50-db15-4d17-8b69-e29e9d78ebd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da7302d-686d-4080-b18b-a4843adfd086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a138fa6-d8f1-45d7-b8d8-016e247d4bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e1c4ab-f429-415a-a8aa-fc831a939430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8582cf-c7c7-468f-be02-3c26c5f4702a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab74e58-1b28-4ec2-8ac2-fb20efbf2642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "207a9895-3ecd-440f-9098-7e329344dc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f1969c-224d-4f3f-b3ef-87cd058c9e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7f2e6f-06e5-4010-a334-fbaa4b4fc6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabbefb4-1f62-4d94-8346-5c5cb090edde",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e5bdee-3901-4b93-88d6-78b769a124c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb0f773-0765-4fba-bc9c-b2a4c3820025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae97327b-efb0-450f-8e74-dac450a46eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9d5444-6592-4dd9-a3d6-cab4c0084f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96767026-974a-4325-9084-1ba4b7c08d0c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68f6474-5ae5-4db6-a9e7-db2e3f39fee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f161ae5d-c1df-43c7-b3c2-d2cd4415b638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c719446a-b4c3-4f91-b5e8-32b218136f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356cf6f9-f4f2-4e02-be04-cea89169e4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56dc8e74-9ce5-4be8-bed0-ce89ce4e57cb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0aa6b9-3a20-41c9-bf30-8fc2af0fa105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc89d5e1-48e9-4ff3-80ee-d42a217d3f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6dfcee-deb3-4549-9ab9-c4225432dfce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06a3bb8-8a57-4233-b970-6d695baf4085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ec105f-0cd0-47ab-a89b-c9b85b46d1d2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fd7844-b0c4-4dd4-a192-bac0d26b09ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1724380b-3d12-4005-9441-178f00aacf16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7928b090-b4a8-47e4-8b34-8fd99031ad8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82bf972-dde5-4f88-ae9f-d5c669704c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9324aa-ad90-4ab7-9a6c-c4cedd380d2e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f038c2-5fc7-4089-8afa-dba56bc8c518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff172bb6-f4dd-46b1-98ae-94a742960f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eef2555-18b8-4b01-8e7a-c13939f948aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b18aec-2f3d-448a-b40b-e9132d6e59ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c15e308-e7ce-4d60-9961-1561899a43e4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfdded1-5af9-4f6e-a41f-7f6e50275e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733a85e5-7fb4-4300-9dae-e14a450018bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d83127-8105-4d7e-9afa-2b291ef5770e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92291682-8024-499e-9fca-9b7aecd5d4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67dd70ae-4774-408c-a66c-4f2a9660894e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217a7c25-9847-4acd-91b9-3ec006fec713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d4dd0d-3985-49e8-bb1a-c29c8ace31ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422da9ed-5503-465a-a369-7425a0e692e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fcb730-3cad-4212-b132-039dcfb705ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9683b6a-733a-4246-8c84-48e503ba5d1e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc0eda0-7691-407f-8e68-cdf7c0643efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7799e227-75b3-42ef-9c63-cf6639e008c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bb42df-c60f-4d86-b0e0-f43d3b272a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2bf4b4-bf67-4fa5-b589-8ee7d731c505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a4e015-3b90-4ab5-af52-c6d448832937",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6a2e3d-d339-4a62-84f0-b153b180ff21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8af0bae-976b-42af-8232-449d0a0cdd79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dd3bb9-ce2c-4ca6-ad1c-848926c862b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfb9e01-2dea-47e5-8f43-1a7c2d644bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc538cae-4ab1-4b33-a16c-61ec18f88e4b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7bfbbf-5ad8-4c71-ab88-1b35beddb2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde8380a-75fe-4eac-a59d-2f12efb00705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28689e4-dd9e-4fc3-939e-52a4524fe324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d07d3a-78f4-47aa-bd93-184a86b95338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c204da0d-61b7-4216-b343-688c3ab1b048",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ae7f6a-8135-4f37-b0fd-fd4507e5d696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb541175-8317-4393-b126-f86526f9d23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc75f95-7ec2-4553-b5d5-c43025f73905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4b3bcc-df10-4fcd-aeab-ffef6aacf5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a167bfb5-8e9f-4ce3-8e98-7bb5043f6ad6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab91d899-0988-4a13-8078-cb6f34b52b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20266a8c-bda8-4eb3-ab4c-7152dcfeb2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd51a41-1ba1-4400-9123-53a69d956779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b2c3d7-e889-4916-95e5-55fc982e5965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5aedfa2-5128-4aa4-b0a0-b27bece8885d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4be9c6-6b11-4627-94c6-db553740036f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773b4457-ab2b-41c8-b2d2-0bb8f107cc1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d15d2c-b2f3-41e3-8d69-40b7213f8eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c5b01d-5b5f-4146-a423-cd5739da0925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4893657f-03c5-4582-9bfa-3a333bba0c72",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0665ea06-b08d-417c-bff4-e483dfadfe12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb159e93-8f9e-4982-810d-7f6a18575b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2aae08-46c5-472f-80d6-271711e75b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb292306-e257-4be6-8930-c731d4f97a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367c0f6f-f140-4468-ba4d-e5f62aa89d18",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7449569c-6a13-4ff1-bab6-ca26048f29d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8244a5b3-8644-4634-90f6-c763c81eee8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3874f481-c5c5-4891-8f09-71946012c760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84504bd4-5974-4699-ae16-b21d0653066d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ea767e-5abf-455d-863e-b406bc46b1ce",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3322cc47-4057-4c11-bec7-1955c78c7ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb5d032-7b81-4ddf-bf82-d2d29be50f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10065afa-1b1e-485f-aad0-b89cb8ce5d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6c2527-f604-4cbc-bb2b-756cd28fbf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45367dd-53a0-4e10-91a4-09ef342fa938",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02bbcd7-0267-4202-a393-837b6b9be75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e158d157-3925-46ac-be6f-8fda28d19588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88df5dab-dbf5-4549-82f0-341e2db7a68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fac6f5b-2564-45e5-8a25-ec1289754cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380614ed-4a08-48c0-9f61-e65a91ad0811",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df16114-b47e-4db5-95d8-54721144e33c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7958a9a0-3851-4700-a9ac-3fa7c75ebad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd74cc81-2f74-412d-bff3-2ce4bb54d5ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403cae9d-8a04-4898-b2cd-a443bf748a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e13c31-21ca-4889-8e0f-aa1b15a135e0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08cf822-93da-478a-bb97-b819d6fda45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ececc1a1-2a09-440c-b3f4-9e27b65c231b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efdaf31-b9a8-43b1-857d-588fd1a2cfa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e2dee4-f09c-4398-a013-926915a1e0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bd9952-a68e-4046-83a3-6b6bbfe2460a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75c3e09-f30b-49f7-984c-f8bed4912ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cf4eab-3e4f-4319-ba8a-875cabaec65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70af7478-6057-4ea9-b544-0eeebc629f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d05fd1-32b4-4834-8c9a-6c69b102517e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03279bfe-4772-4327-a413-e671bc82cf9c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce043b2-9f13-48b7-b54b-177adb6c0416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d471bbc-c21a-4b08-988b-4e2d88fd79a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d972b6-a984-4632-93ba-78f64d60105f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ce36c8-5c51-418f-ba7f-31c4df928f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff69333-6d1e-4fba-bd5b-869ea5acd06f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f734ab3-63d0-463f-9c67-56fa170078fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c10bb89-1b5f-49ff-8789-bae3627691d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7767cf-ac76-411a-8ba6-3e4b057f66bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ebde9aa-d170-4a9b-bea8-f241aa5cbf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6422d303-259b-4915-933f-320ce044597e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0a8706-9c63-4ffc-9ca1-a02275beffdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b7c81b-1f44-482c-bfc4-017e894e2857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "490ce6d2-f9d7-4500-a527-16beaaa52247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a025220-368f-4067-81cc-c3e1cdfbf62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1729520-d58e-4ab9-85f8-0ead00113881",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d1fe73-32d7-457e-a92e-1e622593fa36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73841c04-2914-4e7b-959c-266bde71b412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b17050f-8346-45a5-b3d1-b00c550562fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3621ce22-55c7-4711-8869-82c87cc276e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1d188c-f27f-481c-98be-823c35858b25",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a596dca4-4f2c-4bab-9ed2-d88e72c02937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7da7c14-b4e4-4823-ae4c-917f736a18d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a54f0b9-a7b0-44fc-8999-7e3270b1ad37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18efab34-eeac-492b-96d0-6c648693ef61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29aa2e5-2968-4882-aaff-d4ba72573b53",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fdc680-b812-4ab9-9e32-408438ec376e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ef46b69-e15c-4360-9de2-25b1df9df51e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62e9eec-aae1-40b6-a8aa-94ae7a296b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f700f4-5a21-4fa3-9875-28c1876b216c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1106a8-b20d-4e0b-9f56-e8975e422654",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0cdf13-7f2f-461e-9251-02875dd3e73e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7c21b3a-a123-4bae-857d-22487bd8e69c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4b1842-19f2-4cb4-9894-1505b093414e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c71755-5c7a-4c52-9eaa-8cb8de0728f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a47d78-b1f9-4794-b7d0-44e3a2551d3d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724da226-c830-4124-aaf5-281254265601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6648dfd5-9532-4de0-bff9-b18ff4270c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5f658c-d12a-4d0c-8727-f2ac8c9303d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8b8e41-cf1b-4ee4-bf07-35d7e1e853d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9754fd-483e-41c0-8783-a8ce34f13f36",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff186bca-928a-47c8-9c61-89ea4b99a385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7bb6b1-7b86-469b-8e78-e1be2e3f9881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f8c734-5393-4892-9382-6b13e384c3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892b7a6e-7aad-4bac-b2b6-d34bf03bb464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e46809-2020-49af-bf48-04f2b5148899",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21643daf-1055-4da5-8e54-0dd77eb1d849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58da53bf-0354-48cb-b37f-584c4dc0e611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3016d8a7-341b-4c61-9742-11b6c8e03015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a8681b1-15c1-474a-b943-632eaca167ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e47aae-b723-4c28-b4a5-849a88181e77",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef24250b-637c-4578-9b3e-be619b4cfcab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c379d434-cff1-4bae-81d3-9e03eb65b15d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a01444b-a51b-4a8a-b081-76d95564513f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe0cd43-aa20-4545-866f-bdbcb3567b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70da7249-7cb5-4c21-8e7c-697d8a1857ef",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40124596-9ff0-4bf8-9ab3-bd3ff902c2d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "156bf5fb-6324-419f-b6c7-0e4437ad8689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39840a99-a669-4575-a946-384278ab580d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eeb2dd5-8c54-47ee-97cc-c870464f7fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db07fce9-6904-4a72-b012-f2de85e92f1c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e0a1e5-2bab-48ad-a7b3-6d4e8281c029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9bdb0b4-6958-41e9-b77b-9458d6a4b476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7cff36-c190-4e6d-a79f-159fac5c26c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1208a338-11bf-416f-a191-836ef780f811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d984f0e-ff79-4f59-8834-6ff06349b169",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fc571c-9821-473b-825a-6cf5ec8f24a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51c6f1c3-02c8-4939-a254-059f8bfe066a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9c64f5-5867-41f1-8546-ea74b9c2e019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5027f4a4-f10e-4d55-a7a8-f1c01659ae28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86acc14-fff5-4ed6-bb77-f2f51ac799e8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47515e1-05b5-4974-81dc-4b40b76e2afc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "384623a1-e995-4b0d-9a89-8e057160ab31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3153f2-5793-4caf-b71a-681eabbbb67f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc071322-1dc6-4ebe-9b8f-e00fde0d9bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ebf7fe-3eb5-4f9f-8b96-4605a4441267",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0952afa-72d8-4ecd-8ca7-a1434e85dffa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a28df751-5d43-44cd-a2f0-885603946011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f3aaa6-b3d0-4473-aef1-cbbaca6605b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3862d67a-502e-4916-a48a-e3c3a83d9668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9000fa10-39c1-40af-b5af-45a0dfddf167",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4697afca-4de3-4d1d-9e19-ed361a5fdff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f10dfd3-ad18-479b-86c9-db8aa894d7d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348e3f51-4fe8-4a2a-b520-5ebb648b006d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f65a8b6-6a2d-45bb-9f67-046122f32fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99585daa-4692-4f7e-ae6f-0c82c13a0b7f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520ed42e-1248-412f-aaae-9f1a8de6d3dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccb4d840-afa6-44a2-bf91-93fd344ba07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6ed48c-bf14-44a6-a6d4-7467c2cd74f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a28cd9-c9db-49cb-a381-1139e9a23af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eca96e-1f22-4c50-9481-cd93a9af2459",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9fe263-205b-4f5b-8fba-364332988ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76608e96-878b-4a78-b94b-617305b37aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ad9b39-b830-46f6-83a6-1eb586a5b809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27aa605c-0e47-45c6-94cf-4cb0de34f803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da77abeb-a36f-454f-b001-73b012d14334",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dff34fc-f385-4efb-8516-09c88fc26ae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5940dca-5cb1-4c8b-8efa-7c8ed5a108a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea99b2b-8617-4992-bcfe-c60a19db6c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06bd89b-fb70-44f2-85d9-cc44ef490168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a1775f-a236-4247-8d23-24f8348c79de",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd1c5ef-4817-4ce0-a004-573e8ce00925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "090a4138-ec93-461e-aeaf-668da34cd691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06051a9f-921f-49cc-9dec-16131a67be11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed053977-00a0-4b2d-a2f3-7a2aeaa75cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f781804d-5ad6-4b0c-a011-887ddcd42518",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0301d06-e468-4aa5-8ae7-c5478ce204b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f3b3670-ca41-4af6-85b3-98e9dba0914e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d07cc5-c7b0-4338-815d-65d753f33445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3e751a-56e9-4940-a876-82daf4a231bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08966a6d-12ea-47ad-804c-840872d004b3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e080e5-9637-4a1d-b7d5-14c1875d6ac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf9dc574-4897-42fb-880d-aa5a17da5062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf07f9dd-03b0-47f0-842e-5dca98943617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ff38ce-18f4-45d0-b6cd-6ec43e73bf4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078427c7-4e6b-41ef-aae5-453e41b9f22a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12db286e-c196-4bcb-b5d3-e7eb7efa026c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e68f2f22-99a5-47d8-8e3b-a3d275de518f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f36b9a-4081-494e-8d2e-412b5359373d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83a5cdd-5010-4149-8c17-5c04875a3faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5222eaf1-eb56-47bc-9543-cf0178145143",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7310a9-79ee-422c-bebe-fbbe31c8d468",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95d13614-c8fd-4f20-8990-2ef407c4869d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "229d1495-b901-404d-90a8-eedc00cb219c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b9c40b-6ca2-4e2f-b068-64f0d922cc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3a00b4-d3a9-41c8-aba1-5d5b149ac586",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6540d5a-9f7a-4159-aabf-9fb023157df1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4820cce-b968-40f8-924f-6bbbce8448fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec108a94-e45b-4817-8d98-479b0c9877c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08fe53a-96cd-4add-bff6-12151b3acffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8761a9e2-ab97-4146-9746-df326ffa0480",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4405d5-436e-4829-9482-b4ef5dedfdd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd6961cd-8434-4e77-af38-43a0af251522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14d3d44-7f56-4c0a-8a60-f05cdb37aeff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146f58c4-f97b-4c71-b86b-d948ae8143a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d3be37-7726-45b6-ae54-0754562f6491",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23410cc7-5e31-45b8-8c3a-37437473ec92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba4176bb-b8ab-49ee-aa8c-5272bd3fa904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c82a215-5682-4482-82f3-f88810d9713d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ded37b-d1ed-42d8-99a5-3416440f3bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f235885-3c1d-426d-a91c-8b59dc762470",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a5c484-5332-46da-96c8-befb3f483df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac77062-4f4e-4025-8470-56a699625fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4074410b-2353-4dbf-ac24-56719d80c876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a968867-784e-42ef-b8b7-a92911484fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f6990f-af59-4f10-bc0f-38e34e618bc3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4b7f9c-b796-4823-8b70-f8fe14c886da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbb5bb7b-3a40-45b7-bbe4-77158fd7a0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ac241c-c07e-4392-88a1-808c639efb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "587036ee-d2be-4d09-be79-59eb86cef7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a569e376-6eaa-4eac-844a-f2e4a0e13b79",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20e69c7-49f0-412f-a2e9-32044f2e756d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd672f39-d71d-4560-986f-641600e9e6c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886122c4-1f60-42aa-8969-0ec2285a20d8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76c7c6d-48e4-4210-8fde-5b665a1ece94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963e2110-3744-4ee7-941e-93d7cc43c0f5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33dd536-2400-4058-82cd-22aea8e38ea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f8b63e9-d9f9-4917-9f37-195a27730559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9a7ac8-91b6-407c-91d3-c072a79a7ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f130e9-f840-418f-af9a-86345f975310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb8b579-237d-4528-99f7-c2c2fa0b6245",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce2c602-ede1-4d8c-be17-e1d2200f29f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1077f59d-4530-4c27-93d0-ee1d6cf32fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ee5c92-fcf3-4552-94d0-eb45cbbdb714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28df486-caa0-43c3-98db-60a23def5a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea040ea0-65ba-4c96-87ea-bcedc5b959b8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d9112d-5b83-4e85-a53f-6fe3bb64d275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a97637e3-e204-41c6-afb8-b1097ba01845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d3aeee-8fbc-4ae9-8991-6308b5303631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b6f1cf-8490-4446-a5a9-49b5f1152964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0492b9e-7a5f-4a61-949e-e4f0d2346269",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b366c0-92bc-4cf0-b573-bdab4bd1129e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b077c67-b5cd-475b-b969-5a19fb116547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f324ce2-a724-4c7e-a3a9-985a2f5da73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8039415b-4754-42f6-b1d3-453125a918f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd21ad9f-b195-4f28-b35c-72fbdaa0e179",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5489722-8d24-498e-ade3-237d4ce09db7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ca892f5-cf7e-4ad8-bc60-12c0f35fd174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0197cf1a-b955-45ac-affd-6b4963608a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7b517f-f468-4051-a051-362f42c197c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa312d09-0bd5-432b-864a-b6e0a4aacfda",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71573a65-5eb3-4567-a926-9a3353e1aa9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0057f5-03fb-4dfe-b86f-4fb2dec5cd01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d483eadb-96e0-4533-920d-73294c69259d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96782338-50ed-47a0-ade7-a523467d289d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9253536d-b62a-41ee-aa29-bd259dcd9120",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09b7fe6-a1be-48dd-bd97-8fdba998b3ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "102218ba-b8e0-40a3-b606-7c25c784b40e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3302654-b6e4-4529-88f5-5ca672fac9dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcbb3e85-23fd-4bcf-b96a-f2283c6e0971"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8395da7e-9321-4db7-9c24-607039e55181",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b17141f4-5e77-433d-bbc5-29ea4255dab7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4022da8-e503-4b4c-92ce-8f3b9945dfb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf459f70-0af1-435f-8340-71967958a098"
                    }
                  }
                ]
              },
              {
                "id": "570649e6-6010-452c-8777-f51bf019bc16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47e44b00-b83a-47d3-bb90-9a4070e51464",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988c97ab-93dd-48ac-b380-b5ca6c7e906d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d4e9fe88-0147-46b9-8c23-6bf402d291de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b23eea1-32ca-41f7-9b62-557a64677a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f8b4b37-57d1-465e-be7b-5dd55c402383"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cfb4b52-40cb-4d22-85cb-a7b7bebc6307",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0b207a5-81b6-4a5c-89f1-8a7c41c6c643"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5b00b6b-cb67-4052-be32-ad02de6d4563",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a61e48d0-4246-4d12-adc6-5b4afbddf80e"
                    }
                  }
                ]
              },
              {
                "id": "8f0b6f6e-30e4-47fd-9a0c-9877fa68208e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b52edc8f-7b6b-49d2-b7af-93c844249385",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2041407f-7a7f-48b4-abea-5746b044be1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e443c3a8-ca6a-461b-b2f2-b3e2d045467f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32f5f31-18d7-4c7c-9680-598ae47e8b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42879a99-e6f5-4155-828b-c0d3e2e41f41"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b668c312-d486-424b-bad8-ffa547640fea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8a801704-2b14-4759-a345-fa58d9643869",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70ebe6eb-8449-4e99-a391-a04f77877349",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "84b36abc-d135-451f-bd29-275339e0bfa9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c2d09d6-b1bb-4335-9ae4-833c55fc5583",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ae5c7e3-5f68-424a-b5d6-91b6c156564a"
                    }
                  }
                ]
              },
              {
                "id": "18d2581e-ae47-4f0d-8940-020f8de7025a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dacd7995-4de5-4fcf-b83d-077536bfa0ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4527e588-740c-485f-bad7-ddd02528410c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7294076-9b1a-4b70-90cc-1af28ad913cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29ed9277-7c91-423f-a239-216ca34eb4b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd507ceb-5b6a-48c6-8f93-a867830174d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "898d0920-8c63-48d1-96a3-e91e280ca906"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "780104fb-9a32-4dd6-bbce-7c1f327cff58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ab8cca6-92af-495f-bd3c-35ed6b80345f"
            }
          }
        ]
      },
      {
        "id": "d4a13d11-ee9d-4bc2-b0df-8c408196bd99",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "af07baaa-9b26-4a72-9a77-58ec7d638a69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58670685-898a-4849-ad17-74a5be2b09b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b04870db-5253-49da-a7d5-187e342f359d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051a2a18-e868-4465-9f0d-9d50c6e3f46e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "291e2f59-397c-4175-b410-c27d3c08a391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95d2983-7273-4fe7-a39e-e0ac4bbc6c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "453bccaf-89fd-48a6-8bb5-fb13c94f5b60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec4ed3ba-0f2b-42ad-9fbc-c4ec53a72cc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "291d1cc4-3c7e-4a57-8667-ae396aa34c4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33a7d8d2-1500-4ea2-bb66-91b90ccb714f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86946ee8-a535-4da6-9442-b09b09c5e595"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bbad63ac-76c3-40b6-af5f-e93ece6ee9bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3522bec1-db36-47c5-956f-2bb34e8775ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d85e4787-315f-41ba-8221-ce907100de0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fbf16399-a572-4fcb-969e-d113d9cdd6b9"
            }
          }
        ]
      },
      {
        "id": "3c7de796-30db-424c-818d-79fbd0090ff7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d610c92e-6346-42ef-a88e-e95f08a2adfe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f7e5213-1677-4c30-bfbc-762528c0f5bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "382d83e6-57ef-4fca-9f40-80d0b2f2a4b9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e872f6-6b8a-482e-b5b0-0df916e30815",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f267545-bf2d-4b52-b4a5-450273616f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19dd0ab-3a8c-4e60-8c9d-117d1efcf8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9e469da-8154-4d29-99f0-e7e192778e88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb2eae63-9b8c-4ed4-909d-92e9452b47e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e95766eb-dc49-4359-a6c9-f6ef8d8f3b4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3428805-3946-43c7-bd26-c2b066a27cd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78da30bb-c99e-45b6-925a-7f115d7e52a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba43508e-c2b9-4aac-8bf0-60c82d5d36ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b247ae3f-c9b1-4e82-ba3a-392b0e5268eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee055fc8-2dcc-49a9-b446-bac8e5312850",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "faa21d12-81ef-42fd-9f79-7a2ebc21f60e"
            }
          }
        ]
      },
      {
        "id": "4d248bdc-3b2f-4ce9-8f4f-632c5b3a53d1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ed458b1e-51c0-4da8-bf8a-82d587e19411",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65afcb04-7060-4f32-a8fc-e215fb9b117c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e67ca1c-9dfb-4b0d-a664-7de194f47992",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dab295f-b09f-409f-bc07-6ab6bfba502f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3a05864-9790-41b8-87b5-e383178b0bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6836732-a6cd-407b-add6-399cfd9e72c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "667d2870-32d6-48f2-9e75-c99089cc5d82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2266b80-b2e8-4ea0-9beb-82fe5b5ca52a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3782db7c-73ac-4dbe-a851-666bc094a98b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8955cf22-0fec-4934-8fac-f4b4a9153ac9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abb66bb5-3ccf-4634-9285-9434c2b360f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f745795b-4358-44bf-92d9-d3ffee6d62e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "757ead13-2df9-453a-b20b-6173e9e55c7a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33536e5e-dbb3-4875-a119-9ca0864e2e5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc71b285-4624-4079-a9ce-86848bd639a6"
            }
          }
        ]
      },
      {
        "id": "d10593a9-8387-4b9a-a788-b21738cd6de5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddf9d2fd-bdd0-4578-8412-ffee98c4f5d8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e01db1b8-3153-4a0e-a951-abd93acda0f7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "75f994cc-2af7-424d-b6fe-18194246a80c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1a05e5f-c1ef-43cf-8e0c-1f907260e105",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b470a9fa-bf89-46a7-a431-80f424ef3516",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.68070175438598,
      "responseMin": 7,
      "responseMax": 476,
      "responseSd": 61.65301728105779,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703464571165,
      "completed": 1703464598100
    },
    "executions": [
      {
        "id": "40620faa-8bf8-4b40-9cbc-16652c6314a5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bf5c7b9c-9331-4ed8-9ee1-54cd7f5e177b",
          "httpRequestId": "3d741cf0-b17c-45ee-adb6-957ac6ed0c68"
        },
        "item": {
          "id": "40620faa-8bf8-4b40-9cbc-16652c6314a5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c90d6e71-2252-44ba-a5b0-6376abc3a99e",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 0
        }
      },
      {
        "id": "92075e59-290a-4ce8-94f4-b3cb74d9ccc6",
        "cursor": {
          "ref": "588c472a-5552-4371-ace5-04af2b3c0540",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b3a9f5aa-fabf-4101-99ad-a4e01828ef7a"
        },
        "item": {
          "id": "92075e59-290a-4ce8-94f4-b3cb74d9ccc6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "59624574-920c-43ab-9859-033a9ecef952",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "e3858656-f22f-4ee2-83a4-54a55984f414",
        "cursor": {
          "ref": "aea00016-4340-4db2-bf62-01aea1ec06b0",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "67b2d149-013a-4f4e-bce0-a3e11ad73755"
        },
        "item": {
          "id": "e3858656-f22f-4ee2-83a4-54a55984f414",
          "name": "did_json"
        },
        "response": {
          "id": "759f4d17-f646-4274-aaed-4fae7bc44d4e",
          "status": "OK",
          "code": 200,
          "responseTime": 246,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a968a3c-2cfc-450f-a49c-89ee313e15da",
        "cursor": {
          "ref": "12faa562-213e-4a8c-9e7d-3384ed725cf0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1c4ba536-d4cc-407a-baa8-f5678034dbf6"
        },
        "item": {
          "id": "3a968a3c-2cfc-450f-a49c-89ee313e15da",
          "name": "did:invalid"
        },
        "response": {
          "id": "5cc0a5b9-d083-46c1-82b8-57813ca3ba2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a968a3c-2cfc-450f-a49c-89ee313e15da",
        "cursor": {
          "ref": "12faa562-213e-4a8c-9e7d-3384ed725cf0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1c4ba536-d4cc-407a-baa8-f5678034dbf6"
        },
        "item": {
          "id": "3a968a3c-2cfc-450f-a49c-89ee313e15da",
          "name": "did:invalid"
        },
        "response": {
          "id": "5cc0a5b9-d083-46c1-82b8-57813ca3ba2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c145216-b3a2-40a5-bff4-c3cdfa05b132",
        "cursor": {
          "ref": "0b7a465c-04cc-44e9-90bf-5e058fbb9931",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "78c6cbb7-f3fd-46f8-9772-3d99caf4c823"
        },
        "item": {
          "id": "3c145216-b3a2-40a5-bff4-c3cdfa05b132",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "06c3b8a4-6e40-47c6-8622-8fa241e7e8a1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c8f44a-eeb9-4794-b79a-a1bcbfb5478d",
        "cursor": {
          "ref": "646d6256-0a4b-4344-850a-c0feabfd15ac",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c62b9964-c097-4ac1-a152-726a64b8ea67"
        },
        "item": {
          "id": "12c8f44a-eeb9-4794-b79a-a1bcbfb5478d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "167ddc09-727f-44b9-9077-8932715cb736",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb40acb-85e4-4066-8c1e-c5a01630efcd",
        "cursor": {
          "ref": "241cd09d-8e5b-4589-9158-209b653fcd80",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a17229e5-4cea-4151-ab78-ad92a1bd1c3f"
        },
        "item": {
          "id": "2eb40acb-85e4-4066-8c1e-c5a01630efcd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5d758316-ff3d-44eb-aca5-28aa8ebe5003",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3612dd03-1557-4423-a998-ea44848957ca",
        "cursor": {
          "ref": "80f94b29-8399-470e-9259-61c67723fe3c",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2e09f4b3-dc83-4f96-9bb7-7c8605f4ba2e"
        },
        "item": {
          "id": "3612dd03-1557-4423-a998-ea44848957ca",
          "name": "identifiers"
        },
        "response": {
          "id": "5ee8d2f8-1066-48cb-b826-d4f1de81c001",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22de024f-109c-496c-b34c-bccbfcd47df3",
        "cursor": {
          "ref": "befaf380-0c08-4e5e-9967-3aecab03834c",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "01ebce16-1061-40c9-926f-16fc2245fbd8"
        },
        "item": {
          "id": "22de024f-109c-496c-b34c-bccbfcd47df3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e8f18046-1139-4975-9387-003048efc184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc05d3d4-cedc-4293-acf0-ac3357b90f93",
        "cursor": {
          "ref": "e6f040ad-0c6f-493b-bc50-3debd8baa1cd",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c3ba447c-01f5-43d9-8d43-fc2878f83994"
        },
        "item": {
          "id": "fc05d3d4-cedc-4293-acf0-ac3357b90f93",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bb1f2a99-309f-4ffe-9cce-3e328618970f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69448fc2-2958-469d-8f77-40a7d3ab884c",
        "cursor": {
          "ref": "56399fca-63d4-4b01-ae7c-1f1b51285fc0",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2aaac390-d873-451a-bfb4-eebf6f5216b2"
        },
        "item": {
          "id": "69448fc2-2958-469d-8f77-40a7d3ab884c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a2588dd7-87fd-4ddf-881d-5b4040043c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c297f55-a788-415c-af26-f2da66bfed53",
        "cursor": {
          "ref": "7fc35b3a-27fa-4aa8-bebe-ba64a9487f16",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2c8e575b-676f-4944-9057-c453f47e9d57"
        },
        "item": {
          "id": "2c297f55-a788-415c-af26-f2da66bfed53",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b02ff6c4-1956-4746-a6a6-e7caf6322909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c755206c-984e-4140-8b90-b704dc0e0386",
        "cursor": {
          "ref": "57c282cd-71a7-45d5-b447-3b17415bfbee",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "db940140-0bd4-4620-8311-8214b7ed7894"
        },
        "item": {
          "id": "c755206c-984e-4140-8b90-b704dc0e0386",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "54bd252d-a16b-42c3-87c0-89dba53acbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c40eb70-2b15-47c0-a117-1e895c5c8af7",
        "cursor": {
          "ref": "0b6bee97-6ade-483f-99d6-bbb1b6b27e66",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b5245fba-4c59-420a-8cc5-3f32cda5c17e"
        },
        "item": {
          "id": "0c40eb70-2b15-47c0-a117-1e895c5c8af7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f6c05a02-01d2-43d4-a467-9c3f5f71aa25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c987de97-59aa-469a-b010-837693ca656f",
        "cursor": {
          "ref": "94d5b0c7-8a3a-4e2b-9f45-efd4884f378e",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5ab6c3e2-c75b-4ea3-8164-0334afd09257"
        },
        "item": {
          "id": "c987de97-59aa-469a-b010-837693ca656f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d7233551-7df5-4a86-8a33-fdd9f5547cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6477b205-1bb8-4256-9853-d2c3858f460b",
        "cursor": {
          "ref": "00ae53cf-7249-483f-bde1-a74e5cb49462",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "962f9437-3ac7-44cf-83e2-7243dc6debe5"
        },
        "item": {
          "id": "6477b205-1bb8-4256-9853-d2c3858f460b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a11666c6-4a5e-4de5-8dbc-a13ff716b693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eba7922-6fe3-4804-a040-259802705ad6",
        "cursor": {
          "ref": "f8ed4dda-391f-4dca-93c8-0d737afaea82",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cac28402-4203-4f6c-95a7-aa898eb00f4a"
        },
        "item": {
          "id": "4eba7922-6fe3-4804-a040-259802705ad6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c1a2a228-17f6-4edb-9159-1fe0b26b57c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0db4b7-b67a-49e8-a8b4-0e1a62fc2ded",
        "cursor": {
          "ref": "e33755ce-fd4e-48b2-b577-2c146b672b4c",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "75ecb37d-d8fd-4555-b41f-1280417ae749"
        },
        "item": {
          "id": "cb0db4b7-b67a-49e8-a8b4-0e1a62fc2ded",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b2c61d0b-bdeb-4fb8-a81d-5b0938316e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5d406f-7498-44a9-8011-de2e7df380c8",
        "cursor": {
          "ref": "e405be5e-6f05-4599-ad01-d43c947fe5b3",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "153c1305-d1f3-4950-a9f8-620e893b9424"
        },
        "item": {
          "id": "bd5d406f-7498-44a9-8011-de2e7df380c8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e410d0ca-319f-4591-828a-5512b844ecf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c62201-4a17-4fc7-af74-a47d008cfea1",
        "cursor": {
          "ref": "a5fe1725-5cce-49ab-bef7-534dd6d74879",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "966819c5-4cdf-4dcd-8708-54b7580fdb29"
        },
        "item": {
          "id": "61c62201-4a17-4fc7-af74-a47d008cfea1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4833eceb-9956-4577-bb49-f12ac657bb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2feec5-a5f7-44c8-be99-768e4f856d48",
        "cursor": {
          "ref": "38b6d497-e39d-459b-a65f-dc085a8c35a6",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a5b179a4-b658-4979-ae0f-f5c2d5af7f22"
        },
        "item": {
          "id": "dd2feec5-a5f7-44c8-be99-768e4f856d48",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "87f6e3c4-49e8-42cf-aa7e-c1438977397a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97f4f8f-4472-4192-bca5-db153659b3a2",
        "cursor": {
          "ref": "d47196b6-5c99-4472-bf5a-043fee6fb3d2",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5302b308-84b7-483e-b146-cc43fa05d2fa"
        },
        "item": {
          "id": "d97f4f8f-4472-4192-bca5-db153659b3a2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8909a316-cc17-4646-b611-c0b19e36e63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e79a2a4-d401-4fda-a991-d8806abeb1c1",
        "cursor": {
          "ref": "6d86ce0d-d8d9-4970-a78e-53348bdb04ee",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "abd39e22-c719-4b1d-b169-979a9a7584ef"
        },
        "item": {
          "id": "3e79a2a4-d401-4fda-a991-d8806abeb1c1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d941b817-7525-407d-948e-f0f6bbb244e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1aa586d-e07c-4d01-af37-3bf5a5f08f6b",
        "cursor": {
          "ref": "691aad4f-fbd3-4820-b96c-0e37e83c8b2d",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4cbacf34-1ae5-46ab-bb28-2d4dff3d19b4"
        },
        "item": {
          "id": "c1aa586d-e07c-4d01-af37-3bf5a5f08f6b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "41943121-d734-4a46-b832-d0c96072dc88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78dc66c4-d936-4b6c-ae11-ae7d4bc9c174",
        "cursor": {
          "ref": "7c4779e2-2e28-4573-9b10-505c3396fc27",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bd192568-a9c9-4339-8def-48ea9c1cef55"
        },
        "item": {
          "id": "78dc66c4-d936-4b6c-ae11-ae7d4bc9c174",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "aba12569-2461-4bb0-98cb-0eb354aa7d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5837b21-dafc-4dc8-b3ad-520217b5faa5",
        "cursor": {
          "ref": "656bd291-d439-40cd-b2cc-27a26c0dbbc4",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7de9f8ed-ed4b-42ce-9b43-b9111f1e6c0b"
        },
        "item": {
          "id": "f5837b21-dafc-4dc8-b3ad-520217b5faa5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d6f03fcf-89a2-4524-8f18-cde1583441c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c725e952-0bf0-4fb7-a692-857290a1f127",
        "cursor": {
          "ref": "350a7e2c-c423-4a41-bf73-40113b2c933f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bf1e05a1-3c05-42da-9dc0-2c37537972a1"
        },
        "item": {
          "id": "c725e952-0bf0-4fb7-a692-857290a1f127",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d01edfc1-daa3-41d8-ac52-96dda7f8231b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5176afa1-910b-4459-bfe0-9335f45d2517",
        "cursor": {
          "ref": "846382ae-9085-4a6f-b5c9-d7de5630802f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6a767d43-77dd-4ed3-9d00-89f0b3719642"
        },
        "item": {
          "id": "5176afa1-910b-4459-bfe0-9335f45d2517",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "afda621c-179c-4bc0-ac00-a1a11a338857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4464c625-7c11-41cd-9073-d61d86b178c0",
        "cursor": {
          "ref": "651738ed-4306-4ade-ab10-c3e29daa94d2",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5d1fb97e-bcb0-4786-82ed-fc2baea99f33"
        },
        "item": {
          "id": "4464c625-7c11-41cd-9073-d61d86b178c0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dc388359-48dc-4460-aa6c-5a383ad97be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc1bae3-3507-432d-9ee1-097a19bf9045",
        "cursor": {
          "ref": "5b5ac870-8eab-4bfd-ad4e-a858a6217416",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bc7b0935-7813-4dae-a008-43b5f04d64b8"
        },
        "item": {
          "id": "bcc1bae3-3507-432d-9ee1-097a19bf9045",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1785c54b-f330-4226-ae64-84ff23afb147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f331fc-f1f2-4dd8-9eb5-3091928804c6",
        "cursor": {
          "ref": "c2ebd287-421e-4ee3-a7df-5f3af8bb1616",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8c08de8c-2f01-41f1-8b54-c8f7b64f3c4e"
        },
        "item": {
          "id": "88f331fc-f1f2-4dd8-9eb5-3091928804c6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "50263f04-4b97-4dd3-9970-ea033c38729e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ade7516-315c-4ace-9cab-ba9291cb4f41",
        "cursor": {
          "ref": "1f3215a2-82af-4b0c-96ba-b7558f07acf6",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2056cab8-1b7c-4a06-8b5a-1d2f1ae9f6c8"
        },
        "item": {
          "id": "9ade7516-315c-4ace-9cab-ba9291cb4f41",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b63e07c9-558c-4375-9930-2f28ad5e7d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80655878-3559-4179-a6c8-f503d0ee8163",
        "cursor": {
          "ref": "3f7f8aed-9f62-4362-8574-aed8576da7ac",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e38334a7-8a4f-47f8-9284-07c239b095c1"
        },
        "item": {
          "id": "80655878-3559-4179-a6c8-f503d0ee8163",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd427ec2-c895-484d-87ae-67f28abbd306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b8d72e-0a56-464d-a9ec-938ddf259e0f",
        "cursor": {
          "ref": "d81dc342-3f25-4c82-89ef-ef3324241c7b",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4018b875-f6cb-46df-b319-f26181005dc9"
        },
        "item": {
          "id": "26b8d72e-0a56-464d-a9ec-938ddf259e0f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8968629b-6e6a-4c2c-b080-ab812a04196b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26eb28ab-5e9f-497e-abc3-bc2baad43110",
        "cursor": {
          "ref": "5740a174-869f-4dfa-b981-65e632fa6f79",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ea0fdb2b-f47a-4ade-9ae2-2e111fc28db3"
        },
        "item": {
          "id": "26eb28ab-5e9f-497e-abc3-bc2baad43110",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8b9cb160-92be-41b9-9833-4501b913e81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b63d95-c367-477b-b52a-57384a5b12a5",
        "cursor": {
          "ref": "a31b54e0-3d2d-417d-88bd-3e910f6dcf97",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1bbc1502-c668-4796-9bca-95a7545d7aac"
        },
        "item": {
          "id": "53b63d95-c367-477b-b52a-57384a5b12a5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "962fe7d0-3baa-4b3b-822f-bdd4ba438d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61230bc1-4ced-4d9f-89c4-1f9675400d17",
        "cursor": {
          "ref": "97915ae3-ec34-420d-9127-6d4467c4f6e8",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f096c343-e014-48d0-82c6-47eea71d52e9"
        },
        "item": {
          "id": "61230bc1-4ced-4d9f-89c4-1f9675400d17",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9f26bdd6-1bbb-4ca7-800f-9cbf80bee547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0664ec2c-26c9-4c73-9892-326b0f14d3c5",
        "cursor": {
          "ref": "c0f0451c-4294-44aa-aa13-b1dc618ff41c",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d3772c47-f373-4464-8d8c-3d8fb9eed523"
        },
        "item": {
          "id": "0664ec2c-26c9-4c73-9892-326b0f14d3c5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1574fa7e-7788-4f0e-ac60-8dd47df4b1e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b383884-96e4-4fed-8303-936e73f44deb",
        "cursor": {
          "ref": "bff5849b-90b7-4ee1-8ce9-96759aee342c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "33e04a7a-f863-419d-aa8f-92c06e5cf20a"
        },
        "item": {
          "id": "3b383884-96e4-4fed-8303-936e73f44deb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e921fb9f-ff13-4568-8c72-cfac263bb82f",
          "status": "Created",
          "code": 201,
          "responseTime": 476,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "da037a3c-d8ed-4176-98a0-3ae6842c4bc5",
        "cursor": {
          "ref": "39d0bbb6-3300-4bd5-9b2b-093e8049c0be",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1a2c17db-ba73-4b17-8ea9-51d57404ec78"
        },
        "item": {
          "id": "da037a3c-d8ed-4176-98a0-3ae6842c4bc5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ef8c31ae-8b9e-4481-aaa5-2091b06da045",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e34dd53d-7657-4628-898b-5cd79a72ea45",
        "cursor": {
          "ref": "acf31afa-8e09-4158-8c54-f9f06884f9a4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bed6f8ad-376d-45fd-a209-01c3ebb336a8"
        },
        "item": {
          "id": "e34dd53d-7657-4628-898b-5cd79a72ea45",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "582cab53-0830-4572-983f-3cee1ea5e530",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c43bcc73-723c-4fa6-b51e-dbcfa80b9dc1",
        "cursor": {
          "ref": "4966c767-a769-406b-bf36-1b9d253f1bad",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6ef637d2-072d-4272-8b4f-2432160242fd"
        },
        "item": {
          "id": "c43bcc73-723c-4fa6-b51e-dbcfa80b9dc1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f67f3e99-0102-4d77-a471-0fa4e8d82925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0564bcd-e981-4417-8ce7-566969a70b0d",
        "cursor": {
          "ref": "80ce4f6a-0ad7-4713-99ce-559cd2451a43",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "13b60959-4531-4913-8639-e3ce99715f01"
        },
        "item": {
          "id": "e0564bcd-e981-4417-8ce7-566969a70b0d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8ae09e4f-cfd6-4f37-bf7c-416c143741df",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e7f2e6df-9ca6-4056-8368-9d0ce03fcb0a",
        "cursor": {
          "ref": "9fd51faa-653e-403a-8a0c-84f45e63f0de",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "45909290-328c-4b8d-a5bc-59c0cfd9cc44"
        },
        "item": {
          "id": "e7f2e6df-9ca6-4056-8368-9d0ce03fcb0a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c28d60d1-efec-4208-96f5-59bb63a61948",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c0506e71-f910-4dae-826a-fcee6895d888",
        "cursor": {
          "ref": "ea17a33b-2578-4b57-bbb8-a568a11a2aff",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1f46979c-ca50-4798-a197-8056dc40cb24"
        },
        "item": {
          "id": "c0506e71-f910-4dae-826a-fcee6895d888",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "00372f38-ef55-47f7-876c-c0f5334592c4",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2f069060-caec-49ec-ad27-4e36b7a32e5e",
        "cursor": {
          "ref": "1d3282bc-ad11-4f1c-b5c7-9aa6cae12d13",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7e2525ed-61f5-49fa-8c33-1e5655766b8b"
        },
        "item": {
          "id": "2f069060-caec-49ec-ad27-4e36b7a32e5e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4f2f0afe-459e-4c34-8a4d-11301606a848",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "969f492f-641b-4f90-a7ea-87e9e7a5bca7",
        "cursor": {
          "ref": "5e4cb447-cc86-427e-abcc-fd8bc2b436c7",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e09a51b3-d817-4327-a573-d57769702bc8"
        },
        "item": {
          "id": "969f492f-641b-4f90-a7ea-87e9e7a5bca7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "64763fa9-83d6-4a83-8dc2-a084ba2669a8",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "de431d25-ba11-4e4b-8e9c-dc9a9e0902ec",
        "cursor": {
          "ref": "e1449a41-df50-479a-a912-4cc4fdc08bc4",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "507d6871-1b12-4475-ae43-5574856a8ff7"
        },
        "item": {
          "id": "de431d25-ba11-4e4b-8e9c-dc9a9e0902ec",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c4dc3bb5-a974-4f28-8b6b-18988b03819e",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1e06155a-707d-4c70-b9c6-deb150a537e0",
        "cursor": {
          "ref": "09b5c3d6-b110-4090-ae1b-c2250108d107",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "27423243-c541-47ab-b12a-0259c77716cd"
        },
        "item": {
          "id": "1e06155a-707d-4c70-b9c6-deb150a537e0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b99fb183-45ec-4ed5-a369-d5b1caaa3632",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "fea4efe8-57dc-4aff-b807-ef4b5b5b83d7",
        "cursor": {
          "ref": "6ed33b43-b3fa-4918-9a15-23eaa7675a26",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e9478309-04ca-4983-ae34-8c7e4975e99f"
        },
        "item": {
          "id": "fea4efe8-57dc-4aff-b807-ef4b5b5b83d7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "15a0b8fb-1c8e-47e3-9d71-ee9918d6ebbd",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e5abb46b-4408-4e9c-aca8-a754b22b2d11",
        "cursor": {
          "ref": "190ff185-36e1-4cf1-b24d-649bcf191bbb",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7aac9a2f-f596-4488-8799-5b85bac4a537"
        },
        "item": {
          "id": "e5abb46b-4408-4e9c-aca8-a754b22b2d11",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4a366d8d-8c56-474c-9c5d-a4fe6785c643",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bca4d98f-2c15-47ac-a041-23cc0645e4f8",
        "cursor": {
          "ref": "47ad5995-5656-47d5-aac2-0eba5b17b835",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e18af33d-df67-4da4-b1b3-1fe5d0d4a4a1"
        },
        "item": {
          "id": "bca4d98f-2c15-47ac-a041-23cc0645e4f8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2779c56e-209e-4b8f-98c8-b8d47b45b69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817c1c8d-a61b-4cb1-afe5-594c5ee50ed8",
        "cursor": {
          "ref": "69b343df-8798-4bae-a2a5-88f54fa0bd32",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6059f7aa-920a-493f-b342-1cc66c58154c"
        },
        "item": {
          "id": "817c1c8d-a61b-4cb1-afe5-594c5ee50ed8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3decda8e-0724-4830-bd6e-e5ad8fdc736a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3dba7f3-4078-4012-94c1-80e442e3a91a",
        "cursor": {
          "ref": "e7828e9d-d28d-448a-b7f1-b1ca2a115594",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ac3e31f9-341e-4fcc-a672-801999fbde6a"
        },
        "item": {
          "id": "a3dba7f3-4078-4012-94c1-80e442e3a91a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d482caf0-eb38-449e-88a1-a03509b30731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b558470f-4f16-4b84-89fc-21bb4a6da355",
        "cursor": {
          "ref": "d86132d7-3c1c-49ef-9e08-979d7402633f",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6b4fb008-139c-466f-9ee0-2516c0a255db"
        },
        "item": {
          "id": "b558470f-4f16-4b84-89fc-21bb4a6da355",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a4efe252-8ac4-493c-8f7a-536c63d86962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1b62d4-cd55-4a16-bffe-cf4173467671",
        "cursor": {
          "ref": "71bf2ad0-2809-48c6-9318-cf4be1499d9a",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6175dcbc-cb8c-436e-b938-22c16ea8d463"
        },
        "item": {
          "id": "3f1b62d4-cd55-4a16-bffe-cf4173467671",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f8107698-8265-48a8-a172-c8dd278eb6ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3ea83f-7855-4a09-ab3b-754c75bf26fa",
        "cursor": {
          "ref": "1f87d078-c750-4e74-a51c-46a53bfe7256",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b399d383-ba5f-41c0-9106-a7a28f9340b6"
        },
        "item": {
          "id": "9b3ea83f-7855-4a09-ab3b-754c75bf26fa",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2030d097-f57a-454a-91d4-bf21088384bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9365796-612a-444e-a4b7-4d4ef4bdba72",
        "cursor": {
          "ref": "bdb0c2c7-bdff-4c68-b24e-7d09aea0e44b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1c4c6e13-8da5-4971-af59-dbf73fb01d5f"
        },
        "item": {
          "id": "e9365796-612a-444e-a4b7-4d4ef4bdba72",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "323bd7fa-a2d2-40d7-a3db-538c525ce74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d4bab5-99a7-49e3-be7b-e033c7aec7c9",
        "cursor": {
          "ref": "d9c37940-e7df-44e3-b352-7a1685b0200c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0fe1becf-f307-457f-80b1-26651ea391d6"
        },
        "item": {
          "id": "78d4bab5-99a7-49e3-be7b-e033c7aec7c9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "48733ac1-73d4-439e-a828-0178025b0260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536fc54f-1749-443a-b8c0-c5a40ef25ed0",
        "cursor": {
          "ref": "fceaa742-89d9-4687-9a03-47fcd428d9d3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bedfac94-eb71-4838-8280-30efedcbc90b"
        },
        "item": {
          "id": "536fc54f-1749-443a-b8c0-c5a40ef25ed0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a3b1d97a-a671-4c4c-8dd5-dd7413ee5fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fcfa4e-c93d-4b1c-8884-cadaa52f2478",
        "cursor": {
          "ref": "3bde157b-c559-4efc-98a6-f6bebd0320d8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "24658392-1b2f-41e0-87b5-e332036eacbe"
        },
        "item": {
          "id": "90fcfa4e-c93d-4b1c-8884-cadaa52f2478",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c10585fb-6d6c-42d1-9fc8-ddbbfebafa0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa1420f-e518-4ae8-a459-b6d566a43e00",
        "cursor": {
          "ref": "6a2845eb-fd63-4f52-966d-703c861b8030",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4f8eee80-83d3-4257-bc05-d5d060b70f18"
        },
        "item": {
          "id": "0aa1420f-e518-4ae8-a459-b6d566a43e00",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d9849faa-b574-4c4b-bf74-cdd8cd5543f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d314ff11-22c5-4cbb-ba07-142929e7d578",
        "cursor": {
          "ref": "e68f9eea-25d8-410c-bd34-9227060ddb72",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "907afa68-2f21-4981-9e2e-5b5c565aa329"
        },
        "item": {
          "id": "d314ff11-22c5-4cbb-ba07-142929e7d578",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2d3febb7-b03c-4f41-9866-2351ad0f2cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e99b988-5e6e-40d4-94e2-6ce8debbb5d7",
        "cursor": {
          "ref": "fbebc8b3-a8d4-4ccd-8feb-82e2dfc0db3d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "210becc0-0dab-4edd-a8d2-4276d4c119b7"
        },
        "item": {
          "id": "4e99b988-5e6e-40d4-94e2-6ce8debbb5d7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bb3eb18d-6780-40dc-a230-338f77aa0837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9552c3f4-46ed-467d-9f4d-3b1ef4c7e80e",
        "cursor": {
          "ref": "c74afe10-9e80-460c-8e55-2dd8ccb05045",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7ca6c8b7-15e7-40eb-a34a-1543bc09271b"
        },
        "item": {
          "id": "9552c3f4-46ed-467d-9f4d-3b1ef4c7e80e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "89c6c8ec-b7af-456c-af65-8178c6231090",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "633bd7b9-6659-4acb-b0ab-5c3e4ffb106a",
        "cursor": {
          "ref": "5172acce-20e0-433f-ae59-dac42ff12a98",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ae71a9c9-4660-4816-8652-90650aeaba5d"
        },
        "item": {
          "id": "633bd7b9-6659-4acb-b0ab-5c3e4ffb106a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "66aee247-3d79-429f-9cb3-117fcd02e973",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "02527101-7f2c-4226-9d2a-b26822bb2669",
        "cursor": {
          "ref": "2cefa1d6-6847-4cc2-92ac-04fbb3b60814",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c7acd4d3-3236-44c6-a949-7456580fe6fb"
        },
        "item": {
          "id": "02527101-7f2c-4226-9d2a-b26822bb2669",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e6e145f8-0e29-46ba-86c9-ead495d9a1d5",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8114cb01-01ce-48d5-9648-da1752b3967f",
        "cursor": {
          "ref": "81e5e296-a44c-45e1-80c8-54c0eeb6e92d",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5e0456e9-c53e-409b-84d9-cdbf19ff4fe7"
        },
        "item": {
          "id": "8114cb01-01ce-48d5-9648-da1752b3967f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e96ea9ef-42bf-4e99-aca5-bbf130d44a20",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bcd17f87-ecac-4e18-8390-7ceb564d17e0",
        "cursor": {
          "ref": "b890a628-d75e-4a24-9592-fc1008a78dfe",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "619aaec3-d368-4da0-8bfa-60a6eb5f3cab"
        },
        "item": {
          "id": "bcd17f87-ecac-4e18-8390-7ceb564d17e0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0b76b14c-1431-4ffb-ae4b-822653d83f31",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ae246888-0232-4b8e-9615-1b50d3ca5af8",
        "cursor": {
          "ref": "9db208a5-6253-4494-b375-482600b2206a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e82b2e2f-036b-4792-be09-70007ce4a36f"
        },
        "item": {
          "id": "ae246888-0232-4b8e-9615-1b50d3ca5af8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "be91e478-bc98-4002-b75a-d0c843a054cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aaf05c9-86e6-4c63-9259-3a21b6e8eaf0",
        "cursor": {
          "ref": "516df278-9bcc-4d06-8545-46c5fde50422",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7d86afd1-73cb-4c1b-9c57-88dd53febabe"
        },
        "item": {
          "id": "8aaf05c9-86e6-4c63-9259-3a21b6e8eaf0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "db914f4a-eece-4133-8638-6bfb8478e503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5f0074-ce06-4ff0-9d8c-3069595cee85",
        "cursor": {
          "ref": "a7300620-27e6-4aa4-9dbe-e330665a5fae",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1e3de594-1573-4986-aa32-03fdc7c1e090"
        },
        "item": {
          "id": "7a5f0074-ce06-4ff0-9d8c-3069595cee85",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cb2ffd2b-de6c-4ea0-8d98-6c2d485cf74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a33ffc5-e1d1-46d9-9129-5b0e3ff9371f",
        "cursor": {
          "ref": "3354e4ba-7fb2-45fc-96e9-f3bdf7c67b0c",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "51c191b7-a498-422b-b8b2-34ebfdbf54e4"
        },
        "item": {
          "id": "5a33ffc5-e1d1-46d9-9129-5b0e3ff9371f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "001f327b-78eb-404f-ab93-3463e98ef186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1703a40-acf9-4a9a-874a-9117e05ce4fe",
        "cursor": {
          "ref": "5c9b304f-8860-496c-a60e-063c41486b0d",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "71bd9154-9ecf-41ba-91ae-c9d452e33491"
        },
        "item": {
          "id": "f1703a40-acf9-4a9a-874a-9117e05ce4fe",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d1793e32-1d6f-420d-9b03-478eb014d119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a44032-445a-466b-94a1-92b17a7dac3c",
        "cursor": {
          "ref": "4c0ff92b-294f-498c-8d07-65c8b5008a90",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "34757a22-a306-44e5-b397-b0018046f74c"
        },
        "item": {
          "id": "14a44032-445a-466b-94a1-92b17a7dac3c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ba00c069-b22f-4532-96bf-87268ce340ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df65863-31ea-4376-910a-f5f99d0ed7aa",
        "cursor": {
          "ref": "3d0bfdef-cf59-4aac-bd22-b697da381031",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "10d4e981-8171-4056-8087-2ec11b505dfe"
        },
        "item": {
          "id": "9df65863-31ea-4376-910a-f5f99d0ed7aa",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c18f3fee-5b2a-4d2f-8f7e-2a09cd3cdaa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3206574-db87-4f13-8b33-03d81b31c90c",
        "cursor": {
          "ref": "97620f04-f134-4af0-99ed-717d712a8f7d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4cfe912f-1d80-45df-b76f-cd8f5b4347a4"
        },
        "item": {
          "id": "a3206574-db87-4f13-8b33-03d81b31c90c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "058045a7-9f0f-4ffd-9bc1-aea9b10a27cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c26ec83-9d92-4b19-a9e4-66c8c04f4153",
        "cursor": {
          "ref": "6c022b49-22a4-4256-b5b8-2544e132d0b4",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e26be38a-4367-4e11-9b25-1742d2e89c14"
        },
        "item": {
          "id": "3c26ec83-9d92-4b19-a9e4-66c8c04f4153",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "708c369e-8d68-4415-92e8-53528b047497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d405966-fb24-4c6c-8727-4e8724bb85ce",
        "cursor": {
          "ref": "023ff7bd-6a83-4579-b7c6-8e4191ab1493",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3dcf69bb-687f-4c8a-90b5-89fc00d2e7a3"
        },
        "item": {
          "id": "9d405966-fb24-4c6c-8727-4e8724bb85ce",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "466194e1-c697-4297-8d9c-0096c6fcf0d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6c0206-f3ba-4919-bbf4-0566c3d51a1f",
        "cursor": {
          "ref": "30d1f40f-8640-4b95-8368-a49418753bc3",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "96059339-3375-4f97-a508-e1780aeda9de"
        },
        "item": {
          "id": "8c6c0206-f3ba-4919-bbf4-0566c3d51a1f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "41ecdebd-eadc-4096-b0e6-f17042560308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e1f54c-10e4-4177-a1f2-8dc105b74791",
        "cursor": {
          "ref": "b6aa1dfe-f90b-4cb4-8d21-83755fe2480f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7691cd5a-4ccd-4930-af9e-9cbe375495c1"
        },
        "item": {
          "id": "56e1f54c-10e4-4177-a1f2-8dc105b74791",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "87d62995-2261-474d-8f7a-a32139f174c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41dd5137-d694-4629-9a2e-a0c1415f4755",
        "cursor": {
          "ref": "05d544ef-618e-4f70-83d8-9df26c9b9efc",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ff6373af-303b-4ba4-84d4-bbda71309647"
        },
        "item": {
          "id": "41dd5137-d694-4629-9a2e-a0c1415f4755",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ca54dd3f-f8e0-4f30-8450-46d06dc3af51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d9cc31-458f-47d9-bde5-59b4fdcac949",
        "cursor": {
          "ref": "f33393df-9500-4eb7-8b4a-bfca1b69da25",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3ded218c-334c-4251-8703-006e95045c27"
        },
        "item": {
          "id": "41d9cc31-458f-47d9-bde5-59b4fdcac949",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b9cf716f-4193-473c-8d07-8a904fb1cec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9318a2-81c0-4024-b575-3974c6a223a5",
        "cursor": {
          "ref": "c36d39af-4787-42e1-9018-82f941abe442",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5a7d9c45-3a2d-4410-bc70-579be3a50e34"
        },
        "item": {
          "id": "bb9318a2-81c0-4024-b575-3974c6a223a5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d118b1b5-d5d5-4b38-9048-9bd1c98d64f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687c31d5-7b14-469c-acaa-5127e9d9ea0a",
        "cursor": {
          "ref": "f5577dc9-66c1-4b6b-9e86-598ea9671bfb",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "933daaa7-2022-455c-8af8-dfbcc5c29b59"
        },
        "item": {
          "id": "687c31d5-7b14-469c-acaa-5127e9d9ea0a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a2266d7c-99a2-4978-bad5-e2e3c71cd0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4b5eb8-9e03-48f1-bd16-b221448a8286",
        "cursor": {
          "ref": "aa1c6e3d-3240-45f5-9d58-74a5744f8b32",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "65d60583-0eac-4c99-8bc3-067156343add"
        },
        "item": {
          "id": "4a4b5eb8-9e03-48f1-bd16-b221448a8286",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d1801ffa-2369-4591-874f-8a514fbee6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e3c575-d4c3-4ad4-bd32-49739d956f73",
        "cursor": {
          "ref": "6289fa9c-0d61-417f-bf80-b0a6f603f5da",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8e9220c5-4ea4-412c-a2fb-36b5f2477e06"
        },
        "item": {
          "id": "a0e3c575-d4c3-4ad4-bd32-49739d956f73",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "336b8ea0-eb63-4201-974c-7d62853b4b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020f702d-5edc-401b-af5f-1d239f737a44",
        "cursor": {
          "ref": "a84581ec-bbb5-49d8-9afe-3709fbaa2916",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2ff22b4b-7c97-42d0-88ea-2003bb89965c"
        },
        "item": {
          "id": "020f702d-5edc-401b-af5f-1d239f737a44",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "19b2590e-eb2e-487d-a0fe-b9655f9d8892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a409bd-6e77-4785-bad8-85c4656dddec",
        "cursor": {
          "ref": "1717ef50-6504-4118-a88e-9b71ecbb373c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d2659393-af51-4b84-8374-38f2a43e3fe6"
        },
        "item": {
          "id": "88a409bd-6e77-4785-bad8-85c4656dddec",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d05c6db7-04b1-432b-9af8-0e6cad6c8614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f4f234-3f83-423a-b762-a74087170938",
        "cursor": {
          "ref": "890067a8-f43f-4f9d-97d8-974b4c60b608",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "277e2e87-68a7-4b33-b717-539517a8cb4a"
        },
        "item": {
          "id": "83f4f234-3f83-423a-b762-a74087170938",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fd907e9f-0ce0-4b64-b869-659d66290e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3f67c8-3ca0-4c69-8a8c-89190222a803",
        "cursor": {
          "ref": "9075641e-74ad-4832-be3d-9cebe9ffdb7a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5fe9a951-36de-4f83-bb2c-dd31c9fa3277"
        },
        "item": {
          "id": "8e3f67c8-3ca0-4c69-8a8c-89190222a803",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "18fb96c8-2779-4f30-a9f9-490d7895e731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92990c49-b3b3-46f2-b2e4-4ece33a58503",
        "cursor": {
          "ref": "8220ae87-518f-4b1a-8efb-d022ab44c94c",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d0c656a8-5f6d-4cc9-9cb3-e435e903bcf4"
        },
        "item": {
          "id": "92990c49-b3b3-46f2-b2e4-4ece33a58503",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f1488a40-e6f6-45a2-9a29-203b6b0bae92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc70aa70-6dae-4f3c-b207-b67514aa7429",
        "cursor": {
          "ref": "23e8ebb5-ffd4-4875-87fe-b14e89af9ae9",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5de27c73-a2a2-403d-99a8-852582ce9ec2"
        },
        "item": {
          "id": "fc70aa70-6dae-4f3c-b207-b67514aa7429",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "73bc3933-2012-4c96-a16d-05c4e87301cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b552140-cd21-4987-b5f0-8563d00f944f",
        "cursor": {
          "ref": "ef484f78-54f2-4bcf-b180-eb8edca77b07",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "58665e12-73b9-40e5-bde5-392d3acc398c"
        },
        "item": {
          "id": "6b552140-cd21-4987-b5f0-8563d00f944f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cbc58143-8740-4b9e-ad97-952e13938540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19694928-d327-41d1-b973-051e960086e4",
        "cursor": {
          "ref": "82cd93f1-22b0-4f1f-ab3c-d4b39e017a40",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6b4f8a48-48ed-459c-b937-8340d439c4f1"
        },
        "item": {
          "id": "19694928-d327-41d1-b973-051e960086e4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "05ecf578-6e44-4458-a334-ee140081e4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1089626e-c96c-41aa-8d89-2146e015e348",
        "cursor": {
          "ref": "9beb0a65-a72d-4977-a639-5778501c2223",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b9fa6cfc-c455-4c02-87a2-255e6239368d"
        },
        "item": {
          "id": "1089626e-c96c-41aa-8d89-2146e015e348",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "401f235d-25e7-4ec2-b506-75f0c5682d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c61e0c-9463-4e51-be00-573a593f52e8",
        "cursor": {
          "ref": "19a7d8ce-4868-41e4-a095-719fae5d6e9d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "48acb62e-a78e-420b-b24d-54a9da7a72ac"
        },
        "item": {
          "id": "e2c61e0c-9463-4e51-be00-573a593f52e8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "eb864d1a-d112-4cab-aa22-468a567816f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b1777c-b6c4-45d7-a75f-f2c5dc08b58a",
        "cursor": {
          "ref": "bea9c7b8-112b-4987-9867-25dfc1a1618c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1cced7d3-a2b8-425b-bdc2-20a6e401b82c"
        },
        "item": {
          "id": "96b1777c-b6c4-45d7-a75f-f2c5dc08b58a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3bf02049-c283-4a31-be9b-8eec43037158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc3d1b5-1a3e-4d76-9437-2625598a8938",
        "cursor": {
          "ref": "5c045aaf-5e9c-474f-9db9-013cda439221",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "abb4b6a6-4faf-417f-a376-49a72756846c"
        },
        "item": {
          "id": "acc3d1b5-1a3e-4d76-9437-2625598a8938",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "99042aed-d04f-4df0-8ba6-bd8f57800e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468eb0d0-bfc3-4402-8627-e5e79370e9f4",
        "cursor": {
          "ref": "be2e9ed0-22bb-49a8-a6ba-83cf16d6bd62",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1cd45284-dbe6-4350-856e-06b5ab67aa36"
        },
        "item": {
          "id": "468eb0d0-bfc3-4402-8627-e5e79370e9f4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "47a90658-923e-40e1-856e-d8c4f7f19d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11e5af7-966e-4549-9f00-246698b2697a",
        "cursor": {
          "ref": "7b8e69e6-e75c-4c95-952e-cd0339cd2b93",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bb2dd85c-42b0-45bc-9805-54be64f489f6"
        },
        "item": {
          "id": "b11e5af7-966e-4549-9f00-246698b2697a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "716a9b4c-a7f7-4c85-872e-d781683ab4b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bf8cc1-23cb-40d1-b240-e2a9c0770cf4",
        "cursor": {
          "ref": "c7b01ba5-5d1a-4b0a-9c6d-0cf63a957078",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "32501787-2ed6-4e39-9856-07efe15fad90"
        },
        "item": {
          "id": "a0bf8cc1-23cb-40d1-b240-e2a9c0770cf4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5147fa07-724f-456d-91e3-f60b8a75cf43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ceabdfa6-b32b-4d6e-8917-cad5afa99259",
        "cursor": {
          "ref": "44b4a10d-7276-4ba9-8dfb-7c2bdc2e8e58",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1a2ad3bc-e2ee-4965-9ccc-f5130acd9e4d"
        },
        "item": {
          "id": "ceabdfa6-b32b-4d6e-8917-cad5afa99259",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0ac72f81-c11b-4c17-b738-6fb3742827df",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d515bdf5-c3c2-4ea5-ac8b-2db0f3ef028c",
        "cursor": {
          "ref": "30afa80d-6b85-41ca-8b2d-3c799a9944a2",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7cddb555-26bb-4d9c-bd70-427cc79bc9a9"
        },
        "item": {
          "id": "d515bdf5-c3c2-4ea5-ac8b-2db0f3ef028c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "60a9613a-fded-4f2a-8162-b19e08e3ab47",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf14314d-b331-489e-9de3-211ee8ad228e",
        "cursor": {
          "ref": "a3b8af9b-a484-41df-aec5-79e766d75511",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9823d4f8-d574-4521-bd8a-279ac0df1136"
        },
        "item": {
          "id": "cf14314d-b331-489e-9de3-211ee8ad228e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "861c9170-13f1-4543-9725-9857cd634182",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "879e4998-d661-40b5-aeab-9e0b57f49e19",
        "cursor": {
          "ref": "7e3f80ce-9e8a-4009-9ac3-5a9ccc8e8046",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d2511ec8-04ab-48fd-90b7-0e45509d619e"
        },
        "item": {
          "id": "879e4998-d661-40b5-aeab-9e0b57f49e19",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c0626395-4b8b-4e08-b922-57763f7cc256",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0a6fb6-ffa2-4572-8694-1c482d3f245d",
        "cursor": {
          "ref": "0386d7b8-539d-469e-bb1b-4810c9be4deb",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "65be1d8a-98ed-4e5b-96e3-538a2c160acb"
        },
        "item": {
          "id": "fd0a6fb6-ffa2-4572-8694-1c482d3f245d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "377885e4-976f-45e9-bd27-c6c15537c4f5",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-25T00:36:24.350Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-25T00:36:24.350Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "da36c19e-1c20-429b-b126-5b8d673f5e04",
        "cursor": {
          "ref": "b9c248a5-f1be-4363-bc69-99931b4f991a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4dac470e-91ab-41d6-9786-0c91df154256"
        },
        "item": {
          "id": "da36c19e-1c20-429b-b126-5b8d673f5e04",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7e0618ff-2970-42dc-86cc-02c42a913358",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc36348-ff1a-48db-bbb4-2b328b7644fc",
        "cursor": {
          "ref": "2d1b634f-bade-476c-9234-d926670bf967",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0a89bce8-d9cc-489b-a782-90fc71585e25"
        },
        "item": {
          "id": "4fc36348-ff1a-48db-bbb4-2b328b7644fc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "134208f2-98c7-4d39-9562-ab79e2ac782e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38151391-6929-432a-9fd6-1ca7824401ae",
        "cursor": {
          "ref": "2c89aaec-5276-4673-a429-e7d5488459fa",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7df1d1f9-da7c-4357-bebc-b8ef6d744233"
        },
        "item": {
          "id": "38151391-6929-432a-9fd6-1ca7824401ae",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3b83563c-d0e0-4c8e-a3ed-20b267050c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf622ec-e92b-4868-8f88-bd950b3485a3",
        "cursor": {
          "ref": "97c98ecb-cbee-4472-9229-c3dfdd0783e4",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5d4efd14-bfd3-4742-8d40-d0df1b5a5dad"
        },
        "item": {
          "id": "cdf622ec-e92b-4868-8f88-bd950b3485a3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5c0b9a05-cf3d-433e-9fc9-5e519f51e063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9351ff67-57ad-487b-ad4c-24d66e650215",
        "cursor": {
          "ref": "82d4c135-0cab-4aa4-b414-9f230f60ec4b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5c502d93-c52b-4ea8-a4de-a23eb13129bb"
        },
        "item": {
          "id": "9351ff67-57ad-487b-ad4c-24d66e650215",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "84454f8b-b161-4b96-b97e-47909d45c599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335fbcc2-3a90-4773-a1cf-c65251cffabd",
        "cursor": {
          "ref": "c1ba8c7f-df51-47f6-b5de-df227f27dba0",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2c4f93bf-af0d-4a5c-aba7-452118ecfcb4"
        },
        "item": {
          "id": "335fbcc2-3a90-4773-a1cf-c65251cffabd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1d822c01-2ace-428c-8d3c-8cd00c2bd187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4349391-12cd-4ba7-aaa3-7d7426214f38",
        "cursor": {
          "ref": "52e04d9c-93d5-460b-8808-3834cfbf0e4b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1582917b-63b1-4d98-a203-b4e354458a94"
        },
        "item": {
          "id": "d4349391-12cd-4ba7-aaa3-7d7426214f38",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ede7dc1b-eedd-480a-9086-14a5e4035857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f383fa4-cd46-4826-86a6-f5b43591e5f0",
        "cursor": {
          "ref": "82826e6b-ad49-412e-a3d4-7213cc9f4eb9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9c797313-e7d3-4b0b-b77f-27d733761448"
        },
        "item": {
          "id": "6f383fa4-cd46-4826-86a6-f5b43591e5f0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "35fae088-35c8-4843-ad4d-c4cf218257e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9042f01-670d-4ade-aace-59941a285b7f",
        "cursor": {
          "ref": "a6f5a6a7-5ee7-4664-a03d-3619b3903d01",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a4b8cf4d-be32-4864-bbac-bf1b4c9636a6"
        },
        "item": {
          "id": "c9042f01-670d-4ade-aace-59941a285b7f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9d102fd1-af41-4031-ad49-25cd37f89ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4075c939-761a-4530-b01a-f80b017fc49a",
        "cursor": {
          "ref": "5f8af575-465a-409b-b9c0-a650c11cb336",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1a7556de-1a13-46b4-bab7-aeb9af317cd3"
        },
        "item": {
          "id": "4075c939-761a-4530-b01a-f80b017fc49a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "48e0bedc-902a-4d36-88c6-a22b9fc7beed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c80e30b-f801-4518-bb98-2b2cd2a296e0",
        "cursor": {
          "ref": "820a9896-da04-46a1-82e2-bbd6e7893ebf",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a401dd00-9745-4375-b395-190c567cdd45"
        },
        "item": {
          "id": "5c80e30b-f801-4518-bb98-2b2cd2a296e0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8fc8ca71-f13e-4f6f-aece-f5ca0f3b5ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229b3684-74c8-41d5-b081-62e5a4bfe05a",
        "cursor": {
          "ref": "1c7cb8f7-5600-4327-9787-2b1f76eed0d2",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f4aa5def-ecd5-44ac-9668-f826f02fa320"
        },
        "item": {
          "id": "229b3684-74c8-41d5-b081-62e5a4bfe05a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "02f33ba1-b625-42fb-a8ea-105d056b40e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2c24c2-5081-4832-8bb6-3280d215fca0",
        "cursor": {
          "ref": "a2eef500-ccf5-485e-ace9-5c0e7617cd19",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fc33cdb3-53f4-4b95-9601-f1a03226ef2d"
        },
        "item": {
          "id": "fe2c24c2-5081-4832-8bb6-3280d215fca0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "59cfc175-f2e0-4f3c-be33-7c7cf8079fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d0ba4b-32d0-43e0-97b2-991e84202ad7",
        "cursor": {
          "ref": "7a8a9791-64fd-4f1b-8cc5-b063986e470c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "82099ca2-45a8-4b24-9a27-3f8aaad6f4b2"
        },
        "item": {
          "id": "14d0ba4b-32d0-43e0-97b2-991e84202ad7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3fbc1a75-aae5-497e-8e7c-47badc16fc3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9eda15-2505-448b-bf04-d148643d8620",
        "cursor": {
          "ref": "10251392-ec00-4fc0-ae80-35c7e8e21cf4",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "64dcdec7-0a18-4687-a413-6efe6704f242"
        },
        "item": {
          "id": "5f9eda15-2505-448b-bf04-d148643d8620",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "57dfd0c7-f61f-4716-a91a-f0fae3533b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813d21e9-80c3-4492-a0d0-34f3be2bfb56",
        "cursor": {
          "ref": "3c0eb012-c9de-495e-b418-98965ed3be16",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5284db36-6c2c-417d-b385-c1cf2d43a040"
        },
        "item": {
          "id": "813d21e9-80c3-4492-a0d0-34f3be2bfb56",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f000f68f-dae3-45be-bdd4-be412cc46343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054dcd1c-9e98-4d24-96c7-a42b04283755",
        "cursor": {
          "ref": "529597aa-1d6e-46e5-b29a-56dac6471400",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1bd5da3b-3368-4a51-b04b-96dcdc112da3"
        },
        "item": {
          "id": "054dcd1c-9e98-4d24-96c7-a42b04283755",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0112b291-a683-42f9-9a81-756412e10d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e796c6-fbcb-4971-a83f-35f51397e78a",
        "cursor": {
          "ref": "0194f9df-005e-4c8b-9d57-66fc9127a875",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "68af1ff4-59bd-43f3-a99e-eb30fbed6332"
        },
        "item": {
          "id": "c0e796c6-fbcb-4971-a83f-35f51397e78a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7027d40e-7460-4dc1-8053-4946bfffa24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10feb67f-0be1-4d7f-8f6c-9084a6fcd291",
        "cursor": {
          "ref": "e82522ab-bea2-438c-8687-a2d2ae3d5b82",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "140ee845-0faf-45ee-974b-ee14f93142d6"
        },
        "item": {
          "id": "10feb67f-0be1-4d7f-8f6c-9084a6fcd291",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "be37071e-3e6a-405f-8d57-85add23a90a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e84aa4-956d-413c-8f06-b00689622408",
        "cursor": {
          "ref": "4f80ba1d-5d46-4f54-aeea-930a7360fcd6",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7aadef7d-baff-44db-8ade-7ffccb697041"
        },
        "item": {
          "id": "88e84aa4-956d-413c-8f06-b00689622408",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fb27c9be-7a8e-4ee1-bc20-7e106c64598b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b8f951-7bd6-4805-ba3a-b6c3a62c56a7",
        "cursor": {
          "ref": "22764019-53bf-456a-a2db-144076ac7055",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "642c000c-985a-46a8-8ea3-c29840512e20"
        },
        "item": {
          "id": "19b8f951-7bd6-4805-ba3a-b6c3a62c56a7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fb0d338e-9aac-4c43-8828-7188e7868e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed98fff2-092f-4442-b8e1-1d42a68161ab",
        "cursor": {
          "ref": "e1176b43-9975-41b5-81db-02d5772db627",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6d584f7a-1779-493d-9683-bf5f6a40ee4f"
        },
        "item": {
          "id": "ed98fff2-092f-4442-b8e1-1d42a68161ab",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a9727bc3-34aa-4308-92fe-14e8a9929a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffccf610-9cbc-42a5-9592-0ebb80dfb405",
        "cursor": {
          "ref": "abd1b333-a1da-4088-839a-a37a57dd00bf",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "88456362-04d2-4546-b1b4-ce8410b7a72d"
        },
        "item": {
          "id": "ffccf610-9cbc-42a5-9592-0ebb80dfb405",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "737d1235-3046-4406-a999-ed6dd597d30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e245e6-f218-4972-9891-a6b53fdab5ee",
        "cursor": {
          "ref": "d95c7cfd-daac-4743-90c2-8227697f30b5",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5063543e-8a73-4002-a48e-08faa8f3f1d9"
        },
        "item": {
          "id": "18e245e6-f218-4972-9891-a6b53fdab5ee",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b9476237-7f80-4426-84ff-b81b14f74a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07ca39a-ac91-478d-a92a-7f46d4d13657",
        "cursor": {
          "ref": "ca35afdf-193d-459d-95a9-c31de0ea38c4",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3068759a-03bf-406b-b415-cec4dd350613"
        },
        "item": {
          "id": "b07ca39a-ac91-478d-a92a-7f46d4d13657",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e0b1a361-8f3f-4114-b77e-1f729f05855a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c3343d-c4f7-4c0e-81d6-ccdd03125f66",
        "cursor": {
          "ref": "7320be53-b219-44c3-b771-9f3a27aee67f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d6d0e091-a99f-40b9-bc55-f0a77da64965"
        },
        "item": {
          "id": "c3c3343d-c4f7-4c0e-81d6-ccdd03125f66",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "507fa457-90c0-41ed-bd59-c349cbc0a3fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69104707-18ce-4596-aeb5-26198153f039",
        "cursor": {
          "ref": "f57b7fd3-8658-4143-9f99-4d8c5477bfd7",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "19bba713-37ac-4d46-9e54-4e8d17214c08"
        },
        "item": {
          "id": "69104707-18ce-4596-aeb5-26198153f039",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ad45d6e5-6604-4daa-8cc9-eac04e67e3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2633a593-3311-478e-a07e-c77f15002072",
        "cursor": {
          "ref": "11b1895d-6073-43f7-a86b-0a4924b16276",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6d59fe11-35ba-4038-af2d-b1dd48d0ea00"
        },
        "item": {
          "id": "2633a593-3311-478e-a07e-c77f15002072",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ac7da93e-ae09-4347-91e4-aba0e1f4b557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd717c2-4b9f-4f7d-964c-e18cfb1bfaec",
        "cursor": {
          "ref": "122d7cfd-3588-4d8d-b6c0-ab074e3d5d27",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3d7a8e07-6471-4ff5-921c-a2ba91fab6ce"
        },
        "item": {
          "id": "bbd717c2-4b9f-4f7d-964c-e18cfb1bfaec",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "714e3210-4118-40d6-a8bd-19d90b320cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf79fab6-96ed-4816-836a-2ccf5ede8160",
        "cursor": {
          "ref": "c8087fc5-691a-4097-a045-90883c3a2ed0",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3a36cd68-57e8-4cec-bff1-10b0621a4fe2"
        },
        "item": {
          "id": "cf79fab6-96ed-4816-836a-2ccf5ede8160",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "77284302-2427-4f87-87ab-19b9e910efcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6be833f-8a2a-4e62-833b-19a2a4f50af3",
        "cursor": {
          "ref": "486a3906-d017-4e61-b06c-28fa0d9d9f99",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0a770dc2-f8a4-4e15-a68e-177d17be7b99"
        },
        "item": {
          "id": "f6be833f-8a2a-4e62-833b-19a2a4f50af3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "28ef4acd-d080-4117-a105-e8377caf752e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32939497-d7d5-4e19-8a34-aee89906ff42",
        "cursor": {
          "ref": "58a3db4c-b21e-4da0-8ced-31c11da4d319",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6d2f9306-647d-48b0-998e-533f7d05444c"
        },
        "item": {
          "id": "32939497-d7d5-4e19-8a34-aee89906ff42",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "90d4715c-e276-48c1-92c5-e72e7be4c3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6034a382-1e9d-43d1-89bb-cbf5d009e6de",
        "cursor": {
          "ref": "2a5848f1-2d58-4fa4-a3d0-daccd71b0f7a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a302d502-2642-40d4-b9fa-4a2f5e4a685c"
        },
        "item": {
          "id": "6034a382-1e9d-43d1-89bb-cbf5d009e6de",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "357c79c2-91e0-4b97-b4e6-b210c0f8cb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bf2520-e4de-4140-a55d-32ebe2238cff",
        "cursor": {
          "ref": "c6b32531-51af-4e76-98e2-3b9c5792f989",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d8618a01-e26b-4600-b023-dbed2d35c4a0"
        },
        "item": {
          "id": "52bf2520-e4de-4140-a55d-32ebe2238cff",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9898d874-f352-4b53-b552-8233ff1002df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e10c58-23c2-447e-a37d-1c600c0f5f8e",
        "cursor": {
          "ref": "cd83cd60-2540-4c6b-b339-644f6e071219",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5603ca42-1b5c-4d64-a9b7-d4d187dbc4c8"
        },
        "item": {
          "id": "e5e10c58-23c2-447e-a37d-1c600c0f5f8e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e034d739-db61-409b-9cd4-fa522f5d929c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceead61b-bd14-4041-8952-3758ff2e79be",
        "cursor": {
          "ref": "9306d9d7-f148-4e0d-afee-b155fc38ce89",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "09b2ffa9-8c16-47c3-809b-881c890a2bc9"
        },
        "item": {
          "id": "ceead61b-bd14-4041-8952-3758ff2e79be",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "94e099ac-69c6-4808-bdb0-9c45a4974bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098d11f4-7b71-41ed-aedf-8a5fb6bf159c",
        "cursor": {
          "ref": "96094b49-bab0-4ffa-b324-e52501dd8416",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a01e3125-212e-4be4-841d-0f1afa4fcf3f"
        },
        "item": {
          "id": "098d11f4-7b71-41ed-aedf-8a5fb6bf159c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d26595bf-a759-4dfc-b718-7c8c4d9f6746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c763a756-4b1d-4a53-b344-f542955884e2",
        "cursor": {
          "ref": "cffe48cb-3b2e-4f49-b64b-5a7aae41a613",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3e5a358d-48e2-47b9-bafe-f3f6331fa9c6"
        },
        "item": {
          "id": "c763a756-4b1d-4a53-b344-f542955884e2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6214876b-c001-4eb6-a848-f4b90826b6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e405a93b-9828-43b2-8e99-ebdf91895c18",
        "cursor": {
          "ref": "fe5ee482-f4ef-4c51-b0a5-aed2ef7e5caf",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "556a592c-162f-4a9a-b653-e856d15d4755"
        },
        "item": {
          "id": "e405a93b-9828-43b2-8e99-ebdf91895c18",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3bffe363-0319-4930-a892-c11d97249b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a65a04-753c-4411-8a9a-d18e47281c64",
        "cursor": {
          "ref": "8e79f67f-bba9-4d59-abbe-1121a5d2de4f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "51b0c493-7d2a-4bb5-b46a-379170f93d6d"
        },
        "item": {
          "id": "00a65a04-753c-4411-8a9a-d18e47281c64",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "53c05094-a1e6-496d-abb8-b1801629dd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c21382f-6b1c-495e-b4ec-de2d11f67544",
        "cursor": {
          "ref": "5f6d8acf-6b9a-4cca-9c28-f8a01079bfb8",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "81225534-1e87-46ce-a456-6deca5783cad"
        },
        "item": {
          "id": "9c21382f-6b1c-495e-b4ec-de2d11f67544",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3a67615d-29ff-4ebe-a249-18b9b4bd2cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781b99d5-e668-411a-81d5-4201530eb41d",
        "cursor": {
          "ref": "539dbc7b-0ba4-43fa-af4f-512d62991197",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8fdc70e0-9a31-4f15-b22c-902547dab628"
        },
        "item": {
          "id": "781b99d5-e668-411a-81d5-4201530eb41d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3e99ba87-abac-4a26-8ba1-336f088214a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8049d2-fb01-48bd-866a-45d6cff3a9db",
        "cursor": {
          "ref": "df6144d0-a412-47b8-b8fa-eb95a5f147c8",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2674c3cd-1431-4c42-b711-f44fdd8e8c1a"
        },
        "item": {
          "id": "1f8049d2-fb01-48bd-866a-45d6cff3a9db",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "611c033f-a5cc-4f0f-bb22-b33eddeb4d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db21534-f2c5-484a-8906-8247d721fcd8",
        "cursor": {
          "ref": "874f46d6-029c-4908-ae2e-d4c13d23aa8c",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b523ad46-3dd2-49cf-b4cf-bf55f69ac43b"
        },
        "item": {
          "id": "0db21534-f2c5-484a-8906-8247d721fcd8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c028d4ad-b44e-40df-a827-84d147ad3d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee6fdd9-8fa1-4ec7-a4cc-44ec674518cd",
        "cursor": {
          "ref": "9130346d-0e3a-4e4a-89c3-086651ffe6d1",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9d756a9e-b065-4a42-8c3d-8db7ea7d65be"
        },
        "item": {
          "id": "fee6fdd9-8fa1-4ec7-a4cc-44ec674518cd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fc574c7c-25da-48e4-8362-72902d13ed24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a327791e-a89d-414d-aa12-5e2483518d7a",
        "cursor": {
          "ref": "1bb9e33a-a7f8-4efb-bd0a-0e665478c053",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "40f2d03d-afbf-43cf-9da7-6520e920f797"
        },
        "item": {
          "id": "a327791e-a89d-414d-aa12-5e2483518d7a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6d9d435c-5298-4e53-a941-31d779369585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55ad2f8-053a-46b7-a791-57b33cf79945",
        "cursor": {
          "ref": "f150aa54-2c00-4a86-aa22-8817abd0fa77",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9fb79232-2ed2-4092-9da3-6e8220118622"
        },
        "item": {
          "id": "e55ad2f8-053a-46b7-a791-57b33cf79945",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a5ca07dd-6b7e-4ac0-8632-1c0c8cff425e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4afba5-fcb2-4413-9c86-96ef8b56173b",
        "cursor": {
          "ref": "f9e19655-0e4e-4aa7-a79f-f3a4e908f2a4",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8bc157f6-7156-49dc-a136-003281cecc86"
        },
        "item": {
          "id": "ba4afba5-fcb2-4413-9c86-96ef8b56173b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "90780cc8-b218-4d86-a2ce-2a6787e77698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17945f84-1a99-456c-9a3f-b604980e86df",
        "cursor": {
          "ref": "c9d1f6a0-ba6a-4179-bfac-811206458922",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "70e3b694-fda9-4485-846b-76e6184e94ce"
        },
        "item": {
          "id": "17945f84-1a99-456c-9a3f-b604980e86df",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "727efec3-9a71-4f56-ab04-f84107923175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df33132-548c-4c94-8e58-87c473be9e6d",
        "cursor": {
          "ref": "4fe05de2-e217-43c5-b8e4-1d6c6e9ef885",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ec3ea45d-b875-4a5d-a2e0-51977c0cb4c9"
        },
        "item": {
          "id": "2df33132-548c-4c94-8e58-87c473be9e6d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d93b5db2-277a-428c-a26a-ca7b1a25c8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26efd8ac-83c5-4a2f-8c5e-ce6dc0625bdc",
        "cursor": {
          "ref": "031358e0-9605-46f0-8367-1654ac932a97",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7d3e4422-5152-4b40-b80c-a9c2eacf98ea"
        },
        "item": {
          "id": "26efd8ac-83c5-4a2f-8c5e-ce6dc0625bdc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "064b21a8-fea5-4ab8-9723-2a81bb538ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be86832a-1918-47d4-a766-99b153984881",
        "cursor": {
          "ref": "465d1e1d-5a8c-4d08-9101-d8785d68b000",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9b31b7a9-c706-4aea-b70b-442553298b28"
        },
        "item": {
          "id": "be86832a-1918-47d4-a766-99b153984881",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "86382f6d-34a9-443d-b2e7-3c9d1d375fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370e383f-6ae1-49f8-8129-b7e94529934d",
        "cursor": {
          "ref": "854f3acc-f722-414c-86f0-640f9930c3aa",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9a68ced1-d1e1-4e31-85ed-198b995dc70e"
        },
        "item": {
          "id": "370e383f-6ae1-49f8-8129-b7e94529934d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "44193d42-3025-4c07-a38b-0234d1aa7da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad45f94-664a-4473-bf39-ca96cd61b5e3",
        "cursor": {
          "ref": "e6440833-97f0-4f02-ae1c-50e087c65a13",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3a5f5328-ac09-4a95-90d1-eacbcd7c847a"
        },
        "item": {
          "id": "dad45f94-664a-4473-bf39-ca96cd61b5e3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d1ad1c26-9a99-46cb-825b-633b8f359d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0907b090-6043-4bf7-96b5-066167cd25f7",
        "cursor": {
          "ref": "52d6aee3-a5b6-46d0-8d3d-87488f9bb843",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "696c971e-e55e-4afe-a294-b8f82ef10b95"
        },
        "item": {
          "id": "0907b090-6043-4bf7-96b5-066167cd25f7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c3ebcd1b-9e68-4c10-aabe-6cf9acc20111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ad1f40-f8c2-4429-98ca-c16f553ae24a",
        "cursor": {
          "ref": "ee48cb8b-73fa-421f-83b4-fab88202f122",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6c0cd81b-da4b-406c-aa0d-d488f72e1bfa"
        },
        "item": {
          "id": "52ad1f40-f8c2-4429-98ca-c16f553ae24a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e249e089-80a9-4664-96bd-e5b3a6b954ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17287914-8389-4aa9-8d71-d6d37cb1b953",
        "cursor": {
          "ref": "6375e3e7-e823-4746-953d-6796afe115fc",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ebc7de53-4101-49f9-b5b3-2fb649353609"
        },
        "item": {
          "id": "17287914-8389-4aa9-8d71-d6d37cb1b953",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e7237a22-4dac-472d-8e64-45d1a90add6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8996ed-d9cf-4394-b26b-ee5bb92d14f2",
        "cursor": {
          "ref": "1710bac8-b511-4c11-a59a-83f56abecf5b",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bc4b2aec-37e2-4eef-840b-126ba9c5eb2f"
        },
        "item": {
          "id": "6f8996ed-d9cf-4394-b26b-ee5bb92d14f2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "501d748b-83a1-41cf-ae42-59fff236bbf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ee95aa-3a6d-4495-aaf2-c5ebb6504c44",
        "cursor": {
          "ref": "daa08e6c-6312-446a-9234-cefb87317a78",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bfdcf112-812f-4c14-8a7c-ecb2eedf8e77"
        },
        "item": {
          "id": "a2ee95aa-3a6d-4495-aaf2-c5ebb6504c44",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b35e91f3-e99b-4f2c-84ec-9ec7b68b9139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa4c6ea-2737-4d73-97cf-7aee28569cfc",
        "cursor": {
          "ref": "e4c212b4-eba8-4d1a-a9a2-d5f37f6d06bb",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e19577b5-e18b-4fcf-9b3f-392049728492"
        },
        "item": {
          "id": "baa4c6ea-2737-4d73-97cf-7aee28569cfc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ae9979ca-e624-45a0-b39c-8d27004e1efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0988ce38-ceed-4db1-ac2b-17dcb0455192",
        "cursor": {
          "ref": "e72ee792-3bda-4f53-87f2-ee3eecdbbc12",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aa1c5084-5129-448d-b56a-356792cdabc8"
        },
        "item": {
          "id": "0988ce38-ceed-4db1-ac2b-17dcb0455192",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cb7c32af-8190-47e0-960f-aa6bfab216e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc5d90e-b34d-4741-9a07-9360323cc41b",
        "cursor": {
          "ref": "a2bb4427-d9eb-44fa-97d3-c5cc99fe08ee",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "27e89197-f945-4e52-8274-61905d23e5b2"
        },
        "item": {
          "id": "9cc5d90e-b34d-4741-9a07-9360323cc41b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6745e749-a453-42fd-9826-6f384eca8ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e7db08-7a49-4b22-ab10-cb7ae70856e4",
        "cursor": {
          "ref": "5315552d-9c22-4507-8404-9ec54029dd78",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "299da7ee-9ab3-4e66-90cf-f390dbe67a13"
        },
        "item": {
          "id": "10e7db08-7a49-4b22-ab10-cb7ae70856e4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1ea407d1-964f-4444-a66d-0580a0c5f910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a51cd7-b76c-4663-8a3c-fe5c529940c2",
        "cursor": {
          "ref": "5965b117-e201-4a5f-9f67-198e52b5fe79",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9aacdfba-3df7-4000-8814-d08335b82e0b"
        },
        "item": {
          "id": "76a51cd7-b76c-4663-8a3c-fe5c529940c2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "868ed15b-e0f3-4621-aa57-5da103d61352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a1c22e-000c-447e-acf0-ad5a3c94da8d",
        "cursor": {
          "ref": "b43e409c-9925-4cbf-846d-f189784cfbcc",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "be60f035-9fa2-46eb-bf11-5117c02487a5"
        },
        "item": {
          "id": "b8a1c22e-000c-447e-acf0-ad5a3c94da8d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ce790a5e-343f-4be1-a130-d64c33a3909f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcd1187-4d55-4d77-9ede-5b200d6508b8",
        "cursor": {
          "ref": "323cf3e5-83cf-4ddf-820a-4fc992601c59",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "63e58d3a-e499-4348-9172-ea1b4871164b"
        },
        "item": {
          "id": "5bcd1187-4d55-4d77-9ede-5b200d6508b8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9fa5f35b-9d78-48c8-aa42-1ae8eb9b2d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea33bd6d-d36c-4ced-83e8-904b7c4d3913",
        "cursor": {
          "ref": "b960696e-4db7-46dc-aef1-5b59df48307d",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e86476e0-7e79-4a94-bc3a-d218facdc7bb"
        },
        "item": {
          "id": "ea33bd6d-d36c-4ced-83e8-904b7c4d3913",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "247e625b-6199-4f66-b2ed-d716373487f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b5f5b8-ea83-417a-bce7-e18b47b5f330",
        "cursor": {
          "ref": "3b1e2d77-9255-4284-b7cf-6e8254030a05",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "39a7415a-3faa-4e09-9a44-196383dc7b2d"
        },
        "item": {
          "id": "25b5f5b8-ea83-417a-bce7-e18b47b5f330",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "42b4746b-676f-4bf7-b31a-dd0b68ea02d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f94dd9-d522-4c14-b51a-6e27c1ab1514",
        "cursor": {
          "ref": "bead378f-5fa1-4c91-bd14-08eba81eedd2",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7d4eff6a-5730-43d9-abe8-4a58293f1c9c"
        },
        "item": {
          "id": "c3f94dd9-d522-4c14-b51a-6e27c1ab1514",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "84c8c3d9-97cc-4f1e-9a97-a980c23c5f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7453b68-2387-4dc4-8746-27dc2c0f8c11",
        "cursor": {
          "ref": "42cfb4e2-e476-42e4-9ffc-06a583ecce5c",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "efd02c13-bf53-40b3-832d-c60a020e0f34"
        },
        "item": {
          "id": "d7453b68-2387-4dc4-8746-27dc2c0f8c11",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2755481b-2608-4034-85eb-b96f0c50775f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c915bd-a2f0-4f02-9a1e-fba16fe4213c",
        "cursor": {
          "ref": "542078fb-64dc-45bb-b52d-6733e5b5a3da",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a6e2d27e-100a-4e6d-8438-ef92be1570c3"
        },
        "item": {
          "id": "b7c915bd-a2f0-4f02-9a1e-fba16fe4213c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3a5f8a73-d76b-49cb-a49b-849e837f0ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bcf1e4-983e-4f89-adb2-e117dde371eb",
        "cursor": {
          "ref": "1d49ae50-3430-462d-af6a-a7b300e8f516",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "705cfe34-a813-4d8d-b9f5-009b9d4a6c45"
        },
        "item": {
          "id": "72bcf1e4-983e-4f89-adb2-e117dde371eb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "051eecd8-5d70-4841-af37-2ea6e6534149",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f5d064-a224-4500-ae93-435a0ca77b15",
        "cursor": {
          "ref": "50f69be7-8c29-446d-bf93-06d6188ba79f",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f98a55e8-04e3-4789-93ef-c9aa786267cd"
        },
        "item": {
          "id": "30f5d064-a224-4500-ae93-435a0ca77b15",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9cbe1e1d-2302-4fb1-b3cb-a6009acbc198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a683f96-0d2f-441f-b682-7a67a01694e7",
        "cursor": {
          "ref": "8fb5e847-cfbf-431b-947f-3325e9994e9f",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9f7566d3-705b-45e0-8ac8-5f174922bc60"
        },
        "item": {
          "id": "1a683f96-0d2f-441f-b682-7a67a01694e7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "63e868f5-0a6e-44a6-9fd4-ff0c7b36e36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f3d092-3776-47dc-aff4-c3640adff95d",
        "cursor": {
          "ref": "7ec90a64-542e-4523-b4a9-be75b405e40b",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c79fd2e7-96d6-4e49-97bc-dc0ac7020b17"
        },
        "item": {
          "id": "a6f3d092-3776-47dc-aff4-c3640adff95d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "982451e3-efc5-4496-b0a5-5dc281f27eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48109fc-1336-4e98-8427-d932460cad34",
        "cursor": {
          "ref": "e18fb81e-8b38-499f-8029-279e18f5193a",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0a0c7451-dc2b-429e-bf5e-38a46e3d0cd4"
        },
        "item": {
          "id": "b48109fc-1336-4e98-8427-d932460cad34",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3e00f687-6d3c-4f52-b9de-ee49093d3a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5781288c-263c-435e-83cc-a6804064536d",
        "cursor": {
          "ref": "29e0af8d-e807-4d2c-add5-43c39d14c49e",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c63f13db-c020-45c5-899d-7caa2d0ed506"
        },
        "item": {
          "id": "5781288c-263c-435e-83cc-a6804064536d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "59a130e7-b2c4-4f89-b3a7-8963ce67a5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5036016a-a868-4a34-8db2-ce8a1815ecad",
        "cursor": {
          "ref": "ecd9b2c1-e85a-40c1-a50f-872ed0c3b065",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "01775f49-b02f-4a0c-855d-6bd04718bdf0"
        },
        "item": {
          "id": "5036016a-a868-4a34-8db2-ce8a1815ecad",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "455e3884-6cab-4f65-a2e8-7ac3a9a32302",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b9fd927e-4192-452d-b158-0267808933b0",
        "cursor": {
          "ref": "f9f10087-f41c-4be9-87ce-18c39c5e1ae4",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c36e3dce-356f-4024-8f3b-cfb73bd5f16f"
        },
        "item": {
          "id": "b9fd927e-4192-452d-b158-0267808933b0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "db4eed93-9fc7-4c5a-918c-f0338cc469c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858c0989-a680-4ffd-822a-bd44dfd1f1bc",
        "cursor": {
          "ref": "d1313202-9bd1-46ad-82e1-bf46a950beec",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c9f5d114-1871-45d0-b940-fea1dd12dbe8"
        },
        "item": {
          "id": "858c0989-a680-4ffd-822a-bd44dfd1f1bc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8b292a8a-648d-403a-b2c0-7ec3800b3f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ed6b4a-682d-44bf-afc9-9768edeee4eb",
        "cursor": {
          "ref": "791eeef2-cbcb-4cda-a384-45e3d458a98f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a40ca85b-ca91-4ff2-88e6-9eab99e175f3"
        },
        "item": {
          "id": "41ed6b4a-682d-44bf-afc9-9768edeee4eb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "297f9639-897a-4de3-be35-31f20ceeb540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f554ad0-b9dd-4752-9dff-b584d2b5824c",
        "cursor": {
          "ref": "d2981a9c-2b46-4abe-ae70-4a96abc8438c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "13aead2d-7520-431b-b59f-12ce0d9815e8"
        },
        "item": {
          "id": "2f554ad0-b9dd-4752-9dff-b584d2b5824c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d1ba54d4-83f8-478a-a14b-b4cfa70eccab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdb78c6-6a7b-49ec-bc84-1ba1d65b02e8",
        "cursor": {
          "ref": "e65908e0-de0b-4b53-8e3e-e57d20eae34b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7d6f9999-fda3-4aed-a2e4-055b18f56b7d"
        },
        "item": {
          "id": "7cdb78c6-6a7b-49ec-bc84-1ba1d65b02e8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ff47ad95-a166-404b-acf5-0a2f119854cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976243de-7c82-489e-8623-7db57adca6fd",
        "cursor": {
          "ref": "aa025d63-bfaa-4274-bdbc-85ee9d11c104",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a56d2651-8934-491b-af3f-3179a6a82e82"
        },
        "item": {
          "id": "976243de-7c82-489e-8623-7db57adca6fd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "39bef61d-bd78-40bc-bfb7-40ac57d71093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f182d314-70eb-477b-92a4-7547f403b700",
        "cursor": {
          "ref": "f28bdabc-8a96-4754-9a84-a1bea3328fe4",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d858de9e-2d98-4e31-8ea2-4757f5d7538f"
        },
        "item": {
          "id": "f182d314-70eb-477b-92a4-7547f403b700",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "08a10039-6925-403f-b6df-2672dcd18e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832b0075-6c4e-4814-88bb-cb0547284257",
        "cursor": {
          "ref": "d3c54491-c0f7-4331-92ae-bd77f1f44268",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "45f67224-195c-467f-9f68-0c6c3a003beb"
        },
        "item": {
          "id": "832b0075-6c4e-4814-88bb-cb0547284257",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "29015fb4-3b5e-4de2-a032-d9da690990c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66da9634-cdda-4b92-bbd6-2e4419f15c0b",
        "cursor": {
          "ref": "91c03a3e-7270-416d-9529-bb2f36743c97",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "89df6564-f2c4-406e-9275-b9f1c239626d"
        },
        "item": {
          "id": "66da9634-cdda-4b92-bbd6-2e4419f15c0b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "436330b7-0d25-468e-b4cb-110c9b71a356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fe41e5-fb2f-4bfc-9d18-2d3d0d515c85",
        "cursor": {
          "ref": "f02df5a7-ddb3-4670-b1f3-77c8abc530df",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ebbd0cdf-ab6b-4129-b607-ae0ac8a4af25"
        },
        "item": {
          "id": "92fe41e5-fb2f-4bfc-9d18-2d3d0d515c85",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5a329ca4-6205-42bf-915f-ff5b6ce5a580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5735b4aa-dcae-43e9-816d-31634a6c81be",
        "cursor": {
          "ref": "1fe91f01-b120-4816-8b32-efe808d3650a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b8c3e770-4eb9-4528-9819-9a792ac7d24b"
        },
        "item": {
          "id": "5735b4aa-dcae-43e9-816d-31634a6c81be",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "86a70823-d690-4944-9324-751ed39d24b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9c92b6-0845-4897-bff9-2bced61f5d9a",
        "cursor": {
          "ref": "441dfc95-e6c5-4af9-a9d9-f655297eab1f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "25bdc8cb-6294-4921-bdc3-d9666eddb10f"
        },
        "item": {
          "id": "ca9c92b6-0845-4897-bff9-2bced61f5d9a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f0afc28b-45f8-44de-9363-2b289275a334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a1bbcc-e33a-470b-8b07-48d422a13673",
        "cursor": {
          "ref": "3578de26-13a5-4c43-a2bf-f6a76e87bb74",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f1b56f8a-f2b4-433e-a0a9-ebb0598bf3aa"
        },
        "item": {
          "id": "31a1bbcc-e33a-470b-8b07-48d422a13673",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9393c58d-50d4-4e23-9ffe-e6be71cb1ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05374771-1c15-4692-8145-e6f2dcf11cd0",
        "cursor": {
          "ref": "9386f365-a12f-4166-a137-e44c716de63a",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0871097c-c349-4a85-8e3e-53f2ecdd7c95"
        },
        "item": {
          "id": "05374771-1c15-4692-8145-e6f2dcf11cd0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d5521f13-a472-4b2d-ac4e-49d91c8f681f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6eff778-3c9c-44b1-a429-e45c61575c96",
        "cursor": {
          "ref": "48e1f59d-5bcc-4e82-9b9f-d65aa3c10bad",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "10854af6-3f15-482a-80d4-8e4967892851"
        },
        "item": {
          "id": "d6eff778-3c9c-44b1-a429-e45c61575c96",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c3d93358-f692-4725-9d55-5675046f9f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a9bd4c-b20e-4e7b-bb08-2b77f12d2783",
        "cursor": {
          "ref": "f31914db-d9af-46de-bf8f-848610f38e84",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "16330e97-9091-4eb4-a74b-4f3d5463cf48"
        },
        "item": {
          "id": "f2a9bd4c-b20e-4e7b-bb08-2b77f12d2783",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bdb15831-75b0-439e-a652-683f00d0c1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1efe7d6-cbc3-4808-9e91-eac1c032f2ff",
        "cursor": {
          "ref": "8faa724c-6478-4252-b621-7600314a217d",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5c76f0a9-70f7-4f28-981c-b54d495e20dc"
        },
        "item": {
          "id": "f1efe7d6-cbc3-4808-9e91-eac1c032f2ff",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9375ad18-d18f-451f-8590-6ec88096294f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78bdfdd-f850-40ec-9811-303da6f0e80d",
        "cursor": {
          "ref": "c77e8c9d-a08b-411f-806c-4d98ae0af7cb",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e3327007-aaee-4606-a9d2-9666f522dc91"
        },
        "item": {
          "id": "e78bdfdd-f850-40ec-9811-303da6f0e80d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1b53f40f-5e56-47a7-9fb6-250cef99fc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4aa4e49-c966-44c1-ae2c-34c075e2f162",
        "cursor": {
          "ref": "321da9e2-2725-475d-b614-de5ab9b8fc53",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "90e3c18b-249d-49fe-881a-b26365a0a1ca"
        },
        "item": {
          "id": "c4aa4e49-c966-44c1-ae2c-34c075e2f162",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9a69f834-0a55-4a24-afb0-9e56ca681b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e520f5-9e72-47a5-b345-4b0e18e052c3",
        "cursor": {
          "ref": "0b49cf81-d552-401f-af8f-0219f3a33a92",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "77b420e1-a186-47a3-82d9-4bd97e5ab542"
        },
        "item": {
          "id": "c8e520f5-9e72-47a5-b345-4b0e18e052c3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7042fe33-b453-46ea-ab5d-46b19134b92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edc7003-3d97-46e3-bfd8-13c8b55552a8",
        "cursor": {
          "ref": "80e44b51-38b6-4cf8-af8e-5994c0c680dd",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d2c23acd-ffa0-4145-a7a5-f9ea65c2a13d"
        },
        "item": {
          "id": "5edc7003-3d97-46e3-bfd8-13c8b55552a8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b1950ba6-2b74-4d11-89fe-ac54b5db202e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4c87b6-efea-434d-8289-6a94524c9ad4",
        "cursor": {
          "ref": "55d467f7-f32e-4f94-8fc0-dcf9950cac07",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5e65ad0f-237b-4d95-b049-a49b555579c5"
        },
        "item": {
          "id": "ea4c87b6-efea-434d-8289-6a94524c9ad4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ec3281eb-fc64-4340-8926-441cc8d8c292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4ea92f-998d-493c-8537-ee70779b55e1",
        "cursor": {
          "ref": "6aabd537-b648-4870-aac2-41dbd5a8869e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5918ed66-877a-434e-8df2-d91414bb9c1c"
        },
        "item": {
          "id": "7c4ea92f-998d-493c-8537-ee70779b55e1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f2663b6b-484f-455e-9d7e-172acf3699a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a81823-d386-4a43-9993-6fd167e62833",
        "cursor": {
          "ref": "c2ead680-0531-4370-8894-2b90a986b5fb",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "99df3e27-8b83-4742-9907-799afc9f383a"
        },
        "item": {
          "id": "45a81823-d386-4a43-9993-6fd167e62833",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "06d6de46-7337-40e9-93ee-84ed65128363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2838c64-87db-4399-96ec-028007ba55a5",
        "cursor": {
          "ref": "40c04b9b-c5b8-48ac-8d17-fbe7bf7c80d9",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5ff64ba2-6dee-498f-b4ac-89b272d61b48"
        },
        "item": {
          "id": "a2838c64-87db-4399-96ec-028007ba55a5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5b22b3c4-d40c-42c0-84bd-0db3cae1673c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52371a5-4aae-4469-9791-a7f140063b16",
        "cursor": {
          "ref": "1ee4d003-c46a-48db-ae1e-75fad107c19d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f61b7442-8ffc-4952-b947-4618c09acf15"
        },
        "item": {
          "id": "d52371a5-4aae-4469-9791-a7f140063b16",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "46999b3a-a512-429a-b15a-7765a9563810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64498866-9539-4fd7-a431-e184b547f526",
        "cursor": {
          "ref": "a753caab-7f16-4de9-b0a5-a24cd0cdc90a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8607be84-4ff8-4b6e-ba73-858bcf6cdb5a"
        },
        "item": {
          "id": "64498866-9539-4fd7-a431-e184b547f526",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d01dd74d-ee65-43cd-a8c5-ca34d4c6bbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bfbbd0-e457-4dda-8e94-7f4159cdb32e",
        "cursor": {
          "ref": "4c0ca216-5abd-406e-b501-f153892d5f8c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5309002d-e9c3-41ac-b0c1-09e0a43b1daf"
        },
        "item": {
          "id": "b3bfbbd0-e457-4dda-8e94-7f4159cdb32e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "510f6683-3e71-490d-9699-0f920a637b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce30485-a98f-48f8-9e36-a47541f2d57f",
        "cursor": {
          "ref": "18b764dc-6dea-4583-bc9b-59f63e519caa",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1a415a9a-2a1c-420d-9511-435b4b121171"
        },
        "item": {
          "id": "0ce30485-a98f-48f8-9e36-a47541f2d57f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "aacd2ef2-e18c-4a22-801f-ad406f216ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd59d54-673d-439a-8b7e-e627da4a916a",
        "cursor": {
          "ref": "f71bf6ac-8e30-4633-b1e1-5fa646f6ca63",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "20ea99d8-2b22-40ef-9ca9-8134cefe1074"
        },
        "item": {
          "id": "bcd59d54-673d-439a-8b7e-e627da4a916a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e37133d6-269e-4255-b483-910734fc5b7a",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d91f3ab4-7a96-4af4-98cb-0b38c89034bd",
        "cursor": {
          "ref": "aa70216e-55fb-40f0-8448-15e5b03d4be3",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d583b764-2ed1-4557-9c88-70302a6067e0"
        },
        "item": {
          "id": "d91f3ab4-7a96-4af4-98cb-0b38c89034bd",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "47bcff2a-2352-47a0-89ea-4d39abe40f0e",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5b22c7ca-8497-43a1-8240-00ca843f755d",
        "cursor": {
          "ref": "21a30714-7154-4d0b-af99-87ae9a610f7a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3930faa0-688d-4a0f-9553-ade2262fc346"
        },
        "item": {
          "id": "5b22c7ca-8497-43a1-8240-00ca843f755d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cba4dc8a-b244-4169-a5c0-01da854017e3",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ee8582cf-c7c7-468f-be02-3c26c5f4702a",
        "cursor": {
          "ref": "67edc8c9-5155-4740-a290-3f178efba696",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e141945b-f599-4611-bb88-94628685c38c"
        },
        "item": {
          "id": "ee8582cf-c7c7-468f-be02-3c26c5f4702a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dc6884cb-bc95-4c10-8e1d-67ad801df726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabbefb4-1f62-4d94-8346-5c5cb090edde",
        "cursor": {
          "ref": "2d9e86b7-a0f5-4f50-81b6-7e11e667e1dc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "164cc8fd-61a0-49bc-9885-f38644f14b4e"
        },
        "item": {
          "id": "fabbefb4-1f62-4d94-8346-5c5cb090edde",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ec94cc0f-3a27-4559-882e-52cd4a105250",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "96767026-974a-4325-9084-1ba4b7c08d0c",
        "cursor": {
          "ref": "1a28c002-0807-4950-9845-9bb9bb0c2ca8",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7c1512f5-1126-437e-97a6-8d558dd9c00f"
        },
        "item": {
          "id": "96767026-974a-4325-9084-1ba4b7c08d0c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ac9cde7e-3193-4959-b124-f3e712fe012c",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "56dc8e74-9ce5-4be8-bed0-ce89ce4e57cb",
        "cursor": {
          "ref": "e2b3826c-62a6-4df0-8cdb-bc183b9962f8",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a4124a44-7ee4-4241-b8af-d827a07eb8cc"
        },
        "item": {
          "id": "56dc8e74-9ce5-4be8-bed0-ce89ce4e57cb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "716da506-e59f-4583-a37c-f55c51d4e64c",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d3ec105f-0cd0-47ab-a89b-c9b85b46d1d2",
        "cursor": {
          "ref": "d3feb8f9-f875-472a-a0bb-d946981fc51a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c7312d61-0d72-4f63-9d19-e93b258ce40c"
        },
        "item": {
          "id": "d3ec105f-0cd0-47ab-a89b-c9b85b46d1d2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "aeee3451-188d-46db-894f-04ed1dcbb028",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5f9324aa-ad90-4ab7-9a6c-c4cedd380d2e",
        "cursor": {
          "ref": "7f3718ac-8ba7-449d-8fcc-6d3c1c4036ae",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "97d9648f-7e8a-4fa0-9b7f-e3ad33c4242a"
        },
        "item": {
          "id": "5f9324aa-ad90-4ab7-9a6c-c4cedd380d2e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "895954f1-7dd4-4e1c-b9b1-c6db2d29c8c5",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3c15e308-e7ce-4d60-9961-1561899a43e4",
        "cursor": {
          "ref": "e4bfb28b-6654-4047-a85b-aabe92ecd21e",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5f27280a-9355-4a8d-baf9-b7e423a83fa2"
        },
        "item": {
          "id": "3c15e308-e7ce-4d60-9961-1561899a43e4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "097368c4-0b17-47a2-81c3-eca434f91482",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "67dd70ae-4774-408c-a66c-4f2a9660894e",
        "cursor": {
          "ref": "708ccaf6-a457-47ed-b1eb-7463069127d7",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d474f9b4-8b25-4c89-8e94-1c73562e74ef"
        },
        "item": {
          "id": "67dd70ae-4774-408c-a66c-4f2a9660894e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7f4005e7-d966-4856-9d0f-ed136b3f1c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9683b6a-733a-4246-8c84-48e503ba5d1e",
        "cursor": {
          "ref": "a7c28daa-2e65-46e1-9c57-42de9c6940ab",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "44e39ef2-31a0-45c7-a99f-e3186d60b292"
        },
        "item": {
          "id": "f9683b6a-733a-4246-8c84-48e503ba5d1e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6407c6c1-fb64-4691-828a-32436539b836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a4e015-3b90-4ab5-af52-c6d448832937",
        "cursor": {
          "ref": "c264f19b-45a6-492f-b175-1762ee519942",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4a8a6ece-4a61-4745-aca8-1b36a962e390"
        },
        "item": {
          "id": "e1a4e015-3b90-4ab5-af52-c6d448832937",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4b7568e3-3608-4ee3-855f-daf4b9d44833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc538cae-4ab1-4b33-a16c-61ec18f88e4b",
        "cursor": {
          "ref": "20d0a261-9f28-4ec8-b419-fbf48f0d82ba",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "211386c0-aac7-44ee-86f3-e0664691f996"
        },
        "item": {
          "id": "bc538cae-4ab1-4b33-a16c-61ec18f88e4b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ff14d875-db61-4e18-87cc-244f4211c412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c204da0d-61b7-4216-b343-688c3ab1b048",
        "cursor": {
          "ref": "4646b61f-9767-49af-8695-0df084bacb84",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d1a376c5-8e3c-44dc-a3e3-9ff57969a517"
        },
        "item": {
          "id": "c204da0d-61b7-4216-b343-688c3ab1b048",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9d4c3434-3d38-4f08-8924-a8c8c5f601d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a167bfb5-8e9f-4ce3-8e98-7bb5043f6ad6",
        "cursor": {
          "ref": "d8bb6d16-9bec-4f3e-9256-3ca09f19c314",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fcfc1471-9c3f-477a-9120-f71bebe05d4e"
        },
        "item": {
          "id": "a167bfb5-8e9f-4ce3-8e98-7bb5043f6ad6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "94ae026e-1cd1-4daa-9c44-02f67029d56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5aedfa2-5128-4aa4-b0a0-b27bece8885d",
        "cursor": {
          "ref": "1cfc821e-23c6-4fe9-bbbd-ad5032218971",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a8134d73-a471-4b42-b7a3-e4cb91bc5f5d"
        },
        "item": {
          "id": "f5aedfa2-5128-4aa4-b0a0-b27bece8885d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0de21aa8-01a5-4672-9da1-bd87e4de9666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4893657f-03c5-4582-9bfa-3a333bba0c72",
        "cursor": {
          "ref": "a2164557-5587-4d5a-962f-842e5cb27691",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a70233c6-7284-4ea2-9af4-6337e578ddff"
        },
        "item": {
          "id": "4893657f-03c5-4582-9bfa-3a333bba0c72",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5c304e49-36f7-4025-8bb0-7b9b82458d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367c0f6f-f140-4468-ba4d-e5f62aa89d18",
        "cursor": {
          "ref": "88ba403d-3a59-4ada-b612-cca99977b312",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4045f807-eb6a-4277-bd00-1a66fbd42e14"
        },
        "item": {
          "id": "367c0f6f-f140-4468-ba4d-e5f62aa89d18",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f37cc460-3aad-4794-b7eb-2bf2d31e4988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ea767e-5abf-455d-863e-b406bc46b1ce",
        "cursor": {
          "ref": "78b45616-c06f-4530-bbce-beb2ea0c9bfa",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e305c9e9-51d6-459a-9726-19b84467cddb"
        },
        "item": {
          "id": "02ea767e-5abf-455d-863e-b406bc46b1ce",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "152d5c33-5f54-494d-8621-2f1aa07a3423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45367dd-53a0-4e10-91a4-09ef342fa938",
        "cursor": {
          "ref": "bd7e1c81-d725-410f-8551-4948804498b9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5db6dd56-8625-4930-bd19-82b64012e44d"
        },
        "item": {
          "id": "e45367dd-53a0-4e10-91a4-09ef342fa938",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "48864047-9e73-4869-85ea-093fcf05bdf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380614ed-4a08-48c0-9f61-e65a91ad0811",
        "cursor": {
          "ref": "240e543b-1db2-48e7-a6ed-cee1396336ef",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5ff4246e-f061-4d4f-ad36-78e87bc49110"
        },
        "item": {
          "id": "380614ed-4a08-48c0-9f61-e65a91ad0811",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "432f7fe2-be54-430c-ac9a-3ed1e7462079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e13c31-21ca-4889-8e0f-aa1b15a135e0",
        "cursor": {
          "ref": "334bb4f1-6af4-4d28-ab96-22ff35671e54",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ef0ff70e-0ce3-43e0-ab28-1b772d87da70"
        },
        "item": {
          "id": "e9e13c31-21ca-4889-8e0f-aa1b15a135e0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "41e65e53-f8ce-48d3-9d56-310ce6db0bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bd9952-a68e-4046-83a3-6b6bbfe2460a",
        "cursor": {
          "ref": "34d5d376-6b7d-4ff9-93dd-332fa9309d98",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6fd8510a-9e5f-4c49-a87e-20c2873091af"
        },
        "item": {
          "id": "e6bd9952-a68e-4046-83a3-6b6bbfe2460a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9ab169ee-c8a8-4a7b-869d-1998961fed01",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "03279bfe-4772-4327-a413-e671bc82cf9c",
        "cursor": {
          "ref": "9d6d23be-0c3e-4335-a9cb-af7f3616d912",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "41dc6e3d-6e5d-4903-bfbd-c54ec784783e"
        },
        "item": {
          "id": "03279bfe-4772-4327-a413-e671bc82cf9c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e82ce7fa-df83-4e1e-ac93-05faa0418efd",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "cff69333-6d1e-4fba-bd5b-869ea5acd06f",
        "cursor": {
          "ref": "423ba5c7-9ca9-46a4-b7e7-20cdf917f460",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a0961e59-d309-41ae-ad63-861e700c641c"
        },
        "item": {
          "id": "cff69333-6d1e-4fba-bd5b-869ea5acd06f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7a72236c-ccb6-47ab-ab14-2135d6839297",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6422d303-259b-4915-933f-320ce044597e",
        "cursor": {
          "ref": "9de2cc99-587c-4862-84ad-2cce4bfc6841",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "672e275c-32f8-405e-a37a-1acad46fc33c"
        },
        "item": {
          "id": "6422d303-259b-4915-933f-320ce044597e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "946aeea9-0c5c-4c39-9d2f-490a1758194d",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c1729520-d58e-4ab9-85f8-0ead00113881",
        "cursor": {
          "ref": "0f32e75b-bf67-477d-9010-c4bfc5fbd2b7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "874893a0-556d-4bb1-88c9-2a85941c718a"
        },
        "item": {
          "id": "c1729520-d58e-4ab9-85f8-0ead00113881",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e558dd0f-e94a-4957-be96-a41b55a0e940",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7d1d188c-f27f-481c-98be-823c35858b25",
        "cursor": {
          "ref": "e1df2622-edf2-42d1-8976-85e73eb35e11",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "493d6576-c6a6-458f-9c04-dbf81af44fec"
        },
        "item": {
          "id": "7d1d188c-f27f-481c-98be-823c35858b25",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8ebd8b7d-65de-4f74-acd7-4793fe0de80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29aa2e5-2968-4882-aaff-d4ba72573b53",
        "cursor": {
          "ref": "248c9ea7-fcd5-431e-909c-11afd45b0f01",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b8d1cc17-25b7-4322-80e0-6e6557b47527"
        },
        "item": {
          "id": "f29aa2e5-2968-4882-aaff-d4ba72573b53",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cb18d745-204a-4d34-ac1b-f9298a4eb8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1106a8-b20d-4e0b-9f56-e8975e422654",
        "cursor": {
          "ref": "b5de4f44-641d-4667-bd61-8d9228b448b3",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dd8e101d-c65f-4ec2-a6ef-34e8f5fe0e4b"
        },
        "item": {
          "id": "aa1106a8-b20d-4e0b-9f56-e8975e422654",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "94582ba8-f52a-4952-a04c-07d9c958d940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a47d78-b1f9-4794-b7d0-44e3a2551d3d",
        "cursor": {
          "ref": "1caafeb2-1537-4774-93cf-772855e15b96",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "40bcfbe6-8b20-4800-be9e-f70398a3f2a0"
        },
        "item": {
          "id": "55a47d78-b1f9-4794-b7d0-44e3a2551d3d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3fa6fdb1-7398-4d9b-87cb-db772a8a4f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9754fd-483e-41c0-8783-a8ce34f13f36",
        "cursor": {
          "ref": "ffdeadea-6503-42af-8306-8c4f176ad77b",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2f68c275-1201-4de7-94f9-61f165bfcab3"
        },
        "item": {
          "id": "0b9754fd-483e-41c0-8783-a8ce34f13f36",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7f20d972-89a9-4f9d-a471-277b43036b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e46809-2020-49af-bf48-04f2b5148899",
        "cursor": {
          "ref": "83fde5c8-a164-4578-8e92-ab8190275c50",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "81a16b7f-b12f-40e9-a37d-fb13cc9622dd"
        },
        "item": {
          "id": "93e46809-2020-49af-bf48-04f2b5148899",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2326e7db-b751-4dfe-8146-d4c1f786156e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e47aae-b723-4c28-b4a5-849a88181e77",
        "cursor": {
          "ref": "6fd031eb-fa63-4282-b583-28e0a22b9c11",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "694368f6-adbc-4d4d-bf17-801cdae43ac7"
        },
        "item": {
          "id": "a4e47aae-b723-4c28-b4a5-849a88181e77",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cdea4d6e-e22f-4565-80b8-65aa11a8e421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70da7249-7cb5-4c21-8e7c-697d8a1857ef",
        "cursor": {
          "ref": "94903e81-a5c2-480a-83df-5a3a7367ac0c",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7afacb57-a5c0-46b7-a275-d7179c7e7940"
        },
        "item": {
          "id": "70da7249-7cb5-4c21-8e7c-697d8a1857ef",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d37148bd-3faa-4f77-9138-c07b949bff08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db07fce9-6904-4a72-b012-f2de85e92f1c",
        "cursor": {
          "ref": "fe7527b9-b7d2-44e5-ba5f-05171271f030",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bc302783-0b8e-402f-a646-76704ddbff83"
        },
        "item": {
          "id": "db07fce9-6904-4a72-b012-f2de85e92f1c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "70588f75-8f61-4ff4-b253-16d80c5edab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d984f0e-ff79-4f59-8834-6ff06349b169",
        "cursor": {
          "ref": "230ff13e-db4b-4477-b168-71902bf357b5",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2ad634ce-080c-4b8e-a0f8-f27dbc69b414"
        },
        "item": {
          "id": "7d984f0e-ff79-4f59-8834-6ff06349b169",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5b050d84-77fe-4082-9a1b-6420f9d9e32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86acc14-fff5-4ed6-bb77-f2f51ac799e8",
        "cursor": {
          "ref": "cb9794ff-d51f-4968-9323-9c6c0d129ded",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0ea76345-7171-440c-bb97-517f55af7e69"
        },
        "item": {
          "id": "a86acc14-fff5-4ed6-bb77-f2f51ac799e8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ac7bd961-055b-4902-a710-5297db0bfd1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ebf7fe-3eb5-4f9f-8b96-4605a4441267",
        "cursor": {
          "ref": "3569d233-03b7-4549-b522-841becd1aa50",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2fce57ca-2983-40a6-922e-637f8b6e613f"
        },
        "item": {
          "id": "09ebf7fe-3eb5-4f9f-8b96-4605a4441267",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e8fb30ff-282b-492c-9b12-f162dee1cf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9000fa10-39c1-40af-b5af-45a0dfddf167",
        "cursor": {
          "ref": "a3241790-553f-4970-b17e-b98b943342c6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "42a0d894-64ec-4b2b-8b17-d7d65b690dc1"
        },
        "item": {
          "id": "9000fa10-39c1-40af-b5af-45a0dfddf167",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ff0e4c2b-0067-493f-a9ec-e12835cfd078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99585daa-4692-4f7e-ae6f-0c82c13a0b7f",
        "cursor": {
          "ref": "e1c6380a-45e6-4f96-86de-00b3291cdf07",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a94520b3-9841-4e91-9f3c-1e5a18681b98"
        },
        "item": {
          "id": "99585daa-4692-4f7e-ae6f-0c82c13a0b7f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cdfc6646-45fb-4c65-87ec-89b194f69208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4eca96e-1f22-4c50-9481-cd93a9af2459",
        "cursor": {
          "ref": "60582adf-ea57-4898-90ce-00c90472ce9a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "022ce06f-4e95-47f9-97f7-255b684e5687"
        },
        "item": {
          "id": "a4eca96e-1f22-4c50-9481-cd93a9af2459",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "354d1d39-580d-4031-bdb5-e40428d88e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da77abeb-a36f-454f-b001-73b012d14334",
        "cursor": {
          "ref": "01e84838-5dc5-4243-89fe-c02d4058c3ac",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "cc16baf7-4a73-46e5-8dbd-5d0c1b89455e"
        },
        "item": {
          "id": "da77abeb-a36f-454f-b001-73b012d14334",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f48bb254-b571-413f-8fd9-2e7ed74233d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a1775f-a236-4247-8d23-24f8348c79de",
        "cursor": {
          "ref": "68bc48e4-5284-48f1-8258-65e96ee2b094",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b955058e-9a37-4a5d-bd0d-0f8a23660f43"
        },
        "item": {
          "id": "02a1775f-a236-4247-8d23-24f8348c79de",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c41264dd-b565-4ce4-b758-35535be1ab7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f781804d-5ad6-4b0c-a011-887ddcd42518",
        "cursor": {
          "ref": "af65738e-7771-4584-ae9b-8a6616854af2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8d9bbb7c-5b69-421a-a286-a054251d13b3"
        },
        "item": {
          "id": "f781804d-5ad6-4b0c-a011-887ddcd42518",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0333f095-dc5f-4d9a-956e-9c02be3a702a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08966a6d-12ea-47ad-804c-840872d004b3",
        "cursor": {
          "ref": "038053e1-f6cd-4d8f-aa97-619f219e7065",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "43c32173-98fc-4148-8f17-bdd53a7a8075"
        },
        "item": {
          "id": "08966a6d-12ea-47ad-804c-840872d004b3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8332ddd6-12f6-45c5-b315-fe1357a5a0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078427c7-4e6b-41ef-aae5-453e41b9f22a",
        "cursor": {
          "ref": "d0b256f9-b2e0-4f38-9bf1-9dd41233435b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0fb33ee7-bc24-44d7-8651-226bf690fb94"
        },
        "item": {
          "id": "078427c7-4e6b-41ef-aae5-453e41b9f22a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fea9ebcf-f1f4-4792-b582-6d262eb39ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5222eaf1-eb56-47bc-9543-cf0178145143",
        "cursor": {
          "ref": "cb28cbe7-e98d-44ce-a78d-1e2a90348b52",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "081d4709-4545-459f-a3f3-f62f6a93cd90"
        },
        "item": {
          "id": "5222eaf1-eb56-47bc-9543-cf0178145143",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a172450f-2802-4c6d-b393-1a9844a74982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3a00b4-d3a9-41c8-aba1-5d5b149ac586",
        "cursor": {
          "ref": "534f58c0-1c17-40dc-95f9-7084de5ff5a0",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e483cc5f-860a-4853-bb2a-e32a21f2fa4c"
        },
        "item": {
          "id": "7a3a00b4-d3a9-41c8-aba1-5d5b149ac586",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7c8c9602-c057-4b3e-b1dc-463fc6653756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8761a9e2-ab97-4146-9746-df326ffa0480",
        "cursor": {
          "ref": "3737beb1-1fbf-44fa-89e5-d6eaa2d04b12",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ca50516b-408c-485d-a8be-a6b64b58fa4f"
        },
        "item": {
          "id": "8761a9e2-ab97-4146-9746-df326ffa0480",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f41f6a87-8dbf-4ca7-ae6f-7970da552cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d3be37-7726-45b6-ae54-0754562f6491",
        "cursor": {
          "ref": "f802219f-d538-4c38-8eb1-6088e633ccdf",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fbf93547-beab-44c4-828d-330a76fca3d9"
        },
        "item": {
          "id": "30d3be37-7726-45b6-ae54-0754562f6491",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9f5e994b-f92f-4816-9b6b-f098beb3fc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f235885-3c1d-426d-a91c-8b59dc762470",
        "cursor": {
          "ref": "96827a31-d7ad-40a4-9317-1f4e6821a2ad",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "76915d75-100e-4301-b0b1-eaaad92a4c2b"
        },
        "item": {
          "id": "3f235885-3c1d-426d-a91c-8b59dc762470",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f6fd14b6-cd3a-489b-9238-85007d1eaf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f6990f-af59-4f10-bc0f-38e34e618bc3",
        "cursor": {
          "ref": "71cd4e23-593b-488c-a195-5b3c0a9be887",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "720b2093-89f8-43d8-b025-ec1e7aa8a153"
        },
        "item": {
          "id": "60f6990f-af59-4f10-bc0f-38e34e618bc3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a7060892-2fdc-49fe-ad18-9268ceb6e63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a569e376-6eaa-4eac-844a-f2e4a0e13b79",
        "cursor": {
          "ref": "56fdbeb8-7242-4c9c-a3ac-72543d14fa53",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "22d4a4ec-afd5-4d2b-b19b-a24107613cb6"
        },
        "item": {
          "id": "a569e376-6eaa-4eac-844a-f2e4a0e13b79",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "65b0b743-74b9-4b69-8065-700903788188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963e2110-3744-4ee7-941e-93d7cc43c0f5",
        "cursor": {
          "ref": "903dbf1f-43ac-4e0d-ab08-657e3de35d45",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6e229b30-780a-498b-aaf1-c325cdf3c19f"
        },
        "item": {
          "id": "963e2110-3744-4ee7-941e-93d7cc43c0f5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ca716463-8298-4ccd-b20e-25f7eedcad35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb8b579-237d-4528-99f7-c2c2fa0b6245",
        "cursor": {
          "ref": "cdf88745-4519-4e58-a766-2fccd24f1134",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0eb90e8c-96a9-46b3-8d4b-34d9f29e0a78"
        },
        "item": {
          "id": "1cb8b579-237d-4528-99f7-c2c2fa0b6245",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3d31ef64-579f-4ef0-9f88-081cfddddab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea040ea0-65ba-4c96-87ea-bcedc5b959b8",
        "cursor": {
          "ref": "62aaf8ee-2e21-42bc-9b01-93bbc68da00f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5710ceed-2bbf-4a49-80c1-8826c71ac321"
        },
        "item": {
          "id": "ea040ea0-65ba-4c96-87ea-bcedc5b959b8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1410adc3-72d5-4ec7-bdbb-ebfd24e6d5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0492b9e-7a5f-4a61-949e-e4f0d2346269",
        "cursor": {
          "ref": "55ba5126-d5df-4f53-8eab-2fb597db3dc8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c8c213c8-c878-4bce-8e29-008919a51fc5"
        },
        "item": {
          "id": "e0492b9e-7a5f-4a61-949e-e4f0d2346269",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c8178bb7-9830-4e24-b9bb-0d6bd374bf56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd21ad9f-b195-4f28-b35c-72fbdaa0e179",
        "cursor": {
          "ref": "2835f67c-4410-4217-bd64-62596aa1c076",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bff4ca0c-8a8a-48d9-acbd-b726087df7ae"
        },
        "item": {
          "id": "fd21ad9f-b195-4f28-b35c-72fbdaa0e179",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1b17b2a5-c52d-423c-87b0-7544272f2fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa312d09-0bd5-432b-864a-b6e0a4aacfda",
        "cursor": {
          "ref": "cafcdc70-04fd-4067-9ec1-5324fcdac4bc",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "fc3dc3bf-d93e-4988-aeac-bb781875ec7f"
        },
        "item": {
          "id": "fa312d09-0bd5-432b-864a-b6e0a4aacfda",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3321564a-b9b2-46ad-9c31-58d175a19f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9253536d-b62a-41ee-aa29-bd259dcd9120",
        "cursor": {
          "ref": "94f2b179-4254-45c8-a15f-5d9a60262c5e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "28995309-5661-4369-bf6e-7e32a82b49ce"
        },
        "item": {
          "id": "9253536d-b62a-41ee-aa29-bd259dcd9120",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "aaaf5f06-5b30-4844-985f-6cd1751e7e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e44b00-b83a-47d3-bb90-9a4070e51464",
        "cursor": {
          "ref": "bc8552ad-7728-44ae-a7d9-3cb5d1f8bfeb",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "69df0937-8f98-4bf8-b714-c770fe21c0d6"
        },
        "item": {
          "id": "47e44b00-b83a-47d3-bb90-9a4070e51464",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7b250ea7-ccc1-4a5f-8afb-589e7e747187",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52edc8f-7b6b-49d2-b7af-93c844249385",
        "cursor": {
          "ref": "b8e043ca-d77b-4b4d-a7e6-d9abf1ea5ed2",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e864d227-2b6e-4b09-a292-280089c58ce9"
        },
        "item": {
          "id": "b52edc8f-7b6b-49d2-b7af-93c844249385",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a4d248eb-ad32-4f0a-8cb2-d96f5087ff03",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "8a801704-2b14-4759-a345-fa58d9643869",
        "cursor": {
          "ref": "0bc18176-6c65-49ad-bee8-9c494bb14236",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6ff8b5da-8b82-4dca-a6f0-0ad0e0c75b6a"
        },
        "item": {
          "id": "8a801704-2b14-4759-a345-fa58d9643869",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4bc02f1c-b75c-436f-8d7f-552aced1e110",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d2581e-ae47-4f0d-8940-020f8de7025a",
        "cursor": {
          "ref": "e8d77e60-c8df-4345-8394-8d029fa2b08e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d8013627-5027-4c40-86aa-e3abcb85504c"
        },
        "item": {
          "id": "18d2581e-ae47-4f0d-8940-020f8de7025a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "307fa1c6-a832-4c4e-bbb1-0ebae9e15fe2",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04870db-5253-49da-a7d5-187e342f359d",
        "cursor": {
          "ref": "85111571-e0b9-4327-8c55-478949e3e878",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "28a932df-9f2d-4a3e-85ca-c2558c4a40f7"
        },
        "item": {
          "id": "b04870db-5253-49da-a7d5-187e342f359d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5bf0d7ee-6815-470d-b571-2def29610963",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04870db-5253-49da-a7d5-187e342f359d",
        "cursor": {
          "ref": "85111571-e0b9-4327-8c55-478949e3e878",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "28a932df-9f2d-4a3e-85ca-c2558c4a40f7"
        },
        "item": {
          "id": "b04870db-5253-49da-a7d5-187e342f359d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5bf0d7ee-6815-470d-b571-2def29610963",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382d83e6-57ef-4fca-9f40-80d0b2f2a4b9",
        "cursor": {
          "ref": "e38d6bc7-5083-4537-a528-fbb616ad8c45",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "cde643d2-824b-4bcb-9602-cc1282ea7cb6"
        },
        "item": {
          "id": "382d83e6-57ef-4fca-9f40-80d0b2f2a4b9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3df4b5b7-a5ee-4c8f-b8e3-781b2b27f01f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e67ca1c-9dfb-4b0d-a664-7de194f47992",
        "cursor": {
          "ref": "a4babdc4-5ace-4db0-8ca6-ad96505362ee",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b59315e5-d61c-48e5-ad15-1aaba43f1654"
        },
        "item": {
          "id": "1e67ca1c-9dfb-4b0d-a664-7de194f47992",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "46e91d78-444c-4679-ad99-9b8b898fa817",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}