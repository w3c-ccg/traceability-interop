{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d12f9931-f646-4618-96b1-96ada2c51aa0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8a66580b-3600-45c7-b06f-25ad2da441e1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "138a40c2-0275-43c5-accc-992d3fe06a85",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8678a04a-08bb-49d9-b127-e7ce18f67330"
                }
              }
            ]
          },
          {
            "id": "e81ad5a1-5063-400a-bed6-1f3100b36840",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95749fa3-61f2-4ff2-bb7f-a4024d8cac1e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4157f7c4-eb33-4407-b889-e27900a2a200"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e67409b7-f746-42dd-8a28-48b69cc3ef38",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "75a009b7-4047-4d02-9c25-3b1488ea83a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bc64f4e1-75d8-4d12-afc0-c540d3a1f804",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d052936-0f7d-4768-9e77-1bcb75835b69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a828c86-1d84-4986-b579-28f88af0287d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22b6f75e-afc2-47d2-9680-b8e4b5764085",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e27e096-d898-4f3e-8116-e2834068dc42"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d7fc1d3f-7cd2-4237-829c-a9f9381e443d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4508ce0-c56c-4c01-bdde-f8b6ffec0835"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4774f592-20db-4af2-940d-224f08be44bc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5e389411-57b1-4aaa-8c90-3ac94c1bd476"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb794a7b-3c90-4af5-a841-b6f7f4311909",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "45569818-9380-4577-953c-6796ccda960a"
            }
          }
        ]
      },
      {
        "id": "4192b4ca-cb54-453f-9657-df5007dfe909",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a937b793-a410-48a5-b015-5db04d8c453c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d1acc3c-c403-4f63-a686-e9a765257299",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "896190d0-bcab-4428-b854-aeece5398fed",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45bff61-2dcd-450c-92b5-53a72edf27ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a08cd6b0-e2d0-488e-b08f-8f895dcbd949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac000c5-b571-48e1-9826-79a866d2f015",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9165760-5c25-4ff9-8997-7bd7dec1547b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8991d366-1168-490b-98a8-ad853651d8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7260d7b-cf1d-48a0-94b1-2c77cde759dd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74e86a9-9f78-4e31-a579-bb4de17be677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d146b71-3740-4fea-9d1a-c56529332eac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1c8dfbdb-db9a-48f0-8993-1be70919e026",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "196bef1b-f1d6-4854-93ab-8f3646c1c805",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991aff10-ff12-40ad-86a5-91a585de6173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "040cb342-4c3d-43c0-9ab9-5457eee816e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a7e4c5-f635-4fb2-ba91-8adf729ebc52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda651c9-e133-42b1-a914-aa554e1d6f58"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "04439531-bd9a-409a-9907-9d19591e245e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b2b124cd-57a9-4ed7-9a2b-665739de8b1c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93b1cc58-2196-412e-b10f-bde4bb362e8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "22ace671-4aca-4fee-9a37-b6e57350f326"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8376e039-57d1-4fa1-8943-bd44f12632e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "434b4be3-2a88-40df-bd06-15285101d52f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d132ece6-1c67-432f-b095-f8e2e0c6fa85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b55a1d46-9b23-4be8-b1f7-d76e51100a17"
            }
          }
        ]
      },
      {
        "id": "fe95e121-78e7-4c87-9b09-e5b2aa58a765",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9fbbcda3-c99b-44a0-b4ca-58afdbce483d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85f37b24-44db-4ce7-897b-b7acaad615d1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f15ba6ab-8da3-4ec4-9c8d-2101ef6caa7d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2603264-2389-4c5d-a83d-64d097a6a0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b950ad5-0d69-43ce-8895-858ca65cc8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b157bb5f-253e-473d-ad4e-067ecce6ab98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97e60cf8-83d4-444c-a039-bdd41fa700e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deaa2c14-bf78-4612-ae7b-ab50c6753e22",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177fc9db-1df9-4991-9a7c-8654993769ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069d5250-faba-4897-802b-c7dafd5de43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d83266-1133-4b4c-9e5b-fe4d34196e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8250cd95-aa24-440f-881b-406512bf0a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893fa8bd-daf6-4781-b744-c2fe2e0d1098",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad54e94-af64-4d2f-aa54-bceb104106e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b1918d-7abb-4db7-a221-01747bcaa9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b319d580-c740-44c8-bdba-efb74ca65c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e11f1b8b-f9cb-43b1-afe2-928ef1d49d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e331f5-f764-40d2-b554-5c1eafe63bbf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092b92c2-3c36-484c-b6da-95b6de881f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b3effb-fa40-4718-bcfb-bbbef856d787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbff2ce-2536-46b6-9344-083745518d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f157e24-f360-4da0-a3e7-7f641536626f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6baa4cd5-a1b8-4a84-bed2-6d85f53f12ff",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95447f2-75bd-45a2-8b80-52e33f5c52c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124c9e24-41e9-4386-82c8-26615c8dd7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81051efe-366d-48d1-a571-cb5ad0d2bc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5ab545f-61c3-4189-9c22-0e59bdac62fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d7607f-c1e5-4c42-8add-9f79780136f4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cdbff8-98a5-403c-8fc3-86c3770ca4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3873c6e-cf97-4dcd-a7eb-e75b5c859046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badabbfa-94e6-49a0-b2f1-7377620d7b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b9e8e0b-4d18-4c70-b979-b418e7673892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161faed3-993f-4edc-94fb-191be43d5626",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdd1429-e16d-4387-98a1-5cf006f39bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c79d8f-fd9f-4622-a0a0-c569482d276c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbdef30-23f6-4af4-9a54-615ebbb268d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4ca938c-8444-4c81-8fd2-d3bab2d190cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea8f13e-1947-4444-bd4f-f41650c11c49",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637d8bb5-f599-4aaa-8b18-c59b9171969d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080dd43f-a855-4b88-a05e-03ef50cb053a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296948e8-a7ec-4e14-b5a3-c99fa54ebe65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6156709-068b-4f03-9a3a-adaaa63f6468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2803717c-e328-49c3-aba9-7ffafff95f31",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d08c3f-93d9-4fe5-8e60-860e16a2058b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe078c4-ce75-436b-92e1-890ca32b1cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8c2036-462d-46c6-bcef-436209937940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fd6e178-2096-4a19-9d00-f52d4aff68b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1818e6-9455-4315-ab7e-50df6cfe9e85",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6a3863-5be0-44df-b6aa-2f0a709f7f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3ab22e-acf1-4ae7-a9ef-0522e105b06e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dbd948-6e48-4a79-8681-ce9fd5b50534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31ee53ca-4795-444f-9fd8-7824a58bdf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c418f3-fefa-4b07-956b-3c46a45f1529",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529cba77-4221-4a64-b3cd-f65a69bc202e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef58334-b6cc-4954-bcac-241b21ef946e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1426a1-e371-4bd6-8e7f-28b79df97304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaa3073e-7606-4b12-806c-b49de9838a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53de5c5-704e-4064-a618-9d5e52f94d54",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df879e9-72c0-47f5-b440-08c98108208d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "970d0ff0-c691-4991-bb20-6f1b52a13511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c82778-13c7-488d-8459-8ed8f9666afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b533ab35-8d0c-46b8-bfa2-a36b730c5ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c202640e-d131-40ea-9d71-53a0d728f753",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c1c4e0-21c8-4b1c-a311-02aa3580b0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191526a2-9faa-480f-857f-1784c6d1febe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be95e3a5-82fb-4dee-8f99-fe92f7c079f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f74865c0-ae70-416e-b88f-c7b587e59e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd842dd-5c9d-4fa1-b908-3ab800644257",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ebaa26-5c94-45d7-ba61-f94d43aa5808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66fc904-942c-43e9-999e-d49421af9a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427f98a9-2bea-4b14-ae4f-e762c1d37397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d1a1a0d-d946-407e-bf07-dfed65c7e5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e247c75-46d4-4057-9ac1-bbe67a24461b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18b117a-0244-4975-be2c-6219973285cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7740e163-9fed-4bc4-95cc-076e8f1bd86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5009e8f3-819d-4e8d-a2f1-cee188307574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ac3b66b-e130-4700-858d-85f88b319eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0e1f2a-582f-4da8-b41f-8be672ea9ea1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52da4568-1def-4dac-974a-596f96aafacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1d23db-ba31-4cdc-b3b2-721ff565bee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84306d69-921c-4973-b07f-6c04e1e9c13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0cedf52-02ee-4813-86f9-200aafab6edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158c50b4-0b64-468e-b4f6-77aeca734af9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06c66d7-d797-4d7a-b555-7b6d14492bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e75e525-7fbe-4ccb-b523-1f505f836720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b2a5d1-6ebb-474d-915b-167295438870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dfe4052-0b21-4864-a774-79be7c7dfba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b117c1f-5b59-48b4-a623-c87b3f239caa",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d03f355-cdb6-4e76-801d-64253141ff1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4499b2-8fc5-4ba9-8600-6fa140115855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fd93db-9fe9-451a-bbd4-6ebf72539a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "29b5040a-3a3b-429a-9535-6bd16b5b9fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8872f2-6442-403c-a87e-397f4936eab1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c599ba26-7368-48c3-9748-e46279c03225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5a7c79-3772-45bf-99fe-1fe92a5debca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10867b68-9c03-41f2-9f8f-c60ade0cc46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6beaf46f-3fac-4dfa-a2f4-3432cb68025b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5dc6de-6864-4671-812c-b06a5a775807",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da63b640-9e4a-41b2-a887-ac6c5ef92515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5860c13d-a630-43f5-b994-e77636706a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4af9c5-a310-4e63-acd1-2dbebf0772cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b392d4f-e52e-43eb-ab2e-955db580b714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a767ccc1-7ae6-452f-a086-ff31f8e07e2f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f016a379-35c6-4874-81c9-6d7a2cfe83f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fed1f4a-5fe1-4c7c-98d1-00cd4bf91d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836b5c2d-1d4c-4eea-a61b-1a215bf1b87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ad4013-c73e-4c2e-8d3c-deb5e752818a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8feaa0ba-a8a5-4b36-92a7-63c4121e3f24",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc1f134-ea13-4572-a014-03a590d450d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4d800d-6cf0-46a3-9533-0a451a08e324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41a73f0-d77f-4fdb-a1d9-c47fc9161051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f28cecb-21c1-46de-863b-92db2462821f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bab6c92-7897-430a-9687-75542b831486",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6ab60f-edcb-4ad7-826a-a6dcd22f0fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca19acf9-0686-4d49-8680-a7a44642e1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c5f6e6-20a0-4a53-a2b2-0353f478af40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32582c5c-0b5b-4a1c-a33c-5a13307de873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3431d11e-3c08-428c-b69d-95a9c9327f6e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65bebda-9cb9-47e1-a0a5-2f02bbf5b67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e410b1-32f0-48e3-9e40-e86e8c4a5bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e806b17-ad38-4b27-ba68-06eb7c330e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "392c1b0e-7538-4ec3-a4d1-95085d684654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5571872-1ca0-478e-8840-cf016659ab83",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f205f6-7038-46b9-8d52-149b8b9e39bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8038e21-2966-4932-b5cb-3d5fb0c43db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93b2937-9303-4e49-b55d-1e838f213007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4ac4ad-0e0e-454b-bab1-8f793dfa75a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae3a2c1-52ba-44fd-95ed-5cdbfbc0312d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d6a700-984d-40ce-8598-146c4979771f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626daa03-2099-4917-89ef-a2fa0807bede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8b7f01-6ba0-4de4-b37a-263dcf4b5c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3856c5ac-77df-4df4-aeb6-a486bd32470a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafc389f-a2c5-44b1-8e5a-d08ee75bfc30",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bca1d00-a4d0-4bf8-b36b-8604a2c09b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad62ed7-dfe8-4c13-bc29-353633a34612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9488964d-6a5d-426c-9abe-08fa58065666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8787551-f343-494c-803c-67d2ac3be3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1078bf-b032-4c08-8298-f02c20fedc0d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b88fdd-3a32-47e8-83ff-7972a831b904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d5bf63-d07d-404e-8e7f-1da230d69582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c34c9d-09fd-4eea-86d5-1ade9d9f9695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da252b0f-a444-4027-885a-cdde2dffd718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e176e117-1253-4c5b-848c-4d20d9d6757e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f479f4a4-b7c7-4c33-8b20-310edcd37aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87418128-35ae-4209-a32b-e49bc62c36a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866ddc31-9447-450a-87bd-5e2cb5261724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b744367-2ac8-4d6a-bb25-6dddc86238aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f7a9c2-c544-490a-931e-0f731a56fc39",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa48c4f0-0545-4c57-a85f-1334226f921b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29eb84cf-0526-45e8-87eb-42531106e4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d20b82-8fb4-4c01-a5e3-f8eac51ecfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "84fb24b5-1f55-404e-bdb2-ef6fa28cc2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236986a6-c1c3-4ecf-b95a-fc6f8b5f1a7e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d479225-2b13-4743-ac15-d79c5434ee56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a149ccc4-3892-4197-bfd9-a540fbe2c3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149a2273-d875-47da-ba62-e31d2653b779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "024b4be6-bed1-441f-b6f3-25f801fdb0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e362a5-b202-4eed-a8b4-c5dd6d94fdde",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55dbd56-20d6-4558-80f6-fb3cf8498cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf7efcc-46f3-475c-a05a-6b914acda003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1fb77e-87dd-4a44-9d06-48956a7ed760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e866f17-c5d4-449a-a98b-898abf50adbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46826ce0-9a19-4750-b4d6-148ecd88a6d7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41cd8de-5f96-442c-9d9d-e00f251252d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5943e95-5539-4ac6-8fdf-45aee4e5fce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cb8b58-f90c-43ca-b0ba-1b70e0a9a3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf71918-9674-4e32-8a90-10dd48b29624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2969ec-bac5-4c46-9296-56735a018e5a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952fd311-da8d-4b46-8cdd-08108d3f4ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856ae772-d691-49c0-91ad-cc0d3fa1d5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fd92af-9cb5-49be-919c-8dc4388a483c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29b9b1de-1bdd-4d08-af5c-f45601674235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66b06e6-5e73-4d79-8be8-509b01c34ba2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf45fe5d-1b51-4718-ba8c-8c5f13498328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4474b11-1db2-4633-aec2-bd808b8c32cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6b2755-57f2-43df-9250-027be0262c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed1ff84-b430-4707-8ae3-49651a56f163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f06ab2-04a9-4290-919f-e9a0a849d1b6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728e15a7-6dfa-43dd-b1df-5c8eca4702b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cab31e4-9060-438e-8abc-3977eca80265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1359ba09-d909-41e4-a25f-c78a55c4ad36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b04793-efde-4b82-a876-a733ce2a594d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4270e7b-9b11-4717-99d6-2d79c672b1da",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d482b4-4f0e-4865-b85e-7c2f9217475b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe0fc26-9faa-4471-bffe-bcb1d122a353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55aa0e91-6831-4c66-b244-63ffa6db99ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33e40657-2826-4564-871a-9e426c726c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b012fe2-87c0-4808-806d-aebd7bdd12b0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4775b95-cc61-430e-8eb6-12b9e6d2c069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81465b16-6167-499d-a4b3-a40b0edacf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1354bd-c785-4590-81d9-1c67b88e91b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e333aee5-c0e0-4e6d-84b9-93d631f2bd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb97380-486d-49dd-99a1-fae6bba3ff5d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cad6cd1-6376-46ab-a791-79292e4bbfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc554642-3993-4a4d-8732-f2cb741d9a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b718351-fd6b-4ec3-9c59-2bb943ba2333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "080f1129-6502-4163-b4f4-e4be6b0cc76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d630ff50-008e-4a71-8317-b00f16414791",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0b84af-6c9a-40e4-83a7-cf37263fa257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84bb8023-13c5-485b-b457-a6bb95eede4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65eb5083-2f86-42f8-8a1e-fda5844607c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b09c24b9-bb2a-47b2-bae1-f1a047517177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2f2ed7-e41b-4634-9bcc-251fd4ef0050",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5a17fc-f0bb-47c7-a6dc-731bc484dfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f7f3a8-acf2-4cb4-a1bd-402883de759d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb804e7c-dddf-46b3-b394-c0c95d241b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "89d715d6-c9c7-4ff5-a7de-3167eb7ea450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d65971-9446-43cd-9581-5a2805ef91d9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8568e804-6c77-4286-ae49-d5487894cdd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8717d7-f84f-48ad-9dbc-213d81e26c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5864f5-6940-48f9-bc1f-689e19e708ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "155fff58-2e3a-4b21-912e-0e8403a83092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0c00a8-8edc-495b-9f23-e36449534012",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a75a094-bcbc-4627-bd7b-e06eb0d1080f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d901969-8362-4698-9fdf-f3bc2d827828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99d82b3-6ea4-4d7e-a0de-7f9e63f3b0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d165e1-6d33-44b3-9509-62bbfae14318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26b6244-3b72-4438-903f-a0e4e07896fe",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e6ba99-4679-40a7-813a-924b7905e366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055f0521-2b4e-4494-b672-edb65625afb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78e16df-07da-407d-9eda-30df4200193d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "62e39633-4f06-4341-a674-97d002391e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f21c88-6cb9-4cbc-a8ba-916550463aca",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6cd7c3-a57a-4016-ad8a-933dfe27c301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b82cc38-df6b-418c-ace3-f300149e85ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4e4511-d8c7-425f-a63f-98a8716515e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2f58b5-b2c7-4171-b913-cebcf84952c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7654370-198c-41a2-a639-d4a524e8099f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67953ac3-85a6-4085-a6cc-80051676fd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f668d08a-bb8b-4980-9baa-0573809e1e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d80193-0c49-416b-8467-20d939accd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94d1b48a-9fc4-45e1-9586-39872c26c4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac75474-3b01-45c8-95d1-9720db4aedab",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5289efa-7271-4623-be0b-8a83c5ed6bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1153741f-29ba-4026-bb5b-fffa8c5f1533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b15e80-c427-407f-a5ca-2a80e07995fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39678c55-c342-4a1b-b613-864f12b25115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c37696-f6f4-46ea-9d18-2c7fc001b5a1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa12b1f-fa54-407c-90d7-b7fd21a60371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db745d1a-96e1-4fe1-8206-41e8d5eab8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f4a8ba-8120-4ba7-abd2-1df9afef4d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d06e08-1b8f-4403-ab2d-0c213303053c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030597cb-454e-4207-95cd-0f40b7477a14",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f01d6f-9a7e-43eb-874f-5d6bf624323d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84e1aed-9c34-42c1-8ed8-8fdae8483b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2c7ad8-a1b8-4ad9-81e6-354f17472e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "694704ac-7a29-43d6-b2d9-05bd6f84602f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e3766f-0206-485d-98e7-aef68c688600",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b647bfa3-8e0f-472f-8c34-19dcc3e0ea0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ff636e-5568-4e96-9a83-3e4233417aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34be4f6-bbf5-4416-8a0d-937ce3e21dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1979f1-9252-48cf-85f9-6e3583af7c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a81f878-5247-415e-97a4-e848305ff88a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee05f4b1-fb26-43d4-96b2-e6efae878e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548a4b6b-13a2-4d3f-b61d-212f8a76a5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70479bf-3b9e-4ace-bb27-6d51ce360538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "645f499b-0d2c-4d00-8ed1-f7ec43c800a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9deca48-0a07-471a-8769-254558674c11",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b07e87-5734-4e4a-aa5b-3cc3b5cc5bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fb2e32-253a-4666-a145-bb58d947da7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d71c45-3cd0-4b57-b869-a6d13fd470d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "652a4655-56b9-4aa8-af52-914210971ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e382fd-0226-426a-8b8c-f5efc515078d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be87d4a-3a23-415d-ac46-bbbfe40f0fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a051b2e-729a-4b73-8ad6-1180f1158d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b13992-efd2-4dcd-8ece-f5f7104a0673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b1fecb-7bb2-45b7-816c-4c9ad0546757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dd902e-c0d5-4f79-9f48-a08bf71ffb45",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154a7e2b-2e21-468e-b62f-48e1ffdc8f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3376d1b-5076-42bd-ae3e-d4d0acb61b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e0605f-3d12-4eef-9023-e73669affbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95cafce-262d-477a-bd92-c3302cb24fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671e3829-b16a-4fac-a88e-af04e7611869",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b02148-cdca-4cd6-89e3-84537b58a96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56d3bd3-bab0-4bcc-9ed2-46672889ca16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a0295a-3218-475e-ba0f-40e17616ab4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a28a457-4f64-4e73-b1b9-aa4e4522441b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c08b61-ab16-4df7-9077-eb0d34193de7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fbd127-d0e6-48af-96d7-8c17a7bc270a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3894aa7-7e20-48d8-9df8-56ca93aabc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00102ce3-5451-4514-9483-c78fc2b50eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d577b133-d4e6-4b7c-b9fd-70e3cfb73d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1086ec86-1c87-4cc6-ad38-9b7a56200605",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90246d72-aa78-4a8c-9680-39e2d4741564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21074be5-fc43-48ea-94d7-3be3ea9623b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2732e47-52ba-433a-ad8d-7665bbe5d7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06144913-f3e5-4fe8-9048-6fa7e174a18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b21373-c9a0-4945-b868-fb7a41e0b795",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f519bd3-3595-4472-a1f0-54d109c785af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea62da3-c683-476f-8d4f-f25ea3a094bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c138c7-98d5-49b6-b90d-9066aac1820a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "996252a4-1f69-4319-abe3-910e23cb2953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc9cc89-43f6-40d0-a77e-6f4d46800c30",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25ca505-3a79-4754-894b-d5fcccc25d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed6e200-156b-4fea-94a1-fbefe664fdb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f4d733-85fd-479e-87fb-92c052daf2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b29f9f-88e2-4b90-a547-56996c332283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8834927-6d64-4289-9419-a91bdd25cd48",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7eeec04-799e-4989-84d9-7e1c8c5afbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292b2c66-b255-471a-906b-500dd30540ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4de71fd-0de1-43c2-a7c2-23dacfc1a591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "248fdaa2-b212-4b67-8278-b2338febd639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7de01a-3655-43d7-91e6-f71bcaa0cbdb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5038e8-9bfa-4a66-b2f9-7b975abd5e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2613e943-8d4f-4724-80bd-e95c3df21462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e31fcf9-7d95-4aa2-89ed-733b20a13c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c541cd9-fd02-4718-9ac9-50b2b59eebcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612803e5-33be-4f3b-acae-e8eedf95e7d9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acabe0cb-4587-4f08-8790-d0c673d0b37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3186a994-5326-43b2-a6b8-1576fd1b4f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30eafae3-5b66-48df-9e39-bddc0597b7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a33d0c8-3447-4ab8-a4d3-3279b6e7a553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a15cb43-1463-475c-bfaf-df2dec87082c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247d1678-f26d-4472-be7e-e9859c4dd90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b519c2a7-5be0-46c4-8591-d33eac270f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4d57a3-6062-475a-ad07-9667f6088a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "991c455f-2798-4817-be74-3622f9ee219c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f963b69c-7048-4999-b9e0-5b37c8a022c4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737d4f09-a45f-4c96-bee2-7f512f60892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c347c8d-ffea-45a7-9b73-247c630f9d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e942adf-0f69-4917-bb5f-b21d663fba09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4a8350-52a7-43a2-b29c-18df0e5747f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8792acb-bb96-46ad-b136-e07f42bd42ef",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df20d337-41a2-4ffb-a763-b5bc9531ea35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b02c89-6d74-42fb-af65-dc35fe1a5a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1caeb99-17c4-48dc-8c83-3a9aacf223d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a2bfb1-6a9a-4a27-8a03-6468770b170e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d224ae-9293-441e-ab74-7c644a56f4ef",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e908018-6a37-4ee6-84b3-9b816283f0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877444c8-9ded-4e03-ae50-d90584342c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28528636-7cb4-424e-9061-3506088a193f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da86ea93-67f3-4f2f-afe9-86aaf1ade52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2565918-20dd-4ef0-95da-826f2111f661",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "625604b4-2822-4cf9-9886-75e0b5908d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34836fdd-c823-42d5-92ff-046e06141bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4de33db-8407-4b33-a542-25014f22bc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6252f5c3-3be8-42b8-8828-a4960d46b93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02f7b91-0eba-48c9-88d5-d8b84e262023",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ce5d3c-e4f4-4e77-ac4d-6cfec738c0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e56a639-e80a-46d3-b7be-d86834bb332b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f845c71-65fe-413a-a16b-ea05e1fe6b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "52382efc-566f-4f47-9322-83d7e4ee57ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc926d2-e14e-4d0d-888d-f76da3d86ef4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ac0e5d-1c7e-42dc-87f5-ad96c18e2e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a283cb-013f-4e9e-8cc6-5b93aaf3392f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6500f72-8ba7-4145-bf75-fde191bf8ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "88174f9f-3d82-4f27-b316-83b8d602d3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c526f61f-cb5a-4532-b2e8-eaef817f0f8b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb97aad-22f8-4c7e-a8ae-f20c02142d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38577d64-4b84-438f-9cb4-7016a865e71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49caa9f7-9600-4757-b8d3-30d0d607ed59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3bf6c9-cc6e-4c7f-aa8c-7aa20f7f76c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b3d3d8-a31c-4d9f-aea5-2917acec8dec",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ababef-2520-4dd2-a716-42ef0ac7d85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e92605d-92c1-4dc2-b820-1516f1cc2879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773bb8fe-ddbb-4f3f-8de7-df27b1cc9a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81857612-c6bc-4a60-98c8-fda5fe3018bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723d9215-4124-4df5-b761-d00f9ad398fa",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08c1764-f584-4eb9-9a17-90a025373e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf0b0fa-24dd-41b4-86b5-1964caa9f438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21013582-3438-458b-b793-9ed7595ae1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3efaf9-53c3-4e75-afc7-5eb7b5156ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc63ea8c-c90d-4d61-af16-ee90008d811f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09a2006-b860-4439-854e-a0d6fca2181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c95541-c312-4c9d-9443-32f1bec69cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1260a2c2-9187-4b3d-8504-89ab96a6ccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe69b4c-40a7-4fa6-b4a6-b33e24b0185c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1cf654-8a09-48bd-b94e-7f7e5387c04b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e42916-31bf-44dc-ba18-3e0d9d62d642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8102b9ed-3850-47b0-8899-56237fd6a82e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7c8562-66d8-4031-9e9f-bebc28d7bdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e02b4f6f-f348-42f2-ac25-07b35c76c263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341041ba-f95c-4605-88e2-fd004d6f244f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca19ff84-b586-45ce-8f04-38862c609a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8544feb-f99b-4a97-aea9-142b2b237cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530b1f42-0fc3-4c5b-b54f-36bdf1ea6b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4397c3-2238-4d8c-9ce7-7c88d3347f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04279a5d-3882-424f-b1ce-32e428f6b821",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b42bf1-f849-4a38-bdb9-4c39530f2b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d4a681-eacf-408b-ac07-10694b789c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227dae48-041a-4e39-885b-5b97d2eb3cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50c1c219-c519-4bcb-88e9-4953c27482f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912cddc8-f97b-4cc4-b44a-204fcdeabce5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32398524-b02d-4e85-b3dd-e0f08bf21f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a081c81a-a9ee-47d3-afe0-fe9b5b8a7a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c53421-d961-40c2-8a7e-2452072531a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76183c25-7917-4920-87df-30d98f8777e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141efd74-c896-40ab-8d44-5aa6a4fd5607",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef903364-83e7-4ba2-983e-49c216835edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5047c5c-9f77-4377-9132-5c5b76bf3ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b0f0b2-c2f4-4179-b298-5f16db921a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5372fec0-462a-4bfc-8b7a-ee6dfc0104a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd19881d-11e1-44a6-9e0d-414b28fe649b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b61fc6-3770-4183-af4f-ae10fbfba294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9d407a-5425-4215-8cf1-989d9a9fa997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53778c28-6153-4d44-b4cf-d4e13403b3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32541911-23ff-4b75-b415-b8bef6659acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1913a0f-ded2-46f0-a9b1-dd94d2fec807",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed99196-0060-47df-9bf0-5e742017b71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a87d15-e3a2-4817-9c21-a5f0aa204ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf3ed5d-d2e6-4a4f-98bc-35e1116f76ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08b07695-5410-4565-8b38-9e5dad4dc1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b871df51-d893-40ee-a851-5194d78351ed",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64a77c8-6b9c-4646-b333-ae7cc5f4c10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b90ee3-3b09-4f22-9970-fa5ccfcd0d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c987d3f-e7a3-4c73-a1cb-a545af2887ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c880ed-8bc4-436d-86cc-6b43be4f94c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7d5d15-67f0-400f-84f1-7df6b7f54c38",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28a835f-061a-444f-8f4a-999aeea1ffe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3153a22-e511-4b5b-b1c0-176f23b0b566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf387d9b-9403-40d2-9cd0-f518fcd8e4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1c92f1-eacd-405d-82e2-e5d2b685e320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64532cf-5214-4dd1-87ff-7e938cbbf5bd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2b4f54-6989-47cc-a04e-62e419ce1a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f5e0ef-182d-4b14-bd44-c42266f0e073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5c597e-502b-4e32-aa5d-0f93d7629057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24d89cd6-c1a1-4096-b6fc-2bde3ef16fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217c70fa-026e-416c-ae31-c37e562fe90c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d86b377-756a-46b8-9069-01ecfcab3d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f472e60-5a85-45ca-a5f0-78ca5ad5426a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395778e4-cf61-40ce-b721-5f0e6e1e1812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2683e259-0243-4770-9921-be01b3666828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667f7d6f-4155-4142-8514-d927f298d835",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3175cb-f604-44dc-ae83-619e7288d8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5b3acd-8509-4907-a6c2-7f328a92cdec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76d52a2-355a-42c2-ae0d-0834210ac3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dea6883a-6b2e-4225-893e-aba6af5d655f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f55252-d7e6-4403-88c0-79b7190d789f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ac49bc-9c94-4136-ac11-3c781092b359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1c8b2f-77f2-45f4-a92a-509b908c6de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172d5173-99cd-45f5-9802-aa78ed44c5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "718083a4-41fb-4de6-ae22-0dc3f22a01b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375fb942-4836-45e9-a246-e495158c67fb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042d2b29-a96c-4706-8920-4136e5d10f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610e2d24-9d51-44da-9a86-6e0e7f93742c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e700a71-e7dd-4c10-8bf7-a753eb6a755a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3207b0-e061-4515-9b83-bb7d5ebe1d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b022c42a-81e2-428e-a8a6-015e9cbbb4a6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714d4ea6-92e3-4536-abda-e770bb403bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980047e9-10c9-4cf6-a6e4-e91f0ab436b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a01225c-3350-4467-a58e-66eb9df89627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98e7e58e-fa82-497b-8f48-8d188bfeda4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8243518f-ff8c-4e75-be08-e875f9d0fd70",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c728c3-7e13-4d49-89d5-8e72a01215fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0560ed4-7911-43cc-9f02-3a9bf7828e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef5134f-4060-4251-b451-70ff79036fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf01336b-67de-4485-9fa9-112da04e4306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcc614d-c6d3-4d73-bbc8-ac5710a1bd24",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5843dd4f-c899-46fa-93e2-9f8e585bd198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7116d36f-48b4-4cb4-a384-154aed5b81bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86085c50-dac4-4ede-ba6f-5c4040f672d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dab336c7-97eb-46f9-8962-3a1cb4764639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de83cd9d-3501-4a50-8cbb-17a5ef520106",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fd253e-1a0c-409a-9158-31ae4a8facb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef1b82af-4c14-4cf7-b28f-531280c36f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f27a1a-0414-41a5-9e96-defac9c12627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fdb907b-98dc-40f2-a581-4b3e9e12f8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a938df-a534-4bec-9c09-11fe25f6aaa7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccad131e-07ed-45a2-9932-7f80c6ff605e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "67f6aed9-cd99-4eb0-b638-e65cd13fa073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a837c7a9-fcad-41f5-8f96-e8da9845b895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f51dfe-de40-4875-9c61-ddf27ad85f22"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eb264a3c-ee96-401e-b89a-e77a5b238e48",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "280e416e-d034-4f9f-b59b-e9ce40a8a3c7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7c798b-e55b-486d-9045-f72d36598d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55044ba8-f2ea-4da1-916e-c458f2535692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8947fa2-2a7d-47b1-bab1-9273ba12fb9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24e768af-ec88-4222-85d1-79b0e79c3fc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcf7ec84-09df-440f-9bd1-94af6719a061",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8dd0903-5b77-49bf-a7e5-a3cc44893f51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "facb5682-9611-485f-803c-601b2d97bce3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e22b3a3-f7dd-4aaa-ae0e-b01a3c25b837"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "258207c6-c3df-4aa7-82d0-f3aaa46a36d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba3c04ec-1ba4-4131-a254-d17e1f37db5a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "98c0bf18-a37a-48fc-8d82-86533d37c278",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19fe891b-a910-43a4-adb4-405f4d2dd694"
                }
              }
            ]
          },
          {
            "id": "3646defb-1975-4d45-a10a-1be618b633ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57d9f569-681c-49ca-80c0-c329f082bae7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbea3cac-b141-47dd-931d-cbec9042d200",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fea1cc1d-077f-4f72-9732-16ab236ff0ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4792b01-38d9-400b-af9d-44b681e0cd1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9cd0cded-b8a0-4052-a647-f5eda5c0fb2e"
                    }
                  }
                ]
              },
              {
                "id": "415051c0-7912-4e6f-8b1d-468b28184884",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6775875-d022-4150-b762-9a8279c53905",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f25478b9-49cf-43f0-b69c-510faf044b5c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3347b941-4396-4d29-a5ac-ac972ca6466b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "96fa8b34-1d3d-422d-932e-8089cb043dd2"
                    }
                  }
                ]
              },
              {
                "id": "7a567edc-a9bf-4a5d-a808-b00291d2c2f4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d5e5d32-8675-4c8f-b827-83f3d17706c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ffbdaf0-44c5-4477-b6aa-38d0cddde46b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "539f21f9-2270-4791-a588-482bc5f47941",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b2eafb1e-6157-4ce7-94d6-958c0499f7f3"
                    }
                  }
                ]
              },
              {
                "id": "52bc12f5-a8f1-48a1-a741-b7624df1c3c4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bfb04b1-524e-4c4d-906f-42bf88530bd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c2ea22f-2079-4b98-8eb9-2c749c431a1c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "468ec031-3d77-4fc9-9378-429b18d18dd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "db56808f-49ec-4191-9aa9-0adc50a72a82"
                    }
                  }
                ]
              },
              {
                "id": "6ce359da-adf9-4095-b3b4-f9ac9c00a4ee",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d134de1a-807e-4ba5-9f05-105bbe219ff0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58b6d834-681a-4e60-8b48-95ce005943af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "108228ce-68f7-4148-8770-7e966615ab0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "cfdb0d3d-25ea-4ef5-b736-67e63632e6dd"
                    }
                  }
                ]
              },
              {
                "id": "3fb367ee-8089-4c53-a90a-99e3a96e17a6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d76cb5f-4591-49cc-897c-b39b47fc8c12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd477fa9-eb89-470c-95f7-68b83b2a94b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ce2fcd6-0be9-49d7-b84a-193550930716",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "99da1cd5-c39a-4739-afbd-17b80455aa21"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "818bdd11-8b8b-4570-90e3-b2207a8daca6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0679f7d5-c9a1-4cc1-bec4-6ef4e47f1478"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "24d38574-3025-4e39-9c6c-ef0d57d54d62",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc25be70-a9a4-42f8-be9d-ace2644b83b1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18ea5dcd-a0e7-4202-af15-08afdc572349",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ceed6d01-7719-45f4-b803-cadf35f7f0d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "162c9c73-f960-4a71-850e-2b9bf0fe3e0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5460ae9-c473-4e62-8ef1-acac9de97941"
            }
          }
        ]
      },
      {
        "id": "510ae61f-d7d2-49da-ba6c-9ec086870d61",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b5fdb7ac-4069-4ba0-9cdd-7e02e28096f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a08191b5-714e-4dd9-8b66-d125baf495e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1bf91c7-38b4-4e1d-aa84-d6333aae85a5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b94f007-c65a-4a91-8538-9bbb882da70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3003960c-5d44-4ac9-9d98-ee06d3c677c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb97228-0990-4ed9-8b27-44af505b89d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "59b6c443-8144-4a04-8804-6a6cd6a97d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636555d0-5aad-4235-ab17-26503a78cd17",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30035a20-bd25-49f9-a7a8-7e5c7440ffb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fddf4aa-123e-48d0-96f7-30282c21ef50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b702fdb-b9a6-48c7-a4cb-44bdf7cadf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "707496f3-ad15-4df4-986c-e4347d3771cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87231054-1333-481e-802e-4ac603799c63",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d645cf1-2f89-4cdd-821c-8e7b83569b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9817df1-0fb7-4376-a907-674740bdabe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c097f35f-4334-479b-a6aa-c340eb26c3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bccfde49-3cb0-413e-bd22-91d5188ad802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace42414-e78e-4b0f-8a88-ac0947d7b4eb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda44179-fd19-482e-b33b-32593054ed63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5e45c1-268c-4277-ad02-fbfd5e011298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2391fd2a-72ce-4705-8089-e5ba6ae846c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40ca4ce3-c7a5-4149-982d-151f72bc7dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d24325e-7d88-4603-b902-b5a062167ef6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31c351e-239e-446a-a0d0-86c921b515c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93457b4d-a184-4204-99bb-101a558f2241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a566105c-d978-4090-a118-6b78322d0ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e08aaa98-abfb-42ff-84f7-7e2aed634970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af65346-727a-4fc0-9b93-a9decfa60a34",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bbe2d0-5047-4912-8255-a93ef8e58c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454171bc-ab6d-46b9-b185-658b4b9aed7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5dca8e-09a0-4f24-8cc9-4df0498a2468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95338beb-c565-41e8-a7db-38d793b4a09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f1f227-c97d-443a-9e54-b2d859c45fd0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6ee929-e916-45e7-97c4-f71c54f62680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f48c28-8c3a-4f40-9a55-1df955c4a4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150a19d2-4e1f-413e-9355-3dc403c228cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e51d858b-adaa-48a4-98cb-d48bdf20745e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dd8c0a-f1be-4d80-8e55-96d9a9f3f75c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796c76c2-8508-4f1f-9aa6-949e1c074561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66e07a1-9c5a-41af-b4fc-d87a0100190f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c054750-2dcb-4b7e-87ac-3e5447b029c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6872c753-7c81-475f-8051-827c9cc7b42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ae4990-2119-405c-b2fc-bad0b4853141",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42b5f4c-5b10-46e9-b7d9-8bc344ebf9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecb0664-d087-4347-966e-9475d5b7672d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a943cefd-26ed-41cc-bce6-065c89075376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cdbf0c-269a-4164-a806-e523c8f3ec84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653b096b-40fc-48f3-be0c-fd7ce59e676a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ef0373-36b5-433d-8ea2-63351408cd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8ef196-355f-4e5f-8080-254448465c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b103066-071d-4897-a12e-eb7e03ef63a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61b72cf3-5ee7-4355-a791-b1f9831f169f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2329c11c-4f87-4642-ae75-e408b7a2ca37",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9c1cd4-5bbc-4b17-8ac2-04bf5b14e01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e871af9-0898-4469-b5bb-bf58f73a67b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e7a49e-8f64-4a52-a3a3-0fa1e4418094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb21549-5eba-43a4-a6f2-ffc759042784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1f8a33-78d4-4b09-8785-817b810c42b9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575f720e-129e-4c12-af26-59ca08444af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a58648e-9a6b-43ee-983a-8d3b092e0f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41d9bb7-651b-4851-848f-4d2a0cffd728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b794399c-ef5c-4135-b5fd-e908db8a6109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f26b8e3-f5fa-418f-b195-e2babb553fa1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bdab87-c06e-40bb-9b1f-9cada67e2df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba277ed-ed4c-496b-83a7-4e1fadbcdd90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3236d7-de20-4690-915c-6cf6eca75d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d26fd9d3-5dbf-49eb-971e-a2dc72e90846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810b0247-a730-422e-9ff2-8f3335a56c4c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee4daae-3f33-46d6-86b3-438f48c97224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9488dfbf-8220-499b-b105-7a79887527b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44424ab5-048a-458b-aa85-a7e8c135c26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3735f7a-94ca-477a-80b8-697f893e847f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0daf93-cd5b-4418-98d6-35963697546c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a682d09-28a4-4d07-90b1-def7112a5493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980301a7-faed-4a91-8f37-06c8d47656e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b4b596-6d81-47a3-8499-ab46b884ef0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "092b5587-cb0b-4369-babe-551dde599a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bee365-e5e2-44c4-a8f0-c7abf64f7856",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaac4ae5-d2a9-4eab-9ff0-9cd54a0711a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734d07d6-903f-4856-a1eb-efa7c16561bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0605f5bb-4f9e-48f3-9f23-5ed5a3d636e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7994ae2b-c716-495d-a2b7-097c6aef1a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c7d093-eedd-4d7b-bc3d-68f2da5d7970",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7613a0-f004-4199-8e87-73ea42756a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf916ae8-edc0-42c0-aa2b-1e3065e30f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0939932-b773-4d46-a069-1e81367d029e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e55237d1-d5d3-47c1-afea-978f495dbe60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8d8923-4841-44e0-bb69-b27fd0743d24",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd55ff1-1825-4348-b555-eaa44af4fab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbfdb33-2b68-428a-ade9-6b5a95a2e38d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2586f595-3a29-4268-89b4-8e9db66e5d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1feae1d-5c34-44e1-a823-78042eaaf16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4905537b-95b1-4a51-90cd-66a29e795418",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cb5f77-6ba4-46cd-bca6-ddf06413a57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e838673-eb77-46c7-819a-c0c6c626641b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d4582d-e9da-43c0-b3bc-4dd2e84c3a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25bd69d5-8d6c-4fa6-8be3-8662fcd6a521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67878a20-dffc-4555-9207-164427e2f218",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ee8c5d-6970-497d-b5a6-77c8d54bfa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6d2c2b-6a78-42fc-b179-b105dbcadd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c0e115-0ac8-4e21-b887-b449215b2eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9c7694-e31c-4d65-9064-18f626b99d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68910055-512c-478c-91b3-9663c6fbff3f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f8b53d-98d8-4b79-af6a-4be22eac34a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23f0c54-9320-41f0-8831-840caae96976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5603ea2b-c6ec-48aa-bc7c-14956d59a902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73b37454-07f2-4bd4-b013-47bb310d9fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285ab3ab-d90e-43b9-b222-7a1d5db2870e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0416f4-f66d-4f6a-b915-267405e440e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba1a123-4060-44b7-81ac-7f631ec7e93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ef518b-ad37-4020-8abb-bbf892f8ddee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53616f21-201f-4908-817e-114b34c4070e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4ec46f-b2d5-467a-ab25-8db9b6f9259a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9b5a0a-4a03-4682-926e-886776577f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ace104a-5553-47b9-996b-1bfe56d8aec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54664dca-ad34-4900-b183-fd457db43ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca245cab-e8ac-40bc-abb6-f3e0f4e6d8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e38f9c1-dd21-471b-b794-1849c94b26f8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b403885-c668-4950-942a-88a5b397dd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48f9d49-05c4-4d10-ae2e-8f5533286518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1443f121-798f-4ed7-af83-cc3f0d6fa814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94444694-e54c-41e4-b5bf-f7c9ae883134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e7b0e1-2098-4c28-918f-17ce612018bf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab907ac8-8f5c-4c4a-9c58-5e79e778cbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b8ba04-0cd1-4750-8ed6-d6e30e6df638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee09df6-abfa-4f69-8fc8-b27b41fb1052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b18d65c6-50f0-41bd-ba91-32422f5c6c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5808401-1e15-4189-b95f-790c70e6f269",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ab42cd-faaf-4123-82ca-45c5e403479a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66050398-7344-44ea-8625-8d2f4f542077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b258b294-c42e-420c-86d9-1065ea098726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f723bad-e4d0-485b-84ec-283d74fb8705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6677559-7ebe-4d69-92ef-5bddd0f3b414",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9693bcc6-e23c-474e-a653-1d3875320ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec87823-79d9-41f7-92cc-25f1fb1d7797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47989ae1-46dc-47ae-afe5-bf321b76b306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65ada9c8-c266-46f9-87e2-9bee915ae0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cf5a11-a297-4f25-ac66-d3e59271e6f2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ab77e9-c994-40ff-830f-4b63754e7c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7294c3-ff00-437d-9ca6-0d2989382b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f322c9cb-9964-4f2e-a7c9-c07ad39c5a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3054f2d8-4b9c-4f65-b943-7a0a3119b892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e1addd-3c10-4666-ad7a-5e400d9cde83",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670f02ca-cb0d-4000-992b-4a4d86625bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbeeb76-efe6-4f9e-90e6-3c90a2593739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddc2819-c417-4d48-95ce-74c4a6578362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4452c9c-4eb3-4de9-8012-9b69456f784a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd21124b-267f-4e9e-8094-22a76f22a9e7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df917065-89ab-4e1b-80fe-f3e91f9d1c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7098fcc-21c7-4b79-9bde-01c470313b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf9b9e2-ed8a-4c77-b4bc-8613c3fca9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75932aa8-fdee-4f30-8eda-d30a3d5d4157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfc5131-8736-492c-a3f8-ec622965ba75",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5d0858-d55f-4215-8ed3-2ee189c36e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d73973-3855-4010-97dd-92b15b8bb98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4504a1b4-5eaf-475a-8652-9a84ccd8ab4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a13b5aa6-d49f-4c96-bac3-19bde418da07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e4b89e-3bbe-448e-afe6-15280797ed5b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2187c0-cd76-4e51-a7b9-4693534c45dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca5916f-8c8c-4ab1-8d7b-389c7bc1bafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cd3929-fdf7-48a2-8aeb-44fa1f512ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d53bdf5-5b87-4327-8b7c-836509ae8039"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f2ae1b44-e5cf-4152-b957-e1b0f4e43d53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c201c48c-3c0c-455e-8330-dd8d63645965",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d9001b-c0b7-4204-a048-71fa36efa539",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d98b0c4f-5aa8-41fa-bed9-05e913d38784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f308795-7fc7-4741-a607-11943f75f4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77fbc570-da66-43f2-8d52-33bc3f598026"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b226f71-e421-4377-b53f-f95d0e9c10c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45f54b4a-963f-466a-9010-22ab36be337b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e3070f5-4541-4eed-bc58-a01722ca5be3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44d59199-71c4-4433-ba53-6b1969ab1698"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b4876ab-8bd9-4ea0-85eb-676893fe5680",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "985297de-3fa5-4f23-9b7e-6c170a038f43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d3c7822-f36d-4cb3-ba16-e29787f0926d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9e2208b-ab30-4359-8d58-0255aca96ed1"
            }
          }
        ]
      },
      {
        "id": "d1065c7a-a033-4b1c-99ca-d11a866ba3b1",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6f1b266d-e3e7-4036-a64b-5ecdae85fbd6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88822ec6-2306-4cee-9719-d7b0743028d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5d10fc92-4c19-41a6-88e8-967154e44251",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fb7a18-09d4-4928-b04f-fad44e24ede8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f528bff-bcd2-4c2e-b2e7-055d47ee2459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb314514-e4f2-4242-b749-b3f3ecce4466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae7869d-2f86-4c7d-a8d0-8c75229ff34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee6e097-a275-437a-87e7-8d937e427d5d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c1bf11-bfab-4646-9151-b88c859bc6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d87fcdf-2459-41ac-9776-610a8fad0928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659e715b-6ff5-4f47-8876-b0a1a55f46df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e39346b-983c-4f9e-b528-5a477b0ac8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6302beea-5574-465a-a268-0f09a70530af",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fb368c-be7a-440f-b4c7-49c2710846da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd434a1c-ad5c-40b6-8717-3306ce3d2717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf77dfda-e9ac-4e91-8e07-ad0b04b4276a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed46a57-ed12-4a6f-bbe7-5fb0e64b69a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fb3ac2-ef0d-48a2-bd3a-0d4e6ea660e3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b99681-4eb6-42c3-8eb7-c78e23a1ef0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d21f33-d3d9-440f-8f33-67e80ccb36b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a82078a-98ef-4e19-a83a-30229580fb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53932af9-7f06-41c1-a6af-4c8c3d370d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb8add5-72cc-40b0-a888-f432e488840f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6536eef-8b17-4bd6-be08-6db93da0768d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38b8a5b-e680-47fd-9fc7-d172f0bcc0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b019928-7948-4911-9034-8a4ea8f35f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "355f224c-eddd-421f-b3fb-27a1f296463e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc85125b-4494-4f3c-a48d-dbea6b49327a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188cdc6f-0db5-4ec0-9e5a-612223ac8423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11712f5a-1ee6-4026-93b7-2638d53aa18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d81e8c-1e38-4310-94f4-e3623da79afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b1ef2a-6217-4880-850e-14dda3bebfe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c4ad1f-ddb6-4e98-805e-e8eb13785b42",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a42a09-978c-4392-afb4-b13eed5ba1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141bc2ff-100e-41da-b823-2444c266ccf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a84b306-1ba2-4d69-ba35-a1bb13b923a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "aceaf7be-d948-46d7-ad37-c3523dd8d86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af1b7cb-e160-45b3-9101-f395a01d39b9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b06fac-c0a1-4999-894f-bc5eb85d4f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d490fe5a-125f-4b59-b113-a6040c22f310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930af230-57cd-4b47-9544-f2b1654a3176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "193e40cb-19b1-46c0-a009-3898cf19cb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f058a2-7923-4075-9750-9a73cc0fdbe0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b316c30f-0225-4979-ac78-6232a6b1f54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e457e3c-bfae-4a08-8569-92d3045f59bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80373f9-dc26-40db-a879-2d209c56e764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d460717-9292-4774-8688-186787a22f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97546b3d-b2af-4d24-b8e1-4eac20bd5d0b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c53cf9-ae7e-49d9-9399-869332521baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa84ca39-1907-4636-b457-0a09394ae42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ad9613-e7c2-4c4a-b27b-9bb245f4a458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08670c22-4355-42ef-9740-3bce56a22e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ddfe9b-92ab-4e85-9c50-6c2ee685fbd2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1ed6db-861a-4052-8098-51b2c6791b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f317cb-5fb1-457f-b625-67950288f9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10ad06b-90c8-4e94-9521-7b77bf8c82ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3ce076-7e23-46c3-afdc-933d95d83238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3345329d-e437-4b39-8058-a3c59ebf0312",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a03b872-7eae-44c8-b424-4a3fd0443b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51a62d8-ee9c-44f4-9966-fb0af92e9029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a948ae43-1360-4f67-816c-10f203203a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "967ba48e-4f1a-4253-b8af-ff31d676eb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c67381-2f82-48b0-a3f6-61ac5e4dbe47",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cca68a4-1603-4544-9543-7a499df4e7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9e74ae-aa8c-4dc6-88e4-b156162ea6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203e1ce8-d144-4118-baa0-bfb2612176c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3949e8-277d-4821-9fbb-21aebcf0a926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b409021a-8570-4027-9ff1-c5a5008f66b0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3de555-5a72-463a-88c8-9222042e7ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb33e2f9-1f1a-4f93-8b69-90c82176fea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaca838b-56f1-47f8-aeee-2ea1b3664a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "91319168-8890-4932-a7cb-d921494f0931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448c2b59-0cc9-443c-9878-4402ae3153b6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0f757c-6c49-48b8-9ef7-5cf06941f90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad46e34b-6c87-488c-a133-80b69fb4fa80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5b2e37-4b51-42bd-bcf4-9561e70d07e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "30963693-15fc-4607-8ae6-b4ad4acb5c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d42ae1b-dc1c-4221-92da-fe67bf7f5ba8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e5e9ac-fda7-490f-b17c-08c425ab546d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e35849f-aecf-4250-a8b6-57c2933b7bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb9bed4-cae4-46eb-ab27-4c7946a41dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba2831e-58c4-4911-8803-06154b4405b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f002a723-7bc5-4277-ac04-476d6da90c39",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f69f341-3069-4c55-8527-96ae419a1233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ac98b0-9cc0-42f4-a22c-ad2ef2be9ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1351f479-9cdc-483b-83da-d71589d2559d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f81bc29-10d2-4f4f-89d8-2a3875a9e1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be8c92e-9ba6-4660-8fd1-15c5ed64003e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0b2d51-e1ef-4679-ab68-8d8c8f5a2d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6320f29-a61c-427e-b054-44d827b7c364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced8c009-94ee-47ed-b10a-06918f1d6674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe4d78b-4899-4766-8b70-ec51c026b6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcef234-9277-49da-96ae-020ffc0a3e33",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d853b0-ed65-4912-94ee-3f80fec6d5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c178ed6-6479-4e4c-ae13-cf4b1ed1343b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8379f9a5-469d-425f-b711-b8fbab2ca182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88c0b79c-f70f-4598-a1dd-ee07422194e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdd61bd-d882-41da-a996-8a52ef7be9be",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f15a34-61ba-410e-8898-92c4ac025a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade54146-33e7-47b5-be3d-e2f77ea043b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372a5b60-adb9-4301-bf61-253f46fd9fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8e774f-d279-4529-983c-6207b0c9ff05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b328231-4d1b-4842-889a-deceb5a44d75",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc32db4-7476-4266-ab33-78a514f67795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f2d7e3-d726-4993-ab54-0789f2b18de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a5cc2d-f4ca-4e3d-b4a7-4617a8e67dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bad6d8-5eb6-4024-984d-4765740e1a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9f436e-2d13-4900-adc1-bc4b81821ab0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c973fd-2ea4-4e96-9617-3a5a3f52221c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cece93a2-47d4-48df-b52f-ba44360792c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e82343e-4346-44c5-9370-a13b9c0f8142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "334bf20e-411d-4bdf-8b07-2cc3fa049024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a66835-03e3-48ac-a478-b89c48afa30e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd24c979-45ea-47c8-80f5-ad94ef55498a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc42787-678b-4f30-976c-483974d60e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefcf796-e6e0-45b0-a62d-e4a2321e4221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0cdef6a-19d7-43ce-8ec1-c68796d93f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89d37b2-e92f-463f-943f-c9668d907c61",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c803311a-09fe-413f-aefb-835230860eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827f84cf-b884-4ef1-9952-152bea6a6ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fcd49e-5330-4278-b265-ce87f05a6dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4c2088-a86a-4b4a-9505-500648899826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47212854-29cc-4653-bb54-d712a17b6fa2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fdd16d-84f8-4d19-aedb-5df056c17941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76624af9-3857-46b9-9cf1-b4ef533817b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2768989b-f444-4300-a621-ec8197b9df32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8fe06e-4eae-4ef8-8507-00d6878e257e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033988a9-6926-413e-90cd-654597d7daf3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30f5684-a918-419c-881e-8b6eb9a6e6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a57014b3-5529-439e-823c-a85b561e2744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7eb91d-7321-4e08-8628-0a9464db6d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61aac134-6835-49f0-980a-a69c4084dee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d79a9f5-beb6-4d7e-820d-32873d864092",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13189bbd-f447-4277-b801-c6d9af831b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87eee663-1390-430e-8363-89c1c05fb16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196c3434-334f-4bc3-8e3a-d0d3787cd178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3be56d0-9283-4ce1-81cb-413a3eae436e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040b8851-ef27-4cd1-b291-ca7c6fee7e61",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffbbd0a-008c-467a-a27d-0ba6c6107b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63244be-aee1-4167-95b8-b6f36ab9315e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd6967a-5aa7-468f-8272-f8f2778d75b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bd4207-2608-4566-887b-d294444351cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe82db5-10ae-4b01-9f73-cc046f2dcf3d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bb91ec-b94d-4a98-b817-e8a2799ae323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6adab51a-f7ac-4068-a4e5-98b6c6229434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470ca39d-bd43-41e4-823e-1a640c34252d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d579f7b2-d55c-472b-b034-972b030c3065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0674d30-1cac-44d6-882a-beaa763905f1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6602929-e1a1-4c4d-a725-a21242ecd323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8b865c-5e41-4986-a3c8-a458d6566e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6058f5b8-f5a2-46ea-8ff0-b0b4f3bc51fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42fb6098-b746-4e52-bc22-157c514017f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39731b6-817d-4e1b-a9df-4af4f8fc15f4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff960153-1ad4-4f3e-92c9-1feb0b5493a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2b8345-c2a9-4b0a-836c-98e6a0d6b481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf6c0b0-f4e1-4cff-aeee-2148c2869de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1788b63f-3071-497f-b3a0-c752e3a6c3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b908db92-d4c9-46e3-9059-bb1b592d8628",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ef509d-d126-48ce-9ed8-e862c4f64f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8afc20b6-75a6-4ce3-aded-766277d597d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247730b4-367e-4ee1-9efd-a9e2e33f841f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d26b4a9a-6f92-4134-ab64-a5724aac4d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1964704-32ef-4249-9a74-1063505b6e7c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c7676e-b81c-47b4-abb7-f0864e2be3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272e6d41-f07c-46f0-b077-d16289aa7abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21600c64-e5e7-4788-b39e-8b456e233648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1765b849-72a4-4b96-a3b7-4de6d238e2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1138329e-6f23-4ed3-93fe-47ce2a627d8c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf502782-e971-42dc-abf0-ae02035db3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b484a5b-251d-4dc6-9175-16f39c3cd11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620415ca-789c-44be-bea2-58fca7ce4805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3733b7-e974-485b-a795-723d3fbb8858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed2e823-8237-4662-96d5-ded223cf38c6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5508c74-a86b-497c-8292-7e0811abb7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489a3a95-22f8-4aad-876c-730a8aca3f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbb2e44-7187-44c9-9236-e9aced94a29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62beb29f-d301-4fb6-9e60-02309a45815a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1039f5f-4bc3-4764-b09a-190e500fa9fd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5091be3-de12-47ea-b954-1bfe1be6f2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace325cd-3999-4e1e-8e69-ad69e4a4ad43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef58b145-ea70-4fd4-b0ec-dd31cd8fa51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1e1db3-e078-4538-859e-f3106090f5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7495a190-3b22-4d01-b44e-0047abc96678",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e846e622-e957-4d1b-aff8-c3ae7a0f1f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c148d0-dc71-4f37-baa3-096611d651e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35ea735-37b7-45cb-8de3-aeccebe2ce1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1c0538e-4b85-4e29-af0c-efef27a32474"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c9f48398-7312-4065-9e8c-c094f3d152b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdafb6e6-14a2-4416-8800-645f81b47ab2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ee61a2-2f27-4318-b09d-a9feaccfdfdc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b5e5fc-8e30-4860-aa24-7a58360f8ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46ed326-9efd-46bb-9967-4b459dd2d8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4bc162d-d22b-4d6a-bd90-f5778d29cb02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53c736a8-484e-4cb8-85f3-f6535a90d850",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a35df4e6-3a34-42f2-bc97-a3b74e70d986"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b228c6a3-6ba1-41e5-9cf4-fd0402ffa321",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d15b5d65-9663-42fe-8686-8d66f5ae4074"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc0bf32c-6413-489b-b101-0b0cd8413b88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "76090ca6-d965-4a2c-a3b8-121eaba95a54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f874fb75-757b-4129-b465-68d72a057342",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e1e2564-c871-4243-b6a5-31e00f9d9fe0"
            }
          }
        ]
      },
      {
        "id": "330c882a-aab0-41e1-814e-999599d5d4ed",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ab9f11c1-47c1-4598-bd3a-8c298fb4e3a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc379079-5bad-4a56-953d-b52e63a82c1d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e7756221-9c07-48fe-947d-fd15bf1ab549",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614229d8-715b-4f12-9481-5858c39cbf19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b66a264-b8ab-473e-817b-345dd640aafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be49c38e-1434-4b9c-bb4f-e146036093cc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fe15ab-8140-40cd-8402-50e5a376a616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8ad01c-5ff2-413e-b6ce-5c934b7b4465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf8305b-ce9a-4e51-9c1f-fb1704f2eaae",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74809eb6-5c1f-4b4d-b258-7a9e12f3256f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ac6388-51e1-4316-969e-ec3dddc9c760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9643eb-73e0-4874-99d0-19a3d56dac8d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c50ab50-0633-472f-9643-6196822dbcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4c0514-4f69-4446-a3fa-86112994231d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0129a9b-94aa-4fb6-860a-dbec1042c367",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73660843-8fad-47f7-9131-03fce71082dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599c1362-eadd-4084-8e47-14fd5a8564d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2853042c-f6ea-4058-933b-f9a371d1d61f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22faeed8-5b2c-4ee3-b834-30423e01e4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18278121-9596-4486-830f-02e23ecfd938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbef8db9-df8d-49d2-80cc-43e378fa0421",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9a50a0-b220-4842-b877-efb535d5a293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fbde3ff-5e57-42f0-b701-aedd065a408a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9198ed33-ffa3-4d71-be6c-8955ed83652e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d7f86b-5d4b-4f80-89af-d9ee6eb8b800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b8128e-6c90-4ae5-8507-6387a3dca261",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0507b0-0274-4023-ba50-9473582fc6bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1351f2b1-9d70-4858-a0a7-197284abd3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf9159f-31ab-43d7-bcae-56464065edb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fca8887-a69d-4a17-8060-f11e86480e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d01277-8850-4ef6-995b-1a91dc3d2a3d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d71c311-865f-42bb-a371-092132cf3885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4491906f-b8f9-46b3-a145-b9238f642597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118cc651-88bc-43ca-b8e4-bee5b2e83b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb362d8-a777-47d7-acaf-e39bcdecf8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4d06b6-d980-430b-99c4-311c403259e1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165fd231-84db-49bd-a299-583ce91dee35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b04d1508-1359-410f-bd9a-0e1e75e6f2c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2309f3d7-200e-459f-b91b-ea64145e1ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab0dc12-be94-42f4-ad73-3436f6c95105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73329c3-83eb-46df-948d-24c7fecccd90",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ba40e6-8363-4026-9eeb-1dcce7a9a908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bcfc2b-a216-42ab-9ac6-7e79b9fb909c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "822fbdd8-2a9f-4afc-8187-e2b1d075b399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82028671-28a9-4a1c-b20f-b8eddd666716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1218cfb-04ff-44e1-bd9e-5a787c8d1cd6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bb8d36-5813-4a3a-bcc5-a37c5f34a360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f878fba-f03d-4a6d-add2-19d6af9f0735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de94ab2b-690f-4bc7-83fa-28b0bd906fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ce4dc6-27a7-4ef2-bb71-400066411d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e8971d-322e-415a-883e-c7a23465774a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626fa8b1-4591-4511-ad4b-1562bcab8488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77f098fb-bc2d-4a4d-a80d-346b28e648ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abcf41f-3ac5-4b19-a4a6-989ea581f99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a048b9-551c-4c7e-8429-d35159ace1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461a1abc-2d5e-44f0-a108-e2fdcfead63b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb2576c-c8b3-4d56-b2ea-76abe9123c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6727919-1e3c-4b2e-8a3d-734a9100a923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42801847-a0f1-49a1-8912-13318db2c16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dcd8b54-427c-416b-880e-7be7608b43a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9701b1-3082-4d80-bcc7-45b311c2e1da",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9a8f6d-9799-4447-b604-4362e10e0f20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f85f5a0-0537-4aec-8620-b1882287aaaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde390ed-546b-4905-bfa8-206b77ac8864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688987ad-db9d-47bd-805c-33662c207f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a55feb7-337c-4ed8-91e7-de170c2d0858",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdbc3bc-43a1-4396-a81a-5b528166ad5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c88e12e6-16cf-4e49-b8b9-37e13ce9977f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb03378e-94dc-4400-af74-ba6142641d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea246ed-07a1-4996-aa22-bbb238086ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6440b57-85ef-458b-83b6-08f285f03152",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89fd655-1602-43c2-8582-1488c4998f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a47b70-e771-49b4-9210-367b170cd401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f751e7-3430-4898-8cc2-86cb613447ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57fb7c06-bffe-426c-8427-593dc54278a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b43a88-e7ee-4591-9818-a9e0172f24a0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbad16e-3d46-4496-8c85-e136993dfebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e0012c-86a1-4fd9-968e-d8c358392571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479ba233-572f-4ab3-b551-6249439f7e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e53966-29ab-48cb-bbb8-ca728124bcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de32d15-704c-43ed-ad6e-5ead34277e39",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0acd69-1384-4d5c-b784-5a04237dd810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e06a30d-3d97-4314-853f-f5e7c59b0eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a766e5a-6754-4362-a31e-efabf796adfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49141f9-1661-47f3-b929-0bafc5f77971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48c53f9-d2d7-402b-9de6-b96de385b299",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f375c44-47d9-4bb2-a220-5aef99242263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72ddefb-8fce-48dd-9ef3-bf0e02ae7cb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a13cf1-1d0b-4530-b029-461df5a50bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299da2d2-accd-4939-8656-8ba6d0483368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28073ba-b772-4cea-a993-d1ec506eb29b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ac3de3-e62c-47f5-a335-1dcf00d17ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7621d888-ff6c-4ee9-a8be-1e40241f1740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d6c249-2cc2-49de-8621-f7f2189c1706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6973b794-1d3f-4fa7-a302-acebf341b564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2f3a4e-540e-477f-ae96-39d4a594b94e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ac9c1f-e2b7-4f73-8e44-2c927566211e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75f6029-3ec6-4b92-b639-c14dcd9d3beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f71a2f-7887-48c4-87d0-a1822bd399cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf22e867-5bfe-4f69-a058-fe263a1504dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e394746-f4dc-4a1f-949b-411f3ed287b3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51257774-4c9c-4929-9c3f-768d77324e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb161b1-214f-43f6-95f5-ae6446b0070f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cca713d-29dc-4113-8fd0-b54f01854438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf7e5cd-3f71-4846-98d6-ce52e27b770c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750a1d7b-0484-4f2a-b8d8-186582d5059e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a20b717-1184-4f75-9ac6-572330875fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3a19604-0781-4a6e-bda9-a0e921ca2e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f777b753-57d4-4163-9983-9149a35a255d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e5b7d7-9606-4f1e-ab46-9ab1193cd8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e346b618-58e2-4123-a0f7-78cc0f44e08b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9ebce2-0d16-47ce-b486-86651a483d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c62242d-dcba-4fc5-81cb-6fbc6bce724a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c011f298-78c6-4506-88e3-db30ea0dad4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143860d4-3599-4856-b0ba-7dfcc8893647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396ad81d-b6ce-4d37-ac2e-097ebf63751d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4744a39-29af-4a6c-870b-043332d61b94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da2345f-9759-4af1-990d-d54a07f77773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa314f81-80f1-425b-b381-ce3b219ca4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9ca7f0-ad6e-45e3-b5c5-b989aeee7f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea199485-c307-4d65-b89d-1fdf892075d0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09d51d5-9cff-428d-a530-1e5042251d29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f999d06-d224-49e9-8057-fb86e863043c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a77bb8a-3dd1-41f9-9d6e-cad0729723ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b37fe0-b300-4cdd-ac47-e6f1f0a5a27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a639864-ec96-47bc-ada6-35dc7a8b0ea6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51817d17-943c-4220-b8d7-ead1ffb32d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114094a1-b034-4cb9-9a4a-b5fab6802f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcab973-46a4-464a-b8b6-b361b8b5f9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cacc97f-8640-41a1-aabb-6e07dddc2f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e128d2ab-e419-406f-8bac-b3c9bd4f5789",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c077ca87-1855-43eb-937f-2655f0b552c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efa43a61-4bca-4ebb-8eb2-d3e1fa967c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c92e5ae-544a-4461-9d3b-d3cb74defea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6048b844-750f-4fd8-b6a1-93ba418e2988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90ea1b2-caff-484f-a518-0f4a3bcf5741",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6437bb-1a27-4c9f-9fd0-cb1a31ee10ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e8afc55-9661-4d9a-aff8-5a64529b3f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1610d3e-0d2b-4ef7-b772-5488a4f98401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749cb111-2ddd-4b85-806d-b3d651e9b340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb21b62-004d-4740-91e0-36b7976bf997",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c186833-3057-4702-b93a-8d2ad25e5301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0549523-6277-4c7f-9b4c-d3983cdd0aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b649f002-9218-40d7-aa64-1f745a565e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bef861a-ef41-4aaf-9d7f-aaeafe27f2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1f9949-64ed-4654-aadf-81dce0192bb4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b151bd-d52b-4037-aebe-9edd33fc4ba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb151024-332e-43ac-868a-6f5e39b791fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c17ed9-7a8b-4ade-af54-cd663fc835cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbe8cef-2d37-4e66-aeb6-365d9682a984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8270c945-0192-45e4-8e66-b461e6e7d034",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e378294d-7d6d-455f-84b3-8eaab3ccd76c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf53f047-0448-4676-aa44-91289788ff00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6250a9-e870-4fcd-9e6b-394887e57541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c6eb84-c5c1-4cec-b0b0-5fd6aa60ac26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e985a3-a548-4bc3-add4-b80f40d99ab5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070324c3-0f22-4378-a4fb-ad293f9aa7c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8166530c-fe04-42ab-a733-0999f5cc6bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42089207-6872-4ac2-89ea-8d90d09905c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d4ba46-9c67-4cb8-b96a-4c824412e2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cce7cba-7eb9-4dce-a70c-e80d3da608f0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384691b9-8e64-42a3-aa11-168b9140fd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5892829-2e29-4913-93d1-06cf239bc724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1278a21-26ac-4620-bb90-bf0fb53fc5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0823832-b6e8-4750-8487-4fecb3da2300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b75a0ca-7dd0-4bef-a0a8-84485f10411b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4cd37c-26f5-440c-ab3b-c8308db29daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33535680-6a87-4fc9-a03e-55dd417e1dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "476ac0af-d0b9-417b-b716-6795396d1b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8787e8f4-9976-4fdb-9939-47cf6e6b662c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f683d8ec-1f79-4ae6-bb15-b952a7191c67",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0df200c-7698-45f3-91a7-32da6a97e0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0f792d-eac7-4080-a3c7-530ad981564b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30077bac-1cf8-4b38-af06-43b6eaaa8521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd2699c-16d7-497d-ba3a-e31014fbd301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb888d6a-84a2-4a64-881e-bf38990ff81c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8894dc64-f239-49e9-8126-d9e33d2253cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274d9606-4821-4a57-b7b8-7ed6f24ee7b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9428381-01f1-4843-b951-52aae2d8bc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9028cfa4-2b88-4fa5-9292-c8afa6d85026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2173d31a-5c70-4fb3-b118-02ea4f8c6ada",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193a46ba-ea15-45d1-bd69-c03e319068ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d50e299-6fcf-4ab1-a7a3-bbbf8b4dec65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71cf4d8-88cb-4c6a-a63c-9767a1e0a60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28899307-841a-446d-a23a-d48c69d865d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1f5ae5-50cf-4c4b-9373-af5e8a09f125",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8894a6d-5531-4743-b8a4-3eabda6c2090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4aaf5a-149a-403d-8bd6-2dfd57225090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "018be8b4-cd1b-4b79-b319-14091623be7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45eeffe-a61d-455c-92e9-93f9edf7f490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12551fd6-fe77-4d75-a70c-f95e07834f43",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255d2b13-c265-4da5-8757-2493991e3289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e98e81-e10f-475c-ac61-bd32ad78e605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8059628-e825-40cd-8e21-f79eab0c43c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d725702b-3932-4a3c-b44e-1fea30b27af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779243f0-ebd7-4f44-841b-a82fdcb2a217",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d09a87-7349-4025-89eb-94cd4fe899ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9dec8e7-5cd2-427c-ba63-b831d5066434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970d01f0-3801-4b2c-911e-902d00960264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc67945-f1e4-4002-949b-adde7631ea1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce74fd7c-297a-45a1-80d5-52995cd937c5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404086e2-3238-4d24-89cf-412a1b629274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a51f226-8d4c-4804-ac95-7099faf7994f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f321657a-9e95-4b31-941d-788f65cfab6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0737fe-30d1-408d-9241-998b11b882eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc403299-3cb1-4524-9008-a908faa7f6b3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e881089a-fb2a-4a83-9efb-aab6427ea251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab80fabc-b544-41b7-af9b-c6efb45d09fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fed1d26-3111-4fe6-884c-9db1ed0a65c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf121da-e443-429b-b46a-e1f62e95012d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec121719-07fc-4158-8c76-1c96d648524e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af51bbd9-3770-4c13-b7fa-11fdcdd37f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a406ec-05e8-492c-bea3-c9c61da9bddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd06775-1951-4d20-a888-0b82abf960d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4b3b95-1d8d-44fb-9c61-ee42402b371b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85941473-a01b-4772-8ab2-be1c96faefc7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec96c8e2-2944-42e7-acbe-8ad1d331c294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c863a48-f298-4b8a-89f9-ca6212132335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a8463d-526c-459a-acc8-9541036aba50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4631f24-1c36-4df1-9ca9-6b2c0963c76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fae38de-7622-4d43-9959-d9ee70dbff46",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4dced9-fb68-4ff1-8252-d2748073445e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e765ba9-e84a-4801-8639-696982cdd591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0265d062-9b12-4289-937c-f2f0e49797cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad9075c-1424-4b24-a5a8-066e5ee2d3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf58ef8-d70b-4b35-bba4-39bc1b926886",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec45db78-bd7b-48d5-92d1-e18872e297f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf437486-e7af-4410-92ab-b49eb2be3492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5eeecd-334c-43d4-93ff-319709009406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278792e8-648c-4abf-a2af-7e8fa563b4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfca0dc-a7d4-41f0-924a-3c50fcb4531e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830a7927-185f-4ce5-be98-06f762fbbec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43af0b1-3505-45ce-8a78-7d813edec146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3210baa-b34a-4c2b-bbb2-74dfcdca5d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba89481-c501-45fd-b2bf-6035c83183b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7344eee-16cf-4d59-a766-838ad2527443",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d559d6a-ae78-462d-96a1-f8f42c72b0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9ff53a-51e2-4177-b0ea-d74b42a98a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58657e60-d82a-4324-99cb-9859d614bdb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ef2e36-edbb-47b2-ad41-518f922ef7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfa07e9-29e8-438a-90ee-815cb8f001ca",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09efe0c1-2174-4db9-8939-72f35ab3cac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8a73b0-9137-4353-be8f-27a4aa331523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf335012-d931-4f25-bf0f-ed44ddd9ab6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc5ab4f-5918-4af2-9496-c8f5ddbe9298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8380ae-cd79-4630-ba04-2c9020e40535",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfde6c0-11c6-49c4-8801-3303df95a12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364aacec-15ab-415b-b964-bd0a43afe018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9675414a-c1e5-408b-b7d1-f4ea91aee771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5cd4059-b70d-4071-94e4-add0d1a13bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fb3c05-1f1d-44ef-9d72-45b1f1cf02f1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85a6e1b-807c-4d71-aed1-55ebb4baa480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a76e336-0cfc-44e8-9e9f-cdbfd97f0df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f56f21-3dc2-4f20-881b-ff1c6aef6ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c91dec-59df-485f-9fe8-d02fd7d2b46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d0b7ec-0361-4c8c-892d-755657b52ee8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b536d786-e341-428a-ac3f-401b247d9f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4864eed6-96ed-456a-8d40-bfaa4b96070c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d622b5-f5de-4cd9-bbe5-e78fc52f9694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfbf759-4743-4002-b0bb-023d079999b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2896428-3f4e-41bb-b0d6-2317308b4305",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fc13bd-02f9-48c7-ad67-43ee9be97e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbd2758-61fc-4a8b-80b8-14d23fdf3ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33dfe8c-830c-4239-9ef0-2e4598c906a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "110ced90-06b2-4981-b345-33c94f06d3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5e6a9f-d4a2-4565-9833-06ecb1c11b6b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e2d110-9b05-42e2-8d51-809e1f9d8b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e21779-a408-4519-8b7e-b561b31382ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edd4143-ba2c-481d-ae82-f34b3262401a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8afd183-a8fc-4262-93c6-ac56b2ef7f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7f5b42-9072-47dd-802f-b494b0cd2a37",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b135d10e-86bc-4ad4-a771-9552586ab9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650762a9-6857-4316-8740-e5b5a2332188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edc014c-035b-494a-918f-673146df7f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c81678-21a6-4422-8666-270e859f1807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed53916-a35e-4167-a6e8-613fb19571f7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c926d7-c002-462f-94e1-8118e33bd2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770a56f1-4cd7-408d-b3dc-2f74ad805871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3cc48f-6f09-4899-9a8a-e6c39890495d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80037c4b-a42b-4837-8c9f-61b43cdaf188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62ce4f0-9037-474e-8a0e-f262933130f1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2ed686-a339-497b-bada-58c328f67eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4eb7f96-3545-402b-9316-9e76a8a98d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "541758b0-eab3-4bb4-b7ef-683df0343858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e89703-6460-4daa-875c-2f7db6f9b317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c020889-bd1e-4882-ac93-75907bf9cff2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075aaf5d-67f8-48c4-b391-a462f3b7f6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196c76d5-ec49-4762-9b18-40c32d2a7e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac527b3d-b812-4a62-8a39-0362c16f9a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c23bfd0-2748-443c-8b1f-aaafcf14f892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7c1bf7-0924-478c-afde-a58f397b071e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01d6c14-1504-490f-bdda-c1514c3884a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6277d6c-a837-4449-8ce8-a07bfa785c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7fad4b-f053-4f2f-b2f8-14b9d2dd85b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5af597f-7256-4dc7-8854-bbec2b8bf548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5569924f-f526-405e-87bb-c9e0357fd810",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292cdbc0-f6e8-4ebd-b27d-4b6e467d946d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a31bcc-80c7-4f60-976d-1224ca8b1972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2381e91-22ba-484b-b636-9ffe8766bc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6bf13ab-47b0-4062-910f-02acb45e2aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfac91e9-87d6-4ad1-a169-2e18906d205f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed0cd23-f6b5-4d8d-9f39-d335a7e537d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2bfa7af-4ca0-4d43-a600-741441303ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ade0d6-3cb1-40da-b27e-a74b5f454af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d77bf24-7176-4c02-9d79-174291dc8848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e353816-4939-442f-bf43-71bde15d6a95",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199d7fb5-edd2-4be3-b79d-e53f333d88fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e963e78b-da34-4f10-ae1d-398888f1f046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "672eb60c-cd66-4e17-adc1-b489427b5efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2706664-34eb-48d0-b123-6ac455234dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6116cc0-98b9-4b9e-95ec-e4247fb0801b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad058678-b973-4913-9300-8b08731cc6bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "633f4202-7ffa-439a-b8c3-101e22891058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "156cccd7-7977-4939-bf47-5da3cee0dc76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b87f5a0-4d96-483e-b9a4-927b73b45e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a3938f-9321-472b-9972-5b359bb55f4e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1da4d1-30ed-4f4e-b6c7-2dad7976d56f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf2ae81-2dfb-4987-96eb-50cd4ba4c2ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5011877-3990-4306-aead-6f39b36cb887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b827a3d5-720e-4448-aec3-b776fc5a4318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8bf820-62f1-47dc-bde6-615f49fcf872",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f633d53-9c9c-4746-9a2f-72e3b63aaf37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3996a5e2-fb5f-46cb-b6bf-98e48ebbe398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70f2a2b-45a1-42e9-a445-ddba892714bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43554f8e-15d5-46b7-864a-7e946ab2d2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319b157d-8056-4891-8bd9-16e7f7cec2bd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945b61d6-461c-4c0f-8417-358b0f3ea743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1883a33c-ded3-40c0-ad0e-3d6d80ed6597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ade86b-2881-4bae-9fd8-467083d5d9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6437c51-8245-42a0-96ae-981af8489706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70d4400-72af-4c83-9177-60e624b3ec29",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ab2a34-b97d-4e5a-98ed-5e49137b81ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4a02768-33fb-427f-aed5-243578328a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd585094-45c4-4b08-987c-3fe206e9c928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c47630-3fc4-47b3-a689-f975e9cba814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0495247-e3ce-41e9-b831-d9da767c1681",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8741d0d7-2467-427b-ae53-5c57399ec2ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b862b2a4-2d03-4e75-a94f-8f4ff5d7c233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f49ebe3-96ff-4e81-89a5-71e68320b218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21d16f9-db53-4937-8d90-2d3df4f80f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0933fa9f-20d9-4765-8cbe-6ab776f53be7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2a63bc-2561-4c3d-b61a-d8db4b12f5c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8bdc47c-b243-4f51-9d82-b1ebf9e2e830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a33feac-2079-48ce-a80e-9c8c78382e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf50c497-8bc1-49a0-b5f0-64487f9f8e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360c2f16-5397-48a9-959e-e4c186c2ef02",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25f79e0-e1c2-4cf6-b896-9149c3b44321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb7e9660-a0d3-4f9e-9881-90fae07b0db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "439f8d70-a38b-4ceb-9d14-3466dbf4eee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c5a712-f7dc-415f-b9a2-ea2492de3bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7273c2-ffae-4aef-9550-d264af66a7ac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d753c0-67d4-4cf6-8f7e-3fc1a9668262",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd733b3-7f7d-49a7-9a0a-44164c5e3c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7268078e-8145-4fa3-af99-6fe3bc8004d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a55573-478b-4222-b65e-27e7383befeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e617abb0-1330-4779-bf02-d505752a4a28",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e871ee73-9f36-43da-bca3-65952017eca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24fb4678-2c9c-4349-b570-4119ebfc5569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bed3bf3-4632-414a-967a-d9c3a3016fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db26d17-48b2-45a4-b473-62afc5c3ebf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13c6a7c-0069-475e-8d28-5b4a6f047c9f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5547b379-efd9-4bd1-b7b7-a9c3b530876d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f4e008e-9a07-46a0-8b33-59e6a788c3b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37a8e48-6a2f-401f-a34c-4e025dfeca51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d55f3a-11f6-462e-a8de-80bcb074264b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6550726f-9e08-41f0-8836-8165a05375b1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb148ab-3481-464f-835f-cf3177de2496",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c641404-35e3-4e4c-90b2-d062e9a94dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d38f07-dcfb-4434-89e7-ba1647d42d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3563bd4b-03bc-4945-b2a0-f9ecc7f311ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67947b8-4243-4c31-a1c6-8058dfc35035",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55eb3d50-817e-41e3-a59b-57bebefde2ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e4215e4-53ea-4003-b52a-03e33ac1e492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "955f9d04-fe4c-43a4-9928-d939cf47a876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef4b261-030e-4372-82d0-a365493f0c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3927e80-e775-4f6a-aff3-c4fdef9faf59",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2354d0b-8145-4936-a677-48ce7fa3283b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "783a1663-396b-40d8-8346-069829380da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "426e6ff6-ddef-4dfc-84f4-e5ed5ba06d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ecfd485-bdce-40df-b0e3-34b8db74073c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc31d876-96c3-402d-87b2-08e9b1a50284",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084d5641-8083-485b-9294-ba7771ad4852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e52625e-ba68-49db-b873-af137265ee2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72de833d-6324-4f51-9112-0e6f4cc94b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7110002d-50d0-448f-bd30-384379fbe206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55f5865-c6de-4b60-a2c0-7153b4d96853",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d39bb07-381a-4584-b020-547dd54755c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d36715c6-a6be-4bb9-afd2-62c0d2b624cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d71e47e-70b1-49a6-a474-6b2c6f12d90e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a80b786a-61ff-4eb7-98eb-fd30dc554304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fbf045-036a-4dfe-b558-4ba5901534ff",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a240d88-d81b-45c3-ab5b-8daef3f97ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "133ae09b-01b6-41e9-b866-b784397a0d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07b45ca-8893-4f2d-8e76-13fe4c7a7d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf49294-eaad-4a81-9063-76eea3fde6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5122d336-d85f-45b2-8196-96334a7a34d4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da8c90f-fa2d-4692-b948-558501c2d1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9634b067-379a-47d4-8952-afa9761dec0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3666a1-013b-4774-8259-123268a45309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6e0bad-4a83-438b-b6d4-e8124298ccea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48103774-7602-4af4-961d-83559eb65727",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d886b6-8dad-4197-8173-167011ecc038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4069b28c-56b7-4145-9d2a-71fa9030531d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c832d25-8b63-4387-9894-17271239d46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a7ca63-6fa3-4d13-b932-7478dc425818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464fb03b-5d3d-4106-955f-e199ebd570a2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab85363-0765-42da-8de5-8477d1f6bd2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76d80083-ccca-426c-82f0-b8f39f1117dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4332ff7-077d-4d23-92c8-0f527bc426fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288b360b-ecc2-4900-b833-5826ed0bee2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752d1901-9015-4af3-8957-96c52511da51",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e94163a-7c4d-4d8a-99b9-5476f2829157",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dff94a5c-0a65-4e21-b361-3e35717fb823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cace7f-10ab-4821-9219-22415e5005ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348516d7-af0f-4a64-bac7-c15ff038f48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eff810-21ea-4a62-9ea0-e1917e87b236",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91832e7c-161f-4c0b-9003-776dfe269301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "265cac56-104d-4d9b-926e-fdba0d1c8ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de1183f-0083-4d3f-8c72-cc2915dd2744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14226d74-fe34-4683-bb05-9ab2b3ec6d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ba7257-b859-4b7e-817d-d8edf1bd6bc9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de62cca-5c06-4f1c-8be0-90433e171659",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2b95950-6bbd-473b-af6e-25b776b3869d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5454a9-366d-4d7a-af7a-152e200ef297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca58f867-3b12-404e-a66b-1e6ef87605c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8988adfb-9885-4599-8255-0894358480c0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8372565-bbd4-47cd-a9c1-df9001eca643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeac9714-e585-467b-ab3a-7e5e574b85bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce99f64c-42bd-4637-81d4-a9d12008d88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7ba29a-a7ce-4174-9e67-635d5e77e678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4475345-e471-4854-8c74-4cb361790b99",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4cf1da-5833-48c7-b3fd-67469b4ee5eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15519a01-90af-4dbe-b4a0-158072fde2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a6c6bb-4de5-41e4-a01c-81a6769847d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3101ff-ffdb-4185-a2d4-70ffa40ca5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f7fde7-449e-4192-a1ef-77a8fcb9cbec",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ac5c97-697b-4878-be4c-d45903eb8f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efdf6a37-3ccb-4df6-9094-d3b3b4629055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff638ae-8303-47d8-a5e6-fad38d11f2fb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5b0f99-26fb-4bc0-bae2-826630ab766e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c051ad7d-2b9a-4b58-9fcb-41527918565b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c57dff-1dd6-4c46-bec3-13433cba80fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a134960-9309-40be-b896-464fe1db724f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c02cd5-1391-4eca-8544-4634ef2d5088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f3b613-c094-4cf3-8d99-243aed43a2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab4bf3f-9783-4da4-a718-5e16a7e1b590",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bf521c-48d7-413b-b89b-79458bb828a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6993de39-d4a3-471a-b7b7-481ec2361460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1737c537-916a-410b-8b07-3c7a5fd21f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db1a1d9-ad25-4f32-9bb3-d0c1c676758a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cfca8d-6f52-468f-9129-7b0415df2f18",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a063ef-cc49-4073-94c1-bd102b87190e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caef25d7-f0d5-4421-8a71-bdce3be59912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a756ce42-83f4-4fae-abe3-7ece955126ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d8747e-4cac-45d5-b0ab-170a860c690c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df06cbd-6b19-4698-a5d9-901be8032539",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553da8f8-55a3-4e49-9a69-0c86df8973be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "865b52ef-66b9-41fe-80bf-f15eb5619c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ac3b20-286c-4b14-86d9-bd768d118581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a631de-b82a-4bb5-80a3-cbed881e2a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b563052-8765-406d-8e86-5378ae4d9a42",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d19b18-34a8-49a5-ac1b-13ecc244dac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ce39d85-497a-4f25-8984-95dd222e58d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47c777d-e497-4d1e-8a85-655fbccc46f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2d16a2-072f-4aa4-badc-4ded2ada4109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8253d2-f360-485f-b826-8190c4ce4666",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2b5af9-a719-4fc5-a933-7de78b8f59af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbe16469-f91a-4322-a625-f459eed735d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895f33d7-33e8-4170-baaa-9e9b7e47b4d4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454035b1-8cf3-4489-8080-c668df6bf3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aab6d40-8b64-4ce8-bb52-5948371ea6eb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464400b0-8b01-420f-9fc9-037ebd7dad2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "722ac4ca-712a-4125-8085-6e243c9bdee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1d060f-77b0-461f-8b80-3321ece47f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204b37ec-f0be-4191-bf38-b2542ee270e7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c934efc5-ff28-494a-8db3-7b4db4a97a33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a0bb242-bf5e-4b74-83c0-63d818a377c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e81634e8-4502-4c29-bd05-68ceb8b40107",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b53ce36-119f-4cfd-ac37-5ccc126094ff"
                    }
                  }
                ]
              },
              {
                "id": "e6116d37-fd6a-43f7-a5e2-2269921762b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ba28949-afee-4208-8dbd-bad4246cc2b4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8dbbe6-3e71-434b-96f4-1258645eae50",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ca2d6156-035e-4e9a-88ee-c4e9e36911c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5875e3-a991-4d18-ac9a-e719e26d0267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c1b6dd8-b556-41d9-9bab-754dc64c5968"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f17a4643-af7a-4db6-b285-65ec620e2fe3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd3062c6-922a-463e-8fb1-b704bf5177e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97791fd1-828b-475e-93cb-bac53f82f2d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b84e6876-5aea-49a2-b402-c06e5a789211"
                    }
                  }
                ]
              },
              {
                "id": "8c3da14b-576c-47a7-aa52-646dad68e716",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7dbaba66-7169-442f-8a7e-24239ea0ca13",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e22d1f0-6075-485c-93e2-4cb2c8955cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1b92952a-b919-4768-a99f-bf3b3db1d28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11336b5e-763c-4b7d-bce3-0d74bbae3682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ee9ef2-bb8f-4d04-9993-e5daf04cf548"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2efb2743-ff7f-42e0-893d-8b21a89c2277",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8afadeb4-5456-474d-82a0-e4a43322a85b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e060c4c-d20f-409d-91cd-ad4bf30667ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "03363f80-2ea4-414f-8477-41962de29abc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bd2eb56-c6d6-4540-970c-57fd85d0d110",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a48f664-a1a3-4832-87d5-0decd0e3a33d"
                    }
                  }
                ]
              },
              {
                "id": "0e5a9137-16f4-4dcb-ae65-bdedbd491728",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4627369-fb34-4b03-877a-6de0d8063008",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d3fea443-74d4-4776-98d9-d349542e7b89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "293a9299-51b1-4e1a-92e6-b5445249831c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "134ee1fa-ee71-4520-a905-54e9fa441eae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aba31f7c-7e82-4d23-aa2f-6b01c262efd6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2b40d8d7-bacb-4e63-bca0-3d609c8815c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23eb8803-4d28-46b4-911b-852bbd499c05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1988583-836b-4438-80a0-a89beb0050ac"
            }
          }
        ]
      },
      {
        "id": "83380886-a86f-4405-8628-4abdeaed3a65",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "eb585e11-3424-443a-a209-c79551dd2db4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d91c7a6b-b2ff-41c0-906c-e1ea6ed75d0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56405721-8cc3-4e6a-b58e-185fc8b96216",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0150ca89-7455-4711-83e8-d8be13694452",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "96b3c263-d945-4133-a8ef-5fc0e218d74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5245c0e2-5696-4dae-b0fd-ed8ca0dca16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42782c46-77d0-4c61-9e66-7b34d03fcf47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac363bc1-6ecd-4e99-ac09-710d71ed5921",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf4bf122-f1ab-444f-88f9-d8b73a0ea4bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c77602d-8803-4fcc-aa51-4ec56d2c518f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9de46c14-7e4d-4763-957a-90b356e1c438"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1f915a8-5bf6-44be-90f3-56d706a00885",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "abc5dc11-718e-4b21-92a6-50b3e4bb547a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7832f823-66fa-4e65-af3a-f04df563cb2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8843bece-c825-4346-8d2e-eac86c607813"
            }
          }
        ]
      },
      {
        "id": "22e63834-0d2d-4166-821a-8a23ec748b07",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "851e0fd1-39bb-446e-8d96-b00d834954f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8c7ecc4-18c7-4179-8f14-1ceb6f31ea27",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3c1ff4a-4435-496f-befa-ec5c3de51d0c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825f2ebd-8a33-479d-a75e-8fba1846fbb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0caf9eb9-5fd4-4730-817f-2dee64b1d205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d894bf-d6ab-46fc-ad5f-e4e86b128fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "512dabce-af07-445d-b1e3-8dc8e8051773"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1c473fa-ce92-474f-a49d-8002d16a5a9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8faa17a0-1c6f-441c-a9d0-4aebcfae66aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e655020-77a2-4438-9b00-71c9a916d4af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad776e0a-b3ec-4c8e-b8b9-65748834838e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3fa3acc-3f19-4a84-862c-b680b3b3b999",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be09a1e7-dcd5-4efc-bbaf-cd251b6c9e3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df50bd9a-6872-4655-b128-5b84bb21b494",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a54942a-4730-440e-bf0c-b859f0a2b7e7"
            }
          }
        ]
      },
      {
        "id": "f08b95be-4505-4708-9b1d-fcecaa99aa49",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6741399f-6a00-4d55-8e9d-e02780420162",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d82ab1a9-ace5-42f1-8dc0-23f95b1298e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "350ed7d2-575c-4ec9-ac47-a2751ecdc49a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647c7d41-2665-4f74-88ff-89b73dce8849",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82c5cbe7-afea-47cd-ac98-bf7e23a3bd86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08d2b2a-28db-4c39-8f52-3a8ce01a38ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fb8f4b9-78ab-446f-a871-aea92f63f837"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4146b4bb-fd39-4476-ac35-ecd675df1713",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b697a666-20ea-428c-8cec-56f5ca45726e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1383393e-1b24-4cc1-8af8-d517ec7e1cc5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90d61e67-62d5-4dc7-9be1-4b0c60924eb2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cfe82ac-1c84-4a28-a757-0fc231d66e42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78981b36-e11c-43c5-8473-ead41101feb7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5047ec2-b765-462a-851f-269ddd809600",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c309c9fb-58d4-4400-9fee-1b8d765ba349"
            }
          }
        ]
      },
      {
        "id": "0243bb42-2776-4bb5-a59a-09d2ffb46ca3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21c9dd80-7dda-4b8e-b693-6d997c455e44",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eed85947-2752-4a1f-b3a4-dd585b186718",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4a11461d-a4b0-4f51-a2c3-633dc33cb6f3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef150718-bc16-4ee9-aadd-4857c47531a6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d51aab6a-0a50-4f6d-a609-2d6075bc732f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 236.50000000000006,
      "responseMin": 11,
      "responseMax": 6509,
      "responseSd": 799.9002248520179,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687481158698,
      "completed": 1687481237659
    },
    "executions": [
      {
        "id": "8a66580b-3600-45c7-b06f-25ad2da441e1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fc0a543a-0f50-4721-9a6c-4463818220fa",
          "httpRequestId": "df928187-269d-4761-a8a4-39c4427453c6"
        },
        "item": {
          "id": "8a66580b-3600-45c7-b06f-25ad2da441e1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e6035629-d6b5-4fbe-99c7-8ff0b363a66d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "e81ad5a1-5063-400a-bed6-1f3100b36840",
        "cursor": {
          "ref": "be8481a5-51ca-4ea9-bdb7-db37550f8937",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6d6e7faa-1f5d-4934-af95-3cd387783c6d"
        },
        "item": {
          "id": "e81ad5a1-5063-400a-bed6-1f3100b36840",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ef932bc1-6f62-4d86-be19-5d4bd1a3a647",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "bc64f4e1-75d8-4d12-afc0-c540d3a1f804",
        "cursor": {
          "ref": "dc8f4ec7-7ab5-4105-9411-173715ec3169",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b01c2957-b735-43f3-a928-980ba742bc6c"
        },
        "item": {
          "id": "bc64f4e1-75d8-4d12-afc0-c540d3a1f804",
          "name": "did_json"
        },
        "response": {
          "id": "220533c3-ff96-44fa-bfac-b2bc4a022149",
          "status": "OK",
          "code": 200,
          "responseTime": 433,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896190d0-bcab-4428-b854-aeece5398fed",
        "cursor": {
          "ref": "f971d124-c5f4-4b21-abf9-2549a98bae7b",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "16fff521-f900-406d-828d-4e50453b8a68"
        },
        "item": {
          "id": "896190d0-bcab-4428-b854-aeece5398fed",
          "name": "did:invalid"
        },
        "response": {
          "id": "8630b464-5f02-4843-b919-0340668d4563",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1379,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "896190d0-bcab-4428-b854-aeece5398fed",
        "cursor": {
          "ref": "f971d124-c5f4-4b21-abf9-2549a98bae7b",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "16fff521-f900-406d-828d-4e50453b8a68"
        },
        "item": {
          "id": "896190d0-bcab-4428-b854-aeece5398fed",
          "name": "did:invalid"
        },
        "response": {
          "id": "8630b464-5f02-4843-b919-0340668d4563",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1379,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8ac000c5-b571-48e1-9826-79a866d2f015",
        "cursor": {
          "ref": "c930a4ef-573d-43c1-87f3-11d199e3410f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8536f293-a174-46cd-98ba-67da6bf776e1"
        },
        "item": {
          "id": "8ac000c5-b571-48e1-9826-79a866d2f015",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4a24c2fa-da41-4fa6-9f1f-444cdfb8cf23",
          "status": "Not Found",
          "code": 404,
          "responseTime": 58,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7260d7b-cf1d-48a0-94b1-2c77cde759dd",
        "cursor": {
          "ref": "056adbc3-0d9b-4272-88cc-f2829274c78c",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b5337ab6-a6c4-4bef-8583-c94adaacb5d2"
        },
        "item": {
          "id": "a7260d7b-cf1d-48a0-94b1-2c77cde759dd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "08c988cb-e674-4d32-914e-be567906afba",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196bef1b-f1d6-4854-93ab-8f3646c1c805",
        "cursor": {
          "ref": "5962cbc4-c7ae-4807-8c31-dfe175e6e0ed",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c2ce387e-24fc-4786-aeb3-d9957c8bac33"
        },
        "item": {
          "id": "196bef1b-f1d6-4854-93ab-8f3646c1c805",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cad9d75a-a66e-4de1-ab84-dd62970154ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b2b124cd-57a9-4ed7-9a2b-665739de8b1c",
        "cursor": {
          "ref": "4ed3870b-1735-41c2-afac-b232ef9e1d32",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cfb1a4b8-6c5f-4384-aa39-e9ac64019ab8"
        },
        "item": {
          "id": "b2b124cd-57a9-4ed7-9a2b-665739de8b1c",
          "name": "identifiers"
        },
        "response": {
          "id": "9968c1e1-07ba-4964-9b92-747f462a0634",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15ba6ab-8da3-4ec4-9c8d-2101ef6caa7d",
        "cursor": {
          "ref": "d0eb87af-af57-41c8-9c66-c3176d4012ca",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e234d929-20de-4544-bfa3-fb2808e5492a"
        },
        "item": {
          "id": "f15ba6ab-8da3-4ec4-9c8d-2101ef6caa7d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bb15f359-cdab-4450-873f-ccb27c832a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deaa2c14-bf78-4612-ae7b-ab50c6753e22",
        "cursor": {
          "ref": "48eaef07-44bf-4db2-b3d1-b1344e94772a",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "71a38c65-0ba5-4223-a115-0780cbeef38b"
        },
        "item": {
          "id": "deaa2c14-bf78-4612-ae7b-ab50c6753e22",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "de131192-e3f7-4730-a8e2-270252ec0aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893fa8bd-daf6-4781-b744-c2fe2e0d1098",
        "cursor": {
          "ref": "085b1925-7556-41c9-8fcb-e5cbf51355da",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fc3f2a2c-59fe-4dac-93c4-c26f4eaa5fac"
        },
        "item": {
          "id": "893fa8bd-daf6-4781-b744-c2fe2e0d1098",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "38b67542-b1a5-4aa6-9ed1-73e15b8e1bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e331f5-f764-40d2-b554-5c1eafe63bbf",
        "cursor": {
          "ref": "7803afb3-3d34-492d-a98c-0e20c7188fa1",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d1e677a0-bc9c-4d5f-92d3-cd786f1dc5eb"
        },
        "item": {
          "id": "65e331f5-f764-40d2-b554-5c1eafe63bbf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "63fb0c3a-1de3-4667-9504-5d55dbf278a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6baa4cd5-a1b8-4a84-bed2-6d85f53f12ff",
        "cursor": {
          "ref": "01a33c5a-54b7-4286-836b-6fd86b328887",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5b766ce0-b3ab-453b-a563-d03b504f69b2"
        },
        "item": {
          "id": "6baa4cd5-a1b8-4a84-bed2-6d85f53f12ff",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5866d40d-0ab5-4486-a4a1-c5969bbf67cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d7607f-c1e5-4c42-8add-9f79780136f4",
        "cursor": {
          "ref": "1b782e86-42d8-4c3a-92a4-5b532f1bc0fe",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "11a57684-0448-40d3-b573-1cabdc5b012c"
        },
        "item": {
          "id": "78d7607f-c1e5-4c42-8add-9f79780136f4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9f1ccf75-fcd6-4fd8-a22b-78088ba0b40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161faed3-993f-4edc-94fb-191be43d5626",
        "cursor": {
          "ref": "3641c6bf-7471-4d40-95a3-b545113995a7",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e8c75980-e921-40b3-a0ce-1156b835f4af"
        },
        "item": {
          "id": "161faed3-993f-4edc-94fb-191be43d5626",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "973e630e-7f06-49d0-a648-ab59bc912c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea8f13e-1947-4444-bd4f-f41650c11c49",
        "cursor": {
          "ref": "30f7395b-5407-4ac0-b132-0fbc372c5104",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "08b95361-2a7e-48e6-9927-1d472a6c064f"
        },
        "item": {
          "id": "2ea8f13e-1947-4444-bd4f-f41650c11c49",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "52e6cb99-384d-4ba0-a95d-c3803ce2f64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2803717c-e328-49c3-aba9-7ffafff95f31",
        "cursor": {
          "ref": "0bc29623-76b7-4376-98f6-8565526bd33e",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "abb24c67-0480-4909-8975-b4874bf08a85"
        },
        "item": {
          "id": "2803717c-e328-49c3-aba9-7ffafff95f31",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e3db84d4-ffa0-46ca-8825-8978d3eecbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1818e6-9455-4315-ab7e-50df6cfe9e85",
        "cursor": {
          "ref": "02c5498c-eaea-411d-a0ff-7ace7c7b26e9",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a8a5d21a-c972-46f5-8aee-1b53b6ac1d59"
        },
        "item": {
          "id": "3f1818e6-9455-4315-ab7e-50df6cfe9e85",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0f11c8db-5e01-47d0-964d-5a1dcb6695c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c418f3-fefa-4b07-956b-3c46a45f1529",
        "cursor": {
          "ref": "d423b51c-d153-462c-b5de-893290b199bf",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ab828e05-5de0-4175-8b4b-b204714e9e89"
        },
        "item": {
          "id": "55c418f3-fefa-4b07-956b-3c46a45f1529",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "be1c4fb6-ae9c-4c8a-a59d-306e1bc33f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53de5c5-704e-4064-a618-9d5e52f94d54",
        "cursor": {
          "ref": "165a9728-d773-463c-b02e-c9179e2d38c2",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c1699458-7564-44d1-a8c8-3e4168da538b"
        },
        "item": {
          "id": "c53de5c5-704e-4064-a618-9d5e52f94d54",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6eca7bbd-d2cf-4b49-ace9-b141cfe1c412",
          "status": "Created",
          "code": 201,
          "responseTime": 1143,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c202640e-d131-40ea-9d71-53a0d728f753",
        "cursor": {
          "ref": "13f4227b-d8d8-4af8-bd86-b6dced8a9e2a",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "72bf7113-f61a-4627-8367-d12b143bb5af"
        },
        "item": {
          "id": "c202640e-d131-40ea-9d71-53a0d728f753",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b6f4ee88-a3e2-4cd4-b8f6-420faa58210c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd842dd-5c9d-4fa1-b908-3ab800644257",
        "cursor": {
          "ref": "4df4649f-9c04-4fef-bad5-795a1918fd2e",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ba98ece6-26f5-4ab2-bd61-80f549a16062"
        },
        "item": {
          "id": "9bd842dd-5c9d-4fa1-b908-3ab800644257",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "60b11e24-484c-4892-b45e-28357807cdbf",
          "status": "Created",
          "code": 201,
          "responseTime": 5876,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6e247c75-46d4-4057-9ac1-bbe67a24461b",
        "cursor": {
          "ref": "1b5cd258-80e7-4cc1-8479-033e8f858d0e",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "998fa4a7-3a30-4d77-b108-95b08335907a"
        },
        "item": {
          "id": "6e247c75-46d4-4057-9ac1-bbe67a24461b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "11e837fa-9713-4e3d-8dd8-f931e15ca5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0e1f2a-582f-4da8-b41f-8be672ea9ea1",
        "cursor": {
          "ref": "58e8334e-58d3-47c5-9448-aef481e86cf7",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "aff847ad-ad8f-4a61-a307-3ff876a02f84"
        },
        "item": {
          "id": "ca0e1f2a-582f-4da8-b41f-8be672ea9ea1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "67f44913-37c1-4b6a-8430-04df1c0fed3b",
          "status": "Created",
          "code": 201,
          "responseTime": 4699,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "158c50b4-0b64-468e-b4f6-77aeca734af9",
        "cursor": {
          "ref": "6fd476b9-de7b-4bf8-9f43-7c90af7c18db",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "55b33092-ead3-4138-b031-2e28b0db0a0b"
        },
        "item": {
          "id": "158c50b4-0b64-468e-b4f6-77aeca734af9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9ba59a7e-3b23-48ee-be1e-fe1db68059fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b117c1f-5b59-48b4-a623-c87b3f239caa",
        "cursor": {
          "ref": "389d065f-4907-410b-b95f-18b01ce7b9b3",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "76026913-9f8b-4163-b187-a5b3a40ba0f1"
        },
        "item": {
          "id": "5b117c1f-5b59-48b4-a623-c87b3f239caa",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ad2b4f17-2506-44bb-a9be-f6f8299261a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8872f2-6442-403c-a87e-397f4936eab1",
        "cursor": {
          "ref": "495e8173-0428-485c-91a6-b28954f31e71",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9ab971cc-f851-4d77-936e-804008459467"
        },
        "item": {
          "id": "0c8872f2-6442-403c-a87e-397f4936eab1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "062ff558-40a6-4923-93f8-202fd8471339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5dc6de-6864-4671-812c-b06a5a775807",
        "cursor": {
          "ref": "b96c8cea-7d57-4f7e-a986-e1bb4f27768f",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2da54ef8-58c6-411d-a2e8-ed352f7defcd"
        },
        "item": {
          "id": "af5dc6de-6864-4671-812c-b06a5a775807",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "809e0a3f-19b0-4929-9cb9-556e100fdae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a767ccc1-7ae6-452f-a086-ff31f8e07e2f",
        "cursor": {
          "ref": "c55d8d17-5f07-4923-8ecc-9b0e12c2a039",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "dafefe8c-dcb1-41af-9676-cabec2e0068b"
        },
        "item": {
          "id": "a767ccc1-7ae6-452f-a086-ff31f8e07e2f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e51e2570-346a-4eed-b2f1-b4c55c91ee97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8feaa0ba-a8a5-4b36-92a7-63c4121e3f24",
        "cursor": {
          "ref": "ac2ceb53-1f29-4749-be1c-de0db31ce2d5",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1c2bfe84-81d5-40ac-8b33-40ac56d8f540"
        },
        "item": {
          "id": "8feaa0ba-a8a5-4b36-92a7-63c4121e3f24",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c64ef4bd-3d35-4e8f-bf7c-d95ed46b736b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bab6c92-7897-430a-9687-75542b831486",
        "cursor": {
          "ref": "0e551fe3-60e5-462b-9ec4-b67caec3168e",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "42e5d708-67f7-4814-82fe-f62472c57f0f"
        },
        "item": {
          "id": "2bab6c92-7897-430a-9687-75542b831486",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6baa7606-4cc4-4411-b508-1cb1b4be8dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3431d11e-3c08-428c-b69d-95a9c9327f6e",
        "cursor": {
          "ref": "0b52939a-7236-432c-9f03-047621a8d49b",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f4fcf793-9afa-4b9f-a699-8298e36e53cf"
        },
        "item": {
          "id": "3431d11e-3c08-428c-b69d-95a9c9327f6e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "752d134f-10db-44db-ac07-02b78fdca5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5571872-1ca0-478e-8840-cf016659ab83",
        "cursor": {
          "ref": "ac8ba100-6cea-46a8-8e35-1371b550ed93",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9ad8e26c-7926-4b0c-b61d-e507a236715e"
        },
        "item": {
          "id": "f5571872-1ca0-478e-8840-cf016659ab83",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "83cffc84-bfc7-4159-a32c-577e7c75a6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae3a2c1-52ba-44fd-95ed-5cdbfbc0312d",
        "cursor": {
          "ref": "a2b74e9e-7807-4b04-80a1-16e5da305f29",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e3d2078c-ae04-4c4a-b827-c854fba613c9"
        },
        "item": {
          "id": "8ae3a2c1-52ba-44fd-95ed-5cdbfbc0312d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "adc2fd29-ef2a-4a8b-99e7-b42c4fa39d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafc389f-a2c5-44b1-8e5a-d08ee75bfc30",
        "cursor": {
          "ref": "7e4d84b3-ea24-4017-bd22-3129b43cfdb8",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c9795536-18fc-45a4-ad8f-6c9b0faf6d4a"
        },
        "item": {
          "id": "dafc389f-a2c5-44b1-8e5a-d08ee75bfc30",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6ebd0abf-a22a-4411-a0f3-5ca08726fe39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1078bf-b032-4c08-8298-f02c20fedc0d",
        "cursor": {
          "ref": "108d1ef1-f461-422a-95cc-fb6f4a4f1a25",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ef31275f-b6ad-44ac-bf63-c624ff03437f"
        },
        "item": {
          "id": "2b1078bf-b032-4c08-8298-f02c20fedc0d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b38fab5c-571b-41d4-a62f-4770cb0de8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e176e117-1253-4c5b-848c-4d20d9d6757e",
        "cursor": {
          "ref": "b60b2fb3-3f4a-4d4a-b851-85097c9626c1",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "17116d27-c0a0-4a7c-a14b-cc772362dd76"
        },
        "item": {
          "id": "e176e117-1253-4c5b-848c-4d20d9d6757e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4320bfad-af22-42d7-b8eb-35a97f8c7f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f7a9c2-c544-490a-931e-0f731a56fc39",
        "cursor": {
          "ref": "666638f6-644a-4e62-9cd0-d36720ce2c95",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0eae895e-df34-4145-86db-77ba56d93585"
        },
        "item": {
          "id": "17f7a9c2-c544-490a-931e-0f731a56fc39",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "474ef7d8-644c-4e1f-bc42-6c1c70393958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236986a6-c1c3-4ecf-b95a-fc6f8b5f1a7e",
        "cursor": {
          "ref": "c48ef088-cc1c-4745-8656-61abae796a83",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d9e5221f-506c-4aa3-9350-f255d55b9d5a"
        },
        "item": {
          "id": "236986a6-c1c3-4ecf-b95a-fc6f8b5f1a7e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0ef794f2-20e1-4051-9370-7e57464ef662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e362a5-b202-4eed-a8b4-c5dd6d94fdde",
        "cursor": {
          "ref": "23f7b7ab-ddd1-43b4-81d1-270338a58bcf",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3cbe0309-07ac-4b00-b70a-e0b0f2c08c46"
        },
        "item": {
          "id": "85e362a5-b202-4eed-a8b4-c5dd6d94fdde",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a92ba6f4-9437-46b8-99a0-bdd0014e2abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46826ce0-9a19-4750-b4d6-148ecd88a6d7",
        "cursor": {
          "ref": "6e931c86-fded-4753-ad1e-9d61bc74086d",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2b3c53c9-3edd-4db4-b731-89c24c637373"
        },
        "item": {
          "id": "46826ce0-9a19-4750-b4d6-148ecd88a6d7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e05802a2-0e9b-447a-95e6-7da4615d0657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2969ec-bac5-4c46-9296-56735a018e5a",
        "cursor": {
          "ref": "e572717a-1c83-49b3-bdf0-3288bd2b1e3d",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "87ed3a93-7eac-475b-a4e5-edecd5b3223c"
        },
        "item": {
          "id": "ee2969ec-bac5-4c46-9296-56735a018e5a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e349f4aa-8921-415a-9622-0f68b8c5a661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66b06e6-5e73-4d79-8be8-509b01c34ba2",
        "cursor": {
          "ref": "20b8b427-34c4-4027-a96e-b472c22e75c1",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b6e3c523-c10e-4e05-b6df-1cbeaa9fc47f"
        },
        "item": {
          "id": "b66b06e6-5e73-4d79-8be8-509b01c34ba2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ac0a57c3-8c21-472e-a775-ddf761727a86",
          "status": "Created",
          "code": 201,
          "responseTime": 2916,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "02f06ab2-04a9-4290-919f-e9a0a849d1b6",
        "cursor": {
          "ref": "abadcd52-cdf6-4c6d-96f1-0dd38e36410b",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ebb5c013-37da-4f2a-abbd-9ab3f822b442"
        },
        "item": {
          "id": "02f06ab2-04a9-4290-919f-e9a0a849d1b6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "920ea1de-3105-4894-bb7b-8d6938155de0",
          "status": "Created",
          "code": 201,
          "responseTime": 3328,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c4270e7b-9b11-4717-99d6-2d79c672b1da",
        "cursor": {
          "ref": "fd3689db-3c95-4a3b-8e57-2b432dc979d2",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d5ef92f3-265b-4854-8bc7-046e12cae0a6"
        },
        "item": {
          "id": "c4270e7b-9b11-4717-99d6-2d79c672b1da",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6c24294e-691e-4ad4-ba00-f9179b62807c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b012fe2-87c0-4808-806d-aebd7bdd12b0",
        "cursor": {
          "ref": "a51b44b8-b6b1-4f13-81f8-fb1ef072c1a1",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a1f79434-b601-426e-8725-0f7032e1443e"
        },
        "item": {
          "id": "0b012fe2-87c0-4808-806d-aebd7bdd12b0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9c4826a8-a519-4e7c-9452-4a6144c6d5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb97380-486d-49dd-99a1-fae6bba3ff5d",
        "cursor": {
          "ref": "a3f35150-9ba0-4d39-8fb8-8223693a91e4",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cc2dc0bd-c764-4521-bc20-25ac36fc9eb6"
        },
        "item": {
          "id": "dbb97380-486d-49dd-99a1-fae6bba3ff5d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "980324a0-8d76-4e05-a292-7c67418e787f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d630ff50-008e-4a71-8317-b00f16414791",
        "cursor": {
          "ref": "0bf757ac-2278-40a8-8017-5ee7aa3f26b6",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f1bd1e10-8307-407b-b7bc-f23089854780"
        },
        "item": {
          "id": "d630ff50-008e-4a71-8317-b00f16414791",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ce7ed076-f7d6-4ee9-92dd-445aefaa1ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2f2ed7-e41b-4634-9bcc-251fd4ef0050",
        "cursor": {
          "ref": "7b6ad640-597f-4972-aaa8-166427d4a783",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b6526006-903e-40fb-a333-b0f9d54d8fd7"
        },
        "item": {
          "id": "2f2f2ed7-e41b-4634-9bcc-251fd4ef0050",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d46e54ca-f232-4bda-a5bb-9fe11f669f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d65971-9446-43cd-9581-5a2805ef91d9",
        "cursor": {
          "ref": "1d1621d9-3ac5-4b39-a7ca-e39e540e1854",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f0fc3c39-f60d-41e1-9a1f-287c97f9c9f2"
        },
        "item": {
          "id": "89d65971-9446-43cd-9581-5a2805ef91d9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bdb3b26d-a9bc-4323-ae26-68a8f92a3300",
          "status": "Created",
          "code": 201,
          "responseTime": 2802,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3c0c00a8-8edc-495b-9f23-e36449534012",
        "cursor": {
          "ref": "bb4c3bc8-aa3c-4384-b110-5541b07dbef6",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "495b6b70-fd15-48c3-8656-451afbc13e4f"
        },
        "item": {
          "id": "3c0c00a8-8edc-495b-9f23-e36449534012",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9a6f334d-6b70-47d6-9d85-6e0c2f9cd36d",
          "status": "Created",
          "code": 201,
          "responseTime": 2782,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e26b6244-3b72-4438-903f-a0e4e07896fe",
        "cursor": {
          "ref": "3ec2dc4b-c538-4377-9911-6e73bf6286ac",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "88bfb81a-8579-4335-bcd4-a5ca17af1431"
        },
        "item": {
          "id": "e26b6244-3b72-4438-903f-a0e4e07896fe",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "df25d5ea-03bd-45d6-b468-2487c706e856",
          "status": "Created",
          "code": 201,
          "responseTime": 3791,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a0f21c88-6cb9-4cbc-a8ba-916550463aca",
        "cursor": {
          "ref": "6b0a2d4a-9e8c-4440-88f7-e8d9ca065a9e",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2b67603f-4e0e-412f-b758-85317532e58f"
        },
        "item": {
          "id": "a0f21c88-6cb9-4cbc-a8ba-916550463aca",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ca99bfe9-4e48-431c-b208-71ed59d29c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7654370-198c-41a2-a639-d4a524e8099f",
        "cursor": {
          "ref": "775fa21d-1ee7-411b-8779-49a1758bbc3f",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7fead09c-95ba-428e-97fc-0b226b5758d3"
        },
        "item": {
          "id": "f7654370-198c-41a2-a639-d4a524e8099f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fd6e2e04-902c-428f-8a0a-a447053f06c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac75474-3b01-45c8-95d1-9720db4aedab",
        "cursor": {
          "ref": "df4e6554-9a14-4762-915a-0edc9c005ec7",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f1838921-26b6-4e4b-9178-29029b8a7863"
        },
        "item": {
          "id": "fac75474-3b01-45c8-95d1-9720db4aedab",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4881ee37-7f88-4767-856f-ef5c649d5000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c37696-f6f4-46ea-9d18-2c7fc001b5a1",
        "cursor": {
          "ref": "5bdfd8d4-6c8f-4bf6-9a9a-75229490b401",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "184ca981-f376-46db-b9ee-685c97f1dc22"
        },
        "item": {
          "id": "b2c37696-f6f4-46ea-9d18-2c7fc001b5a1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4996f114-5986-4eba-b210-5ed4f48c2885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030597cb-454e-4207-95cd-0f40b7477a14",
        "cursor": {
          "ref": "a0012269-7f6b-4075-bd43-ecf0fc1c6df5",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dde53134-a476-4863-8f57-1ca947067b84"
        },
        "item": {
          "id": "030597cb-454e-4207-95cd-0f40b7477a14",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c8ca252d-affd-495f-a327-5fdec216ab27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e3766f-0206-485d-98e7-aef68c688600",
        "cursor": {
          "ref": "53a16ca6-21f3-4ab8-83dc-0bac71e2c2cd",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cb32f2f8-cdf0-40bf-aa63-690842af86cd"
        },
        "item": {
          "id": "c9e3766f-0206-485d-98e7-aef68c688600",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7c997e57-a931-4276-9c1b-8159e97eacc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a81f878-5247-415e-97a4-e848305ff88a",
        "cursor": {
          "ref": "385b477b-1b23-4471-9d7e-b4b05fb29516",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6a240b15-6d1f-411c-9c9f-04ccd10142f5"
        },
        "item": {
          "id": "3a81f878-5247-415e-97a4-e848305ff88a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "915420c9-bba5-433c-94c5-bcfc6a6f8c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9deca48-0a07-471a-8769-254558674c11",
        "cursor": {
          "ref": "edb47eb0-ebf6-437f-941e-47e1ff6dca3a",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "837e4a7b-dcae-49c7-9bd4-178aa5db23c4"
        },
        "item": {
          "id": "d9deca48-0a07-471a-8769-254558674c11",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e620ad10-76ee-4bdf-a640-e0412f4febb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e382fd-0226-426a-8b8c-f5efc515078d",
        "cursor": {
          "ref": "a57a4d7d-62a6-4f78-85e2-1b1d6ce56f7b",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b1d615db-dc46-4a43-97c1-0780cb168feb"
        },
        "item": {
          "id": "08e382fd-0226-426a-8b8c-f5efc515078d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "823491ae-8510-4a26-a9c7-379b0ce1e444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dd902e-c0d5-4f79-9f48-a08bf71ffb45",
        "cursor": {
          "ref": "a9ac975c-10ef-4da4-8f15-a4bd455805df",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6f4b0362-6f18-4080-8adb-595d04daeac1"
        },
        "item": {
          "id": "74dd902e-c0d5-4f79-9f48-a08bf71ffb45",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "71f3089a-e996-4fdc-ae10-54a1ce794272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671e3829-b16a-4fac-a88e-af04e7611869",
        "cursor": {
          "ref": "27ecfd72-8f76-414f-9244-0dc98599b582",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5d0dbc76-fb4b-4ac7-998d-b9e9e883ae9d"
        },
        "item": {
          "id": "671e3829-b16a-4fac-a88e-af04e7611869",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1ef7556d-7953-4336-a7b6-0fbe3c8f21fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c08b61-ab16-4df7-9077-eb0d34193de7",
        "cursor": {
          "ref": "ae8abd78-ffd5-480a-8bd9-3ff8d85481e1",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2dd7c990-3008-4388-9153-506ee364e485"
        },
        "item": {
          "id": "65c08b61-ab16-4df7-9077-eb0d34193de7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b27c7311-9324-4b90-90ae-1ea526b9ee27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1086ec86-1c87-4cc6-ad38-9b7a56200605",
        "cursor": {
          "ref": "60617673-38dd-43f3-b5bc-9b446959af6f",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8e0724ae-300e-43dd-a017-10932127d4de"
        },
        "item": {
          "id": "1086ec86-1c87-4cc6-ad38-9b7a56200605",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e8368f97-e7b4-4358-aef3-61d67814dcd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b21373-c9a0-4945-b868-fb7a41e0b795",
        "cursor": {
          "ref": "ea39924f-e00e-4411-8dcf-a046cfef378d",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "67939ba4-86e1-4b96-a6b6-48e5588828e0"
        },
        "item": {
          "id": "39b21373-c9a0-4945-b868-fb7a41e0b795",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bbb1f042-a2b2-43b5-978a-622a0b92443f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc9cc89-43f6-40d0-a77e-6f4d46800c30",
        "cursor": {
          "ref": "db933bdf-8c1e-4051-b922-0554d1282c4e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "609a2368-df5e-44bb-ba39-a87fb218acba"
        },
        "item": {
          "id": "7bc9cc89-43f6-40d0-a77e-6f4d46800c30",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f1c572be-04a9-4d94-ad0a-4065f884730c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8834927-6d64-4289-9419-a91bdd25cd48",
        "cursor": {
          "ref": "4f2f16c7-b091-44f1-a2e3-72469e4a6201",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5561d847-e638-4a70-aa51-3465eea4265f"
        },
        "item": {
          "id": "a8834927-6d64-4289-9419-a91bdd25cd48",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "14e86de7-9eac-4af3-95ab-02c5da8b0c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7de01a-3655-43d7-91e6-f71bcaa0cbdb",
        "cursor": {
          "ref": "879adf83-307b-49b4-9296-69f9767f5024",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8bba7441-78a3-48a4-a253-cb09dc8d2481"
        },
        "item": {
          "id": "2f7de01a-3655-43d7-91e6-f71bcaa0cbdb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6c25bb4c-5ec8-4710-bd16-124c6aa04a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612803e5-33be-4f3b-acae-e8eedf95e7d9",
        "cursor": {
          "ref": "c0c574f9-726d-4069-af4b-d4f1940638be",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8483e8bd-1347-4b4c-b6df-bdc07d52b51d"
        },
        "item": {
          "id": "612803e5-33be-4f3b-acae-e8eedf95e7d9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f09c4b48-7610-4452-b96e-317ca8f11f71",
          "status": "Created",
          "code": 201,
          "responseTime": 2154,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "5a15cb43-1463-475c-bfaf-df2dec87082c",
        "cursor": {
          "ref": "3623fb42-0ac5-41ae-b9c4-247d2fa3c43f",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9ee4ac34-2f61-4c2c-bcff-43703d7b859c"
        },
        "item": {
          "id": "5a15cb43-1463-475c-bfaf-df2dec87082c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "51a9c2fa-d55a-487d-9a49-2291cc38c942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f963b69c-7048-4999-b9e0-5b37c8a022c4",
        "cursor": {
          "ref": "94e65e2d-99d2-46a1-ad58-c7543d6b64bc",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "56cf9699-d1a9-44c4-bce9-a29940b22e24"
        },
        "item": {
          "id": "f963b69c-7048-4999-b9e0-5b37c8a022c4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0daa8bec-26f0-4171-b397-1775fdce9648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8792acb-bb96-46ad-b136-e07f42bd42ef",
        "cursor": {
          "ref": "64882d2a-4cb9-40f1-a4cd-d4c38504286e",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b877560e-bcb1-471a-a15d-f1a2952a5cef"
        },
        "item": {
          "id": "e8792acb-bb96-46ad-b136-e07f42bd42ef",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5668e259-c81a-454f-b880-a8becb9c248d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d224ae-9293-441e-ab74-7c644a56f4ef",
        "cursor": {
          "ref": "a99be30a-9607-4172-a22a-33ba98028606",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0ea08912-c3cc-4d15-92fe-5bfc9421d8e7"
        },
        "item": {
          "id": "10d224ae-9293-441e-ab74-7c644a56f4ef",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "54175d22-c1cb-4d83-9094-7edd3de1826e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2565918-20dd-4ef0-95da-826f2111f661",
        "cursor": {
          "ref": "69a6f9ec-f7d8-4833-9683-01307367c522",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c5d05473-7b2f-484a-94a2-bb99b60babdc"
        },
        "item": {
          "id": "f2565918-20dd-4ef0-95da-826f2111f661",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e08fc389-8ba6-413b-9d72-b64871cb45c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02f7b91-0eba-48c9-88d5-d8b84e262023",
        "cursor": {
          "ref": "6c915c80-cec1-46d6-bb49-d8c8497f29ad",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "762423ed-51de-4a04-8421-edb9df4a1ea5"
        },
        "item": {
          "id": "b02f7b91-0eba-48c9-88d5-d8b84e262023",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "952265e2-7c49-4356-989e-f910e131f967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc926d2-e14e-4d0d-888d-f76da3d86ef4",
        "cursor": {
          "ref": "fca9e9ce-3994-48a6-8cb5-ebe0eb5a981e",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6408d135-bae7-4f23-a066-df1e697d8d22"
        },
        "item": {
          "id": "ccc926d2-e14e-4d0d-888d-f76da3d86ef4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "75089878-7133-4a60-97b1-b93c1b8ec202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c526f61f-cb5a-4532-b2e8-eaef817f0f8b",
        "cursor": {
          "ref": "e53c5102-7f30-41b1-b9da-ff3eca448331",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "60532603-2a80-47e9-9b1a-56fd2777cdd7"
        },
        "item": {
          "id": "c526f61f-cb5a-4532-b2e8-eaef817f0f8b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b1c5e22d-c7db-4319-9e2b-7293e4347859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b3d3d8-a31c-4d9f-aea5-2917acec8dec",
        "cursor": {
          "ref": "3892288a-885d-4d55-a2f1-211eb285ad18",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3240c77c-ee34-43f0-b789-37e12b581663"
        },
        "item": {
          "id": "04b3d3d8-a31c-4d9f-aea5-2917acec8dec",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "23959cbc-1f5b-4fc4-a0b6-728a40855ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723d9215-4124-4df5-b761-d00f9ad398fa",
        "cursor": {
          "ref": "a467b490-5c03-4312-988f-b7e91b5bd24e",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "11d793d7-532a-4a06-8ef1-04c9eaec1176"
        },
        "item": {
          "id": "723d9215-4124-4df5-b761-d00f9ad398fa",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "05794891-655a-463e-a832-5d0ae9afc1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc63ea8c-c90d-4d61-af16-ee90008d811f",
        "cursor": {
          "ref": "492f6b15-5e23-46f0-a9b9-f81f8f056204",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "35ccb5f1-8850-45be-a519-eb233d6abd0c"
        },
        "item": {
          "id": "cc63ea8c-c90d-4d61-af16-ee90008d811f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "43b6b139-4cf7-4890-9f18-1d6c7891ed06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1cf654-8a09-48bd-b94e-7f7e5387c04b",
        "cursor": {
          "ref": "31d49ced-98e1-4543-a8d0-cce2b5131a02",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5a6e69be-1e8c-401f-9888-74f723ca7808"
        },
        "item": {
          "id": "4b1cf654-8a09-48bd-b94e-7f7e5387c04b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a153cc03-d880-4482-82c7-049dcf15fa44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341041ba-f95c-4605-88e2-fd004d6f244f",
        "cursor": {
          "ref": "ee73542a-a525-4b67-b6ea-aecb123c4f21",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9f3d22be-deac-4f09-bc6b-820b19ea2f52"
        },
        "item": {
          "id": "341041ba-f95c-4605-88e2-fd004d6f244f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4d761fcd-4ba5-458c-b85b-9a6934733ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04279a5d-3882-424f-b1ce-32e428f6b821",
        "cursor": {
          "ref": "d73e1433-fcff-41d5-86f8-90b836bbdc2e",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3503574a-1d5e-4c64-be76-84689dcd98b9"
        },
        "item": {
          "id": "04279a5d-3882-424f-b1ce-32e428f6b821",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "11689413-6404-43d4-8947-db1ca253cb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912cddc8-f97b-4cc4-b44a-204fcdeabce5",
        "cursor": {
          "ref": "a9b4c6a9-2d59-42fc-874a-c4043845cfd4",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "80ee37bb-ac5b-4d38-8847-8b73405fda34"
        },
        "item": {
          "id": "912cddc8-f97b-4cc4-b44a-204fcdeabce5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d233f279-123a-4177-afd4-3a33d7675389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141efd74-c896-40ab-8d44-5aa6a4fd5607",
        "cursor": {
          "ref": "78647b4d-d3c3-44f5-9ff2-73956e531ab3",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5b7be571-957a-4b38-bc57-cefbb4d00a3e"
        },
        "item": {
          "id": "141efd74-c896-40ab-8d44-5aa6a4fd5607",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f78438e6-2e67-4e6e-a827-2da53ecf235d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd19881d-11e1-44a6-9e0d-414b28fe649b",
        "cursor": {
          "ref": "e0af19d3-7ac9-4ed5-a982-ee6e511881a8",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4dbb9cfa-f1bc-42dd-8cae-a44ddcb54c51"
        },
        "item": {
          "id": "cd19881d-11e1-44a6-9e0d-414b28fe649b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7205cd5f-b61b-4679-8642-4f6afc19906e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1913a0f-ded2-46f0-a9b1-dd94d2fec807",
        "cursor": {
          "ref": "18c3da70-1cd0-400c-baf0-7a475f385402",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fe2474d0-d433-4ee3-90ba-aef9c935c120"
        },
        "item": {
          "id": "e1913a0f-ded2-46f0-a9b1-dd94d2fec807",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7476147e-b502-4e10-8b46-d9a99e21c15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b871df51-d893-40ee-a851-5194d78351ed",
        "cursor": {
          "ref": "5f7bfc47-43ba-4ed2-a685-6bde60fc4ce9",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "199895b1-3e4b-4057-bcca-a33edd7fed6a"
        },
        "item": {
          "id": "b871df51-d893-40ee-a851-5194d78351ed",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "068e9587-6fea-4eff-8f1a-115ff38af1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7d5d15-67f0-400f-84f1-7df6b7f54c38",
        "cursor": {
          "ref": "1de1fddf-4d44-47a9-b253-a3c6c3fe8a8c",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "19a982b2-1333-433e-aa10-fb2a14fe784d"
        },
        "item": {
          "id": "4d7d5d15-67f0-400f-84f1-7df6b7f54c38",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "975cba22-50f9-4f2b-b478-8fc4824ce11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64532cf-5214-4dd1-87ff-7e938cbbf5bd",
        "cursor": {
          "ref": "cce71e6e-6a38-4d22-925d-898ec333a840",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "08e31ccb-2499-4d4a-9529-201d4e503350"
        },
        "item": {
          "id": "c64532cf-5214-4dd1-87ff-7e938cbbf5bd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "faafac16-9f4f-4620-89e0-fee381cd90f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217c70fa-026e-416c-ae31-c37e562fe90c",
        "cursor": {
          "ref": "a7f6c0fa-3991-46cb-8f9a-b853725d2696",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ba40a8a2-6c45-4621-a39b-17fc0890c6a1"
        },
        "item": {
          "id": "217c70fa-026e-416c-ae31-c37e562fe90c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "528f84c4-54c2-49de-a192-450e33952375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667f7d6f-4155-4142-8514-d927f298d835",
        "cursor": {
          "ref": "c5dd1cc0-16af-4b71-9082-981fae383824",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0d729afb-364d-483f-a1f2-d7faf8390d0f"
        },
        "item": {
          "id": "667f7d6f-4155-4142-8514-d927f298d835",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "08607ce9-6b30-440d-8e69-71c776a351f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f55252-d7e6-4403-88c0-79b7190d789f",
        "cursor": {
          "ref": "6e139ee4-e875-40eb-b12b-4204a3b477e8",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a4765e8e-a9b1-4521-917b-a7cf3b0e0cc1"
        },
        "item": {
          "id": "20f55252-d7e6-4403-88c0-79b7190d789f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b6023311-0f3b-48b6-ae47-e82223d00ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375fb942-4836-45e9-a246-e495158c67fb",
        "cursor": {
          "ref": "24a7992f-515c-4591-9671-98dc256c9d05",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6ce516bb-f9d2-4878-a6bc-47e3be62ee3b"
        },
        "item": {
          "id": "375fb942-4836-45e9-a246-e495158c67fb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "19e985e5-5b52-4f31-b220-7232d6116a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b022c42a-81e2-428e-a8a6-015e9cbbb4a6",
        "cursor": {
          "ref": "643c6f61-0017-4ede-9725-cd3b4fe0505a",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ae873ad6-781b-4748-b9bb-15e257be104d"
        },
        "item": {
          "id": "b022c42a-81e2-428e-a8a6-015e9cbbb4a6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "559c655a-e37d-460c-ba51-91c9f276da8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8243518f-ff8c-4e75-be08-e875f9d0fd70",
        "cursor": {
          "ref": "335f74c0-c3aa-4f70-8b03-de0fde6cfa31",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "90d9b6d6-9401-4ce5-aee3-b893208a7d02"
        },
        "item": {
          "id": "8243518f-ff8c-4e75-be08-e875f9d0fd70",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5e3ce46d-1136-4b58-bea6-628dc4a9d880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcc614d-c6d3-4d73-bbc8-ac5710a1bd24",
        "cursor": {
          "ref": "2aa705b8-5278-4e7d-8a8b-9254a4cf2a79",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "39ddcf70-3dc8-4bbb-9281-30f5f0e81f3b"
        },
        "item": {
          "id": "dfcc614d-c6d3-4d73-bbc8-ac5710a1bd24",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7dd7c864-4c4d-4630-8dd6-beef73d81422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de83cd9d-3501-4a50-8cbb-17a5ef520106",
        "cursor": {
          "ref": "f0895e91-f968-4634-a0d3-192d25944a57",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a4f93940-89eb-45b6-a183-8bbc8d7da1f6"
        },
        "item": {
          "id": "de83cd9d-3501-4a50-8cbb-17a5ef520106",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0ae1ad43-a055-40b3-9362-9fe11bc1226f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a938df-a534-4bec-9c09-11fe25f6aaa7",
        "cursor": {
          "ref": "9023cefd-8911-4a38-aa0e-db96cd7c1576",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1b0e6c91-6c00-480a-97ad-c49f58207169"
        },
        "item": {
          "id": "98a938df-a534-4bec-9c09-11fe25f6aaa7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "95b204a5-f281-48e6-9c14-673013e7c090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280e416e-d034-4f9f-b59b-e9ce40a8a3c7",
        "cursor": {
          "ref": "8b91a792-32b6-4505-8f19-6c48dca47911",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5d30b27e-6faa-491c-9716-f952ac53878d"
        },
        "item": {
          "id": "280e416e-d034-4f9f-b59b-e9ce40a8a3c7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ef0f36b0-66f4-4a07-b225-4f888c405266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "57d9f569-681c-49ca-80c0-c329f082bae7",
        "cursor": {
          "ref": "e7e02de2-5186-4428-bd6e-9330d04ca34c",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ed33272a-ddb7-4235-bdad-ca51607088f4"
        },
        "item": {
          "id": "57d9f569-681c-49ca-80c0-c329f082bae7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a0f8de72-294b-49f1-837c-ad8374f46398",
          "status": "Created",
          "code": 201,
          "responseTime": 2075,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "415051c0-7912-4e6f-8b1d-468b28184884",
        "cursor": {
          "ref": "a8e04e37-e7de-4ed2-9572-d02d5b54b9bf",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d85b3def-e916-4756-a067-ba7c52bdc7c0"
        },
        "item": {
          "id": "415051c0-7912-4e6f-8b1d-468b28184884",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6265aceb-d9f2-40a3-9c8b-bddd78b7ab47",
          "status": "Created",
          "code": 201,
          "responseTime": 2557,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a567edc-a9bf-4a5d-a808-b00291d2c2f4",
        "cursor": {
          "ref": "e192fb04-5dab-4081-b58d-b230d697e469",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bb981222-7b7f-4772-914f-4f209450a26c"
        },
        "item": {
          "id": "7a567edc-a9bf-4a5d-a808-b00291d2c2f4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bee780c9-fbb0-434a-ad2b-cb6e2566c4af",
          "status": "Created",
          "code": 201,
          "responseTime": 2384,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bc12f5-a8f1-48a1-a741-b7624df1c3c4",
        "cursor": {
          "ref": "0bbfa94a-fe16-4cab-bb97-903425e7c77c",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8e27730f-da82-4d3c-96b5-cdb254ba7ab4"
        },
        "item": {
          "id": "52bc12f5-a8f1-48a1-a741-b7624df1c3c4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b4aaf85a-8bc4-4cc2-bc4c-064a62c892c3",
          "status": "Created",
          "code": 201,
          "responseTime": 2615,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce359da-adf9-4095-b3b4-f9ac9c00a4ee",
        "cursor": {
          "ref": "81e97b0e-104e-44f8-a08e-d394e4ab0632",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "35bdc0d4-fa66-49db-9321-9e327c072bdf"
        },
        "item": {
          "id": "6ce359da-adf9-4095-b3b4-f9ac9c00a4ee",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "84b37fdd-f5d5-4f8a-9145-d274381cf8b0",
          "status": "Created",
          "code": 201,
          "responseTime": 2657,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-23T00:46:52Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-23T00:46:52Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "3fb367ee-8089-4c53-a90a-99e3a96e17a6",
        "cursor": {
          "ref": "c202ad1b-e874-455d-ab47-bae8784624ea",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7e7c96f3-2338-48a6-8bf8-c1600bf0ce22"
        },
        "item": {
          "id": "3fb367ee-8089-4c53-a90a-99e3a96e17a6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a9a8e9c2-c3aa-4ea3-9c3e-85c398835ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "f1bf91c7-38b4-4e1d-aa84-d6333aae85a5",
        "cursor": {
          "ref": "fe67c584-169e-43e0-8325-03856e2cfc37",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bec26108-4e93-4486-854a-4cf4a3f2dade"
        },
        "item": {
          "id": "f1bf91c7-38b4-4e1d-aa84-d6333aae85a5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5a017013-f87b-4b56-b45a-6f848e3e4e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636555d0-5aad-4235-ab17-26503a78cd17",
        "cursor": {
          "ref": "b9c4686d-8123-43d6-a236-e438659489cf",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e57262e0-3e5b-4812-a27d-ce6e260c3568"
        },
        "item": {
          "id": "636555d0-5aad-4235-ab17-26503a78cd17",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "950730e9-6717-47a8-936c-0f14d81d207a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87231054-1333-481e-802e-4ac603799c63",
        "cursor": {
          "ref": "5d37cb3d-ffef-4e44-893d-0b2032089126",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3423f707-c0d2-47d4-80c5-d7ad68675cf8"
        },
        "item": {
          "id": "87231054-1333-481e-802e-4ac603799c63",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5a5281b0-d02b-4de6-ab29-9dced3d364c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace42414-e78e-4b0f-8a88-ac0947d7b4eb",
        "cursor": {
          "ref": "ff7413a7-2bdf-4fff-941e-d0a350850545",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ae8cf7c6-3426-471a-a155-fdecb2e84ef4"
        },
        "item": {
          "id": "ace42414-e78e-4b0f-8a88-ac0947d7b4eb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c3c2d89a-cf2d-4c90-8054-d4b543d2f680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d24325e-7d88-4603-b902-b5a062167ef6",
        "cursor": {
          "ref": "02082e5c-693e-496b-9bd9-43ba450ba522",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4ec2448c-ec21-4a54-b18b-13703dff4dec"
        },
        "item": {
          "id": "9d24325e-7d88-4603-b902-b5a062167ef6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "560c9ea9-6e4b-43ac-a52e-29ed81d4f43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af65346-727a-4fc0-9b93-a9decfa60a34",
        "cursor": {
          "ref": "e2d67dd8-0fe2-437b-a6f2-1a5946143a51",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "63a30e4f-d790-4ea0-830a-648ec79831ec"
        },
        "item": {
          "id": "5af65346-727a-4fc0-9b93-a9decfa60a34",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ac7cb7b0-dcf8-4ba2-a1d2-45258f25e6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f1f227-c97d-443a-9e54-b2d859c45fd0",
        "cursor": {
          "ref": "c482c038-0528-4d53-b533-7f656226c8b6",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8f0de6f2-476b-4749-8344-d2ba8223b0c0"
        },
        "item": {
          "id": "c3f1f227-c97d-443a-9e54-b2d859c45fd0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5cbbebbe-de62-4aee-8eed-708fab14b80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dd8c0a-f1be-4d80-8e55-96d9a9f3f75c",
        "cursor": {
          "ref": "9d569a67-2825-4147-a4a5-a3c35af7f985",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7bdca424-560a-4a83-9af7-887c96afd789"
        },
        "item": {
          "id": "60dd8c0a-f1be-4d80-8e55-96d9a9f3f75c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e8b9dfb1-c14c-470d-8d32-9683bfa13a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ae4990-2119-405c-b2fc-bad0b4853141",
        "cursor": {
          "ref": "09043a19-5a3a-4ffd-974e-b1687a231624",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "608906ee-cc12-4b16-a6a0-6729b7d6b8c6"
        },
        "item": {
          "id": "d7ae4990-2119-405c-b2fc-bad0b4853141",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a4360e0e-d28b-4376-bad1-4c274f32d4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653b096b-40fc-48f3-be0c-fd7ce59e676a",
        "cursor": {
          "ref": "d654aae8-0c50-43d9-a9c5-da9b3dc3896f",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ccc69e34-3747-4794-8df1-0b9a4106a2c3"
        },
        "item": {
          "id": "653b096b-40fc-48f3-be0c-fd7ce59e676a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8b944f2e-ba9f-4be7-8e8e-0781cd1ef792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2329c11c-4f87-4642-ae75-e408b7a2ca37",
        "cursor": {
          "ref": "83147a32-8da1-42a4-b259-b012c9912604",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "22dc1a63-3ab1-4693-83f5-b74a3f8a6367"
        },
        "item": {
          "id": "2329c11c-4f87-4642-ae75-e408b7a2ca37",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2292210d-0d1a-4bb0-a221-da3481e7e6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1f8a33-78d4-4b09-8785-817b810c42b9",
        "cursor": {
          "ref": "1728654c-b1cb-484f-8af3-7c7fafc73b6d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f38449b9-5a4b-499c-997e-e1f0b1e67bda"
        },
        "item": {
          "id": "9c1f8a33-78d4-4b09-8785-817b810c42b9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "91ff0b92-b683-45a4-a636-01c82bfcc73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f26b8e3-f5fa-418f-b195-e2babb553fa1",
        "cursor": {
          "ref": "fc81fe60-a2f4-4b29-9777-878a7e954ba0",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a68cad5b-63b5-475d-a6d5-1d9bc3528792"
        },
        "item": {
          "id": "7f26b8e3-f5fa-418f-b195-e2babb553fa1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "13ca49b7-3c82-4fbb-87a5-2b6f66762ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810b0247-a730-422e-9ff2-8f3335a56c4c",
        "cursor": {
          "ref": "3cc6a9d0-b7df-419d-a1b0-d9ba8b70df9e",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3a1346c8-d859-43cd-9e4a-7f5ba40e9624"
        },
        "item": {
          "id": "810b0247-a730-422e-9ff2-8f3335a56c4c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a4190daa-9560-4e5d-b10c-45454d0b43de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0daf93-cd5b-4418-98d6-35963697546c",
        "cursor": {
          "ref": "21df68f7-f01a-4417-bdc3-b005fdaa77de",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "01205647-776f-4cb7-9748-3d56fe3e9ab5"
        },
        "item": {
          "id": "ce0daf93-cd5b-4418-98d6-35963697546c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d742d4c2-bbb6-4644-94a5-e1588e53375e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bee365-e5e2-44c4-a8f0-c7abf64f7856",
        "cursor": {
          "ref": "c9411e2a-2a23-4feb-bf4a-715d60626dec",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3b490ccf-5e1e-4066-975b-9e14d7aa8e02"
        },
        "item": {
          "id": "47bee365-e5e2-44c4-a8f0-c7abf64f7856",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0f0a71eb-dfad-4c68-a445-dde98a0246fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c7d093-eedd-4d7b-bc3d-68f2da5d7970",
        "cursor": {
          "ref": "f4379503-d11a-42ab-816a-6aec42388ac3",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c52cbe1a-06e4-4ca0-a0f6-bdfd9a11ee71"
        },
        "item": {
          "id": "e6c7d093-eedd-4d7b-bc3d-68f2da5d7970",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "39fbb815-288b-4b6e-be71-4951e76bff3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8d8923-4841-44e0-bb69-b27fd0743d24",
        "cursor": {
          "ref": "a8c0752e-305f-4f94-9103-4ff7137a6e33",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "25540d27-f069-4e18-ba54-b2dfd2e4e719"
        },
        "item": {
          "id": "eb8d8923-4841-44e0-bb69-b27fd0743d24",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5684442a-1236-495e-88b3-cadeb060d36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4905537b-95b1-4a51-90cd-66a29e795418",
        "cursor": {
          "ref": "23693eea-5d1c-49ee-a6e1-fd47525419fa",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dd10a5ea-6d46-40ba-a412-57f7cf86a67d"
        },
        "item": {
          "id": "4905537b-95b1-4a51-90cd-66a29e795418",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9b7108a5-959a-4228-af54-005535acffd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67878a20-dffc-4555-9207-164427e2f218",
        "cursor": {
          "ref": "4aa90eaf-c8a8-43f1-8691-e195b047c3ce",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "69466a6e-4e12-4e68-8d80-d0433c7d69bd"
        },
        "item": {
          "id": "67878a20-dffc-4555-9207-164427e2f218",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1bd096f1-322b-4850-9741-97ff6af5c6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68910055-512c-478c-91b3-9663c6fbff3f",
        "cursor": {
          "ref": "a7119be6-cc5a-4e86-bef1-8c2b2455e911",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f8705487-f7f5-435f-9018-2e4d92ee7784"
        },
        "item": {
          "id": "68910055-512c-478c-91b3-9663c6fbff3f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "23f60d5d-6620-4a9b-bc87-084a72324821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285ab3ab-d90e-43b9-b222-7a1d5db2870e",
        "cursor": {
          "ref": "ea270e38-ac65-4c58-8c27-c0999928bb8b",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7fd1affe-65ce-44f3-baf3-b2ea17b0a986"
        },
        "item": {
          "id": "285ab3ab-d90e-43b9-b222-7a1d5db2870e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c318cf81-b1dd-4453-962a-fc8dc4556d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4ec46f-b2d5-467a-ab25-8db9b6f9259a",
        "cursor": {
          "ref": "fea606b9-d6fa-4a4e-88ef-ad4027681442",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "19e01253-6925-4a94-b31e-d4c3715a4bea"
        },
        "item": {
          "id": "0e4ec46f-b2d5-467a-ab25-8db9b6f9259a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8c60041b-ea84-4cde-8591-2ebb77ca797c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e38f9c1-dd21-471b-b794-1849c94b26f8",
        "cursor": {
          "ref": "48a308e6-377b-4fe2-90ed-7ff76ab8aa9f",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7d52b91a-3b61-47ad-98a7-5172af1decbf"
        },
        "item": {
          "id": "8e38f9c1-dd21-471b-b794-1849c94b26f8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6771d81a-49b1-4453-9b74-48abd79c4bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e7b0e1-2098-4c28-918f-17ce612018bf",
        "cursor": {
          "ref": "893106b8-9d69-40a2-89a9-f19a737ae81c",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a1b71ec4-d62a-40be-a719-c5f8e3c685d9"
        },
        "item": {
          "id": "d3e7b0e1-2098-4c28-918f-17ce612018bf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "46c3b530-2004-4049-8d32-31df3b9032e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5808401-1e15-4189-b95f-790c70e6f269",
        "cursor": {
          "ref": "d20e3499-cb7b-4c1d-b0f9-9c08ea8bf735",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "62228470-46f8-406f-b462-73296098ca69"
        },
        "item": {
          "id": "e5808401-1e15-4189-b95f-790c70e6f269",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aee2af25-f086-448a-93d1-154136d341f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6677559-7ebe-4d69-92ef-5bddd0f3b414",
        "cursor": {
          "ref": "18236ef1-9c27-453a-8274-1d969c9e4cd3",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "301f3595-a761-4074-85d9-f529b17639b4"
        },
        "item": {
          "id": "c6677559-7ebe-4d69-92ef-5bddd0f3b414",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "63ce17e0-62f4-4843-9dff-0cd1ef40026a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1cf5a11-a297-4f25-ac66-d3e59271e6f2",
        "cursor": {
          "ref": "ae9142c5-260c-464b-93b6-b3426c108375",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6c14c996-c062-4346-9713-d0b48fab0a2e"
        },
        "item": {
          "id": "c1cf5a11-a297-4f25-ac66-d3e59271e6f2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "89ccccf7-753c-4c9e-bf04-1084b1a0aa93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e1addd-3c10-4666-ad7a-5e400d9cde83",
        "cursor": {
          "ref": "520b5777-b8cb-446b-96f9-decc979a99ea",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b81acd7a-2bdb-4d70-ad93-fcf585962b8e"
        },
        "item": {
          "id": "62e1addd-3c10-4666-ad7a-5e400d9cde83",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "47666261-fb59-43d7-b59d-707e74211973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd21124b-267f-4e9e-8094-22a76f22a9e7",
        "cursor": {
          "ref": "89783814-75b2-4a4b-8abe-11c2b82834a4",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cd5621ae-4b8e-45ca-a5ae-86cc5c1137aa"
        },
        "item": {
          "id": "fd21124b-267f-4e9e-8094-22a76f22a9e7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d157ec08-24ba-41b4-9cc6-80e3e54e16db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfc5131-8736-492c-a3f8-ec622965ba75",
        "cursor": {
          "ref": "33faf431-258c-4b0a-973f-5c671942a410",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b4bfb7b1-07e3-46eb-8171-89aefffb3a72"
        },
        "item": {
          "id": "6cfc5131-8736-492c-a3f8-ec622965ba75",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7ca41821-54b2-443a-a06f-e0299160978c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e4b89e-3bbe-448e-afe6-15280797ed5b",
        "cursor": {
          "ref": "15e5fb67-0fc5-47b2-aa24-a313aec53a40",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "165e00b3-87c1-4cfd-affe-4aad4dc565e2"
        },
        "item": {
          "id": "76e4b89e-3bbe-448e-afe6-15280797ed5b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5b7b242a-447e-418e-a42e-4d195e4e400f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c201c48c-3c0c-455e-8330-dd8d63645965",
        "cursor": {
          "ref": "22d679de-471a-4619-8094-91fdc208a406",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2a318a42-85dd-49d3-9473-b96b372eb6ac"
        },
        "item": {
          "id": "c201c48c-3c0c-455e-8330-dd8d63645965",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6bd573ab-e7f7-4228-ac9d-e498b8f682d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5d10fc92-4c19-41a6-88e8-967154e44251",
        "cursor": {
          "ref": "0bd28ca2-cf4d-4722-8759-920b2dd691c4",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "01283252-c46c-4094-b911-5dcc29b3ff88"
        },
        "item": {
          "id": "5d10fc92-4c19-41a6-88e8-967154e44251",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a96c4ecf-68ad-4e80-8c56-9894d4a696e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee6e097-a275-437a-87e7-8d937e427d5d",
        "cursor": {
          "ref": "ebc7e105-fd99-474c-89a0-3d1a62159f63",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6fbf282f-c0e0-44b6-a1bd-104abaaa2533"
        },
        "item": {
          "id": "5ee6e097-a275-437a-87e7-8d937e427d5d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c38a4e8c-2276-4062-9847-6f42cb7476ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6302beea-5574-465a-a268-0f09a70530af",
        "cursor": {
          "ref": "fbe7ae72-d215-400e-8cb2-30028d55937d",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b0a74025-ed1f-4194-aff1-33e3230e5145"
        },
        "item": {
          "id": "6302beea-5574-465a-a268-0f09a70530af",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "24a94a7c-7a36-4ec4-9cc2-7a70ab74caf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fb3ac2-ef0d-48a2-bd3a-0d4e6ea660e3",
        "cursor": {
          "ref": "c9bcffa7-35eb-4427-9316-2bc55a4243d1",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "da154fdd-bc0c-4071-8301-774cca931f12"
        },
        "item": {
          "id": "28fb3ac2-ef0d-48a2-bd3a-0d4e6ea660e3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "49a5373e-3e0e-4668-a463-1f45a9ec143c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb8add5-72cc-40b0-a888-f432e488840f",
        "cursor": {
          "ref": "55e8a994-6c6c-48ff-9a1b-e45f4a7adeeb",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3d019ac3-67f5-4982-80a3-d6aa24ca8289"
        },
        "item": {
          "id": "dfb8add5-72cc-40b0-a888-f432e488840f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2493d625-80f4-4bfb-948e-265ebfaa058e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc85125b-4494-4f3c-a48d-dbea6b49327a",
        "cursor": {
          "ref": "a7bb1981-b516-4f43-ab08-d1ba3dadde42",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d996fc74-ccc0-4981-b600-220fb87a2bbf"
        },
        "item": {
          "id": "bc85125b-4494-4f3c-a48d-dbea6b49327a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a3790355-d382-440c-a42c-7ab4ea945f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c4ad1f-ddb6-4e98-805e-e8eb13785b42",
        "cursor": {
          "ref": "4eda8d95-945a-47d3-bf80-17e7058ac76a",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "217acb4d-3542-4cfb-847e-da4e4e5ba7a3"
        },
        "item": {
          "id": "98c4ad1f-ddb6-4e98-805e-e8eb13785b42",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aa6b928e-cdeb-49fe-bb69-03cc67b5fe27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af1b7cb-e160-45b3-9101-f395a01d39b9",
        "cursor": {
          "ref": "8162e71c-ed05-49d1-bb0f-f59dcec2cec7",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ee974a9e-56b4-4849-963e-9c6c6882aaf5"
        },
        "item": {
          "id": "3af1b7cb-e160-45b3-9101-f395a01d39b9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "66772bef-09d6-4f0e-a0c8-a2392c206b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f058a2-7923-4075-9750-9a73cc0fdbe0",
        "cursor": {
          "ref": "732ab9d0-75c4-42ed-8e5d-210423bf3be9",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "85cd4834-d164-4c83-97b5-fe62e5c9b14b"
        },
        "item": {
          "id": "16f058a2-7923-4075-9750-9a73cc0fdbe0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6c7fad68-e0cc-46b1-bcb3-56a12d4675eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97546b3d-b2af-4d24-b8e1-4eac20bd5d0b",
        "cursor": {
          "ref": "61f96686-8d9b-4386-8734-9fb8792cabdb",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "eb43f212-9a6b-475b-a876-ac6a11c6be99"
        },
        "item": {
          "id": "97546b3d-b2af-4d24-b8e1-4eac20bd5d0b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "41b1390d-b787-41ca-8d79-8179a5a44dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ddfe9b-92ab-4e85-9c50-6c2ee685fbd2",
        "cursor": {
          "ref": "3f0e90d7-dd70-42d7-8735-067c5c453e18",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f5c651c0-a7a3-42a1-91b9-81ca3bbb24ae"
        },
        "item": {
          "id": "79ddfe9b-92ab-4e85-9c50-6c2ee685fbd2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c850a50b-fd1a-42db-bbb4-04ff97f9fb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3345329d-e437-4b39-8058-a3c59ebf0312",
        "cursor": {
          "ref": "6f918833-7842-4726-ab2c-689fd6072eb9",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "24314b37-94a5-49c5-9d59-5d61d04b919a"
        },
        "item": {
          "id": "3345329d-e437-4b39-8058-a3c59ebf0312",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "20b4afd0-b69e-4138-9c25-1347f33690ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c67381-2f82-48b0-a3f6-61ac5e4dbe47",
        "cursor": {
          "ref": "047bfd2d-c3a7-44ad-aa49-4b0d790d89ce",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a78e465e-c1e7-40bc-98e8-ea7d46079779"
        },
        "item": {
          "id": "77c67381-2f82-48b0-a3f6-61ac5e4dbe47",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8c14c936-3ab4-4255-ae8a-e14c98cc7d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b409021a-8570-4027-9ff1-c5a5008f66b0",
        "cursor": {
          "ref": "b7f6f1e3-8d59-4c10-875f-a0e5815afea8",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "13814007-74ac-4a71-8f6b-95a54d1241fd"
        },
        "item": {
          "id": "b409021a-8570-4027-9ff1-c5a5008f66b0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f67ef290-76b2-4a38-818b-e4c27f3d053c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448c2b59-0cc9-443c-9878-4402ae3153b6",
        "cursor": {
          "ref": "b4bfe010-32e7-412c-a370-da490e5790a4",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0abae62f-9219-4f9e-9adf-9b3d7d942e6c"
        },
        "item": {
          "id": "448c2b59-0cc9-443c-9878-4402ae3153b6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "57cb270f-d4c7-4cc8-87d9-cf1c98380dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d42ae1b-dc1c-4221-92da-fe67bf7f5ba8",
        "cursor": {
          "ref": "f0413e95-fa0d-4eb1-9246-29c90a17f0ea",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d109d696-d2d2-4f78-bba1-96d7876ddd99"
        },
        "item": {
          "id": "1d42ae1b-dc1c-4221-92da-fe67bf7f5ba8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7646eb68-0705-4839-bc4d-af61d2953486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f002a723-7bc5-4277-ac04-476d6da90c39",
        "cursor": {
          "ref": "495ab0e4-f03b-482d-bf61-e40a5583c806",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "52c2ad0b-745a-48c0-aef3-c496b21945d0"
        },
        "item": {
          "id": "f002a723-7bc5-4277-ac04-476d6da90c39",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c411bcb7-232c-4673-bf56-38e3c1ca64f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be8c92e-9ba6-4660-8fd1-15c5ed64003e",
        "cursor": {
          "ref": "8fef401b-e1c4-43b5-94e3-80e9105e6e24",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e3405df7-7cee-46de-8629-ad3f14cf59f6"
        },
        "item": {
          "id": "0be8c92e-9ba6-4660-8fd1-15c5ed64003e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2e02493e-e0e4-4785-a2fb-7b27ff228392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcef234-9277-49da-96ae-020ffc0a3e33",
        "cursor": {
          "ref": "7f618954-2899-47de-85bc-9e5090073bd3",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c60d9a72-68e1-4a07-afff-551f6102aa4f"
        },
        "item": {
          "id": "cfcef234-9277-49da-96ae-020ffc0a3e33",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f8b9a78d-25d7-42c9-bea8-776fb4b2544c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdd61bd-d882-41da-a996-8a52ef7be9be",
        "cursor": {
          "ref": "462c169a-e2db-4833-ab83-86d9038e3b1d",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "35c9c9a7-9f0e-47b2-a996-e5e876e8f710"
        },
        "item": {
          "id": "ffdd61bd-d882-41da-a996-8a52ef7be9be",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c7e31632-14e9-4eab-bf93-314e96606525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b328231-4d1b-4842-889a-deceb5a44d75",
        "cursor": {
          "ref": "ef28b6f0-b5a4-421f-97df-375473100942",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "94406dc7-3883-48c6-8e31-f1439732b827"
        },
        "item": {
          "id": "1b328231-4d1b-4842-889a-deceb5a44d75",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "11327603-4e31-46b6-abd8-df30a5b80e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9f436e-2d13-4900-adc1-bc4b81821ab0",
        "cursor": {
          "ref": "109295e7-5692-45a9-9737-5f3f6d045ce1",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a945f2eb-9c7a-4775-93ee-a4ec73841fed"
        },
        "item": {
          "id": "ca9f436e-2d13-4900-adc1-bc4b81821ab0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "85629eba-eb50-4750-8782-5c8197650df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a66835-03e3-48ac-a478-b89c48afa30e",
        "cursor": {
          "ref": "5829fa54-ffd4-42e6-8149-440d98eb7542",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "19b61c5f-0ef5-4d19-9e82-e3627ecd62e7"
        },
        "item": {
          "id": "15a66835-03e3-48ac-a478-b89c48afa30e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c9a523cf-e5dc-4386-af0a-f691c88287a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89d37b2-e92f-463f-943f-c9668d907c61",
        "cursor": {
          "ref": "bab024e2-28a1-4518-a03f-5f8044e178e5",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d35f892d-c561-40d7-994d-e64c62106c01"
        },
        "item": {
          "id": "d89d37b2-e92f-463f-943f-c9668d907c61",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4dc3e638-9541-44ae-bb08-3f9e24129001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47212854-29cc-4653-bb54-d712a17b6fa2",
        "cursor": {
          "ref": "bad4a4b9-624c-46b5-ade4-38038b919986",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "04386a75-1c9f-4382-b45f-e4253db90a58"
        },
        "item": {
          "id": "47212854-29cc-4653-bb54-d712a17b6fa2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c803ae35-7da2-4db1-bad3-df19c6cd74a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033988a9-6926-413e-90cd-654597d7daf3",
        "cursor": {
          "ref": "6ccde908-685f-47e2-a0b3-33493bbdad4d",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "aae574e8-5a3a-4860-b4d7-68ab061de161"
        },
        "item": {
          "id": "033988a9-6926-413e-90cd-654597d7daf3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cb52c6b2-9040-4777-810c-3c9dd8cb7bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d79a9f5-beb6-4d7e-820d-32873d864092",
        "cursor": {
          "ref": "b2f9eeeb-f2c4-42ad-a096-eaa642acf2ae",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fdaf391b-2102-4ef7-877f-9b27d5f172d0"
        },
        "item": {
          "id": "3d79a9f5-beb6-4d7e-820d-32873d864092",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "841b8ab9-c620-49cb-9122-5e5b41987389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040b8851-ef27-4cd1-b291-ca7c6fee7e61",
        "cursor": {
          "ref": "0b66c705-cca0-4146-82b9-19f9e6ab9b6c",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f5f217ef-afd1-4970-8860-503f171fcfa3"
        },
        "item": {
          "id": "040b8851-ef27-4cd1-b291-ca7c6fee7e61",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3d1aa201-6798-4c03-9266-3a356ec66aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe82db5-10ae-4b01-9f73-cc046f2dcf3d",
        "cursor": {
          "ref": "17dc2047-f001-4168-b606-308717de3918",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6d066c2e-09f6-4637-8c6f-95d6c24aae5f"
        },
        "item": {
          "id": "bbe82db5-10ae-4b01-9f73-cc046f2dcf3d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3663cf21-e532-4814-ad8b-d56ddffb25fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0674d30-1cac-44d6-882a-beaa763905f1",
        "cursor": {
          "ref": "dfbcfea0-626f-44ac-a677-4b2ab1e6b5e5",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "abffc8be-9c7b-4007-b8aa-397cf6adadbc"
        },
        "item": {
          "id": "a0674d30-1cac-44d6-882a-beaa763905f1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bc8c548e-1de9-4bea-8e63-2ace078957a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39731b6-817d-4e1b-a9df-4af4f8fc15f4",
        "cursor": {
          "ref": "0ede8e88-6bd9-4db1-a9c0-40b39ebc1dca",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b0ba050d-468a-4532-9eec-0d0352dd0ffe"
        },
        "item": {
          "id": "d39731b6-817d-4e1b-a9df-4af4f8fc15f4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "abf477d3-b482-412f-8a56-b932794ee3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b908db92-d4c9-46e3-9059-bb1b592d8628",
        "cursor": {
          "ref": "6b6fbeba-b38d-487d-acd9-3f62d44e8a5e",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a257ab36-9065-49c5-93e6-4072dc6c0573"
        },
        "item": {
          "id": "b908db92-d4c9-46e3-9059-bb1b592d8628",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ff23c7d6-4bc2-4d88-babf-5334f80d21d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1964704-32ef-4249-9a74-1063505b6e7c",
        "cursor": {
          "ref": "b6c7a06b-f044-4727-8ee9-1de9d8bb31bc",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0444e044-f496-489d-80b5-499d4988f16a"
        },
        "item": {
          "id": "b1964704-32ef-4249-9a74-1063505b6e7c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "fb77a8a3-4a6c-478e-b092-76849f43f10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1138329e-6f23-4ed3-93fe-47ce2a627d8c",
        "cursor": {
          "ref": "7c415abf-94c0-4632-9149-55cf2a0b35f5",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a0dafd1b-1aa2-4e10-94ac-005ede6b0a7d"
        },
        "item": {
          "id": "1138329e-6f23-4ed3-93fe-47ce2a627d8c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "561e83a1-5d1e-4819-87bf-88bbace9258d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed2e823-8237-4662-96d5-ded223cf38c6",
        "cursor": {
          "ref": "9c34a6a0-448f-4018-994c-891ca68f36df",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a136c647-fe06-4a8d-8431-8279ae9e0f06"
        },
        "item": {
          "id": "bed2e823-8237-4662-96d5-ded223cf38c6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a8509ffe-8ff1-4f07-8a69-fce2f3ec358f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1039f5f-4bc3-4764-b09a-190e500fa9fd",
        "cursor": {
          "ref": "70e48e42-6e3d-4276-bcd7-8ca18d83f41e",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ca560eaf-27e6-4eb2-9e7c-620200034dc2"
        },
        "item": {
          "id": "f1039f5f-4bc3-4764-b09a-190e500fa9fd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ee77fff1-4112-44fd-aa0c-ca92787bce0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7495a190-3b22-4d01-b44e-0047abc96678",
        "cursor": {
          "ref": "cc98b1a6-7248-477b-8698-7f1d7928aa42",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9f48836a-1470-4061-905b-2c43648054cc"
        },
        "item": {
          "id": "7495a190-3b22-4d01-b44e-0047abc96678",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f174f3f7-7c47-4a84-a839-ea6fca1edae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdafb6e6-14a2-4416-8800-645f81b47ab2",
        "cursor": {
          "ref": "1aee1697-5a00-4050-b611-20d798b87dd2",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f68f2627-275e-4a25-9788-d86a6d41c3d6"
        },
        "item": {
          "id": "bdafb6e6-14a2-4416-8800-645f81b47ab2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "28625524-9836-464c-a5a9-25f954886f28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "e7756221-9c07-48fe-947d-fd15bf1ab549",
        "cursor": {
          "ref": "d5be34df-f714-4b01-a372-9f8439625bbf",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "11af62ee-2c0d-457e-ab76-f906e44e1d55"
        },
        "item": {
          "id": "e7756221-9c07-48fe-947d-fd15bf1ab549",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "72e5f1d2-94a6-4e23-bcb9-d36c1beae294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be49c38e-1434-4b9c-bb4f-e146036093cc",
        "cursor": {
          "ref": "abcbfb45-2280-41ed-8c9b-1469b76f5682",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7e99cfc4-33c3-4960-9adb-fb61b65eec2b"
        },
        "item": {
          "id": "be49c38e-1434-4b9c-bb4f-e146036093cc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d88155e8-ee8d-43e3-8a91-f6a227242f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf8305b-ce9a-4e51-9c1f-fb1704f2eaae",
        "cursor": {
          "ref": "42e872cc-8a83-4684-8a39-7ed3f35a7bfa",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a4219d34-a247-4f3d-9db9-3de5edc1b84e"
        },
        "item": {
          "id": "aaf8305b-ce9a-4e51-9c1f-fb1704f2eaae",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0080162d-adf2-47ff-84e8-6c0a99657176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9643eb-73e0-4874-99d0-19a3d56dac8d",
        "cursor": {
          "ref": "97af7457-6f65-475d-b8e2-95b8fc7a87de",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "061bfc0f-2d4a-4835-9fbe-7bb85ed18823"
        },
        "item": {
          "id": "df9643eb-73e0-4874-99d0-19a3d56dac8d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b3345792-6c0b-422d-b9fb-8a3342f367e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0129a9b-94aa-4fb6-860a-dbec1042c367",
        "cursor": {
          "ref": "8829df3f-5f5f-4b6a-a045-0d19fa49b3c2",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2f7ee517-0a23-477c-827d-00a77a3163af"
        },
        "item": {
          "id": "c0129a9b-94aa-4fb6-860a-dbec1042c367",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fddb6979-c103-45de-9008-4430109d9d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2853042c-f6ea-4058-933b-f9a371d1d61f",
        "cursor": {
          "ref": "099fbf0e-29c1-44d0-bcec-057df679f101",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "97b15710-bd88-4459-9d7c-0c630f99fdc6"
        },
        "item": {
          "id": "2853042c-f6ea-4058-933b-f9a371d1d61f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4a443d96-27af-4011-a4c6-86a18ac6b590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbef8db9-df8d-49d2-80cc-43e378fa0421",
        "cursor": {
          "ref": "d50b4202-7b30-4d98-8e62-98df9602e62f",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f6f03da8-80a1-4752-988b-d6ece8fdc2fd"
        },
        "item": {
          "id": "bbef8db9-df8d-49d2-80cc-43e378fa0421",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ebe7443c-0d99-4bd3-891c-f7623104ad5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b8128e-6c90-4ae5-8507-6387a3dca261",
        "cursor": {
          "ref": "ae698046-1a2d-49ea-846f-686e4b49384f",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7f39a8b7-9cef-4c58-9741-af7d3f2c93d3"
        },
        "item": {
          "id": "a0b8128e-6c90-4ae5-8507-6387a3dca261",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6c2d8ed7-7439-43b3-a31e-dde41a9893fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d01277-8850-4ef6-995b-1a91dc3d2a3d",
        "cursor": {
          "ref": "4fa3ab3c-bdab-467d-a946-3d781c01a9fd",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "25cf463b-6bd1-4031-bf84-b7e9c0401d4f"
        },
        "item": {
          "id": "24d01277-8850-4ef6-995b-1a91dc3d2a3d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1994adc0-01fd-47d5-b844-d9fc3affe095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4d06b6-d980-430b-99c4-311c403259e1",
        "cursor": {
          "ref": "593c11f3-f4be-49dd-b815-ffbe787ac59b",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7b548bef-c3bc-46dc-bf45-2acf95936ae8"
        },
        "item": {
          "id": "eb4d06b6-d980-430b-99c4-311c403259e1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a6e613d2-fa9e-4c9f-b1cc-51321597ce7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73329c3-83eb-46df-948d-24c7fecccd90",
        "cursor": {
          "ref": "9821c387-5a12-4fd2-82a5-15699d92a92c",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e4f99f68-bef8-47d6-92a6-c63b1fd71014"
        },
        "item": {
          "id": "b73329c3-83eb-46df-948d-24c7fecccd90",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "128d79e9-e3ec-4e35-aca0-f61a3c928472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1218cfb-04ff-44e1-bd9e-5a787c8d1cd6",
        "cursor": {
          "ref": "22dccb40-39d7-4581-8ee9-b468f9996265",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8a1fe999-ebc1-4686-ac62-014332fdd404"
        },
        "item": {
          "id": "d1218cfb-04ff-44e1-bd9e-5a787c8d1cd6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c33adcc0-aa25-46d3-95eb-36d28aa2e8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e8971d-322e-415a-883e-c7a23465774a",
        "cursor": {
          "ref": "08c0aa0f-020e-45fe-94fa-6b85ef4c274e",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "90ea55fa-1e1b-4c83-896e-3581c7b033c3"
        },
        "item": {
          "id": "c7e8971d-322e-415a-883e-c7a23465774a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "30c14f5d-e7f4-4632-b31c-4e2cc3be70dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461a1abc-2d5e-44f0-a108-e2fdcfead63b",
        "cursor": {
          "ref": "87a6bb1f-74b9-4b99-b04c-05975f16352c",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4399d745-90a8-496e-aecb-932f6e3d0e42"
        },
        "item": {
          "id": "461a1abc-2d5e-44f0-a108-e2fdcfead63b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "52f4af68-b196-4add-86ac-5fb16282230a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9701b1-3082-4d80-bcc7-45b311c2e1da",
        "cursor": {
          "ref": "0b51bd6d-c8d7-4e55-9913-7f28541191d8",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "dc4848a2-b5dc-4548-8e44-9b8e67f80096"
        },
        "item": {
          "id": "cb9701b1-3082-4d80-bcc7-45b311c2e1da",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a6221cc3-2823-401e-b616-8b72eccafb59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a55feb7-337c-4ed8-91e7-de170c2d0858",
        "cursor": {
          "ref": "a9023589-ac82-4d0e-96da-8335016a3f7f",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c919e1af-f138-4f2e-9952-97f395a01ab0"
        },
        "item": {
          "id": "3a55feb7-337c-4ed8-91e7-de170c2d0858",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "88da5ce0-cfb9-4c2c-92c5-426feba16623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6440b57-85ef-458b-83b6-08f285f03152",
        "cursor": {
          "ref": "75fa0d4e-c4e4-43c5-94da-700bf3802311",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b31cc006-4456-4dbc-a52e-54a2fc8d62cd"
        },
        "item": {
          "id": "f6440b57-85ef-458b-83b6-08f285f03152",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a8b4077b-bf1b-46dc-b8a8-c2176d1894bc",
          "status": "OK",
          "code": 200,
          "responseTime": 401,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "03b43a88-e7ee-4591-9818-a9e0172f24a0",
        "cursor": {
          "ref": "85d17ba4-4a1a-4b63-89d7-eaf6a2a9a2ae",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "013a6b74-ba5b-458b-b19c-38749c1712a8"
        },
        "item": {
          "id": "03b43a88-e7ee-4591-9818-a9e0172f24a0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "825c7f18-7213-4da8-a8cc-ef72f64bbb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de32d15-704c-43ed-ad6e-5ead34277e39",
        "cursor": {
          "ref": "efe18a77-3fd3-4f0f-90c6-3cb6da316022",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "09096f57-69c8-4cb7-b38c-b5c5a1cfbc14"
        },
        "item": {
          "id": "0de32d15-704c-43ed-ad6e-5ead34277e39",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "aabd1558-b811-4c1f-83d9-6695c724561d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48c53f9-d2d7-402b-9de6-b96de385b299",
        "cursor": {
          "ref": "4a07ee1e-f443-40b5-ae66-b98a523b68c3",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "98ebaf6e-5b9c-464d-8a71-958646fe97a8"
        },
        "item": {
          "id": "e48c53f9-d2d7-402b-9de6-b96de385b299",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "98ceb58c-dbba-4f74-a465-217299005aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28073ba-b772-4cea-a993-d1ec506eb29b",
        "cursor": {
          "ref": "2baa1db9-4798-4580-8485-76633e09a9ec",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "26a874e8-1d3c-4b57-8e35-7f427ae19194"
        },
        "item": {
          "id": "d28073ba-b772-4cea-a993-d1ec506eb29b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c9c25af3-3a9d-4adf-8d24-7c84744feef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2f3a4e-540e-477f-ae96-39d4a594b94e",
        "cursor": {
          "ref": "c7a7a899-5398-49ba-9b16-75c0accb784e",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "69bb1c14-f759-4123-bafc-8cb8f0214e98"
        },
        "item": {
          "id": "1e2f3a4e-540e-477f-ae96-39d4a594b94e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7ab1c826-dd21-485e-8719-84bcb1e9a531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e394746-f4dc-4a1f-949b-411f3ed287b3",
        "cursor": {
          "ref": "a403ca9b-01eb-4cf8-ae64-cf3a597ac212",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "56a3343c-368a-41fd-b87f-021993e44f60"
        },
        "item": {
          "id": "2e394746-f4dc-4a1f-949b-411f3ed287b3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4795a1eb-0cb3-4f3f-ad25-6f5c7c5f791e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750a1d7b-0484-4f2a-b8d8-186582d5059e",
        "cursor": {
          "ref": "09957d26-3c47-47f4-9946-0ffa4f58637c",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7a68711f-e562-4b0d-a747-740ffd774329"
        },
        "item": {
          "id": "750a1d7b-0484-4f2a-b8d8-186582d5059e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "df19436d-3289-4577-957e-1233c6ea40d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e346b618-58e2-4123-a0f7-78cc0f44e08b",
        "cursor": {
          "ref": "8ca4eb03-8d23-45f3-a146-ab65603c6c01",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f559ae61-fff0-4c50-b118-405a4bb9ce16"
        },
        "item": {
          "id": "e346b618-58e2-4123-a0f7-78cc0f44e08b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8e9cf9a6-8bdd-4a72-8317-576556116068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396ad81d-b6ce-4d37-ac2e-097ebf63751d",
        "cursor": {
          "ref": "1be0ead3-7cdd-4137-b297-c3dae322e4f6",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5b51cd2c-ee65-4bc4-9c18-26d48b41448b"
        },
        "item": {
          "id": "396ad81d-b6ce-4d37-ac2e-097ebf63751d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "abdc9e37-8fb2-4557-bb0c-ba719a6a07ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea199485-c307-4d65-b89d-1fdf892075d0",
        "cursor": {
          "ref": "57af9b91-b395-47bb-b029-ccc091626cad",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "849b9d08-21f3-4b8c-96c6-6ab454aa0170"
        },
        "item": {
          "id": "ea199485-c307-4d65-b89d-1fdf892075d0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f58e575b-63c4-497d-9ad2-356abc651efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a639864-ec96-47bc-ada6-35dc7a8b0ea6",
        "cursor": {
          "ref": "48192784-6863-4c3c-a964-97b5f51e6727",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0ff02744-9e61-4dd3-888d-56e03211b54e"
        },
        "item": {
          "id": "8a639864-ec96-47bc-ada6-35dc7a8b0ea6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f2616677-8757-4a06-88be-b2fb62ea5ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e128d2ab-e419-406f-8bac-b3c9bd4f5789",
        "cursor": {
          "ref": "1a7a0261-2172-4d03-bf42-5dfb11a53b10",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "10aad9ce-a638-4602-b0e5-9d028c70e54d"
        },
        "item": {
          "id": "e128d2ab-e419-406f-8bac-b3c9bd4f5789",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "078b139e-9a55-40b5-9d72-c6634c608597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90ea1b2-caff-484f-a518-0f4a3bcf5741",
        "cursor": {
          "ref": "1abe9038-7433-4dab-9ea2-648ac6af7665",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e5da5b02-60be-4315-a572-320a6ef45707"
        },
        "item": {
          "id": "b90ea1b2-caff-484f-a518-0f4a3bcf5741",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1c5b60fd-7bbf-4f54-ae6d-5c73c01b5e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb21b62-004d-4740-91e0-36b7976bf997",
        "cursor": {
          "ref": "9305c089-2943-4412-bb3b-b30132607e65",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bc7ec237-37a5-4e95-906e-f1ed913c43fc"
        },
        "item": {
          "id": "2bb21b62-004d-4740-91e0-36b7976bf997",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "de059aee-c445-4ed7-aed5-934e7ac41da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1f9949-64ed-4654-aadf-81dce0192bb4",
        "cursor": {
          "ref": "0cc6b46a-09e5-4acd-90f4-127286c5870a",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4dd9830f-0001-418e-a092-80d22f97a44d"
        },
        "item": {
          "id": "2d1f9949-64ed-4654-aadf-81dce0192bb4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fbf6eca1-201d-45ed-9b6d-56c92f8a5631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8270c945-0192-45e4-8e66-b461e6e7d034",
        "cursor": {
          "ref": "1b422aba-e7f4-43e4-97cc-1523e925694d",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d768889b-4820-4e56-adfd-4eb85c26e54c"
        },
        "item": {
          "id": "8270c945-0192-45e4-8e66-b461e6e7d034",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2fcbf212-b80e-451e-abfe-9b25851a56c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e985a3-a548-4bc3-add4-b80f40d99ab5",
        "cursor": {
          "ref": "8634d776-1be8-4532-b0d2-0ba27b53888b",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "071586dd-c458-4146-bacf-6a3cb17c6de4"
        },
        "item": {
          "id": "e9e985a3-a548-4bc3-add4-b80f40d99ab5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ce83d29f-d6ec-4cf0-9fb1-87a13d3474f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cce7cba-7eb9-4dce-a70c-e80d3da608f0",
        "cursor": {
          "ref": "dde8569e-35f6-417b-b72c-b3a2fb662fb0",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d404515b-bdd4-4247-9ac4-003318e52710"
        },
        "item": {
          "id": "9cce7cba-7eb9-4dce-a70c-e80d3da608f0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "63539305-a42e-4c07-acc8-1b40e53e14b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b75a0ca-7dd0-4bef-a0a8-84485f10411b",
        "cursor": {
          "ref": "206df6a6-4ad9-4fdd-a57c-cea2077ec87f",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7c7ac0da-e518-499b-8368-ccedbfd75b36"
        },
        "item": {
          "id": "2b75a0ca-7dd0-4bef-a0a8-84485f10411b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "62fdb5a0-b8c7-435c-ae2e-77f5dd15b160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f683d8ec-1f79-4ae6-bb15-b952a7191c67",
        "cursor": {
          "ref": "b3bc4690-03f1-4fdb-8fe7-9db43a45eecd",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5946ed3c-82a7-4ffb-8d02-3d8e2698d0d3"
        },
        "item": {
          "id": "f683d8ec-1f79-4ae6-bb15-b952a7191c67",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4e441c62-11b8-403c-b6c3-4629bb339d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb888d6a-84a2-4a64-881e-bf38990ff81c",
        "cursor": {
          "ref": "715e406b-b644-4246-b35c-8f3d41849b80",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9cdd6aa0-f5bd-484b-bfa3-0530476243b5"
        },
        "item": {
          "id": "fb888d6a-84a2-4a64-881e-bf38990ff81c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "91c9a7d8-1626-47a0-b256-4e4429d957ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2173d31a-5c70-4fb3-b118-02ea4f8c6ada",
        "cursor": {
          "ref": "44338f0c-1a91-4190-bce6-18a67caf32f1",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1a0c33d8-63bb-4716-9733-0820ddc3559c"
        },
        "item": {
          "id": "2173d31a-5c70-4fb3-b118-02ea4f8c6ada",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ed5eb3ac-e17d-4839-884f-0c9a1f2b7854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1f5ae5-50cf-4c4b-9373-af5e8a09f125",
        "cursor": {
          "ref": "3d163b10-2f3e-44ac-8e9f-4f168a930908",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9b5db1ca-09cb-4ce3-867d-988010ff2806"
        },
        "item": {
          "id": "6f1f5ae5-50cf-4c4b-9373-af5e8a09f125",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5b804bb3-dafa-46b8-80a2-e40e7d20dee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12551fd6-fe77-4d75-a70c-f95e07834f43",
        "cursor": {
          "ref": "6e9f60e4-9ce1-483e-aea6-4220b7cdc932",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6faad0fe-121a-410c-bf6b-1aa1f9c9f68e"
        },
        "item": {
          "id": "12551fd6-fe77-4d75-a70c-f95e07834f43",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bb903e9f-23b7-4570-a029-e0e7eb02ad1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779243f0-ebd7-4f44-841b-a82fdcb2a217",
        "cursor": {
          "ref": "188e1fb1-3b1e-4006-bfca-da8dd742d155",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d3b0fd76-27f1-4288-8896-6fa0cb3a7815"
        },
        "item": {
          "id": "779243f0-ebd7-4f44-841b-a82fdcb2a217",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6b2ad81b-56d5-47db-bfd3-a3b53243aac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce74fd7c-297a-45a1-80d5-52995cd937c5",
        "cursor": {
          "ref": "170ad9be-f117-4f84-886a-633d53920513",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "224d37d0-2598-45ed-9e81-71c51602bda9"
        },
        "item": {
          "id": "ce74fd7c-297a-45a1-80d5-52995cd937c5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7101761f-d620-4d78-8076-6db9495e1e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc403299-3cb1-4524-9008-a908faa7f6b3",
        "cursor": {
          "ref": "f0688ba4-70b3-4972-acab-4970818fd8f7",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "29d4ce67-5b0a-4f89-937a-06202f8c770f"
        },
        "item": {
          "id": "bc403299-3cb1-4524-9008-a908faa7f6b3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "423e6c4a-96c6-4ee1-8fe6-586e38b4cce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec121719-07fc-4158-8c76-1c96d648524e",
        "cursor": {
          "ref": "291c7c00-62fb-40ca-929f-ee1d54a8cc0e",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "27c6dd89-8e2e-499a-8df7-ce048145654a"
        },
        "item": {
          "id": "ec121719-07fc-4158-8c76-1c96d648524e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e4d25132-ae0c-4125-98cc-a466b5d6932f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85941473-a01b-4772-8ab2-be1c96faefc7",
        "cursor": {
          "ref": "491fbb6b-374f-462a-b18a-2db71a07ef7c",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "db03d9f3-46ad-4719-ba0e-9d04eafd17c4"
        },
        "item": {
          "id": "85941473-a01b-4772-8ab2-be1c96faefc7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f6775740-9985-4c4f-b892-1be456889435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fae38de-7622-4d43-9959-d9ee70dbff46",
        "cursor": {
          "ref": "4bbaf00f-d818-4881-a1bb-6ff3d884e96f",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "09e07c9d-b7eb-491d-a43e-36929377de5d"
        },
        "item": {
          "id": "8fae38de-7622-4d43-9959-d9ee70dbff46",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "883cd16d-360c-4a53-b487-a86331964d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf58ef8-d70b-4b35-bba4-39bc1b926886",
        "cursor": {
          "ref": "6d28b904-622e-4961-94d7-6d44b860ac46",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "759539f4-7ca2-4c24-b9df-5e8f3ce925d4"
        },
        "item": {
          "id": "8bf58ef8-d70b-4b35-bba4-39bc1b926886",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d5a86f82-ab40-4b7e-923d-e417195904f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfca0dc-a7d4-41f0-924a-3c50fcb4531e",
        "cursor": {
          "ref": "536ec175-3399-415f-b4b1-0eade0a4d35c",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dd3a93f1-bd0b-4ef0-a3f8-5a584fa4d5c5"
        },
        "item": {
          "id": "6dfca0dc-a7d4-41f0-924a-3c50fcb4531e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f3904418-5e1a-4d8f-ab50-fb541d1ebe53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7344eee-16cf-4d59-a766-838ad2527443",
        "cursor": {
          "ref": "f75e2a9a-3084-46cb-9b9a-f5ad2b5b83f6",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "292b9cca-e77c-4ea1-bc1a-a5301ee5d78c"
        },
        "item": {
          "id": "d7344eee-16cf-4d59-a766-838ad2527443",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d7797da0-e4d8-4a86-b302-894a230d639c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfa07e9-29e8-438a-90ee-815cb8f001ca",
        "cursor": {
          "ref": "27e5075d-2500-42c8-8224-d6000aca3cab",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "08f2dd62-abbf-4448-b1be-268e171a7bfc"
        },
        "item": {
          "id": "2cfa07e9-29e8-438a-90ee-815cb8f001ca",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9acb13cc-01a6-4f75-8098-740a4ecabe51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8380ae-cd79-4630-ba04-2c9020e40535",
        "cursor": {
          "ref": "deb376b4-386d-4382-891b-81f027d59486",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2085ab5e-0120-412a-a32a-65d903e9428e"
        },
        "item": {
          "id": "7b8380ae-cd79-4630-ba04-2c9020e40535",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cc1abe95-2a18-454c-99ae-e107eddde6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fb3c05-1f1d-44ef-9d72-45b1f1cf02f1",
        "cursor": {
          "ref": "33aed300-928c-43a6-a3b7-40fdcb2a6fc8",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "69ad424a-88d4-49db-932c-0b94dc6e71c2"
        },
        "item": {
          "id": "60fb3c05-1f1d-44ef-9d72-45b1f1cf02f1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1f87c2db-de60-45ea-9730-049b8eda9382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d0b7ec-0361-4c8c-892d-755657b52ee8",
        "cursor": {
          "ref": "2202d61a-ec0b-4c66-929f-f1a6057e84dd",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "380ba706-d91b-4044-b55f-9cf6ed1dc380"
        },
        "item": {
          "id": "b3d0b7ec-0361-4c8c-892d-755657b52ee8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "89997aa9-785e-4bf1-95dd-1303d22d2608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2896428-3f4e-41bb-b0d6-2317308b4305",
        "cursor": {
          "ref": "c1f2420a-c47a-4c56-b1d9-69911f0c903b",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8ed00d25-c366-470a-8cb9-2278f9a68b0b"
        },
        "item": {
          "id": "e2896428-3f4e-41bb-b0d6-2317308b4305",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9fe8bb16-7200-4623-b9ae-3cfe6e84652a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5e6a9f-d4a2-4565-9833-06ecb1c11b6b",
        "cursor": {
          "ref": "4e3bdb7a-06fc-4217-a4db-132ba3985d06",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c53c4181-dfde-4bde-be81-0eef5597a7ee"
        },
        "item": {
          "id": "2f5e6a9f-d4a2-4565-9833-06ecb1c11b6b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7efd7d9b-f1a9-403d-9ba7-428e12e4c4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7f5b42-9072-47dd-802f-b494b0cd2a37",
        "cursor": {
          "ref": "3a504f28-691f-4464-b61e-c8095541cb27",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "78780c47-d343-4c47-8d83-6bc9a68684e1"
        },
        "item": {
          "id": "dd7f5b42-9072-47dd-802f-b494b0cd2a37",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ce13b9a5-f1c2-43ca-bc6f-92f1847084bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed53916-a35e-4167-a6e8-613fb19571f7",
        "cursor": {
          "ref": "36fb7f05-2c7e-45df-ad22-957acb90e517",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "25918988-9e06-4ad6-a6b2-ac685f1ccaaa"
        },
        "item": {
          "id": "aed53916-a35e-4167-a6e8-613fb19571f7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "512c91cb-e0ec-4e42-bd64-940d6679913d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62ce4f0-9037-474e-8a0e-f262933130f1",
        "cursor": {
          "ref": "e0042928-3670-4158-8cc7-6ffd0303ea36",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ebc53f78-6f06-4896-8120-cc8d79d42ae9"
        },
        "item": {
          "id": "b62ce4f0-9037-474e-8a0e-f262933130f1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7fab7ca3-9d81-4844-a4f5-09cfd40aa7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c020889-bd1e-4882-ac93-75907bf9cff2",
        "cursor": {
          "ref": "abb30b7f-4b49-447a-a85f-67e659959db7",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7982dd56-f4df-4728-b4fc-e118f791cbb2"
        },
        "item": {
          "id": "6c020889-bd1e-4882-ac93-75907bf9cff2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "45b136de-9d3d-447d-aa8b-547183899c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7c1bf7-0924-478c-afde-a58f397b071e",
        "cursor": {
          "ref": "b49ba09b-4bff-4021-aef6-e79713468086",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4cbf6e55-5947-4756-9586-83b58b1171b5"
        },
        "item": {
          "id": "ce7c1bf7-0924-478c-afde-a58f397b071e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b3be5d4e-5943-4017-8e08-be2c0e2dff69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5569924f-f526-405e-87bb-c9e0357fd810",
        "cursor": {
          "ref": "1ee8a46a-29b6-4a9b-b63f-b7f1197dfa1f",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8089fcff-16e5-4231-a682-9ba56f09aebf"
        },
        "item": {
          "id": "5569924f-f526-405e-87bb-c9e0357fd810",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9c13aa44-8cdb-4f49-80c9-62cda30a161a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfac91e9-87d6-4ad1-a169-2e18906d205f",
        "cursor": {
          "ref": "f5082abc-c2c1-4a31-9342-11fa73e2d272",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4ac44f52-fb09-4a08-9328-b9a669ca145f"
        },
        "item": {
          "id": "cfac91e9-87d6-4ad1-a169-2e18906d205f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "304ec984-c58f-4d54-ab7a-e4d9b8ae4694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e353816-4939-442f-bf43-71bde15d6a95",
        "cursor": {
          "ref": "1818d718-656c-4bcc-8492-26bce5f39193",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7c233e70-ecc2-4b7e-8be5-cd48e38814cc"
        },
        "item": {
          "id": "8e353816-4939-442f-bf43-71bde15d6a95",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ad723a33-eeb6-4ef8-83ef-58ea499d6402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6116cc0-98b9-4b9e-95ec-e4247fb0801b",
        "cursor": {
          "ref": "1e5cb9be-46e8-4b5d-8b40-6c769a148917",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3629c72d-494b-48b2-855d-22c5353bc3e3"
        },
        "item": {
          "id": "a6116cc0-98b9-4b9e-95ec-e4247fb0801b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "53314d06-737f-46f4-ae2a-c9d792e220d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a3938f-9321-472b-9972-5b359bb55f4e",
        "cursor": {
          "ref": "0ff8cb28-1425-4893-a610-5ce23d763a87",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8a688a7e-c6be-4a33-8444-8d64fcf7c5b4"
        },
        "item": {
          "id": "28a3938f-9321-472b-9972-5b359bb55f4e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7fd1891d-0136-4875-80e5-e7af674331bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8bf820-62f1-47dc-bde6-615f49fcf872",
        "cursor": {
          "ref": "5a46e5a8-341c-4e83-81ed-29df189bbede",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6967d18a-0c4a-44c1-8190-e26b636488c1"
        },
        "item": {
          "id": "de8bf820-62f1-47dc-bde6-615f49fcf872",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "daab43b3-dc1d-4318-8bf9-670ce49e6acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319b157d-8056-4891-8bd9-16e7f7cec2bd",
        "cursor": {
          "ref": "62cbe219-1e4b-4fc8-8a4b-b3f9bfd2a47d",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4c285c04-2b53-41b2-ab6b-0a4bf432c768"
        },
        "item": {
          "id": "319b157d-8056-4891-8bd9-16e7f7cec2bd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8c57c5fd-28b7-4ee1-823d-4be9e99a0a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70d4400-72af-4c83-9177-60e624b3ec29",
        "cursor": {
          "ref": "5c572464-051e-46d5-8714-bb162cd3ea58",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5f26ad9e-47ff-4937-aedd-18f613e8bf83"
        },
        "item": {
          "id": "b70d4400-72af-4c83-9177-60e624b3ec29",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e2749d9a-6a83-4070-9cf4-2fc09be9c8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0495247-e3ce-41e9-b831-d9da767c1681",
        "cursor": {
          "ref": "d499c10d-9bf8-4e7e-853e-ed1fb94ec908",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d6206eae-c1b7-4cc7-9f3b-9a44b3475802"
        },
        "item": {
          "id": "a0495247-e3ce-41e9-b831-d9da767c1681",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c229d2cc-1b05-47ad-86cf-7fda1f686e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0933fa9f-20d9-4765-8cbe-6ab776f53be7",
        "cursor": {
          "ref": "1d5f5e39-360c-4e96-994f-13f5e27107e4",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4c89bb6f-c830-47a7-a4ea-2a96b445b034"
        },
        "item": {
          "id": "0933fa9f-20d9-4765-8cbe-6ab776f53be7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "67c0cb64-21e7-4aa0-a60e-9bc719442d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360c2f16-5397-48a9-959e-e4c186c2ef02",
        "cursor": {
          "ref": "f8d18d25-ed7e-4ebe-b505-be7b214c35a8",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "691e6960-bd86-4f14-80e0-b952848b7880"
        },
        "item": {
          "id": "360c2f16-5397-48a9-959e-e4c186c2ef02",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b5c94c43-dd8a-43de-833f-6e0b04832130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7273c2-ffae-4aef-9550-d264af66a7ac",
        "cursor": {
          "ref": "1b929467-46ee-4043-89af-52c01ddce3f8",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fec7ce8f-f090-40bd-b375-8384d75588cf"
        },
        "item": {
          "id": "7f7273c2-ffae-4aef-9550-d264af66a7ac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "66867bcb-22a5-4889-924b-5f8dc30bf921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e617abb0-1330-4779-bf02-d505752a4a28",
        "cursor": {
          "ref": "b295679e-cc4c-42ee-b1f0-bd17b4b47b56",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fa943eb3-e542-49bc-9e96-d504b3bbe114"
        },
        "item": {
          "id": "e617abb0-1330-4779-bf02-d505752a4a28",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d088531a-9244-403a-87d7-c57f7a4ebbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13c6a7c-0069-475e-8d28-5b4a6f047c9f",
        "cursor": {
          "ref": "cb7f3d78-6846-4b34-80e5-b7bef51fbb5a",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c22693da-635c-4350-93f1-4fbfd266e1e6"
        },
        "item": {
          "id": "c13c6a7c-0069-475e-8d28-5b4a6f047c9f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a024344f-6bba-45aa-bb3c-ef3cbe71bb10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6550726f-9e08-41f0-8836-8165a05375b1",
        "cursor": {
          "ref": "84683040-737d-4640-8595-6e0efb01d2eb",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "532138d6-34d2-48c9-bb0b-77d66cffda55"
        },
        "item": {
          "id": "6550726f-9e08-41f0-8836-8165a05375b1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "918fc03b-51f8-4f31-ae51-e69ef0a6b3c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67947b8-4243-4c31-a1c6-8058dfc35035",
        "cursor": {
          "ref": "e794c8ec-6595-43e7-8420-962afdec1ed9",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8557a72b-8ece-4616-b2c3-f3c2a8a37bbe"
        },
        "item": {
          "id": "d67947b8-4243-4c31-a1c6-8058dfc35035",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e731004e-1fd5-4729-a5cd-d9c4e6447bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3927e80-e775-4f6a-aff3-c4fdef9faf59",
        "cursor": {
          "ref": "90a3dcbe-b054-4284-8873-ce2b3810ff0b",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "efd469ec-663e-41ac-b872-c16ce2eeb233"
        },
        "item": {
          "id": "c3927e80-e775-4f6a-aff3-c4fdef9faf59",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "551ccc4c-4978-411b-9c39-74db695a13b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc31d876-96c3-402d-87b2-08e9b1a50284",
        "cursor": {
          "ref": "dc387240-467b-4065-85a4-ab9e2a6ec344",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "850d3843-d1c7-46f1-ac49-0e1c8decff2f"
        },
        "item": {
          "id": "bc31d876-96c3-402d-87b2-08e9b1a50284",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "abe01582-3a4c-4e0d-aba3-6fe8daca7a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55f5865-c6de-4b60-a2c0-7153b4d96853",
        "cursor": {
          "ref": "44874a98-e447-45d5-a073-c78861558cb4",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "07d454c2-d1e5-46c4-82c0-f7afb05b1c7e"
        },
        "item": {
          "id": "f55f5865-c6de-4b60-a2c0-7153b4d96853",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "53d728b3-fdab-4851-93b2-e2edc2f93f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fbf045-036a-4dfe-b558-4ba5901534ff",
        "cursor": {
          "ref": "c0555fb7-d937-475e-8c76-3c92be28c51f",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "cf94844d-3b02-42b0-9bcf-2d08ac5df3ad"
        },
        "item": {
          "id": "89fbf045-036a-4dfe-b558-4ba5901534ff",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8f2f7024-dc9b-4158-8685-f63e90290305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5122d336-d85f-45b2-8196-96334a7a34d4",
        "cursor": {
          "ref": "ebe3b1dd-b1d9-4b6c-a4b8-c55809fbbc3d",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "55d237c5-0910-479f-8931-330d9b20b9a1"
        },
        "item": {
          "id": "5122d336-d85f-45b2-8196-96334a7a34d4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ea8f73e2-7a6a-40a0-94f8-f81d49bd9d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48103774-7602-4af4-961d-83559eb65727",
        "cursor": {
          "ref": "29df99ee-2d27-4e7e-bfaf-31dc8ab39ee5",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8b0304b3-0f76-463e-ba9b-a51c145a7e23"
        },
        "item": {
          "id": "48103774-7602-4af4-961d-83559eb65727",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b019d2f2-e19d-43f0-86c9-1e81d6cedac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464fb03b-5d3d-4106-955f-e199ebd570a2",
        "cursor": {
          "ref": "f24923b2-001b-4f9c-a76c-bd3a8f763cec",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0a65f7d5-343d-4b19-9850-19ebd52b911c"
        },
        "item": {
          "id": "464fb03b-5d3d-4106-955f-e199ebd570a2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a85a4ca3-69c3-4023-ad19-94ca66e95313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752d1901-9015-4af3-8957-96c52511da51",
        "cursor": {
          "ref": "dfac002b-8bdf-48b5-87d1-65d253a3c69c",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "197c42f2-e2e9-49d6-9f80-80b84683c11a"
        },
        "item": {
          "id": "752d1901-9015-4af3-8957-96c52511da51",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "55226987-6005-4738-990a-ec81b2e43b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4eff810-21ea-4a62-9ea0-e1917e87b236",
        "cursor": {
          "ref": "90579e03-d678-42f4-93d4-059b9eacc0f2",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3ca576b8-c26a-41f3-9e4c-71de61dadd3b"
        },
        "item": {
          "id": "a4eff810-21ea-4a62-9ea0-e1917e87b236",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3856afb0-dc61-4e39-af3b-7309a4e931c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ba7257-b859-4b7e-817d-d8edf1bd6bc9",
        "cursor": {
          "ref": "5c5ed14e-7279-4062-9198-5321cb7c373c",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1918d805-734f-4011-a7bc-1523806540f2"
        },
        "item": {
          "id": "f8ba7257-b859-4b7e-817d-d8edf1bd6bc9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "95d91c2d-f804-476e-bdf4-fce8841be484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8988adfb-9885-4599-8255-0894358480c0",
        "cursor": {
          "ref": "2b62f62f-6cbd-4c33-92f3-7973c605c971",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c1cf7643-7845-43d6-a95f-8dcc10e7e683"
        },
        "item": {
          "id": "8988adfb-9885-4599-8255-0894358480c0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "13f6c092-5a7a-44e3-babb-fd501845db04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4475345-e471-4854-8c74-4cb361790b99",
        "cursor": {
          "ref": "c054c189-e0e0-474b-b0ef-206872c4daa3",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "700a148f-1374-46a1-997e-6b883bbb5312"
        },
        "item": {
          "id": "e4475345-e471-4854-8c74-4cb361790b99",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b9fb3e7e-a647-49c5-b5ec-dbb0745a0c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f7fde7-449e-4192-a1ef-77a8fcb9cbec",
        "cursor": {
          "ref": "f9df17cc-c4e1-47c4-9e0f-ab171f4f2069",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4f949ca3-50e5-4b14-90bb-203ebae3feb9"
        },
        "item": {
          "id": "06f7fde7-449e-4192-a1ef-77a8fcb9cbec",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3156ac7f-1bfe-47df-945e-f65cd25e74a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c051ad7d-2b9a-4b58-9fcb-41527918565b",
        "cursor": {
          "ref": "de3d1994-5999-4182-9bd8-c36a89235d80",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3e2e74ba-7ecd-40bd-9199-77dad6ad070b"
        },
        "item": {
          "id": "c051ad7d-2b9a-4b58-9fcb-41527918565b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "36676cff-ac97-427e-ba5f-5dab319cb688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab4bf3f-9783-4da4-a718-5e16a7e1b590",
        "cursor": {
          "ref": "237bbd8d-bcc1-4011-a840-8df01800b87e",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c9680fbe-5eee-44a1-a083-4360f38ec64a"
        },
        "item": {
          "id": "6ab4bf3f-9783-4da4-a718-5e16a7e1b590",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "42b52531-28d6-4fe7-b424-6c6713762594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cfca8d-6f52-468f-9129-7b0415df2f18",
        "cursor": {
          "ref": "ec19297d-2d7e-47da-a6b4-74cefeec26f7",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e97c1233-6b8c-4e36-8b6b-2e126168d8e8"
        },
        "item": {
          "id": "c7cfca8d-6f52-468f-9129-7b0415df2f18",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fda21931-64f5-424d-8c34-567dbe9bb0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df06cbd-6b19-4698-a5d9-901be8032539",
        "cursor": {
          "ref": "43b671a1-7688-48d4-931f-ab82a80b9469",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "bbe1a2bf-3252-4623-8452-c64934e74c7c"
        },
        "item": {
          "id": "7df06cbd-6b19-4698-a5d9-901be8032539",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0a76edf9-1e1e-495b-bef1-14c472b34677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b563052-8765-406d-8e86-5378ae4d9a42",
        "cursor": {
          "ref": "8b56e72e-b0b2-402a-b10b-2faf668e90cd",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1b3e94f3-ddda-4898-9bfd-594d305468b3"
        },
        "item": {
          "id": "9b563052-8765-406d-8e86-5378ae4d9a42",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cf71e8db-d869-4f3d-b1e9-a3fe17c09304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8253d2-f360-485f-b826-8190c4ce4666",
        "cursor": {
          "ref": "3de8aa62-a0e3-430f-a7f7-3b79b3d07aa4",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "dc35258e-1fe7-476b-8b92-42726fa723df"
        },
        "item": {
          "id": "7c8253d2-f360-485f-b826-8190c4ce4666",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a017a417-b8b3-4a32-a5bf-5c1196a23a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aab6d40-8b64-4ce8-bb52-5948371ea6eb",
        "cursor": {
          "ref": "574aa69d-c598-4a47-ba89-bb3145ecc868",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2f40051b-4eff-4e57-9127-5d556633845b"
        },
        "item": {
          "id": "8aab6d40-8b64-4ce8-bb52-5948371ea6eb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f093976a-1000-4099-a877-4841d3eb9752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba28949-afee-4208-8dbd-bad4246cc2b4",
        "cursor": {
          "ref": "1be727f5-035a-4ce5-8a89-600c46f599aa",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5fed084d-27cc-4374-8e72-b5046bf67259"
        },
        "item": {
          "id": "0ba28949-afee-4208-8dbd-bad4246cc2b4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7af354fb-d7d6-4f3f-9bdd-b55db52d4415",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "7dbaba66-7169-442f-8a7e-24239ea0ca13",
        "cursor": {
          "ref": "e12d2600-be56-47ce-bd24-d95a9ba6e793",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9c8596e8-86a4-4558-a34e-23d142e1933a"
        },
        "item": {
          "id": "7dbaba66-7169-442f-8a7e-24239ea0ca13",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3d41335f-f21c-4582-b909-1c434ed50eab",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afadeb4-5456-474d-82a0-e4a43322a85b",
        "cursor": {
          "ref": "5ecc6967-6749-4ec1-8518-b5a1fc836eca",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "76e1160a-a6a1-4541-af0d-a990e1d7382e"
        },
        "item": {
          "id": "8afadeb4-5456-474d-82a0-e4a43322a85b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cff747df-aa51-4f6a-ac27-778954d83c90",
          "status": "OK",
          "code": 200,
          "responseTime": 2367,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5a9137-16f4-4dcb-ae65-bdedbd491728",
        "cursor": {
          "ref": "7d749ef6-1152-4a33-b50a-d1f207a12927",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b2c4a374-c4c3-4591-ae80-1c768034df3a"
        },
        "item": {
          "id": "0e5a9137-16f4-4dcb-ae65-bdedbd491728",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "39baf12b-f26d-4277-99e0-3125852c42e9",
          "status": "OK",
          "code": 200,
          "responseTime": 6509,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "56405721-8cc3-4e6a-b58e-185fc8b96216",
        "cursor": {
          "ref": "8dfc0ff2-2331-415b-b454-b0c47676231c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2a3978c6-7f30-48a2-a0b1-76bbf93c58b7"
        },
        "item": {
          "id": "56405721-8cc3-4e6a-b58e-185fc8b96216",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "179f584f-a89e-44a7-93c5-8bec27c0f922",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "56405721-8cc3-4e6a-b58e-185fc8b96216",
        "cursor": {
          "ref": "8dfc0ff2-2331-415b-b454-b0c47676231c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2a3978c6-7f30-48a2-a0b1-76bbf93c58b7"
        },
        "item": {
          "id": "56405721-8cc3-4e6a-b58e-185fc8b96216",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "179f584f-a89e-44a7-93c5-8bec27c0f922",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "d3c1ff4a-4435-496f-befa-ec5c3de51d0c",
        "cursor": {
          "ref": "87d41704-4aef-45e7-8122-bd07d01c3dfa",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "210db1f5-4ee9-41e2-a4f1-b0cc0cdaed23"
        },
        "item": {
          "id": "d3c1ff4a-4435-496f-befa-ec5c3de51d0c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1e6d32ba-4f8b-42c4-8c17-a07c9bfe2576",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "350ed7d2-575c-4ec9-ac47-a2751ecdc49a",
        "cursor": {
          "ref": "07b86964-8b69-4fe2-8c2f-211b82c0e052",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d48dcf38-70ca-475a-817a-eb67cbd950f3"
        },
        "item": {
          "id": "350ed7d2-575c-4ec9-ac47-a2751ecdc49a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "db66dae2-0898-48f4-8cbc-92a2735c1814",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}