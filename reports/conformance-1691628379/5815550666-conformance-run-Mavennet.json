{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fed57001-e2e2-4130-8c82-51bc189c06e1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f8ae05f6-a0a2-4939-b3ec-88df33fef23c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c70e4a58-7f13-414f-a22f-bea6d2e896ae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3419352f-c8ee-4ed2-befb-9ff50847b67f"
                }
              }
            ]
          },
          {
            "id": "5de207e6-5464-4995-bc35-ff7f6666734a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "446e880e-b6c0-4ada-bc87-9af62910ad24",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "751ae62d-aaeb-476e-87af-0a03e794d263"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cbbd255c-1650-48ff-a44a-48b4530d7fa9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3056393b-ae3e-48d2-b2b7-5c981e41af1f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "73bbf9b6-0dab-4406-b104-07259595ecae",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1da4ea4-67db-454d-88ad-8494ca074cb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb797ad4-6d4d-46f1-aa22-f29dddb25471"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "38676570-61b1-45fe-9787-cc1aa235bfca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8875bd3a-396e-44bd-b72c-602867e96f3d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "890ae1ba-cd0e-4412-becc-7cfbf693f729",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ffa12bff-a18f-4b95-99c7-2312556c59c0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fc2373d-3351-47a8-a67d-0dc5ca6663dc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "07fd532b-b834-4d06-9e46-f144dcc06267"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "254491dc-b021-4f68-a6c2-ab1ee06ef7b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e145e52-62df-4163-911a-9c4404045aea"
            }
          }
        ]
      },
      {
        "id": "a6e8b950-5be4-4b78-8e75-5e19066b541d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8b54f7c4-826a-4987-a192-00fd21280be7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a27024bf-f015-402d-836f-c40088e7ab1f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4916e0cf-191a-473e-8e39-d4fc86530a4c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9897ee3a-d39c-4169-af1b-3f19a571e7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ddff682-9c93-4a51-9601-4c427de188d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e33a98-b789-4ae9-bb52-4d1655a228f9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca09251-1dab-4e31-a71c-38f9ab2ec59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ad3de25-3e48-4dfe-89f2-1fcfe43c4324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba697a2-d807-419b-808e-4d42f49ac30c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718af231-7f4d-4b25-93b2-74eafb81184d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48aa3ce4-e325-445b-a501-549e4ca02c2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e28bf3fd-2f65-4d4a-910b-946264b7b86a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "242cc2ad-8b75-43f8-a4b8-31dff3deb2be",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb9cd2d-4e29-4748-b3ec-a09d79793def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a10fc780-6bed-43e1-9542-91b5b1c2baf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b379e4-a7ea-4cb2-8e55-f46aaa6d8a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12cdc7f-63fc-4370-84cc-855e3b283f0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "15f32012-e5e4-4547-9404-055cc136d203",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dbe345bb-6992-4937-b76b-95fa27c40da8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8cd8965-239e-4e85-985a-dccff433c75b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "47b99a3b-c630-4586-9595-04fc51366f77"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd8be284-3d22-4a86-bbb9-7babd5ccfa72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2cbcf9d3-bdd8-43d4-ae3b-6377487d1597"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bf5eb69-372b-4b6a-a930-4dfcad45e91b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a831d99-de05-4470-add9-a2c596c72288"
            }
          }
        ]
      },
      {
        "id": "7653cc0b-bf2b-48f0-95a6-f85c2a034a5f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ea3e1e78-bdab-4cf8-9aa3-f985cee6b920",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0e6a6d6-d970-420b-9841-c144a4db4cb0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bf458b65-c00f-4a78-8cfb-b95d20fd6cac",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1213bb4-91d7-462a-903d-f80d456974ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7659c65-06fd-4e7e-8b1c-b360bbbf0041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6f6bec-81d5-489d-903f-a2e8d16328a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33a57c5d-f13e-4c72-a70b-98c735373568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcbde42-511c-4f0f-91fa-82e651302caf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52cbf26-38e8-4055-b1a9-f041bc679a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68dd3473-46e0-4139-93d8-a43aa322a3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f645b45-2a71-408b-8797-6b5db2b6d2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5fcb86f-e777-4498-8dd4-36700765cf48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789b4eb3-600f-4a3b-9557-6f5e4ee6d13d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2806524c-0091-4914-8f1f-920aa0235a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb12f7e6-4b42-4005-9f60-a2cae96bdee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4831a2-fef4-46b7-92ab-d660c9f73ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bf98066-29ca-4306-b487-eeca3261052a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975a9a8c-4f97-4455-9b22-34d8e85ed08d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54384c6-18ab-453d-9df2-c94d5a418c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad02dbb-7a75-4b2e-aaa8-379392a36c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cd79a8-f9d8-455c-b677-8a9df2f5f577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "587bd5dd-a57a-43ba-9ab2-859add9322cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628b1283-8055-44c5-923e-0610358d4ccf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7dac2b-4dc9-4861-ab4b-8b3b38b54b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eeec2ee-5a5e-4a6d-80a7-fba1c4f99445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bbe528-b470-4aaf-be1f-a837b62332cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72483800-2b62-4116-815c-afbf292ced4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc229d0-23f1-4647-be8c-ca305fa68475",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c50ca97-2f7c-49a8-99b0-47d1b80376c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb43237-8b87-4adf-b2ec-13b256fb981d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f6d20c-aee9-4e9e-9cb9-1e9b95e5e72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23cbbcb5-3b9e-4453-ab7e-79aaa7909a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69205213-70e9-49c6-a8cd-c2d715a581a1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fb1e8f-2fd5-4d8c-90c0-d2afffa156fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac33ddb8-5e65-45ee-91fc-9f922ad3fae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceec80db-8803-4955-bbe1-0fcfc01faebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3605a298-5fa2-478c-a250-d75a941a4a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb933355-5e08-4a7f-9460-d7f16c42bc9f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b773d0e2-f488-4143-86e5-51e6b0b97771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429a921b-9bc9-4f75-8999-5f541ec39bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5ea4d9-9f8f-4395-acfb-b1e0a51c9a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97f21528-1d04-4ab0-9737-aa1fd74663da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21be4f8-25e2-4434-bb8e-a8b293dce051",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0ba6a6-50de-44f0-978b-a50dd38212f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66db32a0-2edd-4423-b6be-7840cde8912b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fc8e40-bae7-4642-95da-b5695f587dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca91d1e4-1f61-4f95-be9f-584becd52702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549e18e1-7847-433b-9c93-ded318f6e966",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb294523-73f5-43c5-b25b-7bed99b3f0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f133ff-6c9a-485c-8db4-2418524040de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa5b416-ddb7-4700-b292-36b95547fec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "473d0c9a-302b-4473-8876-1711c8ecdb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f10ee13-e2b2-4287-8b83-631e412fa7d4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c404b01-9627-4f08-8f62-e21cc4dd4aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d62d43-fad3-44aa-aa09-1683b2852a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c180c1db-35db-4810-b7f0-bd707de7b52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "496d8100-e48a-4960-a1ee-ac4ade2d7570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec648544-0280-41b2-82be-dbbf9d49d6ed",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0eeaffb-abcb-46cd-b124-d3b2bbb6b9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27fe003-5d13-41a3-91f8-2388de431a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b14de73-37d1-4c58-89eb-429d133647ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b93c4043-b0c2-4202-afd7-456bb466408e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97dab08e-8bf3-459d-93b6-75c064c815db",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8033a10-d78e-4cef-bee3-f4431d9b74fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827e8e52-f0af-49a2-866e-68d19b1cbd5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b98b76-2a35-4769-90e3-1634973316c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1684044-c16c-4e25-96aa-4d6690b4d141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec031ff-3093-4a72-969b-057071515951",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578d9e89-1784-4dfe-8fda-fb7a7c5cb91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0743d888-7076-4760-813a-9ee0b76fd24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f581bf3-d7b2-4dbe-99d7-c674cee0c854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee28ff28-55f8-446a-a211-aeb83c8c11f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15012e2b-25bd-439e-bc9e-bda929659fb0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e3b065-e968-4aa4-898f-5deec3496ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee248b72-e007-429c-a52b-e3353b34d684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ad2fc9-9fa5-465f-936a-9327bc478fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e703341a-0846-4a72-b2b1-b008df505490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827dcbf2-53d2-4ba5-94d8-3950678653d3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43effdfa-1b4e-464c-be38-bd10abfd6ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5f5c9b-d021-4444-b6fc-179e6702f8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85da273-11bb-4f2d-9ce2-7650eadb023e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c68be50d-8dd4-4e1d-b39c-c577f4f3acfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3317e10c-2297-4c24-831d-7e7f487b520d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238b9836-542e-4ea3-8569-0ae34d33afa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e112c3-b862-4635-912a-a39b2daed1de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bedd3e-2b9f-46b4-a055-784d5132564d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0d89d70-09b3-42de-8bd6-b525548e9995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5da7593-fb50-4cde-8510-112da842ea72",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de313aeb-bfde-4103-9425-0cbdc0693910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dfeca66-8b47-49f5-a5c9-46436ee5c5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df75424-8b43-4200-aa0c-0412149f503a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe25fa5d-05e4-44ee-a041-025e7bc6241f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c7db3e-d61b-473d-9a2e-2322aa425499",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4d69ec-0493-4be0-8f1b-ca610f9bed17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "432263f8-9d56-4e2a-8f33-67896905af9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7f5398-258f-4886-b098-c0dae2440cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad32764e-74b3-4c39-b721-639f88d67096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ce5ac8-cf49-4675-9417-d1cfecf94307",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2a31ce-b7ac-430f-82bd-a647a8d79ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218cdf15-8613-44b9-8924-6e717bee5a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787bd62b-956b-4949-83fb-140a8f457181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb891ba-a67e-45ff-b002-51ddd6d3749f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831c0e46-0699-4fe1-b7f6-a9677c2901c5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7007b917-05d9-4a33-a961-1253b2d1e809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d0d966-4898-4781-9e5f-9ce1221ea4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241588f6-1a42-477f-8e4c-991b96890dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84a8bb3c-b365-4081-a0ed-1fb11fbb3b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb9e4b4-56d2-46c6-b10c-a48942c5c2b0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed14d54-721e-406e-afbe-40caeeb4ea48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "970415e1-d672-401c-91a5-60835e1a0507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca14131a-c540-4481-9f1e-cf1f0de9c610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d88133-e2ec-4332-a698-fcad6c7e1479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0380909a-6e2f-4928-9b4b-a93dba3074e4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d56103-9293-4782-a8f6-ece61422fc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35eda62-abbf-4dc0-a0df-b34869113e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5d9c95-040c-4ac6-9f8b-6b99fec0feea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9eacc0ec-a852-46ff-a7ca-df212df871b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32646de-bbbd-4dd3-8b6d-22e19162cd9e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c48c9ad-fbd0-46dd-85f7-593b0df0db3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0093843-e268-44dc-ad20-6128d5ade12b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea29ee7-1ed5-4d5c-8383-c82fd1b8604c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9a93d7-2b97-469b-873a-d226c0e04813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90755c04-95dc-4f30-b6ee-fc89a1e34def",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c24a9c-5c22-472f-85d6-20eca35c29ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f9731d-2093-4377-837c-99c620fd3d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181e2643-7b56-45cf-b6bb-66b6a15219ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74b2a73a-2891-49a6-981f-7fe2e1d967b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8748d31-109c-44fd-b9a8-03df6ac778ec",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb57431b-2eef-4e2b-a2e4-e9ce5e5d8932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf074a75-b30c-49d7-af43-1865c295607a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1530a3-d446-47ce-b5eb-fb6d6d3009dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccec73c0-937f-4e3a-920a-2caeb6c0833c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278175ae-ceed-424f-aa54-e448cdd75a3e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e053ada7-0741-4919-bb21-e2bd4c225feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17676189-d226-47da-acaf-506c98a3914f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923e7ff0-f4d7-490f-9c4c-d924345acbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da79f14-af6e-43e7-844e-13d12de0c45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534b9bfd-5ef4-4979-96b2-c2bf64ef0ce9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc592ffb-a45a-4869-a717-bf0f079bccd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f283409d-e357-4a47-9562-55146212de32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81bf766-b943-459a-96a0-cc96d4fc6ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a935f84d-1183-4d1b-9713-3cdf6d96d8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3907a3d1-d5cb-429c-9047-dbfbed779e34",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80642a8c-2285-40ed-8446-84b28fc65843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79eacba-9734-4084-ae68-e2a935cac1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b25cfe-e8f9-43a7-ad5c-28d95f423da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da6de483-4c18-4d5f-8039-2af4b625e4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b724eb4f-8334-4bab-bce0-b5ee415cdc0f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3fe29a-6675-4087-8aa2-3e9913a08861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f665260b-18d4-4a86-a9c0-9d4affcf1657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709b775c-7048-4395-a42e-35846eac50ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3a8658-e850-4c9b-8b7e-3f227bbf442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d17a9ae-8f30-417e-8387-2ce686dfc345",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e7d77c-b52e-4b5a-8d78-3429741a1fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc52050-4f28-479a-b5e2-ca8ff61967ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241677a1-9616-4c8c-883e-9c7b9c43b5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f59e5635-608b-4dc8-91d5-2bfc222f1c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60fb2a9-5c2d-431b-9e3a-0bbf1f6827a9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca07ad22-7fff-488b-9c2e-8baaa471fe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77381c08-34f6-4e5f-aa56-1ccdb53c18ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae39d676-881e-4351-9843-55800c435a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6012eff0-a186-4d6d-afd0-709d593d8518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df92877-dea5-4d7a-a566-23588a0cf13d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41d4b8e-5f02-4c33-a6ba-04b2bb3f7a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93d3358-1d2e-4033-9189-2c68553a265d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622a8574-1aa1-4113-bdff-c13a91b083e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41be90a6-fc07-41b4-b6db-a9c4e618e0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab067feb-3f65-42fb-b7b9-b64fa3875ee0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3654e11b-135d-41a3-bdcf-c369aa4333fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d9c3b1-ddca-462b-850f-58963d086eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214541e3-d1ad-4420-9a11-fdac12ec9ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c2ecb6-3e9a-42c4-8bbe-ec4c41765bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e1c0d1-f88b-47d4-a063-44d273242c70",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84030e9-f0c7-4f51-a1fa-b21a3c452a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a504776-81e9-4275-81a4-2297df427960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f93958-bd6e-4109-890a-b4b674103002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a01280-4b27-4247-86c4-6ffd7dd25982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efe65a8-9b5c-4291-97d5-2b1c74490c93",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cff9bab-8467-4c56-96ec-d32b7bc32dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f48eea2-57b8-42ab-8185-b420884af94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1bc401-d0af-4d5c-9dfa-8fc40ae213be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26cae8d3-9ca6-4c62-bb29-30c3e3911860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6262f62c-6515-48e0-9710-194020f92721",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e5f96b-b579-4c39-9c46-90526e725026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69697034-9d22-4ed4-9212-08b579bdef38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828e8fa2-91cd-4e43-92b4-331104b8b627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "270b650a-ebc0-4c64-9e43-965b33e6d677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c4753e-3ca0-47b2-b11c-f5665bff93e5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46a035a-b163-41cb-95ab-c5858949ca29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948c5f6a-47f8-42c9-9a72-ae2bea6fe2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83e1b8e-8e1c-48a3-aafc-f77367525619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "64a6d697-69c4-45b1-82b2-3a3aab78cc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d81641c-3ec2-499e-9bc4-a3031bf59eae",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f923345-fbea-4567-b4c3-8d951f1b2fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b691183-b11a-44f9-8b85-35d60a55116f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a271e10f-eb30-42b1-a5b8-5148a4a6acae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0781fff-d314-404d-8b3f-b0e0983d6288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c82e5a5-263c-4037-b21b-309a7aa9c933",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e41662-1e4d-4ee6-8285-ba21cac68e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10deb9b-521b-4007-b799-2d576d991e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bf6df1-1887-4383-b718-20980db0da06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "837b994f-b626-45c3-b95a-d7f49a490924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead1f192-4eb5-46af-8af8-5b7aed9273ef",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a577855-de3d-4751-9fd7-7a7e30eef431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bc9115-4cae-47f8-8007-378c3eaa5bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2827175-c53b-4e2a-b3fb-c5ee51bdf668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d17baf33-0e35-4f94-b1bd-7d3e69c0eed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eee7c9b-3e3a-405d-b36e-683d9065c1bd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742724fa-5cb8-488c-9ec5-4847bb878707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d54feb6-a074-4f53-ab54-d2e7b3faa1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dddd1b-a3ff-4934-8b2e-9f646818dee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "355c7cbf-0216-427f-aa00-5426eae2a829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f3103e-b11e-4876-964f-eb5449b73543",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad56cc15-5189-4e10-a13d-7b27d28740ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ccee679-d17b-4f4c-a8bf-acb21e5abc51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6452e06-6d7b-438c-93fb-89653dca5723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "140cad6d-b180-44d2-b5d6-ac7e5ffb14a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006d4ee3-fedb-41e3-aab0-9cb3110667ee",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8208f7ea-2b08-448b-b7db-2ea07666ec5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1e64c8-f879-40e6-9a04-237273ac93c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223f446d-ca34-4850-bbd5-4f967ced3d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "25f838ec-91d6-4625-ad7f-2129286247a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55dc42c2-5c4b-4028-ae00-e3ed55a42ad5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41525ed8-fa51-496d-9e65-6cc6c56cba7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc513f6-9293-42ce-8d41-ae29d9ddd5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f6db99-64dc-49b4-be7f-5706ebee1be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af84ced7-60ef-4031-9d5f-898d2f7e2049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51f49b9-aaf4-4b1c-937f-0dbbb4f27afa",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a28c5ee-a5d3-4c41-8828-059ad5c1c5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee54241-b321-4aed-8d7e-2e95e628376c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4391aefc-e762-4022-be97-7ce27a08d109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f1d9248-93f3-4994-a490-80d48b9bda4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e428c4-0e0c-4e54-af03-03a8f0ecbc2b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37794770-3501-496e-993b-0468d4dab6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451e4432-77a8-4f67-a7f4-0889a8f2bcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d0eea9-401a-4a8a-8846-761b8ea1493f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17b75e3b-f438-4952-885d-47e9a179f86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97575675-7766-4a0d-8c23-5c5c6d7c20ed",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7194a02-af0b-4464-a75b-b797251bbd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37119a03-6d69-4cc3-86a3-a6a4f9a73d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ec7cb4-42a3-488d-a50e-91c3d0c733f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b9fdcb-4e24-405f-bf3c-e3f405bbab23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b229af07-dc13-44fd-b395-17e9d986da4f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bb0324-cba8-4dcc-99a0-5494a697d9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b37924e-814b-49fd-a5f4-fdfafccdffbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a902cc84-825d-479b-8901-62a63956e246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7acc82f6-b262-41c6-b824-83cf15bf9c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24bb87c-57ba-4a1f-ad52-4a036242abbd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eec67f1-c1bc-4473-b624-2d9892ab34d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9acf83fd-e8f3-49a6-964b-730093112ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22f34d8-8150-48fc-9019-107aeb46ae94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "349751b7-5f32-4b60-895f-979540b74f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964b2b8a-b3c1-47ee-97d4-8cb3cbcfb74c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e165a68-5f65-4d28-843c-29b9e000656d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49e4733-eeed-455a-be62-0c8a294f2e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fa1e3a-016d-4d29-b421-6761b43f52d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "944bac77-71c9-4f18-8b3a-a959fb00b5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b727c4f5-e9f8-4422-bf63-c1ca2c458f60",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b862c2-11ec-453c-8cbb-9591df373d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26e45df-6777-4689-8a3b-ee47dd38397f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519a0ccb-873f-4a34-b816-3154e25c73da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49082e10-d192-4947-a403-e0027189b9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afe9695-d080-4f2b-9442-35bd8968ee4a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b891d3be-ddf7-4a3f-9db4-857283e9508e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012c0c04-76f8-46e6-9cd8-97f3afc2c7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b55152-ded5-43d1-8baf-251d63b8048f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69491c84-f2dc-4b8c-8a69-951ecc686ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c20c1d-c67d-41dd-98f6-1c54a774de4e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2634562-5186-42ff-a6fd-09bf0d156811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bd57d6-6266-4913-8ff8-7477e49f2388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22099ab4-c461-4ba6-bb66-ec57833be7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2a1397-b36d-4a23-a6b9-fed6d496c589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfbef7b-38c8-4b37-9cb3-613ed7b841c8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee23ebed-8df8-4791-a685-e31cbdb085af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ac91ba-087e-4e65-b625-f7b035941eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75afc135-309d-4fbb-ba36-7044549760fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9c288f-9a78-47e2-9e84-bd30ab6321cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800025ee-5a6d-40ad-a85e-0538d0b95449",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7258c06-f9f7-4e30-8456-af38da29a57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34967715-1e09-4cd7-9b5b-d3d61c64ccf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c250e492-a46c-4679-8c4e-fd09f22494d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "23449a03-0880-4941-8033-4fa55912d078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54323d6d-f02b-420c-8f42-62928f408934",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b90eba0-c578-4d59-9fa9-2ebfa34cb09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ee2d6b-8ef9-425a-ba1e-5475170a763d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd416297-4fce-4289-ad2f-e7acfd45b308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eff999cf-befe-4e19-be61-005f9f9d2c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2992a22b-314b-413c-96be-61e722fd4a8c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb3f8b3-b979-4bdc-a9ab-f1b002c15e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b600ad1-d9c7-4b02-a193-a21f2c53fc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cdb8c8-b3d2-459c-b11e-8954a7b7d634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e523e4b-b9f8-4827-9db0-b9fcba0eeaba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713eb497-dcfc-4106-a70f-7971cf2e2215",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a987d717-7d99-413d-b88f-f85222fc7cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcdf982-2645-4a28-87c7-681b6874f825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6badad4a-b015-4cba-8c9c-0897183c8d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc290c0-487d-4b4f-8e48-c336100ccb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d505569a-5039-4670-b284-b4b916a7ac3f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42a9329-f8ce-425f-85f4-eed2aad27f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5eee5d-5dad-4d87-80f1-52d8d6e2c0ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92a3b0c-1471-47ac-bd9f-b8a64aadec8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb6a197-1443-453b-afff-413851b087f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d534e56-39dc-4edf-bfc2-45c90030d55e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a1c250-3c86-4233-8dd6-4f1c7dd4a80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18edcb91-8b7f-4782-99bb-b785f9109189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a5f542-7ed3-46ca-a6a2-249cfbd81aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f29215c-bc19-4d84-a645-c939717025c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a03139b-b835-474b-85ed-12263bff9119",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be1fc14-d6c7-47b2-af7b-367960447f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103f2b78-f088-4b64-b683-dfdadb979023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a94605c-0b76-440a-a5d8-e60224d65639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "533bfabc-8728-4e6f-a268-e30b256bd6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568948a6-19d7-4e3c-8fad-ad9489529594",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c36fcef-3541-4d28-ad3a-669bc2c99e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17fc3e34-f6e7-44dc-a0cd-23a25dfefbda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d138a64a-41af-49d1-a2e3-0a36b92f2732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6840e163-14a1-4ffc-b409-e1cf56fe3dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e8fbcc-98ec-46a8-a02d-1297f48246f2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534ff9fb-632d-4ee5-9ee0-e2cea7853082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01531059-755c-4840-8faa-59d70e33d252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7811cd3e-fb9a-456e-b55b-0dd98e23ed93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9733d669-039f-4975-aa27-cebff3d7c60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1444196b-6cda-47b6-a447-1550b16cbc87",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719391ac-8cce-48c9-bf9d-7c4d227766b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c400e2-ed53-41cc-a2d7-11c0fc4dc35b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49151bbc-b945-4ba0-9377-fdeccc67e476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b41cc6-cc2a-47af-8090-f01100d04886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74d4cf2-0199-4076-9317-b8cd20775cfe",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3325f1f-0112-4aa5-87db-c1c4655ec119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6d261a-e1dc-4fc2-b77c-a92c1ed1fc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096a0350-2d96-4541-870e-6439f79625dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68b7c103-7fd7-404d-b1aa-6c706df838dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cff62da-7e42-4fcf-bd18-5365a9f8fb42",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a10864-e0a5-4617-9c30-c3363b00fad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1babb467-9ec0-4e35-8f12-adc4602e9818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f2168b-0ecb-41fe-8279-97f0b574e9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2aadc7f5-8713-45c3-a493-bf0580cdf297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74efedf-a43e-447f-acc4-87e1d624a3f9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3aa004-49fe-4c18-8386-eaee78cccc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbe0b10-b107-4bfa-b0b9-536af3ef98a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dba3b36-d782-4aae-9af4-8edb7a53c61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc1940b-6f2e-4593-868b-da5ff6be0334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff7dc9d-a831-464d-9340-25435f53c21a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1e6045-edb4-4cfe-86fa-5099b2464818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f690d2e2-d3a9-48fe-9acb-d9f104a9db70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6864a39-d329-4e80-8f65-7678b980d085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "684e2a68-f289-4675-86f7-6afd4be109c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c595e76a-6974-42df-a801-bc5bc9e07fa1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2346e67d-4a78-4b21-a84d-04cadbdd234d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc422638-38d6-4c28-b1f5-71a782a7be6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f40167-fc47-42ef-9ba4-762dc8b08f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2404308-2ce0-4f28-b620-61a84b0ba246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a721e10-3c29-4720-9a39-5d9a1ff4605e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689987b3-eb55-4636-a5e1-d967a50513ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b847adcd-e948-4c4d-8362-2615e5f3b8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bd847f-503c-4778-a201-106d304b0443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5268cdc9-8920-4244-8acd-d8852f686f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689b6330-e964-49c9-af5c-89b6f2816c2c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273f9214-c39b-482e-bb88-1ea564c46ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95338ae-1770-4e58-9c28-f872c2ec28a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277b4c27-a539-4eaf-ba05-125ee6be71c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c7a70e-d39d-48ab-bd61-367c58cf081b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6672539c-6f75-4739-815d-e5b293286fe8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3366d1a-f1d4-4da1-a165-ed745a3a5b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b251f7-0188-4e76-814d-f230d3dc0dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7830ad-56f6-4a99-bf96-e204e6ebab39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "468f3033-3436-4be4-a8a3-5715fcaf9585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b63191-7e9e-4219-b927-41a8d79e612c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac03a29-4969-47ba-82be-e3bca15232af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cc2a3e-36db-445e-b1c2-f9c7f7ae4707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889ab3c9-7116-42e9-b399-a68658313d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3705a67a-ab46-409e-9680-3c1b4042879e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de2260e-fcf5-4e2f-b724-c6303aa1a573",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd891777-ca57-4d2b-8df2-ddcbbec15f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d05ffd-c67a-473d-b3d5-95ba309982f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363e4526-91e2-4969-9b3f-707e8cef811a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e785f99-a053-490a-86c4-13ddd5abad97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251cf639-314a-4536-8d95-56e1bb2666e6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa676c3-c111-4e5e-8a80-4227cfb91dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dabb5197-fc1c-4713-9d77-178848e8001f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec27cb6-5bc3-4fa9-b623-bf2a40eb8f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01fa4638-f74e-4217-a18c-8659d4ad44c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb9de3e-df2b-4c73-91e3-306bb0a94ff6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b1c92a-ad77-4719-9151-85ea628657cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f868dd97-669c-4b7e-8d99-c3f3311e9ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719f992f-e943-4301-ae44-72b4df017143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "490f6856-841f-4821-8b2b-ca1ca49283aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4734b2-86ed-46d0-8d35-db8411366095",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee93c4b-adb7-465b-b0a1-79ca9ec061e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78eb683-c1f0-40fd-a999-5a8d2792a930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52104c69-3813-4f81-b260-058aca37d7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee71b1d-c91f-4a98-8606-3b88588ed8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9baf288a-f15d-4bd9-8d5b-3a5ce9852688",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724c3591-be72-4eed-8ff3-52fbc33155ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945b3c3f-8377-48d2-b12d-b7db1e5d30de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548ffc51-90a2-48ca-aa1c-bb5dca062807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1606e299-b0f5-4d04-b920-5d2f97b78d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de69160-79f3-403d-a1c0-bc62c2b29a7e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae70c04c-268e-4954-8e26-6c5491c62853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42f4fc1-1fa9-4f14-b01d-5f659e284f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adccee5d-62cc-403f-adf9-8a3a05af7d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91291256-f442-4659-8a50-43f6ee9698c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a79d28-9c3c-42fb-811e-b28918da6d3d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3441893a-a2d1-4cbb-9e04-55c339f3c9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2954d766-9b40-4931-815d-87578f0f595b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e70a91-f223-4b54-a11e-3684da7883b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc09580-74f0-4c38-9f2b-6b31b41e8152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f352058-f301-48cc-85ac-e265c681b3c5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc41a755-1e74-4ccf-8c0c-fb37f8f77736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6140b8de-2d55-4f69-99d9-b3505f2096ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9f5d5f-76a0-4404-a1ca-3f8a76239670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e668cc62-53a3-4525-86b5-801416551ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e83afcf-ccb0-4538-8802-5b7072b521d9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fda58d-2bf6-49ac-9f45-d37eb4bfcc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c9a89d-b372-4458-9002-70d3031881b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2298d24d-65f0-4a3e-a3ea-33c5d21ad38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c3eaec-13da-445d-9fad-4333645c7473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb135ce-563a-4722-a06c-20e90bebf5b5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffd9477-7295-4094-9ec4-0d254d1b4525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960d2898-1750-41c2-aaa4-46a84c17d420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57aa833d-25b3-4364-b44d-e67fdb2ea7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "370747e2-3f58-4f44-b664-a2d65d3d05ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e350db4-4a63-4209-a05b-8c168764cf2c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f98760e-77f6-428d-a462-60cb30a110e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee397db-3aab-42ee-8dfa-a9bb730743a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7df892-8914-4c21-aefd-8acf0866aca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d99208ee-ce60-44b7-9f3e-73abb4ac8876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c9feea-c8ec-4c48-823b-13d1c75ed4d7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94fd731-245f-4faa-93b4-ee1bba94abde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d7a0cb-66cb-47da-8cc7-496e0fce7558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59a2251-d796-4b59-abd7-32bd06fb40d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48d278a6-8f19-424e-9c73-b3733fbafb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb6dadf-b781-49fe-88e6-5012df567f40",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f193c3e-b6b7-483c-849b-ccccd542d35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f00d443-8532-44c9-aab1-9a8ea51854e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea234cc-8962-424a-a9c3-466179b28971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a2011e2-af04-4f7b-8ae7-4b60545d8cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fab145-f713-44f4-a71a-2fc3ea08f362",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011c7f18-ac1f-4c4c-9771-2143cd7304ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c054de8-2c97-4e09-a114-6518fac49845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7becc02-9853-407f-a058-cb79e540f9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a6d9f7-335f-447a-a43c-40cf5e6f76b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a2c972-edca-4e2b-8aa9-08959e7adc83",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215d9a27-216c-4015-87b4-8cc2b671e3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e731d205-e2ac-4b79-bb7c-ac984a8dc81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af0cb27-258a-4cbe-b600-ddc993568125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "12fe8465-fc6f-4aa2-911c-7e21186e6a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbd1254-2a75-4cd7-bb54-67d194f00eec",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff235cfe-a1f1-4546-8f2c-0c137f5a907b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea321f6c-a0ee-4a5c-a8d1-8574836df77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c027ca6e-c2c1-4a30-aaa7-49903683456e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bac0c03-2ce9-43a6-bf72-c6332f01b337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b174efb7-7f01-4142-84a0-d1e1897d0958",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1c4012-7aae-47d3-af35-ac275d465c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32bcb193-09fc-4405-964e-421be987d184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031d39bb-ab2a-4e41-bcb6-7cb0eb7d49f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b634e4-bed2-4d26-ad30-cdb30172b285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2459d41-6750-4242-91f7-58b4e247dc8e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfaae8f-9cbd-42ec-8393-5c0f479df939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1bd7e87f-1be8-4d8f-8d41-049acd91fd5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7654919e-d468-4261-b303-bc738cd2d1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "971689b1-5451-4fbb-b88a-b541da11f6bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56b8c69b-d72b-470a-ab68-4a5602a42dba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4c9b89a-2278-4dae-ace2-788e3291edb9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913c33c2-f8c6-45b3-82d0-c272111f3b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43f95a8b-2ded-4690-8c78-c8c97fd71172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a01937-6499-4662-8ff2-b8687a9fac9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35011e20-119c-4752-b772-7b453d4ed66c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cee169db-20c7-4726-b3e6-c0d515a1a6ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11b57f41-3599-4713-99c6-27a14a4660a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8b1d8dd-9c63-4fd9-9fba-33b7e7f340f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79f3fefc-5fbc-4ed0-a945-0764ebadaaa4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5954d919-e3c1-4ab9-8573-fb738eb2a6c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee0512c1-db63-4284-baec-359aad884f6d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a5b5cb95-f5c4-4a30-a1cf-dd27b971edb3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c807414-2fdb-4fd2-bdec-68ce50ec3aaa"
                }
              }
            ]
          },
          {
            "id": "5d81e240-7edf-4eab-8238-b61e5907c995",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2ab6f524-f0d3-48ea-aceb-deb5f771cc26",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "734bafed-69aa-4f98-ac80-d2dfdd89061e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f058a883-88ef-46f8-94fc-2d9cd78df8f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f97ebdf0-9352-40d7-85fc-359ab523ef2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "da989f8d-9c40-4b78-8ee0-f72a7631f066"
                    }
                  }
                ]
              },
              {
                "id": "adf9f8bb-3b79-4aac-a85f-371db279b43a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efc5734d-0f5e-4182-b9ea-a1d66c64bc5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4bc63c0-237a-469d-bd95-b06aaec560df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fba041f0-16df-4b93-a73e-27de443d7e29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "26b406ec-5767-4165-b088-5b6cffb60951"
                    }
                  }
                ]
              },
              {
                "id": "6db7be4c-82bd-439f-9441-acf5ea20c24a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6c39d3c-632a-4904-a79f-ce6877ae5237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50962381-924a-497b-83cb-1fba41b679e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1e81085-0dbe-42e4-9733-a18fc1a396ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6fca8639-a697-4bed-9401-59e0f94e91a6"
                    }
                  }
                ]
              },
              {
                "id": "8821bcb3-81a4-4c78-a972-6dc7d76962e7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dcd506f-328e-437d-b1ad-8e2dede20a8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8343cc85-4bbb-4b31-9a1c-176a9c24d996"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "985f4b91-5204-4178-adc6-07fb66321af9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a8ca42da-9524-4219-8d90-733cd50d449e"
                    }
                  }
                ]
              },
              {
                "id": "5ca4490b-5db2-42a8-83b8-6978d854750e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c224c6f-cab5-44a9-8ac8-f48b7fe6856f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "339fbc4b-b05e-4338-95da-36dbfa9ebe7b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c430dd41-38a3-4784-ae42-701c87a88808",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ae734977-a9fd-45ba-a05e-51439ae9c39d"
                    }
                  }
                ]
              },
              {
                "id": "993eafa7-e21b-4bc0-b515-e58b7a4b84af",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db20890a-3d2f-423f-81d5-5d0be73e1513",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03ae5682-07f6-44e4-8262-0a8afa018238"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d56353cc-bd46-49c1-8e3b-08ad9ebb32a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9b8600f5-c6d0-47b9-9d92-f585c7be0242"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42d2763c-37ae-4a34-ac38-dfc1fcdc8a3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "84423f59-1d0c-4886-a1b3-d690f188c564"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "203ab16e-eaec-48c5-8bd3-9f134886e18e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e3ab028-f376-4a9b-823a-e6ab1820702c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdbdb7b4-2bee-421a-bebf-9f712a78fcc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b243b2d7-418d-4ccb-a3cc-4ef84a929fe1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c04395d-729b-45ba-b640-6cd0157090e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fd6400c-cf0a-4502-bef4-97efd3629434"
            }
          }
        ]
      },
      {
        "id": "b28b3729-5cec-4409-983e-99973a5ed54a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8992eeb1-b9f7-4364-8f5d-11fb80ec500b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c3c36164-5c5f-4bec-a012-cc053056d971",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0ff7fc25-3c8c-4e68-acff-ce9c2759a0a8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ff8c3f-e78f-4e46-a091-dd89f3635637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b906fa-ebc9-4659-843f-f6a99d7037ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0bfb83-8f52-40c1-8d67-e198d70dca0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba9ae39-dd20-4375-9fd4-1dfdc8508e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a95e92-1f2f-462a-9af9-db239ace6b9b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d45edf3-409d-418f-901d-44a6222dbec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0a67a4-f277-47c2-b154-ce847c98034d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4224ff-11a1-4014-a9d9-220ce59c802f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b1b3ab-09a9-46c3-befd-ad5f3fa4c4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a666b94-72eb-4124-bcc8-f2752cb1dca8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64dd83b2-d0aa-4b55-baf2-075a4aef308d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631700fc-8497-4c34-b83e-4d029a914f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9fde24-9222-49b4-87bf-58b83ca27529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e07b2be-fb0b-4436-9fb3-9d28b6e8ca8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4bf12a-bd32-496e-9408-026eae855262",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90e8e32-1ecc-486a-9d9e-d9cc2f6f6ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b67f988-0844-412d-a904-fe4163d96ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e874ac6-e4e4-431a-8bcd-d22079f87118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d71f6e-eebd-4a6f-b20a-7d385efac610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b75911-90c9-4729-805c-6828ff09ef48",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80aadef5-f698-4d17-9a2d-a86eddbfab56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf89245-f65c-4c38-b553-0380813d525e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a941a626-21e4-497c-aa35-5efb3a0b3b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f865572-0b5f-4f14-bd88-0bff88b4c82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d062e8-1330-471d-ad84-0b921a95fecc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96abffa7-ee8b-4b68-8f5b-15625a806663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb352e5-6540-4943-aaa8-82757db45438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae41777-479d-434d-8005-b3404daa3a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "086ddf44-f4a0-4e92-816a-c37ce24d121d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6518b80-0694-465f-ba2a-009fe202e249",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ee1b80-6018-4d3b-8fe6-6ee2b8b613ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331fcccd-ca7c-487f-bc15-cfa30e3dc75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a75a73f-4db8-462d-a6d4-9829e52f3c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2881ba6e-bb98-4e21-88d4-999e7d74575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3af8fc-9d88-4bd0-b783-a5a9d0d8333f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef75efd8-9a71-4936-addf-8309dfa2b29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9089a3f8-9088-4cba-9e6d-515f82007539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135935a2-93fc-4e29-8d9c-067c5a95b892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb7594f-f66b-4119-ac9f-1b8eecda9ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c83163-5487-40e2-a9f0-2ce4d16c6f19",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dbc8a1-69f8-480d-bc3f-0ddc1396c8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf61fba-017a-424c-9ddf-11baa7c05819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dba4042-ea42-47ec-a6af-1f74296fce2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e18860d4-e581-410b-9454-37db94c9509e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465c2a78-551a-4f6e-b7d6-4e88712945c5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35c3a1c-6348-4fa0-92c9-ac3214f5c07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904a360c-27f1-40af-a634-351564d910eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5fba26-3bd7-4cc8-9d51-cf94f83b93b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8c8920-def4-4570-be97-1d1b2b95cc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6db21b-56ef-4a04-acd6-65769d9a1cec",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24274d06-af65-4a73-bf22-b30320f7ffa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b76164a-5016-489b-86d0-cc653232cac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9252925a-d317-44b6-b386-41e3cffa8bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8856fa-634f-40e5-9abc-35eb54f32709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d7407d-6126-4077-bd22-2fd40c2c1cfe",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c4a8e5-2550-4211-9cf4-9f8317e4ed15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cdc51a-81e0-4814-9cde-8a5d71e844bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70925c0e-0afe-4e17-828d-55529e3ad81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "666961aa-9722-4936-b0f8-506509611935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cedf8b-84b2-4d8d-b767-3739deb72647",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86fc01ed-a607-466c-9e9f-8e628b381598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdc7ec5-101c-4527-a314-332c9815f772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ee0172-78fa-4f08-ae71-583d8cdee23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24152c93-387d-4baa-b530-b00330086ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf931b3d-0149-420e-93d2-9625f083f81f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbdd9cf-e576-49f2-a7a0-9924d3d8b65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ec9e4e-ddc4-46ff-bcbe-74fcc5a680b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b826b3-e930-4218-91d9-a90ea96a458f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6f1a5d-28cf-471d-91fb-53bdfc032fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2da694-a66a-4269-ae24-45ebbe9e5f82",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2fe66c-4a4f-492d-b28c-8967128a2f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1ddb76-5bbe-4798-b0de-21f1a1f542db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817714d1-35df-44a0-8a99-7e9722f51b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5404232-ef8c-429e-b3be-8b1a34795e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4364aaa-c103-4a41-a8b0-bc1fc0dddb56",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2c8d2e-a03f-4432-ad32-23922de6d797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d976a6be-ef8b-4e9b-8468-583af9930208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d825c996-a489-4615-9bdb-3c8fe6a903e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "61f30177-cc93-4992-bc87-df23ceaaa4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f32dcc-2bb1-4550-9431-b8f9819699b0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e64946-190c-4306-a94c-d6031e737bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e0f6aa-c005-4d64-b6f2-652a3201ccd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c331390-65c8-43d0-ae5e-43daf051fb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "13ae6e8f-7a32-470b-9ca6-562fc2ee0cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f57099-9cb3-45dd-8b2a-fa3beda1eee2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c095e0-7383-4fd0-8d56-f7d3736ad14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df15aaeb-d422-432f-8b9a-3be69ad149b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6580f998-faa0-4fd4-a2a7-f840fe0dd6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3794e72-c3e5-4b7d-b238-6b112c9f4508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0193bc-3bfb-4666-9a01-f7a20be1f269",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539c9ef3-296f-444a-ad8b-67d7931d7824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7feb4c9-b76b-46df-9630-ef919579dcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcac1632-85ac-4e99-bf77-bbb0c25cbaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05cec0bf-7a51-4b0f-99e5-a49a03a99880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5841b6a-06b7-4eac-a5c4-62be7779ef91",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d09ef01-6a43-4ee5-90cd-9cc68958346a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9c4419-ea6f-4c74-a4ab-64d197d6ecc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5344df06-8d43-4616-9701-b3dc09d745d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1660372b-a332-4847-9dd2-1617240793f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d29dff-302e-4db0-8712-aa1ed37efc04",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ffc59b-db6b-45ce-ad19-5171eca01c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3727430-68ac-4ca1-a12e-76d7492005af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a212569-9679-46f9-b0f7-3417cd9ef4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b821a924-a06f-4fd1-bcee-9ad79c836a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a705f5f-3581-4c84-8ab5-636255c91562",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce97e0c-b843-4142-97f8-a9aa3afd67c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6045bbc9-a8a5-4a9b-8a70-f9c27d67b494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef03359-71ac-4361-9171-433754f1b081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1d7a5e-c38b-4d25-a4fe-444d4d011034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ac8fe7-d9cf-41f9-898e-8574fe2e1bd1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb407d43-a327-4099-815c-a75c94fe31d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1665c8dc-542b-464b-be74-0e99353fddf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b70827-25b6-4678-b88b-157e97d501db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ec4e3b8-8843-45d1-b185-54619d5de7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10da575-86a0-4cc0-8a51-4b7f9844ad36",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9663548-37a0-4252-9798-5b98f68f6525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d49c00-cc4f-4d19-a62c-6f3907679604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115e5e1a-e9c2-4405-8345-6d320fb0e357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "137162db-a295-442b-80fe-ef7704994dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffba2b13-aaf1-4cbb-8e36-ffbc2d7a674b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9887d9e8-005a-4cbd-bcec-2d87b4e563d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9d9456-18ef-49c6-bf73-10c6187b0279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ce7d1b-e94a-41ae-ac0d-bc09836e5cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f21670ad-30d7-4287-85aa-aca569a06037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0154209a-a288-4d2f-805a-16450775e355",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6904726e-8f8a-4302-9bb7-43d2791aaa59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a919cf-96da-4b28-8997-d97896052624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b7b470-03a1-4aed-a264-48d2e1b2a3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db4db574-a2e5-475b-aae5-ead06e07d8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b27375c-1163-47e9-9f0b-8f29252d54a0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9159057f-9e1f-481b-a3ff-fb08f8030a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a39c3a8b-50b7-4447-b7ca-e03bc61e935c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a085cc-c6e7-4459-9990-e7c73aeb4cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee6a31f0-4efe-4b8e-a99e-3aa14f0a505a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a477a70-b86d-4c6d-8662-e2a5a7913e89",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea11ad4-058f-4353-b267-ad8b6f5df2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4ac0f4-48e3-444c-a762-4802a4f0425f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe592f98-c1df-4066-9f6a-f6c6e0ef2759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f96403e-7db9-4bc8-9673-d65f7a8405b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c000b2ac-86d3-4c0e-bac2-356ba245f2f2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44414a4-522e-49ff-8353-b3613b5677d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110bac43-f3ae-4017-b81c-b4414effcd41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b5ec02-095c-42d7-a142-d8c387d65781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1e6629-3fdf-4324-9a44-be1e664469fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77818ea-2cd6-45e8-85f7-0117bbfe40c2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363c0440-e5f9-48a7-8925-589e7a0cbd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9f7c8f-eb6f-4d51-8313-7fec2a60ef88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a876123-056e-458c-8d06-19d394417bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3b61d9-fba5-4cae-b110-96bb96fa3d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5495469-35f5-4960-b5a3-09ce82fc5a84",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2486df86-f351-4c33-9afc-788e79fb8660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5271878d-9981-47fc-959c-00625ef373a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e8547d-c9ee-4c86-b472-d3ae6a498458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92f43f8f-7e79-4d48-afde-c68409a551b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c036ea94-636a-455f-ab4e-4422343c66a7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4b0cbb-8204-4605-9de8-7634db7fda9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5cc17a-526c-48d1-bab4-44224d867348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39e578b-a601-44df-af32-b5e59412d7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "770c0b72-04ad-4c50-8ffa-014fa1956786"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc55c6cc-d22d-4783-8885-8e4465d78541",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08317dc0-9417-4170-a645-cf232e93ee74",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d19da1d-3d67-4001-b64c-ded81e1010d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9265d843-b28c-4bbe-b4e3-98cc9dc143e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2191bd-1ef4-41e4-bfb2-e5e9cce42782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d76c2c92-1a91-4a5d-ad25-fd7a773a1331"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "938c8329-8bbf-451b-bcd3-017c18dc7c84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6d2cd0d-0c9e-4e92-bdfc-46f60b9ddfa0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93c76092-9af6-462f-a4e8-5a659f3e6260",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abd82c2b-591c-46d8-81e7-2d0091170cdf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55b8a33b-7ddf-46f6-baf8-0f9f94c1ab3b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "52944a68-ca74-4108-816d-578e1aa8f3f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "963da5ba-446b-4b3d-8a4e-3873af8fc660",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ffa8307-1af6-4c53-bab4-274631fe6d5e"
            }
          }
        ]
      },
      {
        "id": "d4dbc7aa-2e02-40a8-a438-a9109b7c6445",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "588bd810-f65d-4c57-b0a5-b1d262dd6858",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f36bb410-6e52-42d0-b336-9e52afaea0ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8e54f5ee-c88f-4fc3-b128-6756cb739599",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fddb7bab-1443-438b-971e-97a9cd6dcd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7cf84a0-5011-45e0-99d8-9a1c6cdb07aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f18656-c2f1-4bca-b620-49a36e88bb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec85f0b7-d245-4d37-b76c-f115f74ed321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8b0b72-c253-43ba-8913-003ac8e7000e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17426986-ac03-4ed7-9b43-d7e13d5fbc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5c3511-0f29-48b2-97ff-e18c36a72c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6fee11-9fb8-48a2-b141-33227987375f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb12b97-f99f-4e2b-b7e8-c2f77c67a17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e3d658-3267-4707-875f-7cdc9c32ec33",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf99f89-9bb8-4d89-8584-f93ccb9c6d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d8cdd2-a9d6-4be0-a89f-68f992fdf2d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e51ce6d-e630-4937-ae9c-824d10431e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06523d33-5de7-46ee-b22d-459f55406c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad02916a-7774-4675-aab9-aec13c9cbdec",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2517103-e1da-4e16-a775-7b9923f9df5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5d1ce5-e454-4159-a709-ed4fc42b7633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6ced90-9603-479c-9522-7e3f1937eed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de824ddb-301e-4069-9c84-9d2bf1c62fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076123c7-7e0e-4012-93a2-430eb0fb6101",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ebb1f3-4c87-42f8-ba3d-d16c68fbb578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b49ba74-4259-4b2a-956c-c37d39b68ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bf8ca7-25e3-4d8b-935d-10350ef35e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7d91af-8c8e-4317-8e53-8fe78d081d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88594f54-50a8-4acb-b7d5-cac7153a766a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e4c9ce-83ef-4f97-a300-3163100f1e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095039c6-4b54-4c80-acbc-57b37ea6c0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054d8dc8-aca7-47a5-85fd-72f9d46d8fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c215043c-e541-4aea-8010-025193e783bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8126ff82-6e37-48c3-b863-cdc56eb25934",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e514af-1104-4194-8c4c-e02dbd3e7000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f619919-7709-42f7-af14-89092fdd157b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2f65f4-121e-4514-b724-7664372b2ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "48aa59b1-b64a-430b-b2bf-65250b40842d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01987dba-2376-4899-8025-88a335921ac2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c502eb-0322-4891-9a00-cb6f1b8461e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70a7eaf-cd9d-4563-9a5d-7bf730b7045c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586ba832-1c3b-42d4-acee-1ce0fdd7923b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28150fb4-03f1-4117-a6d7-2318c2fdac37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2aae65-221d-438c-a507-c9120a319fc2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ad7f85-8336-4061-8157-09e06799c17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17edbff-b894-4e84-aefa-4724eb223871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578f258a-182f-4302-9565-475f1322c4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abab8516-bb3d-447c-a3c8-d1fdbbf64651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d67e1fc-42c2-479f-a64b-18df84204eaa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b6bba5-dd78-43a5-b6cd-ec2233abc7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04afa885-a46a-4dec-b6da-e95b86185310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ef7bf7-36e2-45e2-82d5-d68c12c80179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb36ed4-fcde-45b9-a427-4685633e1e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2b2f89-ecd6-4406-b09c-f34353bc8f09",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84f2c9a-7195-41dc-897d-7df178d62e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a56bf5-7e5c-4ef8-930e-6d0b69ab219d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be0863a-44d4-48b7-95da-8a8396c9e840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6ff49e-9dfb-4767-b9d7-6e7c896534b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d2e2bb-d9b2-4d77-9516-e674035eb011",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65409ba0-bcc7-4106-80c6-1d64b3352d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1dd1fe1-78ca-4ce6-9f21-ac2db492b812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e13b1a2-210b-4a2f-82b1-0059cd48c1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "383ae9ec-0152-403f-820b-4f347211608f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc5cb75-d6c1-4862-88ef-73dfd06d2626",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2679b6c1-a187-4d8d-9542-83672c82c929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9949f75a-ff59-4f38-8579-b2a650ede7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2ac537-9810-4759-aba9-a9c6ef918310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c84449cc-7954-4b38-8feb-f052c026f2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba63b8b-39f6-40d7-8e76-69a48eeda20d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da08a86-68ba-4709-a1ab-f014142e1f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2544d8da-d34a-4193-8316-b680b3e28c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814555da-7e6b-4908-9c2b-90a661a73198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb483f1-0881-4bb3-a893-11ecb2e3c85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dde780c-deef-4b06-80af-4b9ca6bd34a4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daaa7df0-8b42-4bb1-8351-a130301b98ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3351a709-3bfc-4c52-a69d-584598f5b1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b2d8ea-ee6b-42fd-a86d-331072f701dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e36f7b-dd12-43d1-b798-24b06bd54556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc24d62-842f-4961-8c00-7147193e8418",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecef3130-3885-4690-9698-0ef23b388b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fa7281-c47a-42c8-86bd-ad07f2cf4300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20204511-df82-4166-b478-e06fe8aaea74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "80b9c7fc-e890-485a-826d-5337d981ae55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d531359a-b32e-4f19-a19c-92eabd224356",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3fa4a1-66cb-441f-99a6-589f7339458f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495cdec4-552a-452b-b88d-809bdd3a3d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4aac9b5-3fa6-40b0-abc6-1587bccde1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "81511f7f-e56b-4ca7-8cb0-6563d6f4a6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da7c81d-0ed4-4169-9b98-b02a53958441",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1a1e65-3b81-43ae-9f7c-a993b11c2bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da6cde6-e86c-49a5-a3d9-5a6e9c52d027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6feb15cb-c2b6-44f8-81bd-6fa48737975c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd4ab5d-bb50-49e3-af5e-62852d6fc668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7658ac-f8ac-4284-ba43-be767d3f27b5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b48c49-f323-4d52-8b99-9065d7d02d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9171246a-5b2f-4e7c-8259-a58352457d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7ac81b-8edc-4034-981a-fd61168503de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3c7521-0ff1-441d-a274-578dee9536a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2085bb-2f07-4c0e-9736-10da0e6f4793",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ab040c-6e81-4c5d-8fa3-bb4cc750ce43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff755d8-6784-4586-bd9c-59f8f6a19adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f9f153-3e07-41c1-a0de-a116187e87b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e821af7-cc91-44f1-aeb8-97ba464328d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316d2d6f-81cf-4077-9add-68f374bf56d2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c975bd7e-1967-4cca-ba38-e3a613155c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5c43a4-61e7-44b2-806d-1e1d1e81ece1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0fbb3f-58b1-4024-8af4-4998368cd0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5fd6b8-eb16-47b6-95bc-528c748a6575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff73d2b-b533-4ce3-882b-8d9ebfbd69e1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447da7d9-32e8-40e5-95fb-151d9e1d82df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7f3235-0c3c-4410-be75-b9934c0a5175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8ba7de-0e09-4301-b435-5b91bf952333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb17d952-5639-41af-a7a9-ce49cb530419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70030d56-da09-4eea-8dc4-dd696cfcac17",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0c135a-0bdc-4b4e-bfba-f910d828ce35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77be31c3-0ca7-451b-9023-c0904c30759c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb676f88-007b-4a40-9839-2152fcffc2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87ed88b1-759b-4513-8137-639f6cba6fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5ab825-72f6-42b1-85cf-7bc0dc37b7d6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec1dd45-1c8d-4374-bf99-6fddc4a9c663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef66d94e-b43a-43c9-aeca-146390a249f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1077be67-2804-47b1-a8ca-9beb9400f15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c875907-90df-4d05-89b1-36b8a6561d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35475297-3df3-423a-8e31-fc7b8324ac92",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d8f787-95fe-43d0-a7a5-61d359d610ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c718ff95-b625-43db-b0a7-35ea59d7d873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24a084e-1b78-4a40-94ff-3a1680503cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53972e73-3cfe-4449-9391-072a957d8cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098b3382-8190-4429-b400-518126fe2c33",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6194ac22-f9d1-43cc-906d-db9bbecdeda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3734fc7-c353-4218-9ccb-8a0990c03420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bd8e77-9d8f-4ed8-b5ce-60157afa1ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51af13a1-d977-4101-888b-75f28302b616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089216a9-b909-4b95-87cb-0dcf586d5d7b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb9435f-197b-42fc-9b59-0aa0dddf4048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cacf53-dfd6-496f-89ba-e2a232e26b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8e28d1-4396-4b03-8bbe-73d4281fe68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75541f5c-4e6f-4020-8991-7ced0a05b182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66cd8cf-567b-4987-8d74-c75ba72db533",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7c21c7-3ed8-4554-92e3-d8c041bad317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe0d5a4-593a-4614-9897-6caa547f78ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e016f35-ad14-443b-90e4-f0e3a273d737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03856209-12b3-4d93-9575-48a63a96e9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1b4b1e-f954-44f8-83b9-9e5dc8f7d9e9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b6aac4-e26f-4f15-acb9-936e5048a84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6f3e09-3109-48ae-8592-a66e5c20fa44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674a492f-e08c-429e-9c85-148f8ae38bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08f436f5-14a9-42ca-95ff-56785ba3c56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101229d1-b914-48d2-994d-46828676b111",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7560ac70-4a0c-4925-b9fe-c3f2ee905c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a08a30a-68bf-46c4-b765-45a9e2fd16e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7062f287-18d3-44ad-8c98-1df7907da337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f59349bd-e8ea-4c1f-aaf7-19b5664b2274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcc1ba6-c9ac-4cdd-8d1e-949e8553aa56",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cba7aed-96fd-4527-a039-d462bc96f503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9859f1fb-204f-4b53-ad0a-c2352cdb35c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda58376-1a89-4f97-9e8d-d90994e77804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39497f23-3f78-4a3c-b53f-d7e33ff09888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16663a42-3ff7-4cd9-8852-aae44968e616",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0be267-7986-4a91-be48-b11c4eb8d13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f92d0a5-7121-4ab6-b5d1-13bd7d57d962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e99aa0-d4ae-46fb-8191-a78dd1aa8d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea9d26c-4d4c-4e33-ad82-b7979c9d77cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b539b5-091c-428c-b6e3-bbb1e635a938",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29499463-fb2e-49fc-b5fe-a49b2da15930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bf5ccf-ffc8-4f88-8504-a775309599ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bc8824-dcd1-4c16-ba2b-e46888cf8c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f742b05-4423-46f7-89d9-4ee76bc2d719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce7eb7b-8d7f-4f59-a922-24d29bec566c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b496835f-e970-46e0-8b0b-1ea3b0b6a4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c3bc06-f0a7-47a2-9b53-6263d41d352f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5389eb-93cc-43b0-bcc9-fcfa8c50b17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdeed8d1-e14f-4b54-92a9-ddadd4a004f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7976759c-699b-4665-8f1d-67ee3650dc05",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e322567-0c5d-4330-aa5f-0a6d87b5cb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6974d521-d7ba-438e-97d8-60be648eb15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d87f88-5a4c-40ff-a323-646f04f440fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3672c4d-9618-449e-b0fa-4134664a2232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30444625-cd44-4f91-9b30-7cfffc113790",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724b6f8b-a419-4e23-acd7-04b850d3c467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd65a74-707e-4788-9e28-ac8a74a17bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d2b987-ec7e-4e38-94f6-c32166863318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10fdd9da-5452-4e64-aed8-708a19aca40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f186dcb9-cd8d-4676-98c7-a501e622f7a1",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f00014-b1e0-4b2a-8430-e6b3d022a139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75546612-59f8-4ce3-83b2-42d6cea2719d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4544512-9be6-4355-9bed-60138eda43ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dca275f5-09fb-4bed-abfa-d9ed313dbf66"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "24a497c7-896d-441d-9ef4-ee0876b18728",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd08fd07-3e7d-4c64-90cd-5ab936a2fc19",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b4b3d5-1f6d-4567-b8d6-43e0210b7930",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "68b6b613-1726-4dce-985b-9569859ad46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2779bf-a687-4fa7-9557-66a6f46acb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d89fac0b-166b-49b8-a60d-132083710c6c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d404df6-eb73-4380-ad4e-06ade9b96153",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "405f0000-bf4f-4367-9ef1-0705286f3d68"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba9b6f42-1e15-4739-9d3c-eeefb9d9c64c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21a3356b-7c08-4b95-8ac1-0c7bf443655a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64da1488-f495-4852-aa76-84eb04773374",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "12d4b07b-5661-475e-9018-0b89f2f6555e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fdd1a799-c1ed-424d-aa32-e25182fea57c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23e9baf5-6817-496c-9956-9eb2dafb919d"
            }
          }
        ]
      },
      {
        "id": "46c6ea3b-b501-4f4b-888f-9ba68582003d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "748fab2a-61e1-4efc-9b97-6fd2986f1297",
            "name": "Negative Testing",
            "item": [
              {
                "id": "826a52d4-3ea1-4d15-85b1-2ec55ea33f44",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a6580830-497e-44f9-a825-cd7f44665d43",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79321c53-ee23-463e-82bb-d52c45dc1929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ecf892-f584-4785-94c5-055cfeefcc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20106e22-dd3a-406a-ba73-1eb9145382dc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db16382-b327-4e8f-8aec-5d303bdd4832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe143ca4-8bc4-4753-8698-582335db04ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02ede7c-9b2a-489c-ac2c-329980316cd3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4e0312-29ab-4403-a452-2888ba8f395d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dddbeb0-2f3e-4cc3-9af4-50a19ceef9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4b63f3-f8d2-4f50-a82d-ff2b46b2563e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ba6d99-14ed-4023-afac-98abd9dca857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c2c707-fbdd-4e99-bdff-217b9da11c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6761561d-c3f9-4b5d-8521-548f4c3865e9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8dfa95-5c1f-428b-a8a1-b24e51b5ef93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eab7f3a-7882-4df3-9a86-0d5d9500e2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7df2ab-ae3e-4059-910a-cd557c782b65",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581c7740-453e-4168-ba7a-2cc3f2f348bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847d4f74-9f1f-42b1-a96c-adc634ec199a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1483de-3f26-4adb-af5f-e0caf02986ea",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a21a45-8f97-4acf-94f3-eb649951b4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776e0586-496d-41bb-9096-142471270b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af45e546-c478-4f4d-9a71-9da4e9ddbd5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f580e6-6066-4919-9c83-56a556cac35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5e6aca-30c0-4d0b-9f5f-1e092bc541c4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649fce94-ccca-49f6-b3f8-b0b24609a01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad258b7-9381-400c-a0a5-7413e9b57e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0d66af-e61f-4de2-bf30-69103c5a5abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf3d8aa-0e90-418c-aae9-23aa5a608cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fbd824-caa7-46a6-a68e-1dde3f515e90",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea46c2c2-7c2f-4fbc-9912-323271d60950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "264116ec-3690-4dd3-a2e2-7bf45a848f0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3c91ca-a356-4fc9-9dbd-59041adfbc77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3733fd86-8e0f-4148-b54c-0e189f65809d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30428cb0-adcc-416c-a143-df3a270b4ecb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99367231-cdda-4a52-8043-c86684214038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc8e460-9f45-4ecb-a127-ca051e8a3edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57afa9bd-fac1-46ab-b461-f9d6026984cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f57737-b9ac-4eba-bb9f-6f7223808422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1437cc4c-8df8-4ccf-98a2-c2a19dd378b5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdedc03-a59c-4d6a-9f13-0fc66586d7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bcc232d-9a78-4682-b0f7-9db3ab044170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8f86ae-b33f-4aa1-9fcd-eca6276d92c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1866b33c-08d5-46f5-9be4-ff260d7c8e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6118ff9b-27a7-49f7-9411-db2e93fa4741",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea7934d-b904-41ca-b789-91dd725ccf73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa21e48-8246-4f2a-b51c-1ef0d9508970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65453486-242e-43cb-b6d6-c99701f1e9a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47bed47d-813e-4a0c-9a3b-d246c52cb6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcd9a61-6080-4571-992c-456f7c46bd29",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c316fd8d-58e9-4d63-8aef-f8dc8ca741f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86217fe0-213a-4dd5-a9bd-4af20c65ebb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc42241-1a7a-40b9-8cae-0b8a51362976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2628f6f-5c3d-484a-84b4-a2a0a55e8daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bf742a-254b-4b86-8d9b-c1b06232567e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166bdd1a-071f-461e-9f0f-65bf2e121ec3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ae629a-cfcc-4b35-b7b7-9cdbbba2f302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "504ba698-84d1-4e05-8860-8dfe4b810ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2da29fa-8784-44e4-9bfa-62db40541f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74288de-da15-41ba-9814-5032ea2780bf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d88f1f-7e59-47a6-9921-44fe0b063006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cb7c902-943f-462e-87af-9dfa61e7db67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9257594-af03-4013-b4df-4fc08eb2260e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186673bc-5476-4223-a7da-1c26f4a072de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90309afe-fc59-48ed-ab3b-205aa50f2f66",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cc6345-915b-4b35-baf2-3b39feaace81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f295f6dd-93f6-48b7-819e-305e9018320b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32168446-944f-4ef4-b9cd-a0e77b8f7f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e221f997-7329-400b-8360-2e818d9da52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ae8ed3-9379-4462-af63-7611f4be8a58",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b556917-a181-4d2c-a2f0-a1bb0447b7c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a2cbec3-3225-4df6-9f86-952d34c4db6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d387247e-d86e-4a75-96e0-ab6af72d2d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a7e5b6-3794-4456-99fb-5b3c6f740ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e86d800-6cfd-4641-a6c5-b40136e99aed",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adaa747-f776-42ca-87e5-2a9f100eb6e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7029ab4b-236b-4dc9-94f8-9eaf9c9a8c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb820959-2418-497a-8a43-8eded6370ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f105677-f878-4356-92b1-301401a8f927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab8ea92-3c7b-428e-9f24-5399ffe1a148",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7b4e64-5acd-41d2-8aa6-0aafd2a53fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be0721b-185d-4a4e-84b9-22d966f29ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80214418-35f4-468c-90bd-ab5c3b6de79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b50733-0496-43fe-9714-3c3023e36854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178b11b9-afb2-4ad6-8c1f-f57ca109e7a9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7cabe4-515b-4782-a56c-b9f5dd453ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9df620-88ef-4c8e-acfc-64b528476a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02929273-a67f-46e1-8763-0c70d2a6819b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9807d3cf-95db-4c56-8f64-ef6417af1795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ebf529-905e-46aa-b6c6-5a5f17dea70f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0c8dec-5429-4d2a-933d-7fb68c4527a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66c1e9f-0415-460b-a927-f214e736d6f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb44087-f196-4018-8803-57dbbb59ab8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b814ec6-4e02-4ea4-a229-3efe6bd6c2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bbd99c-d32f-4454-a126-d62d0628749f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8ef377-ee05-45de-8903-abe3fbafebc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09510e8f-9124-49a6-9705-49e01edad941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a76bd0-218f-475a-98d2-108e6e7e2559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43649516-6387-4ce7-bfc4-db130d536a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e28139c-d1ba-4b35-90e8-885687ed22d9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb2e409-59e8-4bff-9122-07a9e8ab7078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda42e36-db14-4e1c-8cf7-46e4854c57cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a1a33d-bddf-4aca-9691-76609d8578f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95017ff5-da06-4ac0-aa6d-fa52143abd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f38d952-59bb-422a-acfe-b60e87be53e9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae95c841-cb5b-44d4-adf1-05594d698fea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a613b2c-bee7-428c-a0f9-69a6fea7fd9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "638f23e1-88ab-4b9b-ad5e-1231fba5bb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f030a54-8587-4b0c-ad19-d54b4c534db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f232499a-9b57-454a-a682-859716258887",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d44320d-492d-40be-90e4-85eb7f0de0de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8100e13b-7d25-42a3-a793-1f22e79cd2bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981d68da-80db-458b-a4fa-040f58f5f5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a4e485-4f1b-4a0e-81c2-487cbd69e693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4c712b-5be0-4587-acab-fc4e4e4e995c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59631b91-e5b1-4ba5-94b9-d0f35c6fe942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af8b1627-3b03-4f30-b65b-754d95508f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5fd9b7-3532-4cfc-a72b-decbc9b692a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d735288-4a6a-42e1-93b1-fc423dc0a8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cd4a47-9e45-48e8-9c3e-0df3a8162d2e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28f418d-4975-4949-90b0-d82ec7a51104",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "305eecf9-d95c-4ba5-a17f-5258d0529581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00395ecd-681d-4258-b6e2-a06f38e0f501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ac5f62-3632-4ad9-9fde-1906234f473e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02aadce5-d28f-4f2a-81f5-713f70d94c30",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a183b75c-6f43-462e-bf4a-beaf908248e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87f87f1-605a-4d26-bb7d-479a7cf6bd3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "381f0ab5-8a60-49cb-a05b-855bc943bb91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a97176d-38ba-41e5-ba93-8d7802d9ec7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004afdbe-9001-4c4e-8560-533a4ce96a0a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf1b267-86b6-4bee-b678-3bffd71d683f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f901b97-316b-44f4-9b24-46df67775264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4695a157-19fb-44b3-bdea-107f8bdd2e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f927c09f-ad53-4418-b54b-b95da6f13016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c452edcb-c43c-4736-9e6a-c8fcb06168fa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40e492a-6fa6-43b8-af95-4e0af2ff3ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40eefe7b-1c05-4ba9-bc15-f658421ebdc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d73e39-f38d-46df-977e-312cb94027f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc85dc8d-ecf2-4b49-b22e-9ad6aee62e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ba5685-3951-4e74-b4e3-7985ab315ad1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d762690f-414c-4851-823d-2344cd4746d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e5b534f-97a8-4233-b2b4-762bd557acc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b7ee2a-a58d-4945-8bef-2588e9fccd0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed48f7d-f04c-4628-92da-285a172b700b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbe8962-ccee-42b7-860b-287b3f96734a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b85784-46e0-484c-b2fa-7e41a2b489f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f8967f0-7efa-4906-afd1-32b9750309da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9166575e-cb31-41d6-a46c-eeabe9f3a5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0fbf1ca-616a-45ee-aeaa-9798affb1319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252d6d9a-90b9-474e-84a6-97ac4d503882",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47170513-75b9-4b4f-ad6e-791cf89d552a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3edb2765-7480-42f7-8c91-cb4ad940e7ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbd8968-caa3-4945-ab3d-10f064198632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c4bafe-96bf-4b8c-85cb-a6ce2e50bb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deafb816-28fd-4dd1-a814-33b7599fc05e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58502c2-6d80-41ca-bafc-5074fd48e3cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db79b588-3a90-41e3-90cc-f0b026c52d6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379567e6-aa8c-4d87-af2c-a097cd7aaf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7c51e2-dbeb-40c1-bc64-8cb59d317055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1b39c7-5ebf-4172-a8f1-ab5e2c91de87",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ab196a-d9e8-4f3d-be99-ff90c4a3895e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f98bdb9-7ea9-4279-b795-77a1abf5fcc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55784821-434e-49e4-82d5-5cc651819948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870a3632-6f67-49c4-9daa-c3c3b6d41361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9661707-10ef-4369-ba2e-02b102591471",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8dc2214-5fca-476e-8263-79052226a698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1957c9-8415-461b-9011-ff9b17732db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fa717b-2461-4c9c-b489-205076cfb89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a353f88-cd87-43a8-a521-6778b6677b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f778f63e-54dc-4d88-81f5-0b8cd39f015c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc9992d-2a11-4272-b747-9ec20185af19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6dd5a0e-7319-491e-ac57-f16f4ed6be79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a01322-e749-40cd-a650-18d801c2463e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad96c95b-0c46-4bf8-9154-f69f604a8ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe27ec9-fbed-49f1-95c5-cb9e62c8fca3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f19d621-23f0-4d89-aa9c-238855963a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79fde78-20c1-47b1-a4c7-69b451fd22c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d460161f-eff6-4d73-b78e-0ffec39f57aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851e8873-bd40-4b09-b365-0f8435a6aa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8111bf3-8089-4189-a00d-a462d72a8e43",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f58b80-df6a-43aa-ab7b-8da6b96cff95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c4a4d24-b97f-4a6b-9a3f-9a1532ae893f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf399e4-1d9f-4595-8f9b-c722fc61a249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc13220-ffe0-459b-9ded-8c999217fc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e87732b-8909-4588-a2d9-497fd94ff229",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3e7ff5-8684-4be1-8566-ad162d093aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eefea57-9fb5-40bb-8b7e-ef20325de513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a6e7bf-85d5-4de1-b727-8c6fc2362c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69dd56e3-e5e1-4dc9-a200-3457958b89c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15dc810b-2fde-4201-8131-3c7c29da5bd7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3028695b-fb21-4b3f-b8c2-34e0e82ac9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f9487d-b124-47b9-95ae-7da3f4041fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c65542-c75f-45cd-8fe2-822c4474d170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f26a703-93ea-48f9-bae9-00fd3887a08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4210d49a-9254-43e9-9229-5ca81cfb08f5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da76caa-25af-47a4-98f8-6d0e84c59741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c9878c-4b56-409e-ba13-4d7260a32885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c93800-ed30-4e18-a5d2-04e399ae4eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e12dcec-c5ce-477e-8adc-f7647097eaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287a4a51-07a6-406c-90e7-eeeeafb28798",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb5e67d-657e-4027-9cb9-baefc4851c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc11e1d1-2a45-4dd6-b05b-4bf7019e3650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0334356d-d8c5-4b0f-b74d-4f3da1418a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5bcd596-850c-4baf-a963-95dd174cb907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542ac866-e7ed-4e24-b9c5-06000a0315ab",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8de882-1462-4fdc-8083-b2b4ae996c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7614e638-8ce9-4ba4-b7ca-31806d4f6249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1b61c1-786a-4c8f-9478-08aec3fdd1c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48cbf3be-df9b-4f8c-8a7e-fdc56af1f39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f5d0ac-d137-4d3c-af26-ee43f79cc313",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2a1117-58b7-4d3d-92de-ea2bc2322169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68404786-5993-4dd8-9cdf-849087fe47b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432574de-c2b5-4de5-b455-c0bf64c9b135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71cb621-0bcd-4b94-b355-b0adde82060a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa04a9a7-2bf1-4069-99aa-c2c022d0937e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec1aab8-1c88-4b7b-8edf-4b7da0431d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621e538e-6489-4431-b4de-3898a98e41fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433e34aa-0083-4962-8676-e745f81b42d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62e9c09-7b4c-44a2-a991-a4bf378d1484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f2da20-031a-4c9c-8138-58beb7daf688",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8eca39-13a0-4d87-9014-9f220845ebaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24939b1-b66d-42a5-9483-6615e6cfda93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e759b8-9fcc-4fd7-8669-192caf34dc07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1cba00-13b6-49fa-93d7-c69f7de81ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eaebc8f-1bab-4dc3-ab09-480762e5f79c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbb843c-ca9e-4e84-9988-6aa2273fef33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265e962e-7f6a-48e7-a91e-115737e6c799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efb7918-2503-49a2-947a-813bdda118eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b57d5ef-f13c-461b-be7b-4996725b0f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398a12aa-c48f-4e73-8b4f-982300aeac01",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b72cbe-a486-4e75-86b1-e66ff4fbbf32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a239584a-42e6-477d-9772-7a53bfcad236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfd8da3-92b2-42b6-b610-437e21747c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ae21bf-ade2-471a-b223-e65b5345e1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e10568a-45fc-4f87-b2ce-18fbb55b4ba1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b7eb86-21c4-4df8-9846-76e143e1f551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b78f41-de9e-491d-b914-8f9d64d17b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a774aa4-d18b-4c07-b653-02aa71cce5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa6fe55-76c2-456b-acce-05dd0a7364ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b2509b-e3a6-4589-91ec-50597eaea520",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29187695-9364-4d76-8bbd-bacad4c1b893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745a9a42-633c-43b1-84ea-f737f7484916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6630ffc0-83c6-4c1d-8333-7dbfb0f12352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9e8c65-32a5-4561-b952-3daf6bf95747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3094cc-7d7a-4c9a-b4a5-ffc5682c3deb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a60d60-c8cd-4e1e-92e8-23df91744b62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921d098a-57a0-41db-8f94-8b401857b6f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "158c50ec-996b-4ca5-b92b-1bfa9a0701ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafa1c46-5d3d-416f-939c-a1a34b329f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3a045a-4b43-4410-af19-c3bc77c1120c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cc7312-b76a-46a9-a6f3-768efc2c1d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528329b5-7c64-4ccc-8ef3-8446a6a62478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf92a443-b641-41cd-8a8f-fec732d3964f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab57f473-d054-4cae-a5ff-53a3fc60276c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a9ef33-7244-45f2-8846-4f6e3105b018",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4b4f16-257c-481c-b30c-2020aa1a2df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b65e442-207f-43cb-99a5-da8be99f7d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823fcb47-a76f-4bb0-83a6-a75f7befca5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6aeee6a-fa26-4745-a10f-a2d65676a74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f875118c-5d0a-476d-a8b1-04157b420206",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071a3ea3-cbfe-4303-8157-a3e8687bc84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f022128-9a57-456a-ae74-5178d0c6dcfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d529e1-b438-4e7d-9f3f-3dcf27477aa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfffba4-2114-493a-a4bd-a6152b9b635b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff817b5-54e7-4dee-914b-36149187ee8c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a42c762-1bac-40aa-96af-4f16c2f03c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd54af0c-fed2-481c-a475-0d79ab739e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "837e5647-a527-4d2d-a1e5-d82046fec058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139e52f9-7b5f-46ac-93fe-e8ac894b129e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648bd025-8090-4b87-8cc3-bb139c97b6e7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1980eada-949a-45ce-9083-3b1f13173074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48005f13-d1bf-499d-b034-fea1e186bc3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98200bc1-9445-4f00-b07f-14110f113dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5163a946-6fd1-4914-9063-0dce04250e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc62adf-7c2c-4c4c-9f6f-896d03932459",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b84046-6a14-4a6f-b61d-5d95e4298e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f951ca-f84c-4b87-8a01-23b75862f848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1954d7a2-5866-4c22-8500-c0b66d1cd30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c59286-c77f-44ef-94fc-a057dd711c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417813a7-21c6-4fbd-b9fa-80a5995f7879",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eeb97c5-6002-47f9-b7dd-d530a5a2b6ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13188ccf-9fb8-463d-8fc8-b31791643270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1d105d-bd34-4613-8831-2117c0fa4630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457c6e01-2184-42ec-826d-8d6ea1fbea00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60eb7392-a36c-47d6-91f2-fbc7c7c7a0b8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faae6236-c650-48c0-9f7e-3be354e39ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b226d5-52c0-40a8-af67-a0e9527d791b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0cd6d1-a5a1-4a98-b6ac-4173676eefc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1a1e77-66e5-45a2-ab7d-9db013292eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93245802-f7f3-4d8f-8493-9cd222d92de3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525c917d-3644-4a4a-9149-d7d0cd43852e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da6c63a-e4f3-4222-bd71-ef961b48f781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5c88f2-5f78-4805-bafe-fc28db3c02c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e737193-3d03-4193-b45c-fe823cfc41ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d274e30b-5f98-42f0-9a8c-4645530d0dc4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badf5fb2-5a8a-4d9a-919c-ff4223518fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c4bd7c-c866-44a9-82ff-ec8c6dc07955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdf3b4f-5f66-44df-9309-843036bd056f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912352fc-db2e-4d5d-a17c-3c4a3741c9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab01813-f0f8-4504-b93b-437472c6b882",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12082e2-ea44-44d3-bf8b-071619c2424b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329a9b27-90fb-474f-8764-7983148e7104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a49a9d9-bad9-4bba-ba95-8ecac73434d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab20961-8d55-41ee-9c18-adbf4844c2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4667a416-a97d-4183-8897-99a951354427",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd501281-41d0-465f-910a-ccd1e188c2b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "422084f2-4906-4730-ac50-66d2e586b786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e9024d-9b69-4392-a385-4bc114ec0056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e8349e-3a07-4d37-a642-f2a522afc677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b066229a-70d8-4f3b-a979-3619168a54d4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cc9009-f321-40b0-b134-092194c8724d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ae3163-d8b8-4745-a9ae-164bd92e67cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d800dc-8503-4ba1-94bd-570949666aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1473a9e-9e43-4ce6-aaab-97bfc9edb7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251d5649-7173-473f-9782-5fabe468152e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6daefcd-d48c-4c80-b835-27202fe8f702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b370414-ea33-437f-85f6-8d15389d917c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa975789-2d66-49aa-9035-e490149b39a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67de25ed-1ba0-4074-a5fb-f1f0f2bbb921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de62e17e-6458-4e5a-a290-dda87132f42c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6830c0-a930-4eb1-8c68-d9add08235f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43bc321a-c876-4cf8-bcd6-188340fa22d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14dd9f4-f8d3-4df0-87d5-5e800a656ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99870351-7dc8-462f-96d7-14ea70db85e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e4f78b-b28d-47c6-be4c-93015c2edd6f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f801a697-167a-4cf4-871a-93e8b2f33cfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3d09a33-ac4b-42be-9392-66525ca130da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40267ae-26c7-44a4-9a57-1f913e0b366e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e233e6-a123-4266-9aba-0839128b47d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b90f0aa-a8ae-4873-b804-98132d691fd5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5168be-b836-4b7e-8192-7f0d5e3391c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92820865-e34e-4442-8394-b3b3c0e2b1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eab0241-04b4-44e6-8c55-77cc3b260561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebed64e4-5074-4a14-b6ac-16dc6eca7f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f827c8ea-8e15-4030-a0c4-1fb4adaeeb86",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329d55e3-8f4d-4013-a7b5-3af73c7f38b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7df64851-beb5-4b44-aac5-bf8616daa5a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131300e2-d8df-44f0-8812-5439e05cd62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5b52e0-c72c-4d16-bc95-1c5e99813548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51038c5e-d899-413b-87e8-1b50020cd515",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42669b36-b178-4802-b9a2-0e63e6d9b147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3e75b67-b6b5-45cb-8679-b87268ca8391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "088b5c18-b808-4f55-955b-6c1250814278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c981683-5555-44b2-b09c-0a74d884dd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbcc979-2773-4cc2-a02c-6cd24d9c00e3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b77c3e-d56c-4db4-988f-bbeee7ace751",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04413707-a4b6-4a77-8309-8785a6bd62cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24962a6d-07e5-4e8c-912a-12e94c5ef306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b28335-29a7-4be8-b4fa-7d683b9964ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c63ce9-92c2-41f3-89bc-12b8e1d00e11",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0616bc5b-0c5a-4167-a710-30db005d714c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57e8eccf-f953-4e24-9d44-aae497761f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77c3148-809b-4526-a3ba-866edc4e946a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81e04e4-3cca-4f1e-8e59-aa2b230aadea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d51351-a33e-45b9-87b7-c4df98becf4c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a38e691-6b32-4092-bf22-1b1575fb4111",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d98a6897-9dbe-4e43-b0bc-34bad8802213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cccbf6-640c-4a29-ac90-49cb435a8047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a77899e-9069-40f2-8b2b-aa5ef66d7383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0b966d-5a33-493e-8136-0721a69e7847",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37e4334-806c-473e-b17f-f5bfe71c8f1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "541cb2f0-b5a4-4d7a-8f79-b99c92ce70d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8ecf1d-f2e5-47b1-848e-1f2c3f064485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7436b39d-f605-4b80-bc74-1038dc284dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d63065f-7ebd-4ce1-9b49-672e1fc0b98d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3857e0ff-e49c-4bda-9ed0-763814dc39f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d26fe17-c867-4205-b5cb-4e492d75d714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7025fb-a8ed-4424-a39e-f8f90656cbdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ae85b3-39a8-4e94-960d-41095bb33954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d159fe8-3490-494d-a519-0f57dedf919c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd7f7ec-56fc-4d8b-87da-866bbca5462a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "228dca97-3fa9-4d2f-b616-4d7a7d2d4e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cf33bd-1e90-46a7-b887-1ec1fcd8e68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a18c374-68b8-4203-83de-ff2142faf811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1f98a8-73ee-46b8-a366-d15cfeff3623",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53251fe0-1b4a-4293-bfb1-e535cd09f2ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6cba3d5-e6f4-4b92-b2ee-1d989caa9249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867d324e-5bbf-4a57-bce9-2fed8804ebf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59766f6e-0288-4f6a-ad46-3594d8d33762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa25cca-b46c-48cb-abf5-7c3d825f6689",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435c8ff3-7a07-401a-9167-9f5da3b92912",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deef2da7-fbaf-48bb-bd06-d48e6c4ef526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27698e6c-e239-4987-9686-af83f3def4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e5f0874-9180-41a1-b34b-99d3a6864b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea13a018-235e-4086-a33e-021aa390373b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78674977-8480-40e6-8fce-ef58eaf0d68d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8190996-2393-4a30-afb5-04afeadd4344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00a3099-d502-4adc-9d8c-1ba5eaee3e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6215fd7a-1fa8-425e-b4ba-8c73d1e6ad35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9586c03-b1f5-4bcd-bfb9-c25fe1ab9fdc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd09c64-b2ed-487b-b0af-a7f51fe54571",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ac8856a-f237-491a-a58b-ef40ec329861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8139af-da0b-4119-a167-2c4f053f736a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209d0d8a-1546-4995-b524-ce6c9e7e807d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a22d6bd-af72-4f59-a73b-f503c1833f96",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be077b2c-a991-4eea-adfd-93ee41d022d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2379dace-c9e8-46bf-b696-61115e4f92ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccde173a-169f-4bd9-886a-a4cd2bde73ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627081c2-9714-4f22-b016-2d3517f046e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef4573d-dd7d-4159-af98-a5b82de4cbcf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4dd7a97-24ec-4b36-a54b-52f6c0985829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08951949-9513-4f47-8371-2a0f4dc60ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e645dfc4-bb82-4eae-ba54-f1e6cffb8b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2f67da-e745-4b3f-a153-18065a505ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1915b5a9-4dfd-4ad3-ab80-2f9a0c164371",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d64cfd-a6db-487e-8664-747d1bae8550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a627b2e-c4f7-4c62-94ab-79b3a331d675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfa34ae-e9de-4d69-98ac-0497a6547501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d4695b-703c-4e9d-a3e4-b747cf7d8621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfce787-9e8d-4b62-8145-4363c6d4a945",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37243ebc-2ba4-4526-92c6-a44e449a5763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d977b66-6499-4c20-8298-a2f0ce55b646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d4ba7a-b37d-4654-a086-c09abccde882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0344a24-9ce9-4910-a47e-f6d6fabe31ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f96ee42-abce-4ba4-b566-9df9ca520985",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6c7630-d4e4-43a8-b501-4c91b53b1416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1e536f1-8313-4d25-b989-e6b647f5e14c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb71b1f-6085-4bb9-9c13-debfb3037ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7e6a8a-d984-482f-83e0-7dde317d9fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca4e45a-926a-4fbd-a402-fd86e70f0f18",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b2e534-d8fa-4222-a1b3-e8fe4f894f3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ae59abb-8afb-40bb-a9ee-8798f53d64e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89477f0-718e-49cc-a1ba-9698a4b1edd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0e6b2d-9be9-4e01-bb2e-b21593649164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c140cd-591a-409b-8f71-5cdfddacab11",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e4d062-867c-41af-aa23-263fd994ea85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c770668-03ff-4b70-ace0-09ad1a6065be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4f35b6-d424-4480-8207-d476c8e2d37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18358261-d8c1-4967-9af5-a9862ab55d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add2bfcd-941c-4698-95a8-d0077480c2ed",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac21117-4c0e-47b2-ae9d-0d3bf5aa2a1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96756325-6a47-4e80-8fab-04fe48ea13b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705c92b5-9484-4b1d-a9ca-183707f26312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6beac4-d4de-4e5e-a4e2-03437ceb2bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b667852c-cfce-4233-8b31-7472c84d088d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d827dde-5205-468f-8ad9-eea601d45ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "144f2f36-d01e-4f19-8519-84d44da28325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e851ab-0376-4506-8a06-196c6f9f3815",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a283e9f-5589-4044-8270-22bc84d02a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efd0669-1858-4dd5-8732-a49f6ad0e45a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04189e31-387e-4c41-9a9c-786c731522df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cca33a65-469e-403d-a602-0be29ffafc77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb6cbf7-8145-4bcf-94cb-f2750c116efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b26ecf-453d-48f5-845a-9fec6fdadc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba152799-fa58-4b0d-b244-3249a2de0016",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ede9b0-9aca-4dac-a91e-eed8acc40454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61c35d61-0de2-40e7-8ce2-09467aca39f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8733bcc-ff4a-49fb-9c54-ef25e3adb730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193da837-1e85-487c-98ae-4c5c9149d3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c9e259-075b-4ccd-8642-c5e948047d14",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a60adc-bf04-42cd-a6ea-1a41bc0dbc4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c70328ed-f500-4ca7-9f89-1ac2e25e7fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133da3d9-1601-4046-a01d-5f9118ebeaf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdfe31f-2918-42a9-808c-7b5bc4047850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f94500-bb57-47f7-83a2-2373962d8395",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f17004c-b923-4169-9131-dc3f7c9abc75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5c65f1b-6804-4818-a54d-5a183a0c2f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799da853-58a3-45e1-b008-02dc5bcdd8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78585d53-37e9-4483-a247-346adde20538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b464d575-350e-4b41-a218-9aaaec3a6646",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560e7e6e-7817-486b-b31a-1bceb413a678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfa749cd-1c3e-4c65-9353-105d1bec0817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2418d72-1da6-4c32-b951-a2a5f2a4d55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f1c5fa-8b10-4b49-adfb-7e30d524af42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9183c0-5560-4a3c-a1ab-cd24e642dfb9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e6d551-f5ba-434a-aac9-3cdba9ea74c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca175c65-7bc6-4f19-8fe9-84f43b13736a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a535ce20-2f8d-4aab-9193-2a3a69ca4381",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb03cb4-bc93-4a51-bbd3-7fc8157d3f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0edd22-89c6-4831-a05c-4a2e7ec120d9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eee4971-e096-4a15-89aa-c4ced0898650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bfe1386-ea4e-43c1-b279-8cbfc0b83fe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93acb2df-2c13-4197-89dc-b868dad47dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2c7ccd-48f3-4b23-9aa6-3a5af0995a5e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "961dd1ca-ba11-4625-828c-58c9e8124134",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6c20860-7f2c-4a6a-998b-288f2223d63b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bac75ac9-4c6a-4314-81e3-f564e1344041",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ddee8adf-f916-4329-a828-1e50eeaa31ba"
                    }
                  }
                ]
              },
              {
                "id": "fcea8458-ab0e-494a-949a-fc075a09b367",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87a01774-318d-4ad7-b73d-93ac5cca8c40",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f337e2d3-d43a-4219-a878-13a0958b4f45",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d9cd4c8c-e3bb-4ba2-9b8e-fc405ff833c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8859693-55f8-4071-b171-787ac5147a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "736d3370-238c-4377-8c9a-6382a5c38bea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ab136e4-0a9b-4877-83bd-05ea8d501094",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9336008-4668-4131-a3e1-7f426e0d9a8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c988937-bf9c-4f19-b22a-237a102a444a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfaa7083-9737-4feb-a4e1-9b5e1439e123"
                    }
                  }
                ]
              },
              {
                "id": "72cc0946-da29-44d9-8128-5e5d74b4bfef",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9b48a05d-a18a-491e-b4eb-f9e94be62ee3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc5157a-b5bb-4aa3-8c85-f5cdf76a9ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ad905f6d-34e9-44b4-a1e7-4078cd00ed37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09de216e-05bb-4800-b8b1-4bdfec257581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9210b6-a316-453a-bc59-79522ccf89d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bc97e2c8-0910-40c8-a57d-cac58248cffc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14e83222-5d82-4ad6-a747-ae8d5f0dccca",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97d72ef8-04cc-4b12-a767-f7d71076ed25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8420b43c-0d14-4be8-b003-4804ec72f918"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ebb5909-4a10-4b31-845e-330c3fae3b7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21b6426a-0c80-4e8a-ac1f-3ce58d4da280"
                    }
                  }
                ]
              },
              {
                "id": "e8fdf04d-eeb3-4e30-94a6-fdf1715f6890",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c9bdcbf-5850-43bd-a259-cf5c2cfeb6a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5100d41a-f0bf-4429-b7a0-1044f1b2edbb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d2aec8c-a309-4513-95cb-4dc540032079",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8394d445-8b6e-4868-95be-56ac7e4080ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2560d8f8-86fe-432e-9b4c-3097b3e9dfed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d3733edf-5cc8-46bd-be66-3de64fce9cfa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e66547d1-1d93-434d-97b8-3ff42fd6e864",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af598c7a-4ed8-4518-8aa2-423fa09cb028"
            }
          }
        ]
      },
      {
        "id": "1494013e-be67-46e9-a9e4-06cd77351be5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "73d34f65-98ec-41f7-8ce8-b5b567e2cd4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4274cec6-bcc5-44f9-9cd5-e207eb0effda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f7855b1-ccb9-4864-9fbf-3aec0410e3e3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3ae357-0a32-44b5-b245-9832b0a60aad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8f51928d-ddf7-474a-a75a-40cb7a9972e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f6949e-5ffb-4905-bd11-51994839d46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2d502c1-4e7a-4bbb-a1a3-2cde2b125663"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef20055a-f6de-4802-aeda-26ccd03477eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8b5af5c-a5b4-4c15-80ae-ee410999f9e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0731fb1-de83-4953-b6e6-509ff8443ef0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8fd5b1b-6ff9-4136-86e8-0f6066951838"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf271281-e6de-4b92-84a8-645def50ef88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c0be2c0e-bb84-46b9-b2d5-769d5a07bb6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd15c8cd-8fd1-4623-8871-eafa64d5639b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dfeb826-12ee-4e05-a45d-ef2d6113d618"
            }
          }
        ]
      },
      {
        "id": "dd676de6-5fdb-43a6-bcc8-dd901f6b8537",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e7ffd612-9394-4023-87d7-ed0a81fccd6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5834c57c-bca0-4238-89e7-2044d855d49f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7ba15f7-43f3-406b-a1bf-9020e41a1107",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a5ba8d-bf38-440f-9a40-785077bc1796",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f87e162b-598c-4ba4-8dd6-3e020f77311b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a79c858-c631-4da6-af27-fe81c2f67e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a621848f-061c-400a-86c5-417c05360bd8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f10bbf4b-7351-472a-9776-b4bad4f01002",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11689384-a864-4219-89ad-5c2cfddb8b7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ce7eee1-feea-4b15-977d-d6ccf8a39a26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0d72c30-38cf-4ea4-9a16-0d11ae19687c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "052d1df0-18dc-4d46-b22a-13ec08e42b48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "43c79b19-5024-438b-9000-b129715ad0d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c77ca37-390a-4cd9-906d-bd8fde2374b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80aab13a-daec-42a0-86f1-75a8f3f71f44"
            }
          }
        ]
      },
      {
        "id": "ca8cb535-98ac-45c6-8453-601212bdd0d2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "85b0b996-07b2-4ba5-bdbc-1ad2924e1016",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9bb6c762-48b9-4a3e-8453-034723cf4aad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3684652c-fd0b-4576-a5fb-a027fc6b84c9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511aa1a2-c5bf-4f52-a7bf-d4394f4d963f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23467bd5-ee4c-42b8-b4b2-42540686d3a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0418157-ff91-46e4-8ec0-1003c304e1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "327d41cd-2560-40ce-800d-3f271e887a59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6b83d48-7e79-47d8-823c-7aa36c8a1613",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "149ca6c0-c978-46b0-bdde-48ddf1e2a713"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdf626c7-69cd-4c28-8762-a2c6fc66d737",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eac824d2-de7b-4db5-bb8d-e2dd5451a84d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1888630e-5df1-44b1-8c28-0611870f51ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7edbc767-d386-4c34-9e01-5ccee44e4113"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c2ba555-9ebe-4f0d-b03d-0f387bc9301e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55483a89-9862-4774-a4db-c96b5e2aa7ed"
            }
          }
        ]
      },
      {
        "id": "f11d1605-157e-4bd7-9da8-a37538a84199",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7040ec25-ea15-4e25-8565-c501ea750e56",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3fbdcce-49bd-44c7-a734-7eb619a13adc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1c2afff9-4a8d-4e7c-9d54-5112bb68f8c9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bc542c6-d116-45cc-8103-b5f745f0af9a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93990783-d171-4b73-b329-f48481a3e6ce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 147.9295774647886,
      "responseMin": 15,
      "responseMax": 2030,
      "responseSd": 271.09503161700894,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691628081265,
      "completed": 1691628137133
    },
    "executions": [
      {
        "id": "f8ae05f6-a0a2-4939-b3ec-88df33fef23c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "68f29907-81af-4733-af1e-574b7ca63726",
          "httpRequestId": "2b2337d3-9aa5-448f-bd85-67b246694835"
        },
        "item": {
          "id": "f8ae05f6-a0a2-4939-b3ec-88df33fef23c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "df120060-fe99-42c5-813e-97773b451ed2",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 0
        }
      },
      {
        "id": "5de207e6-5464-4995-bc35-ff7f6666734a",
        "cursor": {
          "ref": "fa692cfd-24db-4838-87eb-44ab976ca311",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d28eee3f-56e5-4e0e-8e90-e61c117203b9"
        },
        "item": {
          "id": "5de207e6-5464-4995-bc35-ff7f6666734a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "30972d37-54fe-4009-870a-f031dd8dcd1d",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "73bbf9b6-0dab-4406-b104-07259595ecae",
        "cursor": {
          "ref": "7a516b8e-0299-4638-b6ea-f04372338986",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "43e6cd07-74ce-471e-8b0f-05c673fdd20c"
        },
        "item": {
          "id": "73bbf9b6-0dab-4406-b104-07259595ecae",
          "name": "did_json"
        },
        "response": {
          "id": "66271561-d4e0-40cc-8c30-54daf57da3d0",
          "status": "OK",
          "code": 200,
          "responseTime": 403,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4916e0cf-191a-473e-8e39-d4fc86530a4c",
        "cursor": {
          "ref": "ef1e0009-61cb-448a-8322-d8a4903eb11c",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b3f06a60-cae0-44df-9d87-578ac95b6ccd"
        },
        "item": {
          "id": "4916e0cf-191a-473e-8e39-d4fc86530a4c",
          "name": "did:invalid"
        },
        "response": {
          "id": "0eb47b38-89e6-4597-863b-da5b375b8212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4916e0cf-191a-473e-8e39-d4fc86530a4c",
        "cursor": {
          "ref": "ef1e0009-61cb-448a-8322-d8a4903eb11c",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b3f06a60-cae0-44df-9d87-578ac95b6ccd"
        },
        "item": {
          "id": "4916e0cf-191a-473e-8e39-d4fc86530a4c",
          "name": "did:invalid"
        },
        "response": {
          "id": "0eb47b38-89e6-4597-863b-da5b375b8212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e33a98-b789-4ae9-bb52-4d1655a228f9",
        "cursor": {
          "ref": "2615d476-9e27-4b21-9460-e4c4370db2a9",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "542ae962-0ef4-4b00-b739-6a93c3bd893e"
        },
        "item": {
          "id": "95e33a98-b789-4ae9-bb52-4d1655a228f9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f8e69a29-dbbb-4bcf-8c18-b5f111b73998",
          "status": "Not Found",
          "code": 404,
          "responseTime": 124,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba697a2-d807-419b-808e-4d42f49ac30c",
        "cursor": {
          "ref": "99b2becc-a447-4adc-ad4a-6d1187710be3",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fb21c43f-29e6-4c3d-a648-7bc64899d304"
        },
        "item": {
          "id": "2ba697a2-d807-419b-808e-4d42f49ac30c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9aa42e32-3c5f-4371-b897-8a70b9a1c04a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242cc2ad-8b75-43f8-a4b8-31dff3deb2be",
        "cursor": {
          "ref": "95e46ddc-07b2-4fc1-b75d-d5a15479d80f",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "20e49227-2e6f-4164-8bee-f5fa3fcab464"
        },
        "item": {
          "id": "242cc2ad-8b75-43f8-a4b8-31dff3deb2be",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "11c2ff8a-4e33-4ad1-8517-29113c2c86db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe345bb-6992-4937-b76b-95fa27c40da8",
        "cursor": {
          "ref": "9f0cb7a4-8f83-47ff-a0fd-01de243dbc4e",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9533a569-e571-428d-9f58-7a5ae050c3f9"
        },
        "item": {
          "id": "dbe345bb-6992-4937-b76b-95fa27c40da8",
          "name": "identifiers"
        },
        "response": {
          "id": "3652bd89-ae31-4083-900c-f603d91d6898",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf458b65-c00f-4a78-8cfb-b95d20fd6cac",
        "cursor": {
          "ref": "17da777a-b273-4af3-a091-1a1f70d3c885",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "47805050-b2d4-46f5-a8d9-7864e025fb26"
        },
        "item": {
          "id": "bf458b65-c00f-4a78-8cfb-b95d20fd6cac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d47de7f1-33c9-451b-a499-f35bb4d42b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcbde42-511c-4f0f-91fa-82e651302caf",
        "cursor": {
          "ref": "49f0a331-5474-4c2d-b938-fcd7b9223173",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e001bd15-0ca9-4bb3-94cc-9c81e6bf3e99"
        },
        "item": {
          "id": "ffcbde42-511c-4f0f-91fa-82e651302caf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a507865d-2b3e-4713-b74a-77bd5b8834a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789b4eb3-600f-4a3b-9557-6f5e4ee6d13d",
        "cursor": {
          "ref": "155c65e2-765a-4adc-a885-665a6068c8f5",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "75a6e1b7-180f-454d-8a8f-65d39be972d0"
        },
        "item": {
          "id": "789b4eb3-600f-4a3b-9557-6f5e4ee6d13d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9dec7ba8-67bf-4f63-bd97-b6dad000a0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975a9a8c-4f97-4455-9b22-34d8e85ed08d",
        "cursor": {
          "ref": "078086d4-1ff1-43ef-9781-17edd2e26101",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "39e0bd8c-c48b-4358-b550-758bc22ab477"
        },
        "item": {
          "id": "975a9a8c-4f97-4455-9b22-34d8e85ed08d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "91f3ab6a-7af4-492f-983c-db9dcb8b3b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628b1283-8055-44c5-923e-0610358d4ccf",
        "cursor": {
          "ref": "e03dc043-c1db-4b38-b61f-0f8af41c8386",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f7235db8-bf53-4f4b-ab5d-a253c01e725d"
        },
        "item": {
          "id": "628b1283-8055-44c5-923e-0610358d4ccf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8b1e1049-ec7a-4923-9428-0bdd68b38c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc229d0-23f1-4647-be8c-ca305fa68475",
        "cursor": {
          "ref": "540e9cee-1cdb-4812-ac30-656432cae374",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f3f8879e-469b-4b13-93b8-f62162d639ab"
        },
        "item": {
          "id": "8fc229d0-23f1-4647-be8c-ca305fa68475",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c1df8911-6ec0-48fe-9eda-c672978fd710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69205213-70e9-49c6-a8cd-c2d715a581a1",
        "cursor": {
          "ref": "1fef08af-f4a9-47fb-895a-605f6d4b9337",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "65f65491-4aaa-4983-bf11-9d2d883d5abf"
        },
        "item": {
          "id": "69205213-70e9-49c6-a8cd-c2d715a581a1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f0f4a3e8-ca56-4c21-8143-9bb6d789c8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb933355-5e08-4a7f-9460-d7f16c42bc9f",
        "cursor": {
          "ref": "1d53daa9-95c7-4b37-9991-367fc3b4b713",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5a3cbe38-7892-4357-a77a-9921e62ca05b"
        },
        "item": {
          "id": "bb933355-5e08-4a7f-9460-d7f16c42bc9f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4c400814-7fa4-4ec2-b6a6-8b71507d6304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21be4f8-25e2-4434-bb8e-a8b293dce051",
        "cursor": {
          "ref": "00d196e1-30ac-484e-9770-3a6cb80ccfa6",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7f924843-5285-4d8f-b67d-3b0ef5c4e5ad"
        },
        "item": {
          "id": "e21be4f8-25e2-4434-bb8e-a8b293dce051",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "19589fdc-f868-40be-858e-23da62903efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549e18e1-7847-433b-9c93-ded318f6e966",
        "cursor": {
          "ref": "114812f6-cc89-48d8-bdb9-2eafcbb862cc",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2b44a188-566a-474b-b156-73b3f67c02d9"
        },
        "item": {
          "id": "549e18e1-7847-433b-9c93-ded318f6e966",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a9f99fa7-ec7a-465d-a260-8d6bb6ffe95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f10ee13-e2b2-4287-8b83-631e412fa7d4",
        "cursor": {
          "ref": "b745542c-1966-41c3-8e59-4e6f710dfd01",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "85d2d02c-e0cc-4916-b678-2384d91f5509"
        },
        "item": {
          "id": "8f10ee13-e2b2-4287-8b83-631e412fa7d4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "37ac1352-e1f3-42b8-8c4f-ff68ab982e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec648544-0280-41b2-82be-dbbf9d49d6ed",
        "cursor": {
          "ref": "ad371ab8-a62a-467d-997b-68e03c42d677",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "61ba59a4-427f-47b2-b39a-87e889db871d"
        },
        "item": {
          "id": "ec648544-0280-41b2-82be-dbbf9d49d6ed",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b8e97a80-0957-44f9-bee2-b9616909644a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97dab08e-8bf3-459d-93b6-75c064c815db",
        "cursor": {
          "ref": "3f0c968e-4d20-45a7-8016-722c8d6baabe",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "80ac06cb-ba4c-4729-a569-22697b8edc4b"
        },
        "item": {
          "id": "97dab08e-8bf3-459d-93b6-75c064c815db",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fa78552b-0fe6-4928-85cc-fb1d02c596e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec031ff-3093-4a72-969b-057071515951",
        "cursor": {
          "ref": "52ec635f-bdb0-4005-a538-fe0db9895f28",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d387c12a-71d5-44ff-8e61-670712115333"
        },
        "item": {
          "id": "9ec031ff-3093-4a72-969b-057071515951",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "715c31b2-0304-4011-af67-f24966848571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15012e2b-25bd-439e-bc9e-bda929659fb0",
        "cursor": {
          "ref": "2380ffaf-7e40-4800-9a43-65bcb978a05c",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "681e65e5-36d5-4eaf-b9d1-d6954e8a055e"
        },
        "item": {
          "id": "15012e2b-25bd-439e-bc9e-bda929659fb0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f186000b-ea7b-4c77-bf81-47dcf0d53f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827dcbf2-53d2-4ba5-94d8-3950678653d3",
        "cursor": {
          "ref": "5b91f739-adce-43d4-9dfe-5290c3e35aaa",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0d9ea9a6-41e8-4af2-9db7-b3be7c83cfef"
        },
        "item": {
          "id": "827dcbf2-53d2-4ba5-94d8-3950678653d3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5f21001c-add1-484d-9203-09d44b0dcf45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3317e10c-2297-4c24-831d-7e7f487b520d",
        "cursor": {
          "ref": "3196e37b-dd6a-4c08-ad45-0bc6a61b6856",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8db6f2cb-c124-4b98-9bf2-af08cc7e628a"
        },
        "item": {
          "id": "3317e10c-2297-4c24-831d-7e7f487b520d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f7ab0511-f30d-41e0-b4de-89fbf5e59a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5da7593-fb50-4cde-8510-112da842ea72",
        "cursor": {
          "ref": "9cf0a42b-0c97-4d94-a7c8-42a0ab7ae21b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bee2c84d-8786-4203-8081-9e671514fa84"
        },
        "item": {
          "id": "c5da7593-fb50-4cde-8510-112da842ea72",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c1608bc8-1ae1-4457-a82d-74546b3ab183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c7db3e-d61b-473d-9a2e-2322aa425499",
        "cursor": {
          "ref": "12e603ee-9963-42e6-bd2b-03b7b271ce5d",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ed3beec6-03b9-4c10-b614-2f7ba728496e"
        },
        "item": {
          "id": "22c7db3e-d61b-473d-9a2e-2322aa425499",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4b3c3abd-126b-4290-9849-8f4a785e4d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ce5ac8-cf49-4675-9417-d1cfecf94307",
        "cursor": {
          "ref": "de1deba4-ce18-486b-b3ab-17c5c3323695",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "01b6d753-d751-486b-9462-a89fa706c4fa"
        },
        "item": {
          "id": "90ce5ac8-cf49-4675-9417-d1cfecf94307",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e4144b40-771a-4b43-9841-cea869e30501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831c0e46-0699-4fe1-b7f6-a9677c2901c5",
        "cursor": {
          "ref": "c017dd17-1311-47ef-8d29-7d7aab67e8c7",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a33c9728-f12b-443f-8bc3-a86c79dac2bf"
        },
        "item": {
          "id": "831c0e46-0699-4fe1-b7f6-a9677c2901c5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bfccd11c-d3aa-4908-aa74-a37d4f704ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb9e4b4-56d2-46c6-b10c-a48942c5c2b0",
        "cursor": {
          "ref": "9702d7e8-8712-41bb-9ede-e44e898cb065",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "eec4f7da-997b-41c4-8158-241e8522b12a"
        },
        "item": {
          "id": "5cb9e4b4-56d2-46c6-b10c-a48942c5c2b0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f5d06e01-8907-4492-8c98-2428ed400e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0380909a-6e2f-4928-9b4b-a93dba3074e4",
        "cursor": {
          "ref": "062d532d-5f13-4c62-b781-e40ec0492f7b",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "562b47d9-c9eb-4162-84e2-3acc0d3b4390"
        },
        "item": {
          "id": "0380909a-6e2f-4928-9b4b-a93dba3074e4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "24c3df93-b3fd-4cf4-9b44-320fa363711e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32646de-bbbd-4dd3-8b6d-22e19162cd9e",
        "cursor": {
          "ref": "2c5fdeb0-027a-4558-81a8-fc6b2da096a9",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cb52ac81-7af8-4d4a-a896-2b98b5b97956"
        },
        "item": {
          "id": "e32646de-bbbd-4dd3-8b6d-22e19162cd9e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "668de9c7-c311-48c3-9911-338254c8b8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90755c04-95dc-4f30-b6ee-fc89a1e34def",
        "cursor": {
          "ref": "b56ff6a3-ae8d-4211-b02c-daca5ee3c743",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e89d5c83-c402-47ed-8b9d-c98eb166c62d"
        },
        "item": {
          "id": "90755c04-95dc-4f30-b6ee-fc89a1e34def",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e1dce9df-9b5e-42e4-99d1-34bcd4565b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8748d31-109c-44fd-b9a8-03df6ac778ec",
        "cursor": {
          "ref": "72f3d287-1545-4bfe-91f1-0442bf11f780",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "45d258ea-3069-4274-aa2e-79b7cdbd48e0"
        },
        "item": {
          "id": "a8748d31-109c-44fd-b9a8-03df6ac778ec",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "48fc895e-9e30-4b4e-b21f-95a83afbf5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278175ae-ceed-424f-aa54-e448cdd75a3e",
        "cursor": {
          "ref": "965e5308-ea3d-4759-be3d-a2fafd0c8340",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7cd43d54-dc6a-4742-89ab-ec6e9b7b142e"
        },
        "item": {
          "id": "278175ae-ceed-424f-aa54-e448cdd75a3e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ce0e3a65-0d9c-48c1-a8c4-cb08bb6b6d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534b9bfd-5ef4-4979-96b2-c2bf64ef0ce9",
        "cursor": {
          "ref": "ca8a7e19-5948-4063-a41d-ecbb3e308903",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7238a635-8e13-4cef-a84d-a617fde6b1be"
        },
        "item": {
          "id": "534b9bfd-5ef4-4979-96b2-c2bf64ef0ce9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dee7289e-8fa2-4012-a56c-35c8a136a366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3907a3d1-d5cb-429c-9047-dbfbed779e34",
        "cursor": {
          "ref": "4654d399-2d14-4fb9-b6b0-1ffc0d6359f0",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e5e81946-2421-4b1c-b664-2edd46c50ebb"
        },
        "item": {
          "id": "3907a3d1-d5cb-429c-9047-dbfbed779e34",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5b9c6c70-6197-4c56-9848-c65df2e2e043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b724eb4f-8334-4bab-bce0-b5ee415cdc0f",
        "cursor": {
          "ref": "7f541dae-dde3-4077-9779-c5e33e9e6357",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8a24b118-6313-4818-827c-327645463bb3"
        },
        "item": {
          "id": "b724eb4f-8334-4bab-bce0-b5ee415cdc0f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1997da78-59e3-4289-b917-a5c814f60d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d17a9ae-8f30-417e-8387-2ce686dfc345",
        "cursor": {
          "ref": "060ab8d0-1d51-481c-a67e-b6b2cf1b8688",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "366cd859-c592-438c-86e8-a65f5b0ff197"
        },
        "item": {
          "id": "1d17a9ae-8f30-417e-8387-2ce686dfc345",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7ddb568c-efe4-407b-a211-00aaa4998d1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 203,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d60fb2a9-5c2d-431b-9e3a-0bbf1f6827a9",
        "cursor": {
          "ref": "3154b7a7-f3bb-4e9d-a92a-94d769303212",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e48abd5a-8134-4581-a5fa-e11a84c5547f"
        },
        "item": {
          "id": "d60fb2a9-5c2d-431b-9e3a-0bbf1f6827a9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5a02d511-d805-4a9b-88f0-2f974dddc36b",
          "status": "Created",
          "code": 201,
          "responseTime": 2030,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4df92877-dea5-4d7a-a566-23588a0cf13d",
        "cursor": {
          "ref": "552458aa-3c1f-4b2a-9d75-97a902a96f66",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0abd8b48-4f0a-45be-a4ed-e590a06f0bdc"
        },
        "item": {
          "id": "4df92877-dea5-4d7a-a566-23588a0cf13d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3a02b2dc-9a2e-42c3-a474-2104e53cff85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 127,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ab067feb-3f65-42fb-b7b9-b64fa3875ee0",
        "cursor": {
          "ref": "5b69c953-48e0-49fe-9cd8-c19df60ca559",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1e8aa899-c868-4175-a4af-8ae57c0f0673"
        },
        "item": {
          "id": "ab067feb-3f65-42fb-b7b9-b64fa3875ee0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "610a0f3d-ae9b-41e7-9ea8-b207b3e26f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e1c0d1-f88b-47d4-a063-44d273242c70",
        "cursor": {
          "ref": "7e0a3c45-6adf-469a-ad45-143fd7aec634",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "664619b7-f826-48e7-8c96-ce7542753a23"
        },
        "item": {
          "id": "69e1c0d1-f88b-47d4-a063-44d273242c70",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "937b7215-171c-43a3-a53f-dace38599c2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 139,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9efe65a8-9b5c-4291-97d5-2b1c74490c93",
        "cursor": {
          "ref": "a642c8c1-5214-4699-9cfe-a97a22053809",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "87f0c4a1-6d5b-44a6-ac00-e56e085fc9c6"
        },
        "item": {
          "id": "9efe65a8-9b5c-4291-97d5-2b1c74490c93",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "faed291c-a79e-4fe0-b363-b718bc9c4c83",
          "status": "Created",
          "code": 201,
          "responseTime": 1212,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6262f62c-6515-48e0-9710-194020f92721",
        "cursor": {
          "ref": "95914548-cf47-43d1-a95e-90eb80632cb1",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "253e32f7-5964-4dcb-81b8-a0b209cd8bf2"
        },
        "item": {
          "id": "6262f62c-6515-48e0-9710-194020f92721",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3c4e2bb9-96e2-47fe-abae-02d8aa8ff9e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 160,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "20c4753e-3ca0-47b2-b11c-f5665bff93e5",
        "cursor": {
          "ref": "0f14bfca-443f-4a34-b705-0aa0756fdf41",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3072166a-6d69-4944-94ea-2279fc28a411"
        },
        "item": {
          "id": "20c4753e-3ca0-47b2-b11c-f5665bff93e5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "97c45fce-0123-459c-a460-00b56e691add",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 831,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5d81641c-3ec2-499e-9bc4-a3031bf59eae",
        "cursor": {
          "ref": "ae7d756f-1b21-497d-a7fb-ce1a753bded9",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "49e1f696-497e-4e45-9146-a183a1c370b5"
        },
        "item": {
          "id": "5d81641c-3ec2-499e-9bc4-a3031bf59eae",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5a8141ac-dbb2-473e-a8cd-903bc9861ea8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 122,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7c82e5a5-263c-4037-b21b-309a7aa9c933",
        "cursor": {
          "ref": "26f94fc8-582d-4f4b-a493-3b05e2feeeb8",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5947b676-96ef-42db-9c6f-a36bd1962a2f"
        },
        "item": {
          "id": "7c82e5a5-263c-4037-b21b-309a7aa9c933",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "246ca8f4-d5d3-48af-9c36-0a81458f61e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 131,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ead1f192-4eb5-46af-8af8-5b7aed9273ef",
        "cursor": {
          "ref": "bbfc7d35-2e3d-4cc6-b81d-584c329a683a",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9b541794-6f66-4b3c-b902-4de045d73124"
        },
        "item": {
          "id": "ead1f192-4eb5-46af-8af8-5b7aed9273ef",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3df4ea61-e78e-400d-8891-be12a259d9d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 124,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8eee7c9b-3e3a-405d-b36e-683d9065c1bd",
        "cursor": {
          "ref": "c7139531-baa4-4b16-a358-24caa9f04189",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "64173b49-542b-4595-be48-3c3b21c2999a"
        },
        "item": {
          "id": "8eee7c9b-3e3a-405d-b36e-683d9065c1bd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e0f23e85-1804-4092-90d4-abc389b7f780",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "85f3103e-b11e-4876-964f-eb5449b73543",
        "cursor": {
          "ref": "854f3588-fa2a-4ceb-bbd6-2a1a88774b1d",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "56520b56-6860-4929-8a80-0e16a8450863"
        },
        "item": {
          "id": "85f3103e-b11e-4876-964f-eb5449b73543",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b6ea0b37-7d70-495f-8559-129b09e25d11",
          "status": "Created",
          "code": 201,
          "responseTime": 1067,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "006d4ee3-fedb-41e3-aab0-9cb3110667ee",
        "cursor": {
          "ref": "b0fdf876-1b3c-4abb-ab8d-4e30deb19daf",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "060c67d5-4a8f-43ff-8654-ff16b090bbe2"
        },
        "item": {
          "id": "006d4ee3-fedb-41e3-aab0-9cb3110667ee",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6a67eb16-b7cb-4472-994f-f56772d8a2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55dc42c2-5c4b-4028-ae00-e3ed55a42ad5",
        "cursor": {
          "ref": "e0c7ba72-c817-4532-9116-955ad1fa13e3",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d152d905-09ac-4499-ac0f-279ae407d2d9"
        },
        "item": {
          "id": "55dc42c2-5c4b-4028-ae00-e3ed55a42ad5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4ed37143-44b1-4034-8706-12f9be72518b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51f49b9-aaf4-4b1c-937f-0dbbb4f27afa",
        "cursor": {
          "ref": "2d7e62a5-6400-404d-9cf3-b5aa8668c23e",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e82db269-4870-4836-b937-b6a0c1971fd7"
        },
        "item": {
          "id": "f51f49b9-aaf4-4b1c-937f-0dbbb4f27afa",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b2e87578-1e4c-4733-b04b-756c987ffe7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e428c4-0e0c-4e54-af03-03a8f0ecbc2b",
        "cursor": {
          "ref": "bd69f086-0870-4711-bf11-91c0173c5494",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b39e2e56-cb0d-4242-88de-5da212c1608a"
        },
        "item": {
          "id": "94e428c4-0e0c-4e54-af03-03a8f0ecbc2b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "dbff0095-b286-4890-bab9-d5e8da7a82e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97575675-7766-4a0d-8c23-5c5c6d7c20ed",
        "cursor": {
          "ref": "5ddc490f-b78d-406a-9b70-bd4053c6441e",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "59fcfe0e-103d-4c8f-a8cc-ebe67327a6af"
        },
        "item": {
          "id": "97575675-7766-4a0d-8c23-5c5c6d7c20ed",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4f4d06a9-4a5b-4f67-b555-164f95513420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b229af07-dc13-44fd-b395-17e9d986da4f",
        "cursor": {
          "ref": "a19c4645-4b39-42b3-9a15-f935fbf64263",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7dbcd74b-1410-4f95-bb93-650d68be33f8"
        },
        "item": {
          "id": "b229af07-dc13-44fd-b395-17e9d986da4f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b007ffd5-217f-48cf-ac5b-33ff0df2770e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24bb87c-57ba-4a1f-ad52-4a036242abbd",
        "cursor": {
          "ref": "7cd639ba-61b7-4a97-ba3b-62f9523fdfb2",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "34ca0ae5-7d33-46e3-8ddd-4b4637145120"
        },
        "item": {
          "id": "e24bb87c-57ba-4a1f-ad52-4a036242abbd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b36f65ab-7c84-4601-9330-6065713ac6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964b2b8a-b3c1-47ee-97d4-8cb3cbcfb74c",
        "cursor": {
          "ref": "fd7c6bbb-bf2a-4f78-a506-c7304587bcf4",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "990d91f6-7eb5-4834-85e1-05503ecc0808"
        },
        "item": {
          "id": "964b2b8a-b3c1-47ee-97d4-8cb3cbcfb74c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7a0d06a1-fd32-42c7-90e1-6488a3326e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b727c4f5-e9f8-4422-bf63-c1ca2c458f60",
        "cursor": {
          "ref": "cceba5d3-1d4c-4961-946f-a60c06b0e329",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "553b5364-7e51-454b-9edb-b8c560c05f36"
        },
        "item": {
          "id": "b727c4f5-e9f8-4422-bf63-c1ca2c458f60",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "294bb221-17e0-4e64-b5b1-9bb519a5ff11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afe9695-d080-4f2b-9442-35bd8968ee4a",
        "cursor": {
          "ref": "e0061314-244f-4148-8ae8-be59e4d1fdf9",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "78e19ea2-a14b-4b05-b56c-bc31644a0795"
        },
        "item": {
          "id": "4afe9695-d080-4f2b-9442-35bd8968ee4a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ecb319df-8d75-4737-acda-67fe8ad41e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c20c1d-c67d-41dd-98f6-1c54a774de4e",
        "cursor": {
          "ref": "f19015f1-6d2b-4cee-b28b-fa1e8d52e42f",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cc783725-eec2-4970-9cb4-2b13fca938a3"
        },
        "item": {
          "id": "08c20c1d-c67d-41dd-98f6-1c54a774de4e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4157e98b-6bac-4dce-adb1-bd2ed0e1a510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfbef7b-38c8-4b37-9cb3-613ed7b841c8",
        "cursor": {
          "ref": "cec48b7c-f7ec-4d9c-b90d-f5cca4ffb1a7",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c638d058-35df-4c18-bfa4-89261c1a85a2"
        },
        "item": {
          "id": "fcfbef7b-38c8-4b37-9cb3-613ed7b841c8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4428e0c8-6c1c-4138-94d1-2f018c083372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800025ee-5a6d-40ad-a85e-0538d0b95449",
        "cursor": {
          "ref": "e27d7cee-7843-4a44-913a-c07d70488e9f",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "97c84690-3c44-4ad4-a8f0-cf733b229208"
        },
        "item": {
          "id": "800025ee-5a6d-40ad-a85e-0538d0b95449",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "801bf5ac-0dfb-4baa-997f-27db07a273f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54323d6d-f02b-420c-8f42-62928f408934",
        "cursor": {
          "ref": "aecd9394-d918-4776-a1c2-fc5b5334b9c8",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c4e83849-dfab-4bc4-a28b-349206e5ad55"
        },
        "item": {
          "id": "54323d6d-f02b-420c-8f42-62928f408934",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "758cd216-1dab-49be-a581-d8c12c02b612",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 812,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2992a22b-314b-413c-96be-61e722fd4a8c",
        "cursor": {
          "ref": "94587ade-b8dc-47bd-b7b6-3ddfdc299b7d",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7db1173a-760a-414a-bbc8-c3512d7c4d0d"
        },
        "item": {
          "id": "2992a22b-314b-413c-96be-61e722fd4a8c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "07cb10de-8502-4d28-9020-00a5baf13989",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 854,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "713eb497-dcfc-4106-a70f-7971cf2e2215",
        "cursor": {
          "ref": "59002e9d-e36a-46e6-894b-b61eef39e14e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8b219185-5436-4037-a59e-149697dfa71c"
        },
        "item": {
          "id": "713eb497-dcfc-4106-a70f-7971cf2e2215",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "61771d7a-e171-4950-ae1a-b46aedccb739",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 152,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d505569a-5039-4670-b284-b4b916a7ac3f",
        "cursor": {
          "ref": "30029b50-78cd-4e27-9e50-9608154d00f3",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b8726812-6d92-4cf8-bc55-c66478ca2e8e"
        },
        "item": {
          "id": "d505569a-5039-4670-b284-b4b916a7ac3f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "64ae76bb-d4c7-4cb9-85ee-e8ab53ee5ace",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 830,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6d534e56-39dc-4edf-bfc2-45c90030d55e",
        "cursor": {
          "ref": "88b923e9-0209-4962-8a1a-fcf99b2f1d6f",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b0a988c9-9d0b-4593-9ca9-5f46a340cd33"
        },
        "item": {
          "id": "6d534e56-39dc-4edf-bfc2-45c90030d55e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "217fd695-8315-40e6-b40a-0f4918ead97a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 134,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4a03139b-b835-474b-85ed-12263bff9119",
        "cursor": {
          "ref": "74ad028d-8985-4759-bef8-aac031276d57",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bf4889a8-2b28-489a-b9eb-8145298932a6"
        },
        "item": {
          "id": "4a03139b-b835-474b-85ed-12263bff9119",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2cf757d7-aedf-4019-86b4-45a586799eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568948a6-19d7-4e3c-8fad-ad9489529594",
        "cursor": {
          "ref": "8eeebbf3-fff0-4393-8ebf-308550ade1eb",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a073405d-277c-41df-9d88-f0918e287dce"
        },
        "item": {
          "id": "568948a6-19d7-4e3c-8fad-ad9489529594",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "18c6f760-a003-4f34-85e2-5113b39158bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e8fbcc-98ec-46a8-a02d-1297f48246f2",
        "cursor": {
          "ref": "31788de2-df71-4298-8c5e-7e64744936e3",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9e8ea67b-f535-4583-94f1-ee818e3ebc8b"
        },
        "item": {
          "id": "79e8fbcc-98ec-46a8-a02d-1297f48246f2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c4cc2bfd-a1f5-4c89-88b8-5a4db7a836e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1444196b-6cda-47b6-a447-1550b16cbc87",
        "cursor": {
          "ref": "5d166431-adc7-4735-8fa1-698f9717de92",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "07efca89-1b9e-4bdb-9419-ab962ef0c871"
        },
        "item": {
          "id": "1444196b-6cda-47b6-a447-1550b16cbc87",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "30ba4fe6-819f-4b76-8925-db48811a391c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74d4cf2-0199-4076-9317-b8cd20775cfe",
        "cursor": {
          "ref": "91df4efe-2570-4af8-9b82-60d8857ca717",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3fc8f754-2f4d-431b-b8b8-3673a66f7966"
        },
        "item": {
          "id": "c74d4cf2-0199-4076-9317-b8cd20775cfe",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "bbfb8d07-c171-4ea2-9af7-1cd882402d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cff62da-7e42-4fcf-bd18-5365a9f8fb42",
        "cursor": {
          "ref": "2bdeb4f0-a7d8-405a-a5df-361046e0380f",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "71a9a0fc-4abd-48f7-82d2-f9036d659100"
        },
        "item": {
          "id": "8cff62da-7e42-4fcf-bd18-5365a9f8fb42",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bf615283-322e-44ec-9236-1df1845e4ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74efedf-a43e-447f-acc4-87e1d624a3f9",
        "cursor": {
          "ref": "b75c0962-e677-400a-99b4-79ca57d98c12",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a57bcc23-1772-40e7-95b3-4fb89ef6ec10"
        },
        "item": {
          "id": "f74efedf-a43e-447f-acc4-87e1d624a3f9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "519a80ac-4e27-4617-bce3-f04156b5c487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff7dc9d-a831-464d-9340-25435f53c21a",
        "cursor": {
          "ref": "9f92df82-5f16-41ae-a2c5-389b9489b801",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8f949790-457e-446e-86ab-334e2ee46f7e"
        },
        "item": {
          "id": "7ff7dc9d-a831-464d-9340-25435f53c21a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1610e144-0be5-4b3f-b580-278931fe81b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c595e76a-6974-42df-a801-bc5bc9e07fa1",
        "cursor": {
          "ref": "25c340dc-4564-404a-bac5-cef9d9980c7f",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "873cf3e1-182f-42b9-bc71-f612bdbfe3a6"
        },
        "item": {
          "id": "c595e76a-6974-42df-a801-bc5bc9e07fa1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "50dd15cc-2e40-425a-a3b6-85090029c5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a721e10-3c29-4720-9a39-5d9a1ff4605e",
        "cursor": {
          "ref": "51d2cc77-042a-4811-87a2-0f39c96ae3ba",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3888f6b5-d230-414a-b17c-1f0265b056f1"
        },
        "item": {
          "id": "2a721e10-3c29-4720-9a39-5d9a1ff4605e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f378a43b-fdb3-4519-9e6a-1a2119895e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689b6330-e964-49c9-af5c-89b6f2816c2c",
        "cursor": {
          "ref": "9ffcbe28-5083-490e-a8c6-5ac6210a4cef",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "49f397bd-e91a-475d-b060-b4d8d8771088"
        },
        "item": {
          "id": "689b6330-e964-49c9-af5c-89b6f2816c2c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1bd9e827-c057-4548-a514-61764cb39f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6672539c-6f75-4739-815d-e5b293286fe8",
        "cursor": {
          "ref": "219606ed-3363-4972-8c87-896c1ddeae47",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0a7dd2af-0b79-44f2-a2fb-1c74faf80439"
        },
        "item": {
          "id": "6672539c-6f75-4739-815d-e5b293286fe8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5350dd53-6ec5-4b4b-a70c-c237035ffed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b63191-7e9e-4219-b927-41a8d79e612c",
        "cursor": {
          "ref": "33b871e1-464d-4069-9f7c-42ab90054887",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0a0552ba-33ae-4f1e-aa30-bc293751c7f2"
        },
        "item": {
          "id": "a3b63191-7e9e-4219-b927-41a8d79e612c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fe31a3ae-b523-4a6d-a535-bf4878445640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de2260e-fcf5-4e2f-b724-c6303aa1a573",
        "cursor": {
          "ref": "5b788432-8439-4d13-8c68-2999730f4511",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a87edabf-ce1c-4058-b3ee-feeb182cdf22"
        },
        "item": {
          "id": "6de2260e-fcf5-4e2f-b724-c6303aa1a573",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ce8d237f-5154-4b3a-b667-fd1791e55ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251cf639-314a-4536-8d95-56e1bb2666e6",
        "cursor": {
          "ref": "eb448e0e-f989-4d6d-965b-2ecd7d425210",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fc756042-0742-4238-ac58-f1720efde4db"
        },
        "item": {
          "id": "251cf639-314a-4536-8d95-56e1bb2666e6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dd4a02f2-ba4c-4024-81dc-b89bac930c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb9de3e-df2b-4c73-91e3-306bb0a94ff6",
        "cursor": {
          "ref": "104ef8ac-e4b2-4095-8ac2-e55733e9f712",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bcc71b7f-0d61-4315-9f93-8fb5cd7c6506"
        },
        "item": {
          "id": "3cb9de3e-df2b-4c73-91e3-306bb0a94ff6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c01360d4-a328-4428-9bda-d398b3ac2b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4734b2-86ed-46d0-8d35-db8411366095",
        "cursor": {
          "ref": "a8c21e0e-4390-4e4a-9db9-89be986a1f4b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "124a4238-6708-4a72-acf2-89932a4e61cb"
        },
        "item": {
          "id": "1b4734b2-86ed-46d0-8d35-db8411366095",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "44adb461-4c6e-4688-b748-00f55118797c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9baf288a-f15d-4bd9-8d5b-3a5ce9852688",
        "cursor": {
          "ref": "c31f5b25-da9d-413f-8d87-77cce793190c",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8e3bccbd-bead-4f4a-becf-5de5be5261f2"
        },
        "item": {
          "id": "9baf288a-f15d-4bd9-8d5b-3a5ce9852688",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ab612ed2-0fe0-45c5-8eec-7de99e85d176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de69160-79f3-403d-a1c0-bc62c2b29a7e",
        "cursor": {
          "ref": "c571d1fd-076f-444c-bb5a-5fe393d7e9a5",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "709a5f1f-de7a-4847-b34a-e25faca54258"
        },
        "item": {
          "id": "5de69160-79f3-403d-a1c0-bc62c2b29a7e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2e05009f-738d-4ac3-baf0-3667931d4a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a79d28-9c3c-42fb-811e-b28918da6d3d",
        "cursor": {
          "ref": "dec59b8b-a43d-498f-a3c3-9ee0e9d8e143",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9d2a74c3-db47-4c2b-8d92-c209b2dc2885"
        },
        "item": {
          "id": "a7a79d28-9c3c-42fb-811e-b28918da6d3d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c0005023-e8f8-4b43-8e77-674e1535b77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f352058-f301-48cc-85ac-e265c681b3c5",
        "cursor": {
          "ref": "74592f98-0059-44f0-ae23-2ce5eebf5438",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "794cb2e7-1eca-4d4f-a7ba-fb8f66876f0c"
        },
        "item": {
          "id": "8f352058-f301-48cc-85ac-e265c681b3c5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "404ce3fd-fa3d-4fed-956a-739b8dcebfb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e83afcf-ccb0-4538-8802-5b7072b521d9",
        "cursor": {
          "ref": "83bbc0ee-c338-4837-8275-1afd7517dba4",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "117ec777-5f35-4406-a434-8ac19a1d3c1e"
        },
        "item": {
          "id": "0e83afcf-ccb0-4538-8802-5b7072b521d9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e8c0a554-956e-4260-ad14-30b175490280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb135ce-563a-4722-a06c-20e90bebf5b5",
        "cursor": {
          "ref": "55f42560-4cb4-498a-a847-c483cd244511",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2bb9b826-a2a1-46b1-ae84-1a258cdbba3e"
        },
        "item": {
          "id": "1bb135ce-563a-4722-a06c-20e90bebf5b5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0d06e392-3b47-4584-9870-c2fb57670bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e350db4-4a63-4209-a05b-8c168764cf2c",
        "cursor": {
          "ref": "2055de4f-fb8e-49fd-b7d5-17c24bb9a6e0",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e34d6550-a312-4a64-beb0-845c82a644df"
        },
        "item": {
          "id": "0e350db4-4a63-4209-a05b-8c168764cf2c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "24f1d0b0-8ed4-4599-815a-b1badc575f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c9feea-c8ec-4c48-823b-13d1c75ed4d7",
        "cursor": {
          "ref": "3ae472d8-1486-4593-8a01-611261d4d628",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "aa78ea86-83f8-45c0-95a3-66ec57bd6e6d"
        },
        "item": {
          "id": "18c9feea-c8ec-4c48-823b-13d1c75ed4d7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f4ef2ed3-583a-4187-a00c-4562e152b308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb6dadf-b781-49fe-88e6-5012df567f40",
        "cursor": {
          "ref": "8270e6a0-7f02-4391-8924-3ddae479512e",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f91a6f59-bf90-4390-8de8-c7f112affe00"
        },
        "item": {
          "id": "9eb6dadf-b781-49fe-88e6-5012df567f40",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9ac20393-f8bc-4e0e-be0a-6dc694190cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fab145-f713-44f4-a71a-2fc3ea08f362",
        "cursor": {
          "ref": "fd7d7fce-e64c-45e3-bd54-4cd709cf979b",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "aedb31c2-fd69-4eff-9437-9ef5f25880e2"
        },
        "item": {
          "id": "44fab145-f713-44f4-a71a-2fc3ea08f362",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8fc0a399-0ef2-41a5-90c4-722f5b243eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a2c972-edca-4e2b-8aa9-08959e7adc83",
        "cursor": {
          "ref": "5e9e22fd-6310-47ed-b798-f7176676f267",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c16002d8-4cd0-4d96-9420-c3776fa246a7"
        },
        "item": {
          "id": "61a2c972-edca-4e2b-8aa9-08959e7adc83",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f2c8c53e-ca3e-441e-8eaa-ea6249109a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbd1254-2a75-4cd7-bb54-67d194f00eec",
        "cursor": {
          "ref": "dbacac58-5e5f-45e0-b59d-056b011cc850",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "358ae7ec-8c1c-473e-8c17-c3ffb6a336b9"
        },
        "item": {
          "id": "0cbd1254-2a75-4cd7-bb54-67d194f00eec",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b1bd3ebb-c934-4932-b069-3b0e38c4c610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b174efb7-7f01-4142-84a0-d1e1897d0958",
        "cursor": {
          "ref": "3160a786-647d-4880-b3dd-b1d953e938b7",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9076a6a1-1da8-45be-a4f2-401b4b83167c"
        },
        "item": {
          "id": "b174efb7-7f01-4142-84a0-d1e1897d0958",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8123ece1-4084-4a8f-a323-9a7454f8a5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2459d41-6750-4242-91f7-58b4e247dc8e",
        "cursor": {
          "ref": "8c09d7b9-f9f2-4f28-8c91-a247e3aba210",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2342a628-1087-454a-9f04-76536a535893"
        },
        "item": {
          "id": "c2459d41-6750-4242-91f7-58b4e247dc8e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8e095570-8196-4c5f-b37e-3fbba9818030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c9b89a-2278-4dae-ace2-788e3291edb9",
        "cursor": {
          "ref": "182b3bfe-2d87-4f0d-9831-73f33aced6b3",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b01b0ea1-86c9-451b-b66f-e489db0251bf"
        },
        "item": {
          "id": "e4c9b89a-2278-4dae-ace2-788e3291edb9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "241a18f6-4f9f-4573-b325-c7c034331e5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab6f524-f0d3-48ea-aceb-deb5f771cc26",
        "cursor": {
          "ref": "ab5f528f-b6b7-4666-9dd3-efcec87232e6",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1e131a58-6cf0-440d-abe4-973940414c07"
        },
        "item": {
          "id": "2ab6f524-f0d3-48ea-aceb-deb5f771cc26",
          "name": "credentials_issue"
        },
        "response": {
          "id": "efeeaf21-c00f-4e27-8434-a7f22ba799cd",
          "status": "Created",
          "code": 201,
          "responseTime": 1070,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf9f8bb-3b79-4aac-a85f-371db279b43a",
        "cursor": {
          "ref": "b4283282-5c2a-46c6-b5df-c8ff421a495c",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8f1064ea-0eda-45e4-91c6-a63b237ab3bb"
        },
        "item": {
          "id": "adf9f8bb-3b79-4aac-a85f-371db279b43a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c574188f-d16b-4272-9b8a-bae0fe929cd2",
          "status": "Created",
          "code": 201,
          "responseTime": 1007,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db7be4c-82bd-439f-9441-acf5ea20c24a",
        "cursor": {
          "ref": "e879501b-973f-49a7-a550-a28d898e5d74",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "096f57e5-35b4-41d3-b0c8-1659dfbcc170"
        },
        "item": {
          "id": "6db7be4c-82bd-439f-9441-acf5ea20c24a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e0d01882-6717-41d2-b944-0e7437be4d7c",
          "status": "Created",
          "code": 201,
          "responseTime": 1024,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8821bcb3-81a4-4c78-a972-6dc7d76962e7",
        "cursor": {
          "ref": "51231c93-4e49-4de3-a817-22aafdb4038b",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f912c7d3-1b53-484b-b6cc-0a4dba7f89b2"
        },
        "item": {
          "id": "8821bcb3-81a4-4c78-a972-6dc7d76962e7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "13f048ee-bee6-499a-8f7e-0c446cc0c147",
          "status": "Created",
          "code": 201,
          "responseTime": 1026,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca4490b-5db2-42a8-83b8-6978d854750e",
        "cursor": {
          "ref": "d961fdf9-abb7-4046-8c82-3b55a201fe1a",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5175fc7c-8f38-4153-9174-c8f48db7c6f9"
        },
        "item": {
          "id": "5ca4490b-5db2-42a8-83b8-6978d854750e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d6089f6c-53df-447a-aa30-65edf8f631cc",
          "status": "Created",
          "code": 201,
          "responseTime": 1036,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "993eafa7-e21b-4bc0-b515-e58b7a4b84af",
        "cursor": {
          "ref": "6a00501d-a3bd-4d6d-9421-e789270ff80c",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e027b9d9-1315-447e-9c66-10708d1a5c6d"
        },
        "item": {
          "id": "993eafa7-e21b-4bc0-b515-e58b7a4b84af",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3ae4605b-1249-4f1c-a80e-480f4fe073ef",
          "status": "Created",
          "code": 201,
          "responseTime": 1498,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff7fc25-3c8c-4e68-acff-ce9c2759a0a8",
        "cursor": {
          "ref": "2ee0048f-b719-4282-8e81-51d72fd14413",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4f745437-4995-4f63-b7b8-281ebf52c936"
        },
        "item": {
          "id": "0ff7fc25-3c8c-4e68-acff-ce9c2759a0a8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7d375d53-421c-45fc-abb8-9d8d62c3197c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a95e92-1f2f-462a-9af9-db239ace6b9b",
        "cursor": {
          "ref": "51c43960-3595-431c-b9d7-682ee5ba41c4",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c671d87f-8699-4711-a153-3f0aa1fc2c52"
        },
        "item": {
          "id": "27a95e92-1f2f-462a-9af9-db239ace6b9b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "956e7567-e69a-43c2-919a-f46ae126491c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a666b94-72eb-4124-bcc8-f2752cb1dca8",
        "cursor": {
          "ref": "88e2076f-f33e-45be-8fe0-468ac89f548e",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "316cf43b-beaa-487f-a81c-22083c125bbc"
        },
        "item": {
          "id": "2a666b94-72eb-4124-bcc8-f2752cb1dca8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "28fe49d1-f9bb-441a-9a09-15a18fa4d417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4bf12a-bd32-496e-9408-026eae855262",
        "cursor": {
          "ref": "dc2b4872-827c-432e-9ec0-fef727939633",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ab2c9833-3556-4978-94b2-d0882fc3b0df"
        },
        "item": {
          "id": "9f4bf12a-bd32-496e-9408-026eae855262",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e4f6c1ce-ed77-427a-87a2-1f875651ad4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b75911-90c9-4729-805c-6828ff09ef48",
        "cursor": {
          "ref": "f34d94e8-8546-4c0c-aaab-38b1923c065f",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1374a7a3-95cb-4c73-9672-07774aea24f7"
        },
        "item": {
          "id": "90b75911-90c9-4729-805c-6828ff09ef48",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bdc16b94-6aea-4d74-99bc-fdf79d0ddfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d062e8-1330-471d-ad84-0b921a95fecc",
        "cursor": {
          "ref": "036a6299-e65f-4f76-b3f3-3419461b45c6",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a1d32bd8-cf5e-4efb-aa1a-e66334364656"
        },
        "item": {
          "id": "f2d062e8-1330-471d-ad84-0b921a95fecc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3b4393f6-7baa-496d-a640-1019821d61d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6518b80-0694-465f-ba2a-009fe202e249",
        "cursor": {
          "ref": "126314d8-6756-4af4-ae21-368788647768",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "77294761-0f8f-42c0-a89f-beb0ed4e6cd3"
        },
        "item": {
          "id": "b6518b80-0694-465f-ba2a-009fe202e249",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "53a50b0d-72ed-4eff-a63c-ad5401383711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3af8fc-9d88-4bd0-b783-a5a9d0d8333f",
        "cursor": {
          "ref": "7ab462ee-0cdb-42f8-b0b6-8c72d18e405a",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e4e6b316-212f-4176-bd07-4ccd51366a2b"
        },
        "item": {
          "id": "be3af8fc-9d88-4bd0-b783-a5a9d0d8333f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "06f6c9c5-ef07-4c51-bc7a-85761115004b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c83163-5487-40e2-a9f0-2ce4d16c6f19",
        "cursor": {
          "ref": "fe143c01-f304-413e-9b63-664b275b25c9",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "48273826-7f88-498f-bada-5694dd91c0c4"
        },
        "item": {
          "id": "23c83163-5487-40e2-a9f0-2ce4d16c6f19",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "32355512-706a-41c0-a52f-1937d110b979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465c2a78-551a-4f6e-b7d6-4e88712945c5",
        "cursor": {
          "ref": "f391c381-d9e6-4926-b6d8-a5474af41f07",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5657f418-bc4e-4d75-97dc-03f88e01fe6a"
        },
        "item": {
          "id": "465c2a78-551a-4f6e-b7d6-4e88712945c5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7698bf4d-36f0-438e-8c9c-f86d9285df14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6db21b-56ef-4a04-acd6-65769d9a1cec",
        "cursor": {
          "ref": "eac9438e-a2dd-4864-b256-fe0445cce2bf",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "69421d64-329a-4a83-aa55-4785eb796f55"
        },
        "item": {
          "id": "fb6db21b-56ef-4a04-acd6-65769d9a1cec",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6c6d6abd-ba62-44df-83df-61aea9d6b7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d7407d-6126-4077-bd22-2fd40c2c1cfe",
        "cursor": {
          "ref": "f3a6b9ff-e154-4c48-bff7-64162d24d4f5",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a5433e50-7387-460b-87d5-30433f34226a"
        },
        "item": {
          "id": "25d7407d-6126-4077-bd22-2fd40c2c1cfe",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6b2d54e2-790e-4f0e-a393-8f148ca2ca75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cedf8b-84b2-4d8d-b767-3739deb72647",
        "cursor": {
          "ref": "fc1f0923-7c05-4375-a4e6-b80514da1df2",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "265a9e68-0d64-402b-ab08-1ac5325adff2"
        },
        "item": {
          "id": "b2cedf8b-84b2-4d8d-b767-3739deb72647",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2654a3bd-4003-4e69-a535-4f62c9145dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf931b3d-0149-420e-93d2-9625f083f81f",
        "cursor": {
          "ref": "a14f797b-cb8b-47fd-849d-2eee7c458fa0",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "47d14a55-728d-4e98-8368-be0aea65843f"
        },
        "item": {
          "id": "cf931b3d-0149-420e-93d2-9625f083f81f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "90a33a17-7400-4144-a61a-283fb576d62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2da694-a66a-4269-ae24-45ebbe9e5f82",
        "cursor": {
          "ref": "bbfc1534-4dc9-4e3d-8c9b-b55a10da122c",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5cc2fede-ef8f-4c5d-a0fd-7e28042745d0"
        },
        "item": {
          "id": "7c2da694-a66a-4269-ae24-45ebbe9e5f82",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a4c9daeb-99be-401b-8cd9-dc879e971794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4364aaa-c103-4a41-a8b0-bc1fc0dddb56",
        "cursor": {
          "ref": "835a1f92-a5e7-4f04-a7fd-6068522a7cf2",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "52901540-7db8-44e1-b7a2-2c93711e333c"
        },
        "item": {
          "id": "e4364aaa-c103-4a41-a8b0-bc1fc0dddb56",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a1616f6a-498d-47a1-b01c-e779c65fbda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f32dcc-2bb1-4550-9431-b8f9819699b0",
        "cursor": {
          "ref": "577b56a1-5c3e-4e5a-a52b-41a46e52ddfc",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "77783903-8ae1-4bd9-9264-8a6fbe3db976"
        },
        "item": {
          "id": "53f32dcc-2bb1-4550-9431-b8f9819699b0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c727153c-28f8-4857-83f3-631955ed8fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f57099-9cb3-45dd-8b2a-fa3beda1eee2",
        "cursor": {
          "ref": "93a30562-f2d5-4ddd-ba6a-719f893fdffe",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "878ee2b0-0e00-46e9-ad95-3c755dfae697"
        },
        "item": {
          "id": "70f57099-9cb3-45dd-8b2a-fa3beda1eee2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "10bbf4b1-952d-4edf-9f36-e7934df901ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0193bc-3bfb-4666-9a01-f7a20be1f269",
        "cursor": {
          "ref": "235f680f-daf3-4de1-86a5-11925a5065f9",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "db9c1b72-5ca0-425a-98fa-efc44119593e"
        },
        "item": {
          "id": "dc0193bc-3bfb-4666-9a01-f7a20be1f269",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7d4460e6-8d1d-4d09-ada4-43c8136f2434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5841b6a-06b7-4eac-a5c4-62be7779ef91",
        "cursor": {
          "ref": "04e69dd3-d793-46ad-9565-5730f8c439c6",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "95572709-78b7-4344-85ae-91abda2c3242"
        },
        "item": {
          "id": "c5841b6a-06b7-4eac-a5c4-62be7779ef91",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "01ee1f71-90cc-4fc1-bc7c-6b38baa9d9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d29dff-302e-4db0-8712-aa1ed37efc04",
        "cursor": {
          "ref": "9a099fac-53be-440d-a5ba-cfb87282ca6e",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4c97d138-fadd-42a1-8766-3b46139d5760"
        },
        "item": {
          "id": "b7d29dff-302e-4db0-8712-aa1ed37efc04",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "36a53e96-6f1d-41a9-bee7-89d3bf8613ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a705f5f-3581-4c84-8ab5-636255c91562",
        "cursor": {
          "ref": "997ec79c-7a68-4196-9e94-1f6fde387215",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d842fc1d-6d27-45bd-9bbf-a9c3c234e513"
        },
        "item": {
          "id": "6a705f5f-3581-4c84-8ab5-636255c91562",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3aed62f5-f9d5-46a1-9578-e8294fc401c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ac8fe7-d9cf-41f9-898e-8574fe2e1bd1",
        "cursor": {
          "ref": "037e4ff7-667e-41a2-bbf6-c4b6d7f5f44c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2428024e-6779-4d8b-b9e2-39e858e5a903"
        },
        "item": {
          "id": "41ac8fe7-d9cf-41f9-898e-8574fe2e1bd1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "143597fa-c68b-4742-bdba-1235d66b583b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10da575-86a0-4cc0-8a51-4b7f9844ad36",
        "cursor": {
          "ref": "24a3c22f-61c7-4ad2-909f-728108b332c1",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "17f31011-920d-4ce5-8d4a-53554e8ac4e5"
        },
        "item": {
          "id": "f10da575-86a0-4cc0-8a51-4b7f9844ad36",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ee719f93-e666-4f07-932a-01b581e9142f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffba2b13-aaf1-4cbb-8e36-ffbc2d7a674b",
        "cursor": {
          "ref": "c426e327-6429-4445-b5b8-04af05c4dc59",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1393b6f3-078a-4d91-9d26-4022f1cd5010"
        },
        "item": {
          "id": "ffba2b13-aaf1-4cbb-8e36-ffbc2d7a674b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b4c6c535-4be0-4981-a6d6-21e0950e0215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0154209a-a288-4d2f-805a-16450775e355",
        "cursor": {
          "ref": "d1b56678-57a5-4dd7-ae2b-d053473528bc",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a6186f32-ca9b-4d8b-9006-e64e70623e48"
        },
        "item": {
          "id": "0154209a-a288-4d2f-805a-16450775e355",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "045c3f68-0b3d-4a13-a04f-f3d4b074dd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b27375c-1163-47e9-9f0b-8f29252d54a0",
        "cursor": {
          "ref": "89bfe265-36f7-428a-9eb4-eefb075057e3",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "dc81e444-ce00-4dbe-9751-bbc19055b7d0"
        },
        "item": {
          "id": "6b27375c-1163-47e9-9f0b-8f29252d54a0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "99a9bf48-e3de-466a-880a-2690c47c93ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a477a70-b86d-4c6d-8662-e2a5a7913e89",
        "cursor": {
          "ref": "c0923de0-952b-4d89-a36c-ed4a6e8fe01c",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5eeb522e-e585-43fb-ab60-dc0b20157dbf"
        },
        "item": {
          "id": "7a477a70-b86d-4c6d-8662-e2a5a7913e89",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c9b01584-fa56-4ed2-adaf-785fd618e7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c000b2ac-86d3-4c0e-bac2-356ba245f2f2",
        "cursor": {
          "ref": "8dba7be4-7f65-44c3-9116-e23708959e31",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "003be084-f048-4b49-a297-b7a150ac15c0"
        },
        "item": {
          "id": "c000b2ac-86d3-4c0e-bac2-356ba245f2f2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7769bafa-ae0d-4f09-aa0f-338a95907e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77818ea-2cd6-45e8-85f7-0117bbfe40c2",
        "cursor": {
          "ref": "e8b57ff7-8ae3-41b8-ae4a-af251369bf38",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1f3b9edf-37db-45ec-a4ed-f34a9276165a"
        },
        "item": {
          "id": "a77818ea-2cd6-45e8-85f7-0117bbfe40c2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "abe34b5b-541a-4006-849f-7bc68c2f12de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5495469-35f5-4960-b5a3-09ce82fc5a84",
        "cursor": {
          "ref": "7aa6d522-5197-4909-9cb7-3572c4e25aff",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "934eb23a-dd77-43de-b398-c72d4d81fbab"
        },
        "item": {
          "id": "f5495469-35f5-4960-b5a3-09ce82fc5a84",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7c61ff3d-db0d-4084-8d0a-6986c16e438e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c036ea94-636a-455f-ab4e-4422343c66a7",
        "cursor": {
          "ref": "a4c164d6-d7ec-45cb-805f-3c6ca01031f9",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e29aebd2-033d-4710-9fcc-9b09212c1b17"
        },
        "item": {
          "id": "c036ea94-636a-455f-ab4e-4422343c66a7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9b04e1ad-f45e-4b36-bcc3-c19bd3ea3724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08317dc0-9417-4170-a645-cf232e93ee74",
        "cursor": {
          "ref": "bcbfee48-29f3-4ddf-91d3-a2044ea5dd38",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9ce440c8-722f-407f-83c5-9db1de9768e9"
        },
        "item": {
          "id": "08317dc0-9417-4170-a645-cf232e93ee74",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1ff3fae2-fdb3-4551-a0c2-849100d1b5a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e54f5ee-c88f-4fc3-b128-6756cb739599",
        "cursor": {
          "ref": "e4cd9dd4-fd57-4afb-80b7-5cba08930a00",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ea34a07e-9f44-4d00-8f94-69590881e497"
        },
        "item": {
          "id": "8e54f5ee-c88f-4fc3-b128-6756cb739599",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e521ce15-b99a-4204-9ab8-45de8a622c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8b0b72-c253-43ba-8913-003ac8e7000e",
        "cursor": {
          "ref": "b8021c68-5fab-45c2-a79e-8d5a55405a39",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6475e34f-797f-4eea-a527-bf21543e27f4"
        },
        "item": {
          "id": "9e8b0b72-c253-43ba-8913-003ac8e7000e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "40a2b615-b6d9-4516-9f56-e8c8c95d2357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e3d658-3267-4707-875f-7cdc9c32ec33",
        "cursor": {
          "ref": "4ebba390-594b-4181-b955-5a13cda1a75e",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d3e39979-a48b-4c5c-80e9-1fad7f342a99"
        },
        "item": {
          "id": "08e3d658-3267-4707-875f-7cdc9c32ec33",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4b548479-18b0-4340-8958-728afdaac31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad02916a-7774-4675-aab9-aec13c9cbdec",
        "cursor": {
          "ref": "c42b54a8-8b4e-45c4-9b10-9714462556c5",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "50568147-5676-44f2-8241-60a555248ddf"
        },
        "item": {
          "id": "ad02916a-7774-4675-aab9-aec13c9cbdec",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "077424e0-7dd7-415e-a01c-7dc9c1aeb17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076123c7-7e0e-4012-93a2-430eb0fb6101",
        "cursor": {
          "ref": "4486b027-a971-4e09-b8a7-2cba43fc994a",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8fd69333-97b1-4d77-bca2-eccd64453654"
        },
        "item": {
          "id": "076123c7-7e0e-4012-93a2-430eb0fb6101",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1cca678e-cf44-4e6d-ad17-b5944eaf0380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88594f54-50a8-4acb-b7d5-cac7153a766a",
        "cursor": {
          "ref": "32bd9620-1923-4dfb-92c6-19d6ce014e69",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "38199ae6-d971-4030-ae09-fb3d96b27676"
        },
        "item": {
          "id": "88594f54-50a8-4acb-b7d5-cac7153a766a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cddb0e3f-5330-4806-b357-ac25348f8807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8126ff82-6e37-48c3-b863-cdc56eb25934",
        "cursor": {
          "ref": "02000d07-1fab-464d-9f4c-0be753657fa7",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "43497d6d-3da5-415f-acff-e26a5ed9815e"
        },
        "item": {
          "id": "8126ff82-6e37-48c3-b863-cdc56eb25934",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1f54566e-2e14-4a09-97fe-3512a2b6fcf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01987dba-2376-4899-8025-88a335921ac2",
        "cursor": {
          "ref": "f2c83553-fa6d-47a3-82e8-ca4e5a2389da",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0d38fa62-906d-4e35-bfff-a775532c0d10"
        },
        "item": {
          "id": "01987dba-2376-4899-8025-88a335921ac2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "de9006cc-c489-45d3-8850-9e706c834889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2aae65-221d-438c-a507-c9120a319fc2",
        "cursor": {
          "ref": "2c526f02-c4dc-4af7-8b92-2fdedd378202",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "74d977b4-ff57-440c-a1ca-a7e7c3442dfa"
        },
        "item": {
          "id": "3b2aae65-221d-438c-a507-c9120a319fc2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "868780df-18f0-4ad5-81bb-aac458b1600d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d67e1fc-42c2-479f-a64b-18df84204eaa",
        "cursor": {
          "ref": "37cb74b5-3ddb-4562-9a7d-93820aed66a6",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e02d417f-ca4e-4449-970f-40d4b7df5769"
        },
        "item": {
          "id": "7d67e1fc-42c2-479f-a64b-18df84204eaa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c70be7f4-e2e5-4302-9d21-859cf6d346aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2b2f89-ecd6-4406-b09c-f34353bc8f09",
        "cursor": {
          "ref": "f6fbf41d-15f0-400e-9664-af1c17bc0312",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a8871d2c-c424-43c2-9335-5ee653f274ec"
        },
        "item": {
          "id": "2f2b2f89-ecd6-4406-b09c-f34353bc8f09",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "24b9e704-2cd1-4922-8460-8639777586c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d2e2bb-d9b2-4d77-9516-e674035eb011",
        "cursor": {
          "ref": "6b9d0dfc-0225-4eeb-bcf9-511e5e3853af",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "155d1ba3-8a46-400a-98be-d3f3128b2e16"
        },
        "item": {
          "id": "f4d2e2bb-d9b2-4d77-9516-e674035eb011",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "481eabcc-ad8d-4224-8baa-49cdfd9215d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc5cb75-d6c1-4862-88ef-73dfd06d2626",
        "cursor": {
          "ref": "47d0fe41-8696-439a-aadf-c940c3946230",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "70c541fe-496e-4bda-bc0a-0a38f8af4282"
        },
        "item": {
          "id": "4bc5cb75-d6c1-4862-88ef-73dfd06d2626",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a94ef74b-b53c-4579-a682-a92b749429cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba63b8b-39f6-40d7-8e76-69a48eeda20d",
        "cursor": {
          "ref": "d095061b-f0cc-47b2-9673-86514d3f9315",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7ca573a2-0939-453d-8014-01a4649c4e10"
        },
        "item": {
          "id": "4ba63b8b-39f6-40d7-8e76-69a48eeda20d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "08daab72-f65c-4758-8aca-20c7aa0580e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dde780c-deef-4b06-80af-4b9ca6bd34a4",
        "cursor": {
          "ref": "eeb030c8-41b5-414b-9776-dce9ff1a57d4",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "08208e6e-dcac-417d-aa44-06c1fa8b8535"
        },
        "item": {
          "id": "6dde780c-deef-4b06-80af-4b9ca6bd34a4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "254172fc-0df5-4d78-b5d6-8623b321a974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc24d62-842f-4961-8c00-7147193e8418",
        "cursor": {
          "ref": "c32d09e0-b63a-413c-a35a-1908a9959d58",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dbd936c4-486d-4371-bfa8-717bf90a622d"
        },
        "item": {
          "id": "cdc24d62-842f-4961-8c00-7147193e8418",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6c822659-03dd-4549-b3c2-b0b6d5ed3fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d531359a-b32e-4f19-a19c-92eabd224356",
        "cursor": {
          "ref": "a5cd9e5e-bd06-44fe-9a96-139e10f1e745",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "403529c2-0eb1-445d-b7be-604c80fbaf48"
        },
        "item": {
          "id": "d531359a-b32e-4f19-a19c-92eabd224356",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8aef73db-ddc4-4b09-8407-b460c9c021c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da7c81d-0ed4-4169-9b98-b02a53958441",
        "cursor": {
          "ref": "ad728638-5c7c-4a1e-be79-5ab399eab47f",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "41a3d4ad-3df6-4165-a930-619cc5ec9a18"
        },
        "item": {
          "id": "7da7c81d-0ed4-4169-9b98-b02a53958441",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c460c33c-cfc2-496b-8cc9-32967e09f6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7658ac-f8ac-4284-ba43-be767d3f27b5",
        "cursor": {
          "ref": "81ef5712-af22-402b-88e0-67bf553ae232",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "49c14609-0200-4f6e-9495-f1d79a5f02db"
        },
        "item": {
          "id": "8e7658ac-f8ac-4284-ba43-be767d3f27b5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c59fd72c-682f-4723-a8eb-daa14b4abab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2085bb-2f07-4c0e-9736-10da0e6f4793",
        "cursor": {
          "ref": "bd918fdb-0fa8-470c-9734-338f7d037e99",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "32ae48f9-a3b4-4aa2-bc94-828808ecdd2d"
        },
        "item": {
          "id": "5f2085bb-2f07-4c0e-9736-10da0e6f4793",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "279335a8-c9bd-42b2-b528-ff3b8669c37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316d2d6f-81cf-4077-9add-68f374bf56d2",
        "cursor": {
          "ref": "55059ac8-3893-42b9-8450-be7ca5c0a517",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "97ff63cc-4394-4ec3-a2c6-118d63d5417f"
        },
        "item": {
          "id": "316d2d6f-81cf-4077-9add-68f374bf56d2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "af874d3f-569c-43b4-aed2-4e857e13ada5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff73d2b-b533-4ce3-882b-8d9ebfbd69e1",
        "cursor": {
          "ref": "eebf2151-74cf-4666-b23c-39586e05d606",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6503e8ad-72eb-48d7-8804-d88b845824ec"
        },
        "item": {
          "id": "9ff73d2b-b533-4ce3-882b-8d9ebfbd69e1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f9ab1ab8-814b-43e8-9006-c93d5c4cf2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70030d56-da09-4eea-8dc4-dd696cfcac17",
        "cursor": {
          "ref": "517f182d-b384-4464-8979-cf5bf10fdce9",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "18258f9d-0fbb-4f58-8d7f-c7ae54f1e42a"
        },
        "item": {
          "id": "70030d56-da09-4eea-8dc4-dd696cfcac17",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "df96bf5a-d306-4772-a986-a02ce167a5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5ab825-72f6-42b1-85cf-7bc0dc37b7d6",
        "cursor": {
          "ref": "563ef81d-96fd-44dc-a4d6-9dc3346c7651",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "da6e3016-9c89-48a6-a79e-4083c854b215"
        },
        "item": {
          "id": "8b5ab825-72f6-42b1-85cf-7bc0dc37b7d6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b7a920b9-8b22-4601-ad67-92f13fd80bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35475297-3df3-423a-8e31-fc7b8324ac92",
        "cursor": {
          "ref": "06d5ee40-708c-4dfb-bae9-987ff01c4637",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a7a5ce9f-6ef5-419e-9f66-753b9db3a451"
        },
        "item": {
          "id": "35475297-3df3-423a-8e31-fc7b8324ac92",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a4843460-3bb9-41a0-ba07-a2f8b4f5cd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098b3382-8190-4429-b400-518126fe2c33",
        "cursor": {
          "ref": "fce225e6-1d42-48d3-9cfa-52ac79aa0ab3",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9076f04f-3e99-472d-8aca-c604c8606dd9"
        },
        "item": {
          "id": "098b3382-8190-4429-b400-518126fe2c33",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f7a6bc4c-8c8c-4080-8489-e5ab80441b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089216a9-b909-4b95-87cb-0dcf586d5d7b",
        "cursor": {
          "ref": "d08b0020-6784-467e-87dc-bae93813ee5d",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "02987471-d07f-4dcb-880f-bb5f39710652"
        },
        "item": {
          "id": "089216a9-b909-4b95-87cb-0dcf586d5d7b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bd9c81c8-6c7d-4a14-9cb9-7fa589ea438d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66cd8cf-567b-4987-8d74-c75ba72db533",
        "cursor": {
          "ref": "1cd976c6-c6b4-4b61-bebc-9ae5b7221432",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d6dc95fd-84a7-43a3-9a45-c4c74d0e89d5"
        },
        "item": {
          "id": "e66cd8cf-567b-4987-8d74-c75ba72db533",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3c8de2ff-3454-479c-a5d3-a60d2b597cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1b4b1e-f954-44f8-83b9-9e5dc8f7d9e9",
        "cursor": {
          "ref": "485ab6b3-5d14-4669-97db-c5e7a6a30707",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4cf65ccc-a9c3-489b-ad4a-e43b6512e470"
        },
        "item": {
          "id": "6d1b4b1e-f954-44f8-83b9-9e5dc8f7d9e9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0979c840-d9b0-489c-a5e7-3382a2b522d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101229d1-b914-48d2-994d-46828676b111",
        "cursor": {
          "ref": "20aa4faf-c35a-4ed2-9154-bda4889186f0",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "dcdc901c-a238-4333-af07-7b306feba90c"
        },
        "item": {
          "id": "101229d1-b914-48d2-994d-46828676b111",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9cf10f6d-172d-4b2a-938d-61d7c9c5ae32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcc1ba6-c9ac-4cdd-8d1e-949e8553aa56",
        "cursor": {
          "ref": "d9051326-41b2-420a-8cfe-9c8fc00d4219",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9518c4a6-54ca-474b-bd1d-78b3b985af4a"
        },
        "item": {
          "id": "4dcc1ba6-c9ac-4cdd-8d1e-949e8553aa56",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "006d6b39-7b2f-4788-a2a5-8b37ceca3a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16663a42-3ff7-4cd9-8852-aae44968e616",
        "cursor": {
          "ref": "38a5f930-2766-41f9-90c5-142681e74dc2",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ff1fdea0-02f2-492d-8aca-e452f1e93619"
        },
        "item": {
          "id": "16663a42-3ff7-4cd9-8852-aae44968e616",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "be1cc176-0950-4398-b60b-48480bbe1c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b539b5-091c-428c-b6e3-bbb1e635a938",
        "cursor": {
          "ref": "157fb1d7-d58c-44d2-b4e2-731caecff56a",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b6bea86d-8f08-4fa0-a097-745dbddba21b"
        },
        "item": {
          "id": "d9b539b5-091c-428c-b6e3-bbb1e635a938",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "931dd588-09c1-440a-84f1-9391ee1f2c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce7eb7b-8d7f-4f59-a922-24d29bec566c",
        "cursor": {
          "ref": "c86bdd50-998c-4886-8b3d-7c45a00c797a",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7e1092cb-1c25-4383-9c0f-071eeb89defe"
        },
        "item": {
          "id": "2ce7eb7b-8d7f-4f59-a922-24d29bec566c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "88dffa29-e9f5-4c1d-a638-73cf75692580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7976759c-699b-4665-8f1d-67ee3650dc05",
        "cursor": {
          "ref": "26e873be-5194-4634-a20d-c00dec342edd",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "13f9f8ed-0726-46a7-9e73-0fdea898f1fd"
        },
        "item": {
          "id": "7976759c-699b-4665-8f1d-67ee3650dc05",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3c33dd53-1dbb-4d6a-a285-eb6a52630a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30444625-cd44-4f91-9b30-7cfffc113790",
        "cursor": {
          "ref": "87eef7be-e253-4400-9b1c-25d46a0cf972",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "84b462b2-5435-4db5-b2dd-66cbfd54f3b2"
        },
        "item": {
          "id": "30444625-cd44-4f91-9b30-7cfffc113790",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8811e551-640a-44cc-beee-39f51190f5ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f186dcb9-cd8d-4676-98c7-a501e622f7a1",
        "cursor": {
          "ref": "9d6317b8-186c-46a0-82d2-9315f9e6bece",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "067552e6-d00c-4048-ac0b-768da5e39fbb"
        },
        "item": {
          "id": "f186dcb9-cd8d-4676-98c7-a501e622f7a1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5b0944d3-64f3-4ddd-86f1-e0aee7f7caca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd08fd07-3e7d-4c64-90cd-5ab936a2fc19",
        "cursor": {
          "ref": "85e3cda9-ba6c-43a1-b731-4d2196d92b9c",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d842aed1-5ac2-4bfc-8381-692251665b60"
        },
        "item": {
          "id": "cd08fd07-3e7d-4c64-90cd-5ab936a2fc19",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e4298425-a1d0-4b5e-ad0d-c0fa85d1c8a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6580830-497e-44f9-a825-cd7f44665d43",
        "cursor": {
          "ref": "dc65a7d2-3824-455a-b79a-f50be58585e3",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8eaf16e2-6fbe-416d-b292-884ffa764c49"
        },
        "item": {
          "id": "a6580830-497e-44f9-a825-cd7f44665d43",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d83c39fd-4fee-4e1f-9599-c82351da3668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20106e22-dd3a-406a-ba73-1eb9145382dc",
        "cursor": {
          "ref": "0412ff3b-d2cf-48b4-96dd-fdff2879282c",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1e6fdb2e-ce4e-4d86-b46c-c617e6506634"
        },
        "item": {
          "id": "20106e22-dd3a-406a-ba73-1eb9145382dc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "966124f2-65ee-4746-9517-51dd92bc5ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02ede7c-9b2a-489c-ac2c-329980316cd3",
        "cursor": {
          "ref": "b12c8ee8-9846-4c7c-b6bf-487256915d14",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e424ebcb-63ef-427e-ae23-67374559be50"
        },
        "item": {
          "id": "b02ede7c-9b2a-489c-ac2c-329980316cd3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "546dcafa-0816-4cd1-9947-916c2e15becf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4b63f3-f8d2-4f50-a82d-ff2b46b2563e",
        "cursor": {
          "ref": "41d34568-33e3-4fd0-bbf7-9a88dde73a3d",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6ed7fee8-e036-44f8-b59e-78db475dc263"
        },
        "item": {
          "id": "ab4b63f3-f8d2-4f50-a82d-ff2b46b2563e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "55e16675-dbdd-4650-8588-f8483a33bdff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6761561d-c3f9-4b5d-8521-548f4c3865e9",
        "cursor": {
          "ref": "bfe06977-7c31-4d43-91b1-e0f25b288f81",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1459d060-8382-40bb-ae9c-abb137aa1279"
        },
        "item": {
          "id": "6761561d-c3f9-4b5d-8521-548f4c3865e9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "43028d4d-26fe-46b5-9644-676c5da7e483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7df2ab-ae3e-4059-910a-cd557c782b65",
        "cursor": {
          "ref": "02463577-9b0c-4c06-a383-22e0af3509db",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "65644b51-f560-4176-8faf-33ba5337618c"
        },
        "item": {
          "id": "3d7df2ab-ae3e-4059-910a-cd557c782b65",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1a46b4fe-e9e9-4599-a39f-948e0be0358f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3f1483de-3f26-4adb-af5f-e0caf02986ea",
        "cursor": {
          "ref": "87292bb7-64b4-4d9b-b68a-c7dc00af24db",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bb4f329a-0d5d-4230-8916-070d82fd4f13"
        },
        "item": {
          "id": "3f1483de-3f26-4adb-af5f-e0caf02986ea",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7b4bec9c-d898-40ce-8b68-3afd25189d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5e6aca-30c0-4d0b-9f5f-1e092bc541c4",
        "cursor": {
          "ref": "159f9a79-4adc-47de-bd62-d41603e8ba6c",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6c204a6c-fd52-4f80-a974-8a762ad6c671"
        },
        "item": {
          "id": "fa5e6aca-30c0-4d0b-9f5f-1e092bc541c4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5dfcf84a-7206-4c84-a9a9-daea91677c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fbd824-caa7-46a6-a68e-1dde3f515e90",
        "cursor": {
          "ref": "9f6de88d-683c-47f8-9c95-2e2a16f5bb30",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "165c2483-cb1a-45b4-aaf7-dcf390a8a6cd"
        },
        "item": {
          "id": "86fbd824-caa7-46a6-a68e-1dde3f515e90",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4630e65a-9d24-4bb5-9ffa-70fa8c39d841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30428cb0-adcc-416c-a143-df3a270b4ecb",
        "cursor": {
          "ref": "15a8d9f8-729a-4ec1-a4de-4dac2fe0a73c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "500ba5d8-9028-432e-8ac8-25375cbe1d5b"
        },
        "item": {
          "id": "30428cb0-adcc-416c-a143-df3a270b4ecb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "124cfb9a-c1db-4b42-b0be-d09125de82fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1437cc4c-8df8-4ccf-98a2-c2a19dd378b5",
        "cursor": {
          "ref": "c011e361-8985-4e38-b888-0b2669105d34",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ac2679ee-7104-4dc9-8959-2e72e2d58990"
        },
        "item": {
          "id": "1437cc4c-8df8-4ccf-98a2-c2a19dd378b5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d4ffac5c-69ef-4182-830e-aa8cdf6bb7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6118ff9b-27a7-49f7-9411-db2e93fa4741",
        "cursor": {
          "ref": "e0efc2c6-d6c3-43af-b925-08f5b42e2cad",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5b9b1c7a-4280-4ef2-9220-80ac363645b4"
        },
        "item": {
          "id": "6118ff9b-27a7-49f7-9411-db2e93fa4741",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5df5a03c-c76c-47d4-b54a-ea9b415ba78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcd9a61-6080-4571-992c-456f7c46bd29",
        "cursor": {
          "ref": "bd4a2b79-9b6f-4ec0-8f98-b22ca0d589e1",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "18b09102-aedc-4463-ae88-d2b3e3e6e506"
        },
        "item": {
          "id": "0fcd9a61-6080-4571-992c-456f7c46bd29",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "99617af8-49d2-4e4c-bb22-a975a4419501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bf742a-254b-4b86-8d9b-c1b06232567e",
        "cursor": {
          "ref": "3919d76d-756c-4126-8cf7-1d4129c0e0d1",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f701b25a-0417-44d8-9802-1dfea24849a8"
        },
        "item": {
          "id": "b6bf742a-254b-4b86-8d9b-c1b06232567e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e46f2109-2c16-4d27-b6d4-c6ae96e9208a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74288de-da15-41ba-9814-5032ea2780bf",
        "cursor": {
          "ref": "e15ee80d-c00b-4755-9bac-cc4cb372ca79",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "72eaf9d7-2af6-4852-8d36-6dd6f3a6e9d0"
        },
        "item": {
          "id": "d74288de-da15-41ba-9814-5032ea2780bf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1ca646d4-5a70-4421-82ef-4421831d08a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90309afe-fc59-48ed-ab3b-205aa50f2f66",
        "cursor": {
          "ref": "f89e5426-e870-470f-84ad-b623040d0845",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d763d851-f4df-49b2-b9d6-979685ee7eeb"
        },
        "item": {
          "id": "90309afe-fc59-48ed-ab3b-205aa50f2f66",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "48846f2e-d956-4e1d-b508-645b93937b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ae8ed3-9379-4462-af63-7611f4be8a58",
        "cursor": {
          "ref": "9c48e9d0-6e1a-40d5-898f-77d218d77dd0",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5d1b733b-c0fe-4d1c-9737-ed83c746f255"
        },
        "item": {
          "id": "01ae8ed3-9379-4462-af63-7611f4be8a58",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7f9e432e-e06c-4a2f-b1e8-7edbccb83e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e86d800-6cfd-4641-a6c5-b40136e99aed",
        "cursor": {
          "ref": "a88aa752-80e2-42e4-aa4a-085ffad39119",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fb88aaae-8c1f-4158-b98b-22ca1f1cabbf"
        },
        "item": {
          "id": "9e86d800-6cfd-4641-a6c5-b40136e99aed",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8c872eb1-6242-4be5-be06-0d44d633a864",
          "status": "OK",
          "code": 200,
          "responseTime": 885,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "eab8ea92-3c7b-428e-9f24-5399ffe1a148",
        "cursor": {
          "ref": "f8a77538-f2e5-4b1f-b86c-f18db97b2ac0",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "188718f2-ca4a-47ac-941a-eaa34bc02b75"
        },
        "item": {
          "id": "eab8ea92-3c7b-428e-9f24-5399ffe1a148",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1503b324-2dda-41a2-a547-c9c7b41ecba5",
          "status": "OK",
          "code": 200,
          "responseTime": 778,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "178b11b9-afb2-4ad6-8c1f-f57ca109e7a9",
        "cursor": {
          "ref": "421d0168-6227-4bd7-a70b-df8d36945dc2",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1b95656a-5268-4d29-8f5a-c4790e381410"
        },
        "item": {
          "id": "178b11b9-afb2-4ad6-8c1f-f57ca109e7a9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4039a32a-cdf6-4d5b-b106-ec44a0a1b7bb",
          "status": "OK",
          "code": 200,
          "responseTime": 780,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "b4ebf529-905e-46aa-b6c6-5a5f17dea70f",
        "cursor": {
          "ref": "6e4ef4b2-76bb-4e53-8304-c4e180f40b24",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e08847e9-0e46-48b0-b514-3bfd4e0f9308"
        },
        "item": {
          "id": "b4ebf529-905e-46aa-b6c6-5a5f17dea70f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4db431a0-2ef1-4b8f-87ee-50b8bf858992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bbd99c-d32f-4454-a126-d62d0628749f",
        "cursor": {
          "ref": "c9fc55aa-44d0-4c7c-bbc2-18286184d4fd",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f41e42ac-ce68-4a59-b73c-ded2ee2dce60"
        },
        "item": {
          "id": "e2bbd99c-d32f-4454-a126-d62d0628749f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f29a052f-9c75-43b3-b23b-c1217f5eb04d",
          "status": "OK",
          "code": 200,
          "responseTime": 759,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "0e28139c-d1ba-4b35-90e8-885687ed22d9",
        "cursor": {
          "ref": "053f0f33-1402-4ce5-89d0-0625dfdd2f17",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e1e6b331-940b-41c7-9c1d-9d3b8ec8ecf0"
        },
        "item": {
          "id": "0e28139c-d1ba-4b35-90e8-885687ed22d9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "13e39d00-e160-4c5e-a7ff-42b91242703f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f38d952-59bb-422a-acfe-b60e87be53e9",
        "cursor": {
          "ref": "34ff25b4-aece-4b0d-92e3-d8ade1e966a3",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6707d1b6-f9df-4efb-ada8-a94361284689"
        },
        "item": {
          "id": "3f38d952-59bb-422a-acfe-b60e87be53e9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3b40e20d-0bd0-4a04-94a7-8c5bf14465e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f232499a-9b57-454a-a682-859716258887",
        "cursor": {
          "ref": "0d7bc8cb-8985-4bde-9e23-c47616b7509c",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5e7e9246-d2ec-4465-b2d9-7f78a24b7d91"
        },
        "item": {
          "id": "f232499a-9b57-454a-a682-859716258887",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "118caac2-7715-48ec-8870-55207f9f4bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4c712b-5be0-4587-acab-fc4e4e4e995c",
        "cursor": {
          "ref": "47db5463-5ff7-4291-9e1b-4294c1d58875",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c2a99631-dc94-480f-a17b-8871f44bbc08"
        },
        "item": {
          "id": "1b4c712b-5be0-4587-acab-fc4e4e4e995c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d6b1c923-eb90-4fee-ab85-310df606bc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cd4a47-9e45-48e8-9c3e-0df3a8162d2e",
        "cursor": {
          "ref": "f74c2ea9-f03c-4f53-afea-a82844ef76d9",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "326a1d12-f3bb-4fef-a537-d9d1a7c94192"
        },
        "item": {
          "id": "93cd4a47-9e45-48e8-9c3e-0df3a8162d2e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "140730f2-07e0-4bbf-b076-7d06998346cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02aadce5-d28f-4f2a-81f5-713f70d94c30",
        "cursor": {
          "ref": "c0fb3421-9da6-4c26-bfde-89b6fd2cb0fb",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ec836297-5003-4202-8148-0184adf37072"
        },
        "item": {
          "id": "02aadce5-d28f-4f2a-81f5-713f70d94c30",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "18c98c9d-b3ce-4858-9e6b-d23b0b915eea",
          "status": "OK",
          "code": 200,
          "responseTime": 776,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "004afdbe-9001-4c4e-8560-533a4ce96a0a",
        "cursor": {
          "ref": "6c6662c0-4471-41de-90f5-4b9b86712f60",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "30f997ce-f2c5-40b0-ba02-06b63e04e597"
        },
        "item": {
          "id": "004afdbe-9001-4c4e-8560-533a4ce96a0a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5d5f3893-aac4-435f-9314-9beb8a006840",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c452edcb-c43c-4736-9e6a-c8fcb06168fa",
        "cursor": {
          "ref": "c87218ef-b131-488c-8a19-bd402075d5ef",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e9ef6b53-083e-404c-a8a7-f0b86cece4c2"
        },
        "item": {
          "id": "c452edcb-c43c-4736-9e6a-c8fcb06168fa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "685e268f-3d2f-45af-97a8-0924a790c007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ba5685-3951-4e74-b4e3-7985ab315ad1",
        "cursor": {
          "ref": "93bf1e44-1ec7-4fd8-8e01-c585ba197af3",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "804ec38f-c5bd-43f0-8088-64c837c24561"
        },
        "item": {
          "id": "99ba5685-3951-4e74-b4e3-7985ab315ad1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a20a094d-ad98-427b-ac24-9a3229724691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbe8962-ccee-42b7-860b-287b3f96734a",
        "cursor": {
          "ref": "2d8b7a26-b9d3-4d04-bb26-389302854308",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7c687454-39e2-4158-a12e-fc8679496235"
        },
        "item": {
          "id": "2bbe8962-ccee-42b7-860b-287b3f96734a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2e03854c-e3ad-4048-a4bb-8f17c14e5e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252d6d9a-90b9-474e-84a6-97ac4d503882",
        "cursor": {
          "ref": "128b79e3-ea94-4411-949e-5d692f8e0785",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b4502560-09f0-472d-ad94-be6d25ed1db7"
        },
        "item": {
          "id": "252d6d9a-90b9-474e-84a6-97ac4d503882",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bbde4dd6-e187-4381-84dd-453e31ca1134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deafb816-28fd-4dd1-a814-33b7599fc05e",
        "cursor": {
          "ref": "fb4113f5-369e-4af1-b7ab-6f099b8a7c76",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4d6473e4-4d17-465e-bb74-5d95be45dcfb"
        },
        "item": {
          "id": "deafb816-28fd-4dd1-a814-33b7599fc05e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8db04be0-dc90-4dea-9d02-d970c49f3d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1b39c7-5ebf-4172-a8f1-ab5e2c91de87",
        "cursor": {
          "ref": "096bb448-66d9-48fa-a52f-31b19f0f022a",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "45526502-dd4d-4baf-a156-70964f750892"
        },
        "item": {
          "id": "1e1b39c7-5ebf-4172-a8f1-ab5e2c91de87",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0ec32c0d-502e-4e15-abc5-e2b5da11163a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9661707-10ef-4369-ba2e-02b102591471",
        "cursor": {
          "ref": "02f26e6b-9826-4f98-87f1-7dac68369b27",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "17d4abe6-7c89-4f25-bdd1-89cf7c7cfa48"
        },
        "item": {
          "id": "b9661707-10ef-4369-ba2e-02b102591471",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2be02410-93aa-459e-ac37-73b0c2e5be45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f778f63e-54dc-4d88-81f5-0b8cd39f015c",
        "cursor": {
          "ref": "7abe2d25-0cc2-4605-b16d-77f440a88d49",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "94966471-efcc-4634-85d1-b99c57420f5b"
        },
        "item": {
          "id": "f778f63e-54dc-4d88-81f5-0b8cd39f015c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "78c38237-0503-461f-9ff1-2a7807b94b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe27ec9-fbed-49f1-95c5-cb9e62c8fca3",
        "cursor": {
          "ref": "099acc7a-e427-484c-9a99-562b5b72eb91",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4e53a2f7-56fa-450b-a252-cae7fbef4977"
        },
        "item": {
          "id": "2fe27ec9-fbed-49f1-95c5-cb9e62c8fca3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f0ba39f6-6d66-490d-bc0c-ec1b2408ab4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8111bf3-8089-4189-a00d-a462d72a8e43",
        "cursor": {
          "ref": "161751ac-84aa-4f94-bdc8-c75d339cf06f",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "13805a77-d364-4d23-bc1f-e7e59ca95cb0"
        },
        "item": {
          "id": "f8111bf3-8089-4189-a00d-a462d72a8e43",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "090818ae-953b-4829-80d3-a9c3497a52f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e87732b-8909-4588-a2d9-497fd94ff229",
        "cursor": {
          "ref": "02c13f7f-3521-42bc-8437-e088bbffe8f3",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3fc97c9d-7c9f-4253-9f33-9b0a57375834"
        },
        "item": {
          "id": "1e87732b-8909-4588-a2d9-497fd94ff229",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a300cb9c-ec03-449f-baed-c99b730f0b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15dc810b-2fde-4201-8131-3c7c29da5bd7",
        "cursor": {
          "ref": "3738c696-fc8e-491a-8e73-0c73c3dc5b44",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "08b57d14-c805-47ca-a51e-0b5981e1a9f5"
        },
        "item": {
          "id": "15dc810b-2fde-4201-8131-3c7c29da5bd7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9eba2b7f-6e87-46b4-844f-29efae78a9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4210d49a-9254-43e9-9229-5ca81cfb08f5",
        "cursor": {
          "ref": "07f8b7e4-0cee-4a15-8264-9fc040556974",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "67b7b5c4-c3b3-4d16-8b08-9633d7811c70"
        },
        "item": {
          "id": "4210d49a-9254-43e9-9229-5ca81cfb08f5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a4553d3c-4c32-4d6a-8f0a-03f2b1ba3c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287a4a51-07a6-406c-90e7-eeeeafb28798",
        "cursor": {
          "ref": "0b524316-e0b9-49a1-b4b1-3f8299f6689b",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3ff56290-0afb-4fc5-ac85-003fa8fcff3b"
        },
        "item": {
          "id": "287a4a51-07a6-406c-90e7-eeeeafb28798",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e2ecabda-cf0f-4c09-87c1-bf4af6fae363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542ac866-e7ed-4e24-b9c5-06000a0315ab",
        "cursor": {
          "ref": "36980892-2d7e-4640-aa90-ec217649ac70",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f91164cf-e116-4927-adce-e00c8155189e"
        },
        "item": {
          "id": "542ac866-e7ed-4e24-b9c5-06000a0315ab",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "10ada450-cc2f-484c-83ac-d5288cb307d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f5d0ac-d137-4d3c-af26-ee43f79cc313",
        "cursor": {
          "ref": "db5756c7-c8c0-4b91-a692-bc3607fafbb2",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e8fad36c-b5d0-411b-ba71-1a8e16020d0e"
        },
        "item": {
          "id": "e0f5d0ac-d137-4d3c-af26-ee43f79cc313",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "51007f00-0bb0-469b-bf84-c5c82f9df6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa04a9a7-2bf1-4069-99aa-c2c022d0937e",
        "cursor": {
          "ref": "7e1cdc0c-b2e8-4a10-a343-9e2aa7c91319",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0d9e9c24-85b9-42f5-8f66-cbf64c9c4bf8"
        },
        "item": {
          "id": "fa04a9a7-2bf1-4069-99aa-c2c022d0937e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "50fa2b84-eb78-4fda-b93a-a39622c77a6e",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "75f2da20-031a-4c9c-8138-58beb7daf688",
        "cursor": {
          "ref": "f9d41128-9a49-4c8b-9a8b-ad46b7662128",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "56d0e678-cad9-444b-b9c9-5e004cd5988d"
        },
        "item": {
          "id": "75f2da20-031a-4c9c-8138-58beb7daf688",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4774fe79-1f93-4ef1-9058-5d86d924ca0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eaebc8f-1bab-4dc3-ab09-480762e5f79c",
        "cursor": {
          "ref": "fcf1506f-8184-417b-8a8b-1689f743355d",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f1d755b6-7554-4b1c-8c53-b1410e0a2b21"
        },
        "item": {
          "id": "3eaebc8f-1bab-4dc3-ab09-480762e5f79c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e72659b8-3b34-4773-9870-d28dd8fcc623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398a12aa-c48f-4e73-8b4f-982300aeac01",
        "cursor": {
          "ref": "d9498967-6742-46f2-b0e1-41385cf2671e",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9841d2cf-51b8-4795-86dd-ed909e751fe2"
        },
        "item": {
          "id": "398a12aa-c48f-4e73-8b4f-982300aeac01",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d09bc289-6e21-413a-8663-e9364950f30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e10568a-45fc-4f87-b2ce-18fbb55b4ba1",
        "cursor": {
          "ref": "e9041e76-2ec9-4629-9bdc-16520169cba7",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4cd83fb7-4d64-4322-8d89-74d5d1f64416"
        },
        "item": {
          "id": "6e10568a-45fc-4f87-b2ce-18fbb55b4ba1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ecb3025e-e1a8-4c3c-95e5-20121a33b1c0",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "81b2509b-e3a6-4589-91ec-50597eaea520",
        "cursor": {
          "ref": "684cbbd4-a35e-40dc-80e6-98f857571975",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b6538798-6e31-452c-a101-2d72e974aeaf"
        },
        "item": {
          "id": "81b2509b-e3a6-4589-91ec-50597eaea520",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "716b073d-a768-4115-ac1a-50a9830d044b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3094cc-7d7a-4c9a-b4a5-ffc5682c3deb",
        "cursor": {
          "ref": "22eb5c82-f39d-4751-be0d-d9b047eeeaf4",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "986931f4-42e6-4c2e-b58a-73b1a88c9bd8"
        },
        "item": {
          "id": "8e3094cc-7d7a-4c9a-b4a5-ffc5682c3deb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "351da465-5646-4f25-a6c5-e805bd6a1ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3a045a-4b43-4410-af19-c3bc77c1120c",
        "cursor": {
          "ref": "a5111903-f8b3-4564-9422-b5bc706997d0",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1e9b0dad-1735-4763-a9c1-0bc7e010990f"
        },
        "item": {
          "id": "0a3a045a-4b43-4410-af19-c3bc77c1120c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "52e5d60a-65a0-4c38-8904-88d37cb7dc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a9ef33-7244-45f2-8846-4f6e3105b018",
        "cursor": {
          "ref": "30529caa-4fe7-4958-b899-ae6e6ce700b6",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ea8c9d74-aea7-49e6-b956-efccb99fa7d6"
        },
        "item": {
          "id": "66a9ef33-7244-45f2-8846-4f6e3105b018",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "863267c6-a885-48c0-9ce5-6d288f477d56",
          "status": "OK",
          "code": 200,
          "responseTime": 784,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "f875118c-5d0a-476d-a8b1-04157b420206",
        "cursor": {
          "ref": "5fa26d43-3fe3-4d6a-a94e-0e1c72efa5a6",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3963f116-404f-4481-908b-cd94b44d5d69"
        },
        "item": {
          "id": "f875118c-5d0a-476d-a8b1-04157b420206",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "550066bb-20d5-4171-9720-bbf2b36bc0bc",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "5ff817b5-54e7-4dee-914b-36149187ee8c",
        "cursor": {
          "ref": "b7d57255-ee2c-4ab1-91c6-0506c7be7fbc",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b7bdb8aa-8278-4c93-89f9-07998acc8439"
        },
        "item": {
          "id": "5ff817b5-54e7-4dee-914b-36149187ee8c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "58d96561-8039-4ebc-94b5-e737f1924006",
          "status": "OK",
          "code": 200,
          "responseTime": 824,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "648bd025-8090-4b87-8cc3-bb139c97b6e7",
        "cursor": {
          "ref": "ccedf386-11d9-4d64-a621-3c307a25728c",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "001dc393-829c-4f00-bd16-fd376b0b1ad6"
        },
        "item": {
          "id": "648bd025-8090-4b87-8cc3-bb139c97b6e7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8aa08f46-d0bc-44b9-8283-bfe051e1ad16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc62adf-7c2c-4c4c-9f6f-896d03932459",
        "cursor": {
          "ref": "2a212722-2396-49b1-8559-6df52df1689d",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f5764b1f-0354-4699-9dd6-6e1f18aa0484"
        },
        "item": {
          "id": "7cc62adf-7c2c-4c4c-9f6f-896d03932459",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a721acb1-38ba-48f6-a06b-4e6aefccfaaf",
          "status": "OK",
          "code": 200,
          "responseTime": 746,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "417813a7-21c6-4fbd-b9fa-80a5995f7879",
        "cursor": {
          "ref": "3e1e781c-1129-4a4c-9f7e-d6e00b78d318",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "73b58819-8e79-490a-9d8b-a65bf4f876e7"
        },
        "item": {
          "id": "417813a7-21c6-4fbd-b9fa-80a5995f7879",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5af4d3e3-9241-445d-a304-253844125fc8",
          "status": "OK",
          "code": 200,
          "responseTime": 754,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "60eb7392-a36c-47d6-91f2-fbc7c7c7a0b8",
        "cursor": {
          "ref": "eb38600f-71e6-4e22-8a6a-87d8f857a78f",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b030e6c6-7726-4fc8-924b-f0b5ed52a1e8"
        },
        "item": {
          "id": "60eb7392-a36c-47d6-91f2-fbc7c7c7a0b8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "840df7f2-f619-4e50-baf5-8b374f5990f5",
          "status": "OK",
          "code": 200,
          "responseTime": 755,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "93245802-f7f3-4d8f-8493-9cd222d92de3",
        "cursor": {
          "ref": "c0472971-3d95-498b-a466-19789124e3e0",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0af2de46-ea00-411b-8a24-1132e40e317f"
        },
        "item": {
          "id": "93245802-f7f3-4d8f-8493-9cd222d92de3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "527302f3-228f-4e04-bac2-7747103ee998",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d274e30b-5f98-42f0-9a8c-4645530d0dc4",
        "cursor": {
          "ref": "9a32ba06-f44d-4314-8ca9-33dacca2787c",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "55c3b7a5-64f9-46b5-ac9b-f3eda3613e1a"
        },
        "item": {
          "id": "d274e30b-5f98-42f0-9a8c-4645530d0dc4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e57ee66b-f562-4594-a7eb-aa09f2a54aea",
          "status": "OK",
          "code": 200,
          "responseTime": 764,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "eab01813-f0f8-4504-b93b-437472c6b882",
        "cursor": {
          "ref": "03e5f5f2-3b29-414c-8624-a262c3b889d9",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "01eed029-3745-428d-9e6f-eb3c0e323213"
        },
        "item": {
          "id": "eab01813-f0f8-4504-b93b-437472c6b882",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "28a369a7-0f50-4388-afb8-6b5eee76fa3d",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4667a416-a97d-4183-8897-99a951354427",
        "cursor": {
          "ref": "7dccf7dd-3b39-4008-ae96-0aac003161af",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e83e3b91-e458-4f5e-afad-872a066ccb44"
        },
        "item": {
          "id": "4667a416-a97d-4183-8897-99a951354427",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "450cdf76-7c1c-4064-a67f-a9b8e58d9f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b066229a-70d8-4f3b-a979-3619168a54d4",
        "cursor": {
          "ref": "c6a37d1e-b3a6-43aa-b11b-e145a88bf95c",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "189c0e54-1470-4f13-a756-e167db035bbc"
        },
        "item": {
          "id": "b066229a-70d8-4f3b-a979-3619168a54d4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8195fa0e-65b1-4b34-858d-7820f266ec49",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "251d5649-7173-473f-9782-5fabe468152e",
        "cursor": {
          "ref": "cd4a3fcf-d1e1-43da-94db-56248f67f465",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0ae8be25-9752-4470-aa13-60d94dbbfef2"
        },
        "item": {
          "id": "251d5649-7173-473f-9782-5fabe468152e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6371478c-ad06-4758-a510-4791bbae09d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de62e17e-6458-4e5a-a290-dda87132f42c",
        "cursor": {
          "ref": "292f929e-2299-495d-a0c9-c8ba14814cc4",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "82d3137b-8de6-4a3f-b7e3-1ae8fc50a721"
        },
        "item": {
          "id": "de62e17e-6458-4e5a-a290-dda87132f42c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "59e560bf-9711-455d-b4c7-d70d1156fb99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e4f78b-b28d-47c6-be4c-93015c2edd6f",
        "cursor": {
          "ref": "03b36fc5-c6b9-4282-86ae-3b0ea9f233f9",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2d852de1-23d2-431e-89d9-e8fcf1891594"
        },
        "item": {
          "id": "78e4f78b-b28d-47c6-be4c-93015c2edd6f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a884cc9a-5f0b-41de-963b-f3b4e19bdfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b90f0aa-a8ae-4873-b804-98132d691fd5",
        "cursor": {
          "ref": "302b16d1-0ff4-45c1-b4fe-a7b16088dfde",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "333548a5-3f9f-4298-9bb9-855a0844c30b"
        },
        "item": {
          "id": "3b90f0aa-a8ae-4873-b804-98132d691fd5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "94f2e836-e126-4677-b1e7-4fd02d689128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f827c8ea-8e15-4030-a0c4-1fb4adaeeb86",
        "cursor": {
          "ref": "0f9065ab-bbd4-46d1-b2cd-153e7ad1e9f3",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ef419f0-d833-4b26-b44b-9017289527ed"
        },
        "item": {
          "id": "f827c8ea-8e15-4030-a0c4-1fb4adaeeb86",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b8d73653-0664-4a6b-a2fe-57293548a4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 592
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51038c5e-d899-413b-87e8-1b50020cd515",
        "cursor": {
          "ref": "445f6e80-6d9e-4bac-8b0a-f75cb94b8250",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "eaa220f6-f6ba-40a9-a378-dff8a4a3e7ff"
        },
        "item": {
          "id": "51038c5e-d899-413b-87e8-1b50020cd515",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a4d93206-fa4f-4770-849c-fcc6b2d560c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 536
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbcc979-2773-4cc2-a02c-6cd24d9c00e3",
        "cursor": {
          "ref": "b3c1a57b-415e-4a47-8846-c9431c83e34e",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fe48f78f-8c2a-4224-9d4b-fde7e19005c9"
        },
        "item": {
          "id": "ffbcc979-2773-4cc2-a02c-6cd24d9c00e3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e6f58eb2-4177-421e-9e33-333102745e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 536
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c63ce9-92c2-41f3-89bc-12b8e1d00e11",
        "cursor": {
          "ref": "0e3ee166-aacf-4c26-be66-832e1552ec3d",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "85aabdc6-b02e-4b7a-8cb6-fecf289e7153"
        },
        "item": {
          "id": "c2c63ce9-92c2-41f3-89bc-12b8e1d00e11",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9e335347-5837-4451-ba4f-cd72f7f6141f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 536
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d51351-a33e-45b9-87b7-c4df98becf4c",
        "cursor": {
          "ref": "0c483c54-ab48-4e9a-abca-235b33f7a086",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5e91f91c-f31a-4761-ab6b-c84ec4eb01cf"
        },
        "item": {
          "id": "89d51351-a33e-45b9-87b7-c4df98becf4c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "19811e57-8520-4ea4-a9a8-c5e50cfeb994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 592
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0b966d-5a33-493e-8136-0721a69e7847",
        "cursor": {
          "ref": "15f71974-6fd5-4608-a368-a197e2bffe71",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9b595b42-c082-4b86-9cc6-8a2be3eb4893"
        },
        "item": {
          "id": "9d0b966d-5a33-493e-8136-0721a69e7847",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1acb2522-8ae3-47cc-94f1-faf9c2d78f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 536
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d63065f-7ebd-4ce1-9b49-672e1fc0b98d",
        "cursor": {
          "ref": "24f4ac36-c8d3-4506-b252-770238ba529d",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b497dd75-0267-4038-b91c-affedfdb4ed9"
        },
        "item": {
          "id": "0d63065f-7ebd-4ce1-9b49-672e1fc0b98d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e0a5a532-a07d-4384-a78a-37e63d89b723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 536
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d159fe8-3490-494d-a519-0f57dedf919c",
        "cursor": {
          "ref": "ffe74f14-6843-4107-af93-2837291f3f3c",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "dedd39a6-024e-481d-919e-6daaed304c48"
        },
        "item": {
          "id": "1d159fe8-3490-494d-a519-0f57dedf919c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "100f7826-84a9-4c34-809e-f806e079036e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1f98a8-73ee-46b8-a366-d15cfeff3623",
        "cursor": {
          "ref": "f0ea1217-2913-4e80-b99f-17ae251634d6",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "309336fe-30d2-449b-924a-8a741a694cc4"
        },
        "item": {
          "id": "bd1f98a8-73ee-46b8-a366-d15cfeff3623",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cf67f910-ed2b-4b71-93fe-a9a0a8cc53ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa25cca-b46c-48cb-abf5-7c3d825f6689",
        "cursor": {
          "ref": "d6f31961-32ba-4215-9620-b2fc12d94ac7",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b887d25e-7f9e-439a-8210-764f6c259603"
        },
        "item": {
          "id": "baa25cca-b46c-48cb-abf5-7c3d825f6689",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "957616c7-1c41-4eeb-835b-f735d7652367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea13a018-235e-4086-a33e-021aa390373b",
        "cursor": {
          "ref": "7254f527-86a4-4763-a08c-d614fa9ef33b",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b6017097-a29e-4dc0-b3fa-2d0f160b6a52"
        },
        "item": {
          "id": "ea13a018-235e-4086-a33e-021aa390373b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b4772228-c976-4c6a-9eaa-380b443dfd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9586c03-b1f5-4bcd-bfb9-c25fe1ab9fdc",
        "cursor": {
          "ref": "d1c4d9cc-2622-4bf9-bb65-d90f621f4682",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "501bd015-6e44-444e-8af5-1da6bc1acec6"
        },
        "item": {
          "id": "c9586c03-b1f5-4bcd-bfb9-c25fe1ab9fdc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "da364f33-3e56-461f-aee4-9b447dca07f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a22d6bd-af72-4f59-a73b-f503c1833f96",
        "cursor": {
          "ref": "1e703203-6e67-4019-9e75-4789da933644",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "fda68916-8937-4f3e-a90c-bb32ce65410e"
        },
        "item": {
          "id": "3a22d6bd-af72-4f59-a73b-f503c1833f96",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fb298a36-a5de-4e18-b7ed-cea97827cdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef4573d-dd7d-4159-af98-a5b82de4cbcf",
        "cursor": {
          "ref": "f66da894-fbb6-4442-aa73-b7c2d173a597",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7e6e7d3c-6a35-4f71-b102-4668ef2969b0"
        },
        "item": {
          "id": "7ef4573d-dd7d-4159-af98-a5b82de4cbcf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "682d528c-c7e1-4621-8bd4-470cadef581c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1915b5a9-4dfd-4ad3-ab80-2f9a0c164371",
        "cursor": {
          "ref": "698ac6a0-4588-4694-9a5a-573c6df74348",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "072c4c0d-50f1-40cd-bea2-e226b31316c3"
        },
        "item": {
          "id": "1915b5a9-4dfd-4ad3-ab80-2f9a0c164371",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "004f955b-834b-4bad-a7e2-7ccc9e2b1c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfce787-9e8d-4b62-8145-4363c6d4a945",
        "cursor": {
          "ref": "918b021c-77dc-494b-8487-95b72f73db5a",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c55c4036-5690-46ed-869f-a9a69edc7d6e"
        },
        "item": {
          "id": "3bfce787-9e8d-4b62-8145-4363c6d4a945",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eb6b67ec-c204-4af6-a3c0-c0d1ae133e4f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "6f96ee42-abce-4ba4-b566-9df9ca520985",
        "cursor": {
          "ref": "63ca083e-2b25-4990-98d4-9e88cc559ed7",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "dfa683fe-b4c7-4d8e-972c-daf5cb320d6a"
        },
        "item": {
          "id": "6f96ee42-abce-4ba4-b566-9df9ca520985",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "eb815b10-dd0d-4294-9c1e-dd53d2dd4c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca4e45a-926a-4fbd-a402-fd86e70f0f18",
        "cursor": {
          "ref": "c54bee55-f976-4f5e-a2d0-15d31d35a4be",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4ab548f2-21b9-4c54-8d9a-461bd0a7a056"
        },
        "item": {
          "id": "9ca4e45a-926a-4fbd-a402-fd86e70f0f18",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "03a8c20b-5965-493f-a029-363c758b7ee5",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "f9c140cd-591a-409b-8f71-5cdfddacab11",
        "cursor": {
          "ref": "717577a4-a1e9-40e7-b920-c0fe85e28fd2",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "143c5e68-1468-4d3f-90bd-ea3a6310296b"
        },
        "item": {
          "id": "f9c140cd-591a-409b-8f71-5cdfddacab11",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ad1133f5-7f73-4f33-8d40-37e2e77ead0a",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "add2bfcd-941c-4698-95a8-d0077480c2ed",
        "cursor": {
          "ref": "8255f7ea-a11a-46b1-b9a4-987ea1fc7f4c",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "429c9192-20a1-42eb-aee7-46595876b611"
        },
        "item": {
          "id": "add2bfcd-941c-4698-95a8-d0077480c2ed",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3d7865d4-1e07-4cb3-9271-937817e1ca5e",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "b667852c-cfce-4233-8b31-7472c84d088d",
        "cursor": {
          "ref": "a4433723-9b70-41d5-9c14-d2da9f4aaba4",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b8bce925-c8d3-4de2-8fa3-80767297967b"
        },
        "item": {
          "id": "b667852c-cfce-4233-8b31-7472c84d088d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "88de0387-3003-47bb-8654-694a75895587",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "5efd0669-1858-4dd5-8732-a49f6ad0e45a",
        "cursor": {
          "ref": "f7e12f7a-b4ae-41cf-9e38-c12a8123fcc4",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "657333cd-2044-4587-a9f8-8bf14476044c"
        },
        "item": {
          "id": "5efd0669-1858-4dd5-8732-a49f6ad0e45a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0c6d004b-dc98-4ca7-a751-407f02e63893",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "ba152799-fa58-4b0d-b244-3249a2de0016",
        "cursor": {
          "ref": "cd15975d-1128-430b-bfbc-681a0f71607c",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "509b5234-87f2-4a7e-b0e4-bf28b3d0dfb6"
        },
        "item": {
          "id": "ba152799-fa58-4b0d-b244-3249a2de0016",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6c930d55-e138-4ccf-b5ba-28ab20ab3bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c9e259-075b-4ccd-8642-c5e948047d14",
        "cursor": {
          "ref": "26b3b35c-0f37-47af-a13d-cec76f194016",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "125c0dc1-10ad-48f8-a97e-1e42fc8af1f5"
        },
        "item": {
          "id": "d6c9e259-075b-4ccd-8642-c5e948047d14",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0b3d934d-6668-4ea2-a812-8847f1e0205f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f94500-bb57-47f7-83a2-2373962d8395",
        "cursor": {
          "ref": "ad43ee93-dcd7-45a5-8a85-69b88fae86d3",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5f38c88a-2d9b-4657-9033-485d8c5889c5"
        },
        "item": {
          "id": "c0f94500-bb57-47f7-83a2-2373962d8395",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "86537c46-0078-4860-b8dc-b207131fa4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b464d575-350e-4b41-a218-9aaaec3a6646",
        "cursor": {
          "ref": "e7cfea8a-a31c-4bad-b6a8-a6c111699400",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "de746563-6839-4ae7-897f-422507ca0a66"
        },
        "item": {
          "id": "b464d575-350e-4b41-a218-9aaaec3a6646",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "52842e28-9192-4972-9395-8ead060a9291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9183c0-5560-4a3c-a1ab-cd24e642dfb9",
        "cursor": {
          "ref": "9bb4ab4a-822c-4882-8ac2-36d40d40cd6b",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "774c9ccf-f729-4c6c-8a24-6410e177f3f5"
        },
        "item": {
          "id": "7d9183c0-5560-4a3c-a1ab-cd24e642dfb9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fd7e3fd3-8783-46fe-a63f-36675ecf5bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0edd22-89c6-4831-a05c-4a2e7ec120d9",
        "cursor": {
          "ref": "bc146a6e-2293-48db-a8a2-95d834316981",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0368f377-9829-4698-89ff-85ec7d5ca543"
        },
        "item": {
          "id": "6a0edd22-89c6-4831-a05c-4a2e7ec120d9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5304c886-d823-4f0f-90cb-146685facdc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a01774-318d-4ad7-b73d-93ac5cca8c40",
        "cursor": {
          "ref": "893086ec-0a32-4e96-a14d-111f3781272f",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "33221836-5bd9-4864-81cd-0c8d044b0cac"
        },
        "item": {
          "id": "87a01774-318d-4ad7-b73d-93ac5cca8c40",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6d9470a7-95d1-4001-9ff7-d9a943ad9b15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b48a05d-a18a-491e-b4eb-f9e94be62ee3",
        "cursor": {
          "ref": "3cd09964-e196-4136-849c-0150dac09a74",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "084721ba-c7a7-4644-978a-c97139760f76"
        },
        "item": {
          "id": "9b48a05d-a18a-491e-b4eb-f9e94be62ee3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3e984c45-347c-4148-8250-db7216d37afc",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e83222-5d82-4ad6-a747-ae8d5f0dccca",
        "cursor": {
          "ref": "2462974b-85c2-4e38-b863-ca822328af9b",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2b97018e-98e9-4364-a051-58372c308ea7"
        },
        "item": {
          "id": "14e83222-5d82-4ad6-a747-ae8d5f0dccca",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c4295d27-265a-4988-bc5b-8f538172fe73",
          "status": "OK",
          "code": 200,
          "responseTime": 1330,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fdf04d-eeb3-4e30-94a6-fdf1715f6890",
        "cursor": {
          "ref": "a8bdd300-55f6-4da2-904e-06478df059f8",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "bb39bd5c-f0f0-4643-97e0-13d2b50a961b"
        },
        "item": {
          "id": "e8fdf04d-eeb3-4e30-94a6-fdf1715f6890",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c78cdadf-15c7-4bd5-9e3d-d68e4333896a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "5f7855b1-ccb9-4864-9fbf-3aec0410e3e3",
        "cursor": {
          "ref": "9c05dbe8-bf3b-4775-b301-e9c251a42693",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "41074e90-6df8-41bf-88a4-77f0e9692adb"
        },
        "item": {
          "id": "5f7855b1-ccb9-4864-9fbf-3aec0410e3e3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "94bca5df-2f37-4152-867c-58364320bc07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7855b1-ccb9-4864-9fbf-3aec0410e3e3",
        "cursor": {
          "ref": "9c05dbe8-bf3b-4775-b301-e9c251a42693",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "41074e90-6df8-41bf-88a4-77f0e9692adb"
        },
        "item": {
          "id": "5f7855b1-ccb9-4864-9fbf-3aec0410e3e3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "94bca5df-2f37-4152-867c-58364320bc07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ba15f7-43f3-406b-a1bf-9020e41a1107",
        "cursor": {
          "ref": "78b7ca3d-01f8-4879-ae16-ef9b39599c7a",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f59f1cc0-fc45-4b06-b73b-c2c93349cd31"
        },
        "item": {
          "id": "e7ba15f7-43f3-406b-a1bf-9020e41a1107",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d03dcba-c9bd-4b18-9751-5680c1d1ffb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3684652c-fd0b-4576-a5fb-a027fc6b84c9",
        "cursor": {
          "ref": "d06f5f45-f317-4d86-9903-3673863577a4",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "afe25294-9e6d-492a-b49d-d9de700945ac"
        },
        "item": {
          "id": "3684652c-fd0b-4576-a5fb-a027fc6b84c9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1d4b8f7d-709c-423f-ba3d-31c5a4474a75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}