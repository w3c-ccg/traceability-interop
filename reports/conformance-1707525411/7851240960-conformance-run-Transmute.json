{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ea12e62e-b3bc-4733-b2b6-f388a2ed8848",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ecbbb09c-2b3f-4bf5-80d4-cc3979fdf545",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b83dda8-7c8f-4ee5-9955-9b7edeb40542",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ed59736c-ae67-4f95-8491-60bfe29679b2"
                }
              }
            ]
          },
          {
            "id": "987b0d2f-01c1-48a2-a0e4-2dfba131cb45",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a946f570-3722-40dc-a56e-ef97545f1214",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ea8e77f0-57b3-46e3-a290-81b9b2a04ea6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "497e2be1-7296-46a8-91ea-b9b5f42a1c5b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3c3958b8-0a56-4fcd-a83d-40eb55860237",
            "name": "Positive Testing",
            "item": [
              {
                "id": "65ba6099-7536-44f5-b13d-a488415414fa",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6221579e-1c36-4921-b94d-c250f2eed34a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "708cb840-67b4-4ea2-93e3-a636215a6c45"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "10ef7f74-8f48-46ed-b585-626de82b0ce9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e5f1806-1823-45ae-9ee9-5a5f91e4323c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "75cf2fca-da40-45f9-ba92-bf7ceb411f2c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b4b0e68-6972-4647-a6f0-be7c23320619"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7044ef75-ba6e-4530-a012-3d920eecc6a0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "481dd0da-2070-4c06-9616-e0099a97846b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e51a3f4f-8aab-40bb-9a12-51c19a681e1a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94a0af66-b2f8-4d3b-9b63-79bb64955805"
            }
          }
        ]
      },
      {
        "id": "7e630714-b706-4cc6-b97f-b3a394bdc27e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3bb1ebca-6ad1-4b27-938f-bd42aacc519b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3532763-4631-4fd5-83e4-a99c6d0cc505",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f6273e12-b9db-4506-b466-5e817298ad56",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c435b01-d0c6-471f-b5d8-12f5043a9c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40e1eb75-ed46-4ac4-931b-da5b2359d5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3abf682-3946-4453-a69f-a2e82e0ba697",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8618f2c4-4dc4-43c9-8e6d-40d35a9025fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3aac431-c135-4ba2-94c3-479348f16903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de92a567-fb56-42f1-9903-2b10a753da1c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8209908-8ce1-462c-be3d-44a31ec7f8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8cb96b7-d161-4eda-bab2-660de2b5e5d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b65a822f-c404-46c7-ad24-aab486a49061",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cee13c9b-1087-4fda-8068-92d69a92be5a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa80fab5-f51f-4b73-8d92-46c79426b65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93afe2e6-df1d-42e2-932b-7f26993b9c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3718d6df-63bb-4318-bf2d-fde0d29faa83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d78171-7f95-4a0c-bc9f-649845847d08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "15744d10-f9f9-4a4a-b96d-2c083071ebfe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66ab7d25-63be-4388-b8fd-d17ede62d0f6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aeed2eef-ea57-48d8-985c-ee3b07f6529b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f18a8bea-b4b0-4a4f-992c-47e8f1431bc9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7c17b78-f978-4577-8c93-e1e30519c966",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "12b6d56f-9c31-4e46-8678-05367685f05d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c71ab86-0c15-4065-a050-d0c0c78e1647",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "788bece7-3ebe-4587-be3c-46c011a1ea6e"
            }
          }
        ]
      },
      {
        "id": "1866d04f-53b7-4387-a9ce-51a57c22ae50",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0caeb7b5-c2e8-4237-bb67-66e7ceab0e4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c60f4d9-e073-4982-8bd9-9118c64f2a6c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "391e6321-5137-48ea-84d3-802df1dbfd78",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82eadee-ad83-4e55-bcd2-f695f907f806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0d6570-1cd7-4040-aedf-27aa990a2c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa12868c-667a-4a3a-9173-92fba3a79f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfff66a9-810e-4874-a3a6-47d51d25a28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0d4fe4-5122-4ba6-81e2-e81082f60572",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254dd7fb-550e-4fc1-a3b6-9a9aae593005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e68368-7887-49f7-a702-1b15dbc35ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f4c989-e77e-48e5-a6a0-0d5a1c84d750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d889f36-f08a-4847-b682-279f1cfb682e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a59a3e3-e67e-40d4-9f64-2d09681ea70d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa77f3d-5e64-4520-965f-cc405231a288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f469bee5-adbc-46e4-9380-80541afb8d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476376ce-10af-4115-ae11-1e45deb29ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "123d8678-beaf-406e-83fa-c72ec31565b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca84ce77-b112-4e51-b6ed-e9bb3ab339bc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2699e84-39fd-4b35-894a-267548ee8395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55750d6-395d-49d5-918f-c4a740c788a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d9d0ac-66b4-4f36-bb5a-6058bc9b3c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34439423-5490-4b2c-b444-3e9870cddafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e0b3f0-99b2-452a-b3c9-ae91424da8a5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbefe52-ba5d-4a17-b8ee-19f274edcd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195593d9-f285-4a2f-b20a-96791045b5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af6fb40-5e1d-464e-88a9-35f7f75a608f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55195419-e8a5-4e86-b9c7-9da2fea69df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8b1666-469a-4e92-9ac6-00ea48712e33",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd046a49-8090-46f8-96c3-225522e33723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28659e6-f96e-4916-ba3e-8cc096e8c68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ec36b2-793f-4537-88b3-009aa0a328f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa3b0f55-c62a-4d70-a675-00bcf6aed5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a574c1-d27e-4f26-b1e3-3f021eeba977",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e845108-3159-4c69-ba1d-6cea8db68154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9d23b8-f4fa-4537-8302-8a51c64d3a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4599be0-4801-4aae-9db7-de88960d76dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddedaa58-2e47-475c-900f-a243b9c14845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011dd44a-1334-42ed-8380-1098467c2268",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23014c5-f573-45b4-a19c-202e4abce7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a174539-79c4-4684-ac9d-78ebdde3de67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cabbef-2266-4f3a-8c7a-c0938af368ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66ba540b-85ba-418f-8083-be435623f968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88663ab-5e1c-46c9-9e2e-f051b74eea5f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9925d296-28bd-4dbf-8c7f-9999ded92cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0418da-b1a6-4402-ad64-29d75cda5ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa14b2b-4e82-4e1b-b749-914306f413cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "822b0a95-4513-4907-a0d5-0c53eacc556c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c99bf2-5031-4d70-a7cb-5537bee160b1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d1c3e9-7d9c-4c43-aaf6-5fe555b7989f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f4e4b9-4142-49f2-9469-be2d3a3a0b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e089c56-4b37-4333-b50b-2d0589ba29c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9f68ad1-641a-4980-af5e-18136bd7830c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fcba870-cb99-4210-b69d-45cfc8ad6013",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ec0cd3-a5e3-4c85-aeba-eba54eff9ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9481be67-0b0a-48b7-93b1-414c6422b00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7e2cfe-91a9-40cd-91b4-b1894dc1d904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d911e1e2-6f76-40f9-bc74-6427f6143897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e2e817-2c4a-4022-9d94-1fbf601a8d66",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48a7f1b-df68-452d-a463-788dd73e48bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66306301-e768-4947-8756-1f13afa1c5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f694ff12-80d4-4098-af9a-41b84a0226c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05ce6a6f-383f-47f7-95eb-7fd379597356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6cba3b-e5b2-44b3-866a-8a00db111d2a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc8f677-57d3-4091-be30-9becadf9e934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8141fd33-547a-4c07-bef0-2e4bc033a58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c4665a-0886-44e6-9a6e-144423443af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea13a327-509a-453a-b7c0-33e076967771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a79f98-836c-4460-a91a-21846948c193",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b3ed5b-4540-4697-90d4-a3d21b5f38a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88094cb3-c296-461d-a7d2-5c2fd62f7a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bd6c25-6c1b-41f9-9c81-800eb888443b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d63aad2-f36b-4510-bd4c-a8ba28e065df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7d7c78-0f1c-457e-aa75-19cf68568e2a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d03675-700b-4320-9534-9a5db3cc4267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c1cb1c-2caf-49bd-acee-889ab84688fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3831d045-853c-4ea3-93bb-0e39ccc4f674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5646a524-022d-4b77-b451-7e1383aabed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c688a4-20f1-47fc-8d67-a68f4bf0a83b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79b950c-fe18-44df-88a5-af385e849024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a48d61-d22e-4bcd-99b0-684c13b12c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3566efee-1418-42d4-bebb-162db288d675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8472c0a-b4fe-4925-a81f-f32752358bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e82f3b-4569-4794-bfc8-72222c17c0cc",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5902bb05-d9e6-4f2e-80c9-0060cfd85df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d9a5c4-0eb2-4301-808c-7ab8651a2bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c00350-74e6-41a0-b03b-99b482590cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "288b3cce-71c1-4d32-a45d-facaf7b9098c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcf726d-3af8-4289-be79-21dd395ab80a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1d62f5-8913-46da-8bdd-a600e254011f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad15b8b9-b007-4535-a04f-d8fbb9e994ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbd96d7-3bad-4338-b209-038e8a447bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9619c5-074c-415b-bdac-6b36c9909aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c21017-236f-40c7-9c0b-bd9480c89ad0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc00be27-a74b-4ea6-826b-294f2dc452b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01d22d4-ba58-4573-8020-13bb7b2af800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdf3272-b951-4b62-a2cb-298f4e90ab76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af4cc03a-4fe4-4152-bd2c-e785cb1fc2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f50f98-4e48-4015-9b31-7f07add9c252",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09322aaa-7c1c-49c5-9be1-c16d4be45f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e110c5e9-e526-4af9-a7d6-95443abae4b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b2371f-f4b9-4b0d-96f7-0f11a545ad06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "522d6c4f-0538-4380-8606-768c066ca60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090a320e-7e21-4681-acde-68a6cd389ce8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673a4c52-5fdb-4dd7-8634-0be1ca1e6313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594405d1-f843-4daa-9a40-909bac696eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9081c273-4132-420e-b7a4-ed0376bd9d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef13a4b5-3de4-4152-9d92-60cd6e35bded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c20fbe-6ab3-474c-bdd0-e4b4af77769c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7880cd4b-bf0c-441b-b730-e4a55c5590e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c4be30-265b-4b2a-a1b0-e7ec3248362f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f7a538-0b0d-4f01-8678-d02bf8eb820d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76d72f18-864a-4628-b067-6286e53780d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256e21b9-cdf4-4d85-aaf3-9e061477ebdf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc0be8a-6d95-4288-92a1-a8664c72ed51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b374aa65-966d-4485-af10-0251617b2a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8476b5c3-bbc7-4644-b901-cae5b9a39acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fce2fb8a-6f48-4e7c-8319-932ee220c4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbdb034-d2f0-4420-b544-0e4d5af6c04b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9cd82a-e9fe-4d1c-abf1-e4e9a570a683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fff1c6-c80f-44a0-b6ed-b6f09df844f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ddf57a-05dc-4e1c-8707-7400292e0354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4210de2e-a910-40da-9999-fa122986b42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f573d43b-e387-4c45-a8a0-fe725c492782",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c395e96a-1166-433a-b186-48de154c722d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec7a690-bc94-4a09-9b64-31a79193667e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70222de3-1939-4226-b448-8998fd8d0ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b80444a-83ed-46c2-be8b-8800b243e73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e06db27-5e9e-4c38-8605-f6b96bd335d4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4956f5-d2ea-4d09-adf9-a74c59582f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c13575b-2a64-40e9-83eb-c3a9056e470f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe70c3d-c06d-4090-a0e8-3f15619bc8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f10d59-8d75-4a88-8de0-bc83590134dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873ed0f4-2535-44c3-b97e-8a5300b35cf2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10eceec3-cddb-4278-b863-3bf10c735fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84127dee-a7de-48e8-a355-d5287669a56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d60d18-4f6b-4e6b-84e2-83138dd76615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf564ed-5a6d-4fb5-b96e-4f02a9e33d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea31821-c19f-40d6-80ad-49ee8c9b23ad",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffeec4ed-13a7-4f19-b145-3f7d8e4448da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b7ccf8-7d8c-49fb-be3f-68038f16a389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97fedd6-1c15-4563-b03a-5342475e6dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3c92f9-3d95-4cb3-9c43-9355585c4e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee65fce-acbe-4921-a16c-a30edefbe8da",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624fe233-3431-4da7-aef7-dd8b723abe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f7d6cd-b488-467f-b03c-af43665a3dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1cce6e-7906-430f-a319-939914019170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "133d3fce-c39b-4971-9320-5cdca8648ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed04e53-4f6e-4ef6-95a9-0cd231c5c4ca",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b420a192-22fa-4842-bc8a-930b14d0eb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c266da66-3b6a-4866-8644-36a0c5a7dff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf758f1-0d74-4921-ac96-50ad0c03470a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd2fb06-11db-4c7a-bfcf-997ec165ecff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce31e185-a9b1-4e80-805e-dd5525cd74cb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370733b3-8645-4034-9230-6c5bacf13535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e4efd2-885a-43a1-88e9-29a40916a595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c6a771-b3f0-4081-890d-092ff3d682b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd6cd59-63fc-48f0-b4d2-ddde6d3f1f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249b97fc-2b13-45d0-bf4c-97e1f2202f33",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c02c304-6362-45f8-9f06-2f495e95825c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83c515b-d0fa-43b1-b3a6-6da8cdad5819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b190b0-134f-4ffb-9f61-4513de5bc671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32a0ca65-e780-4ad5-a70e-66a402f63c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf4e4f2-02a2-444d-babb-bb03efc7fd6a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd09676e-1df9-44b8-82f3-5ccd3ee34797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23e7b49-0191-437a-80ca-b11c67c89ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36078fdc-442e-44a1-a493-a3657a9a1756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70b6e4b6-dbea-4751-aafc-caffb0bdf577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595ef62e-64bc-4261-b61f-c95daa97e7e2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14c977d-18ce-4938-9d84-b73906eebbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31170a72-ec6f-4c18-977f-a8b0c607145c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6daa37a2-e54b-4c36-82f6-b1d04048c94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f714f36f-c8b9-4b2c-9bd5-2b25e5d723f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516c3193-0a87-4390-ac04-7a4cc71336bd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2efb8b-1262-4ea6-9e64-fedbeaf55558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b8ed19-66b9-40f3-8cc4-8d2d9793e95a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ed47eb-e00e-4ff2-b251-82d7c5f893d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e49e3760-fed2-4857-80c3-ff565b4cd728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bd7c06-f739-4114-82d0-a756e3a493c8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db245a3c-45bc-46fa-acc4-0e49982d9ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0f0afa1-07c7-496b-991d-9dd4fb997799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d2f482-d47e-4649-8df5-f2adb8321640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "383e0348-cb30-416a-8e3c-c01a46b11f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf4ff57-055a-4772-bf2e-1ad947f868b1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de3547b-7150-48ec-8546-83df5080e4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cddb65c-a888-443f-9c4f-d0abe84678d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ce105b-9eea-4b81-8c06-cb59c801cb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "802018cb-b19c-4801-b675-699e8b3726e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf914baa-f828-4607-9ff0-6972cfee66fd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d63ab0-e270-497d-a8c8-65fd8a03d048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d90f44-e58f-4072-8599-7fedfc36fe87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb200f2b-37f6-4982-adfe-d332d94bcda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "060ce25b-10b9-4c97-aea7-1e853f12364c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c418e65-4c89-498d-8ac1-912e5408ae1c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1597b076-a33f-4ca4-91df-1cee507e33ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8089a4d-57e5-444f-93b0-0a9e6092e62f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0729c80e-77d7-4007-947c-e3bbdb7380d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e77a3ecb-39eb-47a7-88fe-c10216216cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a61b61-b2f6-4dab-99d5-318364ef98a6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68602f5-e0f5-46b1-910c-77436d58928c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec14d3b-2120-4973-ac59-e5e3d5d346c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fb01f6-21f4-45cc-8746-be4d7c343fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "249dc56e-92f8-4fb1-a52b-d795fb53a93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b66cef4-d4a4-4411-b87b-8691a06861b0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4778c8-c358-42ed-85a4-ff642f477573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8ac5be-daf8-4370-9f22-0f197909c535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc03e6a8-2f19-4774-b33a-4692353737e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b30aaf22-bb64-4979-9f4c-e8362e1ffc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309d205d-bc2c-49cc-829c-0a33f9b7889d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507e9658-b901-4439-ad01-2bb9bc312786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3ace85-5d37-47f4-8cf7-1f3701e48a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5e99ab-9249-4869-8fa7-fbc33835ea16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "19028293-1ccb-43c7-9640-641bc250bd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94debf0-d419-4991-80f1-28d83e4f63f4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a17601a-b6e6-4073-a7b6-ac454c4cef57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bee03a-1a6d-428e-b7fa-19ba56fbc9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d6908f-7449-4d6b-954a-c4efafa27815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "90f114a4-722a-45fd-8f13-a7e655d0cf2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eceac18-235b-4f0c-9630-f7d8ed96ec04",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2f0c57-a3ce-4ff2-80c1-0418c2933d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b122317c-fbf1-4741-98fc-c0a54f88b54c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac691b5-446f-40b7-82f2-bf19d472e16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a63b40b-c66f-4748-b58d-5a862bc7065f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112c6622-eb1c-4896-9634-0f66bab1f55b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805596d5-c550-40e8-9ea9-3e5862417c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c925772-e7b6-4701-8ad9-36c94d74ae80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f1a840-4947-48da-b616-b3396a302c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0674fdac-bdf4-48d3-8f86-fd5ca41fdf2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfc3904-01ad-483e-844f-ffb4dfd6cede",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffe6487-3263-4db3-bb76-8f4837dd902c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d119e911-f98f-4ae4-bfbe-d67c9a15c19b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134a70b7-eba3-4f7e-bd7a-4010b7e7c1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b8050f-d847-4d50-b8bb-0fafcef9892b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205d13f9-3228-4da2-8245-03301d683cc2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508cd986-7cdb-462c-a443-3423ee38f4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af11938f-420a-4f3c-bc5c-6aa6286f4c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8949220-c970-4075-8433-5cac4c893142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c28731-6e68-48bd-8e54-7aafa14808ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79156901-1e74-49e7-8486-1655da805abb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794600d9-2b99-4444-b181-cd2c3ef3dab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2ab7a8-fc56-4288-8a5f-4305076e692d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8695e4ad-816a-486c-97e7-25268fb89299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9c6a2b-98a4-46a8-af65-9050860da8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0767de95-ce89-4bb5-a10f-47224e51a947",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559fc3d3-c3ff-41fd-8a57-bde926e3c6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3405fa-3bd8-4406-b1f6-9fdc3fa51673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95127240-9645-445f-9b5d-3c291f493903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00f47ece-4b87-4c68-91ed-84dd2cd37643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f6d5d7-c1b3-4c54-8b23-d961f5c283d7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbe3745-3034-4637-8b62-5256361d51d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24cfa5b6-7460-4444-ad7a-62026cdae92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6563e48-e68f-478f-b592-f40d2beb312d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31980309-21e2-4008-a9db-76d13a86faac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebed7bd-5dd4-46ca-b3d2-aaf770266ae4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad2d5fa-207d-4d1e-8d6a-5beb7cbb9be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3bfc0fb-3bbb-41ee-9d24-1931b31b38cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b4f05a-0a05-4c7b-8bdc-7492a549d74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "51dc6d9f-01c8-46f3-8d3b-50488c498e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd2bbae-c5e5-4b27-a449-a19bef2249eb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e037bbd-d14c-42e4-a1fa-e1da848c4b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d1914f-dbbf-42f8-9a76-c1eb2066e087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78eb0d03-fdbd-4d94-b540-bf95efb92911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a032247e-5770-4298-a1a5-5e1beb3ab3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a2bdd8-5366-4c7d-87a8-670528c429ac",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbffbdb-472f-4be7-9b5f-6a89cab23128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9303f2f3-6fce-40b4-a627-f307cd3416e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becc54fa-7d3d-4f55-9624-9876c95deee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99735b7e-4109-40bd-998d-3e04377cd2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6b1a72-b638-4595-950d-abdccd1938e5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36249419-d3a2-4e64-a52d-95155fd0ce0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d163e02-7e99-4206-9d79-ba1e414bb94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1821a7b-774e-42c1-9276-e3ff97426247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0f7020-1d0d-458a-a332-6dcecc0f9e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49004174-1f6d-4122-a85f-c0bf45c2dc63",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6932b548-46a0-4131-bbbb-06075b1df856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f47739ca-e53c-4995-a139-2ed9f08e13ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714a42c0-d8e1-4ad7-906f-1846ec9ec936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19b3b5dc-047a-4dd5-9609-4430c9c464cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b374e85-99b6-4416-9bca-d03da96d54a8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043b5ae6-8d1d-4855-8f35-f1bb826caa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8efced5-459b-4040-8fe3-4a11bf073e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cb03f3-3af5-4b68-b3ef-11bf908d5b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e99a9813-ee25-4e3f-973f-0725b89252e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada09bcc-cfaa-45d0-a39c-903b012a499b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34116167-c77a-4cd7-a42c-def53667e5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b123c1-694b-4eed-b323-4fe5bf0bf287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c05d3b9-3ae0-4804-ada1-2003a0500056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "abbb949c-ef95-4602-8a9e-cd5d202c42d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf2ac3f-d8de-4a78-961e-e381abeb30b2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5986e7c-07ca-473d-9f6a-cebd938667e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3961d2-8590-49e5-84c8-a10bca83b591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414ddf69-b91d-47ec-9ade-d31245666fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "effbf9f3-a041-46c3-919a-f3c58b54de8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634d5b8e-2d37-4440-b8fc-b1ebda992d2d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbf97be-bb9d-4aeb-83e7-a62ae5adb7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159a1e08-9c83-4cdf-bcaa-698e9b2bcfa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa78a36-3dbf-44af-8ee2-a0386240ea92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c572fbbc-7022-4a2a-94e6-84dfa5e74ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24ef03c-1c6e-4e4b-83ac-6309c1cd4ecf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039493bc-a69b-4266-aa7b-d7ed7ac290a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd26be8-b5ab-4f2f-b692-e126870d0410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac51abd2-2d43-4d7d-a26a-f2651ac25cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "770262cd-7277-4750-940c-812ff05643ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508e18f1-e57c-41bb-88d7-79a18eaa5b01",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e92f93-3e63-4907-811d-9de7e9ced7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52501daa-aa6d-405d-9244-06d3ef4cf5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e44997-0e9e-4835-9a8f-3aaba21d5fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5630b381-cbdd-42fc-b1f4-6f23fd90e5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b07463d-1095-477a-a86e-d8d749af2d67",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8724453c-4cf9-468d-9c1e-02e1952c1996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3837f476-67c9-4997-9a6d-8274b4d1bab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9adf69-d247-4e90-a28c-d08ea45bc08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "482a8db1-bb06-4acb-ac5c-2a75c70b4e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c432a61-d050-4070-b3be-2a3cac862f4f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba175591-7542-4b78-a5b6-87fbd5b43f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a8f864-19a3-4ab8-ac63-ca09efd21747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cbd12a-9e3a-430b-8c24-76b1b3fda75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "18b3cfaf-937d-4fe4-978f-fb675fa19fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88e598e-64b8-49db-8eb3-eaa086d912b9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bab0c29-a04f-4fac-a21c-51d855c50575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69156dfb-c389-4475-b6a2-e048dabd9624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea70b1a4-0497-41bd-911c-5f22b7b00069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8709cc42-319a-4614-94ea-3b5d11d729a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecac8d2f-1cfb-4947-b16a-33c07d3be3d8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2baf0d8-0b26-43c4-9dc8-dcecd82a5260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4757afb0-6401-440f-b473-b5acc07af0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cbf5f6-2980-4ee1-9322-b80f3ecbe267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37f1fe64-cf9a-4b41-b92c-700dcc6342ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6912ed-9059-4f33-8cc5-206dec2ccf8d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0caf1e24-98c6-465a-b8bc-0ee6d88d065e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8785d1f4-d7e8-47b0-9053-24ffe7318d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53075e88-d5ac-41b9-9126-43c1be5017ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4868de-6fc7-4d5e-a6f7-32d50f09ca27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69fdd84-0402-492f-9b68-e60836ae5c5f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc0a0c7-07a8-4feb-8fe5-3451b204d410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f150b1a-d489-4f88-9e11-afeaf3a95d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897d413b-d050-43a5-91fc-8aa12c0d664a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5454fb5-439c-48bd-86f4-773271a27584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67bb8a7-6dcd-4846-9265-9a64a25ee9ae",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd0badb-bf0d-4619-948c-0fdc1e05168e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363f9b36-1662-43b5-877e-a40093f56824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e984a100-4dc5-43c0-b757-d13d44e40ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5038ba-cb42-4416-8dfc-7eb20f146601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fac98c0-d74a-46bf-804f-d57499c308bb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763bcd08-a157-4e9a-b519-58f3d868d179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0f6dbd-312f-4cc0-83f8-7f20db501d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6b07d8-52c5-4615-8369-5d2f809055f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9dcf46b-2b1d-4d79-9bb6-3d9cb5d66b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2e8a14-ab60-4a69-8cf8-8c4c87ab1f20",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254c002a-cdb8-477e-a07b-01409350ee00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c04003-c2e1-47e0-8ba0-9f024053d74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1b6702-f13f-4b93-b278-9810c004ece7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4184a47f-b3a6-459e-9fd5-ebdd07696c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d28bb7-dce0-4959-bd40-9317b88e3dfb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a5c73a-4209-4cdb-bf39-85d84c159a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4dfc8b-efa4-4c28-9134-e674761db027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f560e7-4e82-46fe-9e00-fe77d7261a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "096421d2-a714-460b-9df5-e6483a86a321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e0bc06-25e4-4a2d-b61a-13ccef2c1565",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c1466d-b681-4234-8347-5c9d7c503f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a3a7b6-ba54-47ef-99c8-401e72bd7279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e14bc6a-1c71-4dbc-b511-fde1e0dc42b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "450e918e-b71c-4f15-ae2f-33bc250a3b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91093c54-eded-4cb4-a06c-5daec9905ec2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547e0180-0d9b-41e4-9e24-c231e6e6a3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ceb493-35d8-4c6e-999e-ccc0709062f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b9719a-f4a6-4510-af74-f540bca029d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94b039f1-d08c-40d8-8490-a6aa95d492a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647194e2-c78b-46c7-9ca9-e2ebb136c69c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958e5386-9fbe-4ff2-a048-f1991bd2f2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33e162f-6672-496c-9721-5e832ba13f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe83a2e-ae1d-4276-ae6e-e06baa5352b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "53a9ba4c-0d92-4604-9f30-b9ea0aec895a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767acf75-a81c-44d5-a38c-8f5a3fbedec8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ba0fea-3fad-4696-bdd8-e9c054a80419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1002ce9-1464-45a4-be6e-da2dfaef8319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f9a303-04f4-4266-9c10-9e74497c04d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5a4940-52c2-4d83-b387-6ce92363e2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ce478e-db75-4452-a832-bfe45877e8e8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33cb033-1656-4b70-b70b-be2f6f5844ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2feaec1-1e2e-4327-b700-aa8c5a94670a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0036d7fd-1a87-4885-ade7-c8f20b944122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b70198b-782d-4fdb-9992-2802d0bdf8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c819b38-366d-4dab-ac5f-f1302453be65",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa49651-f09e-4eb3-ab46-a29ccd046229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4877d95e-284c-4210-a3fc-895b24ceff61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43741ae-1210-4248-b7e2-e7b1e6e6764a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3716f35-d1fc-4bb4-957e-797530b6093e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814fa330-ecdc-4852-8ef3-2db353276c0f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e2c7da-1f2a-45e4-ad51-8bd429d40b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ad8c48-a44f-4f4c-ad21-d515b1b1aec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bebbd0-ec1a-472e-8c5d-bb10c8cb0a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ada7b3a-3828-40db-8c2e-6979621e2329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32b8bbe-3aff-488f-aaad-3889b00973b1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04377844-6c44-445f-8fea-69c5805c74be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baed1399-3374-4f76-a6ec-c41cefce9c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a106f33e-93e5-45a2-999e-1a471fd1d748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "daf70324-75e4-4cbf-83d1-68a423b1ad83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039f4918-03c8-47b9-ba97-f815979adbef",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aeae9c3-7b24-4e70-adb9-d4b420ed14fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35684bff-8b4b-4ac8-bb3a-3107a6029031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef26e48-90d8-40ea-95b7-ce18ad8de656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c71a1c21-a261-402d-a4d0-8546499febd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbd8394-9d1d-463c-bc5a-4bc6ae8588b6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71577718-05db-4566-8696-41ccfe4dbee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afffb3b7-e26f-4177-ad34-1fe7edb44293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7310cf-dc19-4858-98eb-6a6d4e88f2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf22e918-d347-46a6-a06f-c945955d7f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8fc878-fef1-4ce1-8b06-1bf018dfef0f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4398c6ac-14d3-44bd-b078-174c43611bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86017bb7-d3da-45d1-9602-eede5fd10105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f84253e-4bc8-4f4f-a17b-42978493402d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "040ad41a-c1b3-4e5a-9381-57ab959796d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffd8b80-e22b-487a-9556-3ea42d61eb56",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324095e8-9d2e-459a-8608-5c3099cb51f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7dd67a-dd74-4d62-8016-a55f984916e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae1dc3e-5109-4ea9-95c9-60e8c3de1e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56c9eac0-6ea4-446f-8303-22b3dc0c5863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76312f42-bb1a-4450-b80d-5f275f0c88e3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861f5336-27b7-4070-bf76-7057e96618be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e6e764-1293-4507-8f27-9a034f443e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2667a4ac-683b-4291-ba3e-59bc42716085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea684e44-19d2-441b-99e7-309fa98cc509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb95289-27be-4eec-a8e5-47c9b2802169",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18965d8-ad90-401f-8b3f-55f43535e35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04dd4421-7888-4579-a9ab-f27ad5e0b9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9688cbb6-584d-4c8c-b9cc-b8007b56f5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb44de18-fb22-4a00-a1bb-9b4f95e5cfc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd67ef0-e279-45a3-825c-1e10b315869b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd7f203-0839-4106-9ca7-4aa149c0a35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6a7395-4ed3-4caa-91a4-64c2c9dba4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f51ecf9-3065-412e-8169-640f6c03a3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52eb0dbd-5742-4cfb-99b7-e960f291d289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d5db7f-47ea-4904-aa1a-51d830136645",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb10de94-0c36-452d-b25e-79a5ec000aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6260ee1-9862-4c5e-9a1e-31e27e17813e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2263c9-3d84-4200-b377-3c2c9dde469b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "09c9ffb6-ccd8-42c8-bd2f-35e1b1b0100a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1f9eca-eceb-4d12-afb5-3c637cb5af3e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d760a64a-6ec8-42d9-9c80-7450cf7139b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40257c03-0088-403d-8fb2-447f7e9cea84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5679973-67a1-460b-9665-5c8503f532d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c334fd38-082e-4dee-9c61-d73d7eb44260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d10662e-e301-4aa9-aea9-7106a40a6d4b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb85ec91-e0f2-4c49-9407-536393d43dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610ba5bc-880a-466a-bed2-3c043030605d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67539d57-5f46-4aa8-9e88-82e228b099ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "24e95e35-3aa9-4769-b02e-d4491b517789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfdaa21-f2dc-4fc6-abc4-0035026541cf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cf8674-77fc-40d1-8a16-56a7276113a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6691af-0d5b-4f36-94bf-06127942f127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3600a9d2-811a-43dd-82ef-4e995b6d97a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "52618a5e-7db4-4a8d-91fd-d498fe936a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494b0aba-35da-4ba0-97f9-cba5a5b00cdd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa314c81-bb38-41ab-b63b-37c1944d4f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99146f76-1396-4d09-8e76-a5b742dc35c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311240bb-e8c6-4a88-a675-b3b274e73fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0ecac4-bc33-4e3d-9a3c-5f1824b75237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f791b148-1a2c-47c9-b8c9-da20fb8db202",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8b9051-0b40-4a36-b9b2-ab905443edd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "70248382-7270-468c-9b68-9a135abf1aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67e64a6-a8ff-43e6-95ff-081542e70150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac09934-a42c-459b-aa38-1b0e108419d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ec36ac02-8d5d-4e75-b91e-40258afab78d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6cacc0e1-a30b-4a11-8b59-df00bbe85f3c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c53252c-2865-4071-8850-53007ed24fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "954dead3-1ed0-4840-bbb7-13d5830845e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77474766-7b00-41e7-9250-050271d11e3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58fec265-52ff-4383-bd10-117e75ec855c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34e85ab0-c99f-4203-ab77-1170832afd1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4650ebb7-303d-4f21-a202-23897f1dc872"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2b5bb6b-1141-4b72-ac15-2936484b71ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ab78ead-57bb-428c-bf80-deea8cb1f72b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "72d10295-7c77-4e24-9d91-d86756975f8a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0bff8c9-b84f-442a-a673-fa0dc6e16b53"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "368aec01-77d9-479b-bc5c-30e814f583e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f72c0602-a5f5-4933-b300-f3247c996bc0"
                }
              }
            ]
          },
          {
            "id": "afea04fb-d0a3-4676-8369-9b9b1f627395",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2cb0de9b-060a-4335-aa24-e948764a2252",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "563cd283-26b5-4e0e-9cd2-8cfc9bc78ea1",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8432e5-3248-4a81-8788-aee2b37bef1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "50584ffe-4143-4b21-9e62-de9679be30ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86f468d-8bf1-4359-b01a-08da3e967f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa800bb-86dd-47f8-85bf-89b7ce452e4e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "be03f04b-0df6-446b-9da8-5bbb38eeb573",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ffa4844-3826-4165-bcc3-c4d81b32eae5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "154cac04-3bc2-4f5f-8bfc-73ad3435a85e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1008da40-4a98-4bbb-86c7-a3f0cce1d0a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a01bc0d-3020-4160-8c07-6600c2d45d46"
                    }
                  }
                ]
              },
              {
                "id": "1721624f-c121-4a63-b259-829a3d80f7af",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "592f7e0c-9fe0-4665-a9a5-063394bdabe3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de3856e9-ee9d-4b3b-94ab-d65fe2c6034e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d0ad28f-866f-4512-97f6-df5e0d4d1cb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2d060338-1bd9-491c-a23a-268d1802fcb6"
                    }
                  }
                ]
              },
              {
                "id": "43776ccd-7529-411b-a0a0-455ef9efc8c9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "668fd224-0ee1-4944-9fd0-4f0b6406588a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c285a7f-5398-4cf2-af07-0a3653347406"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aac8f631-5252-42bb-af45-8d5201d65217",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6fe877d3-f5cf-49bb-8f0d-2ef8f005a11b"
                    }
                  }
                ]
              },
              {
                "id": "6ef6cc94-036f-486e-8a2e-f3536373acc5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "914f54d2-82be-43ae-a0a9-b70f81ac9e8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3305f26-3594-4f9c-a3f7-83c4c6f096b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd2286f5-8165-4962-9f4a-77dfca392971",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "be75f9cd-6f93-4c6f-a146-7ce23e6b2247"
                    }
                  }
                ]
              },
              {
                "id": "8210e1c7-6138-41c6-a60f-a8a2c52bc114",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0955a841-859c-4811-9cf3-cb448e0f2f39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea966ec5-52e5-4819-999b-ccd01bbcf6ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb04029a-c45c-4656-bab9-ddca591160d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6d4e1001-e241-4292-882d-2238bb4a2f64"
                    }
                  }
                ]
              },
              {
                "id": "1de1a167-24a9-45d4-9a26-dfa8eb21cfc5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcb2d18b-f488-441c-b54e-61735f8f595e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88a7614a-224c-41cf-8258-e5fd8a7ee298"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1a7ce94-c13b-4d6a-bb1a-6a3f6907e5a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8eee696-e79b-47c5-bde8-76a999f90b97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b1388de-204b-4fec-be5e-8e2636f61ed4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e8f36d2-3118-4e1f-9366-66be4db87479"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0d190ab-aa2c-468a-8bba-21684c52bbfb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f4848c1-1b5b-4d78-9c27-a5709cc5ebb3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e82ee4b5-d1f5-45a8-9fae-e73bc735da18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2411e769-0f34-4b58-ad2e-7d84d954aa3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5551d46b-087f-4670-a7c8-bc266850fa91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c76d556a-500e-4145-9589-afc13f413146"
            }
          }
        ]
      },
      {
        "id": "1cc53859-6c1b-4806-9640-02f5e81fc938",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ba0e2753-2374-46c2-bd1a-14a3983868e5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6c71019-e805-4c0c-9363-224b038b9a56",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8cdddc86-889d-47f2-8f91-d68988ff69f3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b4fac0-0c1a-44ea-b338-ab38c8922d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f53edc-57fc-4287-b4ad-2d408ac771b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2efbb0-16db-462a-b33d-d40f58aaac59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1990d76-2300-461f-8ced-0eb106b51cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4513ca3c-40ea-4769-8575-1bb6dd280bf3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1794db12-6c23-44a5-86a6-f7126ffeda36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2ec389-7a82-4caf-90a8-6b238adb986b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82351ff-b3df-4a13-baa5-e93216a10495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03dc27c5-9ac4-400e-aa1e-5d57ebc6b391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d79efee-2cf6-4188-aedc-10d432f0ece0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27313b05-f951-4cea-88d2-42cbb1fd0adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75af2c5d-bd33-458a-861e-4c7adbba89dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bf5d16-9d19-465a-a29f-1bfaf927f0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18dec14e-d174-4137-ae7f-95ab926c1e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69874303-6927-41cc-8e70-5803f7d4074b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4d0680-2aa3-4a95-b902-7f169dc59d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d61d10-d7a0-4ad5-8421-ed6305e09a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e65681c-39d8-4fc2-b93b-ac2c36d7dc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74cea00b-0443-41a0-8e20-3e29b3d185d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8672023e-8b61-47ee-b990-20e1b952524b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07037d09-5615-4ba9-9501-27a85c63582d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51857484-5acb-4069-be62-bd092a3e960f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126af917-337c-4485-9afa-4fa9cd04f599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc9f430b-ff49-4ae7-b0fb-e190eeea0690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3468bfcd-f64a-4bf4-839a-3fc0d272e706",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d798679-6c7b-4e5d-97a7-0f53a5e6930a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3821332-800c-4da5-a90a-d30fdac61060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05d661a-580b-4e27-aceb-50c4b7376242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1a0818-9cf9-45a5-b553-1acac6caa0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f752a75-4495-497d-ac2e-246424a8ee59",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7cead6-8e5d-4bbe-94fd-1ddf4e249460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e55aad4-460c-4e4e-afe5-9434828c2c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8835df-c197-4b05-a979-840be55d882e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e66be1fc-ec2f-475c-93b6-73a17b4b6282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b46995-f225-4078-a4db-8d78d27207ef",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0741b188-61c8-4c7d-8418-27539bf0a076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bc4db7-df9d-4820-a095-71b3e2dd3001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1074b8bd-7e7a-4f70-a1f0-ca3d2740829d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "218d81aa-163d-4fce-91d7-e8f0a2cf170e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54011a6b-13a8-4732-bb1c-92679b4029fb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b024fad9-d450-4ebf-b98b-1aeed79cee31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5cf03d-5e6c-4455-b41f-27936d3964f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9e6f5e-8064-48ab-a7da-30ac192099ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0070799c-de92-4208-b9c6-e75e9959d39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dcadb8-d975-4e36-b931-69096a092979",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2fa409-d093-4bdd-8348-ec22cec7b576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba8f094-b887-44b5-a84e-b858fd80f6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a496cc-b1f5-4699-96fb-5463bcfcd31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38e27316-e6fe-4d5f-9ec6-e8517d2a9965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96d6788-6d1c-4043-a768-38a9d2ff1ab2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f213c7c-f65f-4805-a0ec-7a0e953c18f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999b9fe9-7e2d-4b9e-8f8b-85ea1d5cad68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e2ff59-cb65-454d-ba05-ea00d03d65ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "10b86218-ab59-4284-bcf5-44dec89a5c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efd989a-e811-4a66-b0f1-6b04ca10db2a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18117c5c-bc99-49e7-b67b-9cf7fdd5b4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f64707-965d-485b-8c74-8a3789274c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366a26bc-9094-4579-9076-4d22c1feada3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7eba07c0-8445-492b-922a-cd1cfe91026f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5fe086-0a3a-42a6-a1d7-feeeaefa49e0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc7d887-3a23-4ffe-b730-8cc79e613099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d4c63a-2c67-4f21-9b6c-2c596f181e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18bc319-265b-4715-9a59-07bc5c22e4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb1fbb6-388a-445e-9cab-bc412a7cc521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6972c49f-cfc5-419d-9b26-77a31b59c640",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64870885-62a8-4d0a-9c70-a1b508d3e1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9869770d-8dbc-48e6-bf21-72382e91ef4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40bf24a-90fb-442a-b05c-3ca82fe7438b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a29780-f927-4b2e-b065-b07ec13d2843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60427f8-8f91-41dd-a876-d630a6603444",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69d6fd7-af01-4eed-b7bc-b0f903535138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449c54ab-b0b7-49c3-a36d-c31f8e3532fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d176225-bff5-4086-a4f0-249fa5268a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e65eae7d-c6e6-43ba-b05c-e1c2452282f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926f323f-7a15-4de3-a2c2-0d4a8a39a851",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67900e79-016b-458a-b881-c5e1c1036a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3632e1-607b-4043-b2fd-223cf998e9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae15321a-7865-4a94-b11d-b569c2de153e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "53e783c0-e945-4f6f-9cb9-0d328b8e49b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbadae6-5ddf-4e1a-a82c-96337551d52e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2402d421-56dc-45ba-9774-fd57cf0d7880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b017537-4428-45e4-ace5-0073cc393127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcb4ecd-f8c3-4a8d-bea5-4eab364a9487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "56ac1f67-5c55-4785-9020-c6b2075ba9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e18b7c-ddbc-4752-b3d7-19ae08715b03",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8bb2b7-fb20-455b-8134-597089ae170b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4a5594-cb6f-489a-a8cf-d51ad6848c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6831280a-d6fd-4fc8-ab6b-a930a99f05fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca8d957-2ded-43a4-9bb0-b87d5b79a5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524d6196-2a63-4110-8859-06864ff0e32f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2b2853-2e2c-46bb-863c-f6bad9c1724f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca02b88-7cc3-4a04-8668-cf8217491e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab588dd-8643-4926-b117-28b747794c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7622de-3d80-4995-aea7-53f2b98f7192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd2c062-9ff0-4bc0-8e5b-0caf176a4099",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db499a6-2565-4c1a-b3c6-f57c608f1745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffcf404-09de-4fb1-8e3a-84d18684132c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d609d534-71eb-48ba-9ce3-aade213b0cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6feceab-b99f-46eb-9e05-289f6f9a4a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ff4931-1be8-454d-a3c8-15f15c9bb5f0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff5a1fb-ebf4-461e-acdb-6e666cfdbee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08ef5cd-1788-44ec-a0d6-1480b32d2f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e85777e-70b5-4c64-adc0-c013a0b2b5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "889f08a6-5f3f-4398-ba51-968265ef27e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81948bd-0512-4b42-be0b-e0d9caadc8ca",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1583cea-b13b-4237-9071-eb0fc43c811c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b77893-75f6-40a6-9c7b-dca9b76e73d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df515ea-001c-403d-a492-413853aa6d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6d1d9c-f4b5-4b38-8f34-1190b1e30782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43fd808-f611-4c65-8731-e65faa6dded4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dafeca-b09e-4e57-b6ab-19ffcc6ab15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48d8d77-2db8-4750-9a06-7c1271b18e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1acc37-6b6d-452e-ab96-92a0cc025485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26b96492-7645-4864-9546-636771bb6b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08dcee4-27c6-41da-a126-f3dc5671d4e7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b771a9-377c-4896-b097-56b243667bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e06dbc-495a-4222-8ff0-98530cbc0cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccf3222-a69b-4fda-943e-982f5461333a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19178539-e9cf-49b2-9916-2e61f9d94fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b5bfec-2df8-4d12-99ba-c2cbdcf838b4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dcd572-6b95-443a-aed1-d4491c111d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee89fdac-68bb-452f-b34a-ad7fd56df970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e870d9-13ed-43ec-b860-7d215622790b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3730471-b87e-468a-86cb-a7d9f6eec548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3add1a94-b81e-45e7-8d0f-c57be381626b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71a53a9-ad8b-441e-9f4a-63aeeb0322d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fe3579-6cbc-4bb0-bd27-b873a8297d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec0b643-e804-4537-b5af-e34a8f79bba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a35b58a-8f91-43cf-ae65-c2046f3c0435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdaf6a3d-df6a-4734-a352-eee9d7613d6d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a204a82-f6e1-46b5-b928-32f7e11c34a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f633fe8d-ac72-4953-a2e6-848c64c7380d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddac7e10-7835-4ee1-8f0e-1a55841e584f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b007d2-57d9-4394-9514-bbb7da512180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2348d99e-fb9e-4f43-a958-096a89665d41",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc443d17-d544-4cfe-8273-7a43a8e8cce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfd9311-3f66-40ab-b86f-d298a2b62930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bf9014-d12d-4790-8195-94354cf75785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7e2990-6a2a-41d9-bafd-d9d51d52618f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3656b24-3b81-4487-b2bd-5f4032e2daa4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50468816-b8d6-4e73-b6da-3ffc7dc4dc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebf7ee1-3a9f-442f-a823-3c89e6ee3105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe9ff01-d8ed-49dd-bb1c-f41df326335e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a67c207-ea23-494b-bef1-508be1571ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77e22a1-6d98-4873-8283-20478836914c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e77377-00a0-4e6b-92bc-4e0d49b8499a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1ebf6f-e712-46c1-b221-b6f50bef269c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7d4132-c4b7-496c-8f88-c9ec04cfa19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "142cf97b-6eb5-4c14-adfe-3f0f6d6cd51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2209e41b-7d61-4d4b-a75e-30f53cf0e37c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acad2e4-8671-4ba0-b7fd-dd12ba394cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc29caa6-d4fc-44ae-8c37-0efd80597790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe79c98-6acc-42ae-b48f-079d1fcea6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb562f9-afb2-4c79-9ba9-a3b173548b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9c5d76-17f8-4f00-a0d1-651ec3ec25f6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5b77d5-812d-4d33-a64c-ff040be358ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c57513a-fdc1-438c-a584-718f8552f5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1333835e-3aed-4200-8278-9c62db329487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b73c9e6b-3469-4673-a401-61c050b2a199"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "913c4f5f-f1a4-4a8b-a209-b14735d27147",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f96401d0-61b0-4b62-9d76-784081de41a2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fe5927-e38e-4b42-a615-9dccb111b52a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e652a371-74ba-4b8f-8ac2-9a24bb2197a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f7e38d-16f1-48eb-9e83-dd1cdd52ebb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5688b5b-2546-483c-9542-d492484d5738"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af9fea7b-2bba-4b7e-bb12-0b4a190475a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b4b0482-9d2e-42f5-932b-45859e7a5b5c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f6876bd-abce-4359-be0c-73ce31dc55a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97d79c3f-9045-43d9-80d2-b95d1ac676a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7543fa9-b020-4dc7-b272-00b37d7a6ff2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "435a5f63-d111-4a46-8a32-7f57a69c6682"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b05468a6-216b-421d-98b4-1386d1e85f42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77c507ed-8718-444a-be17-50a01687ac6a"
            }
          }
        ]
      },
      {
        "id": "29533c03-1e42-49c7-8ad9-8917b9543347",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2db76195-517a-4669-8b61-8d92a9b99b57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3011b350-7a04-49ca-9b8c-91745520d3fe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b3c5a62e-9aa4-439a-afe0-6e9b58febee2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8cfa83-db09-4a79-b89d-0afa226acc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8527cdc-be15-48de-a451-079b3119cebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b953deb2-60ee-4c7c-978e-f218fbc60919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b326e379-e40f-427d-b148-56ec6895c799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa12f6e-fba1-4a15-8546-8944b0e093b8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078e2818-3dfb-406e-afc5-f13395adba97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f72314d-d8cf-455e-a68f-76418ead1efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb18182-9158-438f-a181-cff305bb19e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a23310e-4118-4783-a72f-372628d8c3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620ea203-21bb-4858-8092-812a6abe6d0d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226ccebb-181d-448f-afef-c6dd21fbf845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019f465c-5e3c-4b9a-9e11-0f6dd0230006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cce92a7-9ae1-4873-9110-f7efa27420f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d219dcaf-0c16-4da6-91c8-ce3317efe6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd48480-5dd7-43e4-b09c-4ae55984b106",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347fb47c-d712-4ab8-a915-b99d702ec662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf7d346-8ca2-4fee-9565-87de132b2a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b7edd8-205a-43ef-b8da-f093855f09e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed965bf0-0cb1-424e-9ec0-b2992ddcd30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174d30d4-a964-405d-af07-6db9e332b727",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a06ec68-7dbc-44ee-b83a-ab99938d03da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6ad2d5-a1d4-4a53-bf6f-3358a4247cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ca9bc3-d625-4dec-9cd2-3b8bb833e6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ac0d2d-6bbf-46b7-aeae-de99dd8c709b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad8b8a3-41df-4b42-a2f6-64c43bd478b6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a0d14e-9c04-4698-83d2-4f89df26cd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129e61d8-e377-47b6-b504-586892b1d51a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2df9ed8-ca24-4a39-a329-f0ee86f7a2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "891a7cbb-0590-443e-adbe-d79b4e493661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cd4eb8-de8e-4f68-ab4b-690a0e50447f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a21ad5e-6b06-40ae-8779-42ed4e720d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d3fa8e-3291-4af9-928d-109f3715fc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca266b2-1c4f-4554-bc82-0e32fc08632b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbfec391-3a27-4088-95ee-01917f570582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934fc225-a42d-42d5-8262-b9fbe895841f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff70bdd-78ca-4c1c-bbb2-0b2338486e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b607f14-5198-423a-b2f1-20d5ed6e4582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62416d73-ba28-4e32-8f89-ef06ca7b53fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eef33e7-0deb-4b26-8733-54b0c4719b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cbefa8-9d7c-4e2e-a501-592725e09459",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c3544b-0c77-4780-9480-7132c8ecdd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb5c37ae-44f7-4f17-9d5b-6daf680e5991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c802cf-9167-4d73-8760-50dc057f7105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a636556a-9e76-4a59-bcc0-74fb9ca7513b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b31d521-1196-4108-9f4f-e3bf1976dbd7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7be6af3-e987-4315-887b-62eb0e9a9e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d787f0ad-399f-4a11-884e-63675de748a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd933a4-4f6a-4410-a89a-d2759b1d119a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f79ca3d-99e8-44ef-8100-941348d271f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf21ba3c-010a-4c5f-a050-3484192668ce",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f26ab4d-50f1-4929-b6f9-65051f64e9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d07c7a-94f6-423d-9956-66f71c01b376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d09cc93-5343-46ee-a361-cefb2641513c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "99eec95a-2279-455e-8dbd-8c5370ca2f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8bc026-383b-4979-ac85-d7b9496f4c1a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d92bec-8c90-457a-a05f-69afe61618e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c769d35-76db-4329-ae9a-aed08c90be7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a4e81c-71e4-44cc-9f3e-99425f5ad189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdd2f6c-11f1-4703-aceb-f754e3951f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352f15a8-e659-4a62-8736-a0f21ee84732",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15baafea-2308-45ea-8a38-60618b73bd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3c9d12-2df8-47ed-8a47-9d9aaa8bb008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7628067e-51da-439a-82ae-cb7f0e94b9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e95b9eeb-4119-4842-94a6-a44b22632b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6675b327-0734-404d-a767-3ceaef12269a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77402d67-6d0c-4e78-8feb-456181b51b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ecf3f54-405c-4df1-a199-55f45f0632d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428b29ad-568f-45e0-a292-93938c0e285a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "35b50239-d680-4a70-a794-a28682550813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c22f6d-8fec-4308-88ae-f1abf0d11673",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06de457f-7e6d-4b4f-a586-7b6b07770ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f77e06d-065a-4c6f-a5af-3536cf9b8169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd9e726-076e-4f09-94b5-f318dc9f9b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0309d27c-dbba-49a9-a72b-4f16fa1a7152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a521af3f-1a19-4ca3-a6af-dd7f2163190e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c7eabd-7132-4b4b-8cd0-766802be8f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e533d0cb-84b1-42be-b682-0db204e532d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4427fb5b-34aa-4e93-b5f5-6b37c2439984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f130bf8-3065-4144-92c6-2f4b0750ad9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fddf805-69fc-4654-8c1f-8ee6694d89d3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f096574-fe19-48e8-a6d2-f6044eb33c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337f9d34-d275-485a-b9d6-6deda4906ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1275aea7-4ad5-4e1b-ba08-6bc123a79a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d667974f-e905-4e9e-9d21-9b59fd03731b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab7243e-6414-4b3b-a191-685e9717ef94",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2493c879-1916-411d-b343-7c7ce7b09512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffcdf81-3392-41b2-9d31-c7fc7488a0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ce9aa5-b32f-44e7-94b5-524445f4f5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2ae2b1-db83-4b57-8d64-10f7cd44d4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ee7b93-af97-47e3-8639-d4381adce26c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7201f992-ebc0-40c4-aa37-194c2761b83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3027fcfa-f838-4ebb-81fc-d672e1b20317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242fd91e-92a4-4275-8725-9be948644f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c045a34-8a92-4321-a01d-5000653869fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8223ce26-4e8f-4aa3-bb05-a035e901ce38",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b8f4bb-f972-4fa7-bf45-ccc3ee14ab10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe634cef-4fb2-4657-b9d2-c67ba292f1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ff8157-987a-4775-becf-8b26e91a30d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e1e15d-8903-4ca4-a71d-a824d22bf3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d016aa4-6849-46e6-b946-90701ba47f6b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cf7da6-4339-4342-96d2-aeeba16a8249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff4b004-14d1-4af9-a726-17262586d14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924f0f25-2d09-43e7-8ea3-4b3c5f1fd37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "989c72b5-3950-4bae-9bff-d0bc25e5ab11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9a5deb-7c3f-4213-bc22-bbd1288c6afd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511ae8f3-9a6c-4803-aadb-9367c52e052e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bd5e7f-486e-43a1-8077-6d79cf62b63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a80637-2422-4965-af80-a33d089a6c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23afb485-e830-47a3-9219-868da4fa2623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71c46b4-0a0e-44c3-a0a3-9bab751d181a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862620df-84ea-49e6-b477-48b06f497cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a345099-9f88-44f4-8d5a-8106f43059f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15198898-f6d8-4f2e-abd5-72fc63997ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7580b11-1412-4efb-966b-292bd93b27bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311060cc-9334-40cc-abaa-371f628e6d96",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1bed90-07a9-4b17-95cb-965cb53af96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ba1f96-833a-4dbf-a2c3-1a935039eb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c74d93-b46b-4d66-b949-818f81294562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "052126c0-b905-4cc9-8414-4320edf3f61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4419da-cb35-4b9d-8a76-3236ee4674cb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbfa3cf-1425-4ddb-a06f-c684142b23df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1218df88-ecbf-4b50-82f5-e5e8ebd20387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecb691f-5e14-4cb8-aa35-24908f7a4040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9c4a17-e26f-480b-bfdb-7e1e1f79758f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb7c846-3ceb-42c3-89dd-961b25e0375a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe251298-5ed8-41f7-aeea-36f5c960a144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb890c7c-ef0e-47d1-914b-23434046fe92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7726c04-4107-4e9a-b5a9-076398812a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3edaa907-98d1-4371-bd45-34d93c393c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200a480e-5ca2-4663-a24f-de17fd43a0da",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9369080-79ad-4a89-ba56-06bf60ad69bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a924826-d3b6-45ae-8d16-eec65db28ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38285666-6664-499a-a017-ceecb859e247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99b692d8-2889-4e55-9983-da0e7eaf9565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33541c4-b70b-4606-93aa-bb723e94a2a5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa9c3b9-c6a1-496d-bbb4-319e69d5a70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a968ed3a-315c-4ce2-b705-3d102c5e09b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f24205-46ff-4aaa-aed9-18e02f42fef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c29c328a-aece-4f42-a7c5-dc53a8727dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef08ac3-95b2-4962-8462-3d0943724746",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce56f591-be81-482d-9a95-c26b41df8925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89331647-5571-44a4-9887-94f7fd524752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0177b5a2-fae8-47ee-b3d5-77a4c713999b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c23478a-ce50-4740-adfb-ff11d15dbe1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ca47ff-f07f-4a6f-99c4-69f354a18e6e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee211e1-ddc3-49a6-b362-2bc35bfa80d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3dca786-0359-4a2b-a09a-18f21ce0758c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4a435d-3ed9-43f0-b6bc-e4c62a7289e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e101545e-a190-426c-8980-4f6271e71103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517188cc-019c-4ba7-93e3-5bf182f6ebfd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082fd5dc-36e5-43d7-935a-68a8d413b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0cedfd-e052-40d8-97f6-43ffc5b61170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba3c5d5-d13a-4c9a-b19e-7685c95f1b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e12d3915-3865-4493-9a44-aa8bae447680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222d4a08-041d-4416-acb1-58f3efa414bc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe93856a-6c82-4cf6-b347-e6d2ebdd55df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a744910-bd5f-4dce-8268-b9cb85f22241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01904149-1d72-4894-b827-5816511a83be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc55cf1-7ed3-41f6-a1e4-c3aa96ac36c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512b6bc6-0f40-4f1f-acac-88bb5a4a71be",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54af4f4-df9e-460c-bca7-76575dfcdda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4958ab37-ee3f-4746-8e06-229b953c669a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a99724f-0b7d-4585-91d8-16d2c474713e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a884fdd3-9e7b-4e1e-8a5a-83d7b39057e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d72fac-f204-4039-b5c7-4af2f7daa963",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cb5698-8fe7-4958-b034-ed059cd32dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd08bfc-0a35-4273-9a4f-7a547a9df20b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1381e0-a615-46b6-a34d-4e2c1cd74931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1744988e-9efe-421b-9165-436d5944b284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7c62ee-08d8-407a-9ead-b1951e9c9978",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036cb7df-48ca-4eab-9647-7a407ee362b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab8842a-4eeb-45c4-93c3-70adc5d3ad29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a5aa80-bde0-4148-84ac-d19d47ad60f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88d27dfb-1b89-41fc-a81f-6b2f33d21640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2d4311-45ca-4df5-8298-3b8159ad9943",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5eea78-1fe3-4c47-b04e-f2079df393e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "201097d1-c09b-4ade-9e62-88edf6d86abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0621db-960f-4b6d-9859-23a3d109b6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1041c36-5035-44c1-a668-3d96d3bbd9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b07f74-4c05-4a4a-952b-eccbad1ace95",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5ad01d-b102-457a-ba78-833220a3cb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd2e072-81b0-43cf-8c3f-e168cf9b98ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa75c13-90df-4e0e-ae89-0db5a1dad5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "decdca55-a7ad-4cea-9bab-afc23e789462"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7c9e3f21-057c-4ce6-8538-a54762b70dab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41879c4a-44ca-42a9-a5be-59710e33d5fe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbfd814-739d-4bbf-a2e7-d149a27ea54d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "eff52d3e-042d-4e58-b462-a23e2372b431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b077e0-673c-43fe-bae6-c0e754b4ea6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb509d99-60dd-47fb-95af-185f21f25d80"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c15509a-6f94-4cf0-967b-54929f9c597d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fb465e0-9031-4b27-9826-1576a3241eb3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e089ad67-c79f-4881-9c4e-904614f0bf14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8fc711e-a780-4657-bf64-5a1e8c971f92"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03e408f3-3176-4368-b5dc-6aebfedfc6d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "125556df-70d5-43c2-b161-01f03eb8d06c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edab317b-a985-4af6-aa8b-b0721b946016",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cc740de-8177-4237-9d31-e840eded13f8"
            }
          }
        ]
      },
      {
        "id": "c74b0ed7-7b82-48df-b58d-552368816957",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ab6ca6be-9d8d-477a-8673-c62798e6032c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "051a2fde-679a-4797-91a2-b67e176184f7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e86fd1d-6ebd-4257-aad3-9476e19ad9cb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9685e1ac-18c2-4d0e-adf6-5a389a447c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db19320-1f95-45be-bb90-bef8bc4b3eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4110559f-67e4-4fef-9817-491d6cce5e45",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce127398-4235-49ab-9957-c866540d5819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5003fbac-f9be-43dd-9378-e71d190809b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fee7793-8516-4f44-8903-81938fd2e99b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0437f58d-cabd-4256-8247-eee08c89acc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c7f6c5-b0a8-4c0a-b601-d465eb261d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9375f5b7-e453-4bed-a021-d62b46534d86",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6096405-47fa-4bc8-bf1c-b560c6a6b977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddc02ca-38ef-47ab-b7b0-699ac1047533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e85c71c-8ac6-4ee4-a6c9-c0555c47aa2c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afa8ac9-c627-4cd5-8112-c3b3693ff443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2187198-40e6-4cf0-a674-89c4126a0b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ddb63b-7ac7-4d3a-ac4d-dcd000ab798a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9cf762-8c1a-4e8a-84af-001328279dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1891f03-c4f2-425c-9d5a-e32c03d5b63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e3611a-8a94-448c-aafb-391ebbfa27a7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1825eb-b604-4992-81aa-18bd81cc1abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f07c6f-20a8-41c7-ab05-54baf309b760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ec8c6e-4eb7-4072-acc3-eb7a1f81cbc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe880a13-c164-4f46-81c9-029cf4338c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf89a32-572b-4a11-85e1-55bad40272df",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30142053-84e0-4dae-9628-07a85f207e8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "827aa7de-1d34-42a9-abd7-9ef48ae9c07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aedb3ba-121c-4e97-bf8a-388a5e5a1ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eeeece1-a0fb-4d0e-817e-510552924ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0577c9-e00f-4276-87a2-d688a50711e2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ca80e6-4134-4512-b73a-a44922ed73d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1577e384-0723-4a0b-8913-b18d2dff1fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9340e7-227b-4c77-a025-e843a8bba7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7a481c-6593-4df1-af54-cfe03a960774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c892828e-5a3c-4ab0-a15f-af5d3d69cd05",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0f9aea-e2da-4f46-b947-4e9b0c10f483",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f701bb5-44dd-40bc-a75b-252a1c7a79e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b6d840-969e-4abc-8bc2-da68a4cde827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cacce5b5-24ff-40b6-b121-9cc65ce37b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d714e6-7b4a-44c1-9f49-8dc838d2cc1a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efbf9d8-d3af-479e-99e5-a6fa3317d6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c027cf-7ad1-443d-b2b1-e29e4529c697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a11f13-8b4f-4cac-8d52-18aab9cc754a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37aa4f9b-3762-4175-b6ec-4c5c16360a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b55e076-5c31-4841-8c67-64ee934cfc8f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b656525-46dd-47d6-8299-9be170ea278a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7434271d-de48-4a05-9df3-2b201f202517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd871e4-0e54-4c7d-bced-11059af00af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ea4469-3c3f-459e-bc62-141de815fa91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69710cd0-d279-4eda-8e27-5d4c55bfca3f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b72c06-c8d5-4f3f-bc10-edc348a821c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa58eb0a-c32c-4f9f-beed-ba787d960808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4670e128-0a05-43ba-9341-5c98bd925602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0d5fbb-b1f3-41ed-aa41-c588d35395e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93192e4-bea8-4da6-9cb2-de4acda858c3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a968a1-5310-47a4-bf24-c0e75253dfb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036d723c-5eb0-4227-819f-1a9f080afe12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b783ec9c-f365-4254-ae9b-dcbc117c6b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c37f430-8ad0-4490-9e4f-cdfb28fdc7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3430ffaf-27a4-461f-b746-0dc79bcf0f12",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7766d1a-aabe-48ae-a64f-dafcfa5a4c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8eb31d1-0121-4bec-8091-570b46d39ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d87b3f-b5cb-4683-8060-2a2564a6628b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40222962-1f97-4594-a6d4-297eb8f974a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0faec4-6ec9-4d29-8ab1-6772857c9523",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4613a3d1-76c1-405d-9cd4-2ddce0984f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d24daaa8-171d-4459-84a9-1d050459777a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca13a83d-806f-4c10-acd0-1677afb10fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bed8b0a-3440-4247-bd9b-8afa078a0818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354b5878-85c2-4a6a-8167-776438bafb8a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb7d285-061f-412d-b936-8f6acedd012b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bab153cc-dc33-4967-9c39-5463f4fe1834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62ef948-102e-4a49-b2f6-d6f8aefc48d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0478776-b176-47c0-815b-021314a48d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb69dc5-19ce-4fda-b17b-82a7cd2c6d09",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e021ca6d-c90c-4647-8876-f02a6ae616d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d094c10-449c-4b39-a13b-761d56bb3a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0182b1f2-588a-4e68-9638-d28beabd3e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d60c1e6-0bda-44d9-88bd-0607782828fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5bfe8e8-56de-4750-940f-f71e6f2702e9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763a88c8-d918-4c34-bee7-954e88b2f570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8682e9fa-29e1-4902-8602-7db55733ca37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad964f5c-00a9-4a79-acd4-01beed12fda4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667171f4-44ea-474e-a855-20ad10e7d0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5ed3ee-95ab-4e86-b192-bd1dbad51914",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d88a0d5-6baa-4cda-bbaf-7f8d905ce8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb87eab-d1d6-4106-beb4-fca4e4f449f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcacbf6-c86d-4eed-b70d-456bad45eff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7983598e-d6aa-40f8-9db5-8ac2f6ea75af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90182011-d0f9-42e3-982f-6beb57fea5fa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be443379-f763-4b79-98b1-6b78765ef6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc5f331-9415-4730-adb5-a3fdc1f034e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ff987e-62ff-46c1-8b32-aa575b962566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f5cf49-4cd1-4847-b52c-6da1dff8f148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d976c1a-8f6f-4441-b287-5b78b26c7b19",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e986b4e0-32d2-4b99-9ce3-81fb4f3b1e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc355b0-1fd7-4ed6-b930-b168ad2c77c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a35ff1-e5b9-48da-8327-2df839e9d9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4333d191-642d-444e-b039-d78236d1c72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089ffdbd-33e7-42ae-98c0-0583acf9cc3a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbee85a-d8e9-464a-839a-247d7fbf63f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e582f577-d4c5-46ac-b353-66a90b3058f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1c2cdd-0d08-4a2c-a5ff-79b9a90684a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497bdad5-e82a-46cc-ad6a-b09ea4ca5247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0648c0d8-8dd6-4b26-a4ef-5875a39df012",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc192f60-bfdc-4c02-b7cb-b70fa7264bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af59226-4a98-45b2-80df-678d603f3d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "801e85b5-8f41-446e-b6cd-a23b4031f545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1911baab-6342-4399-ba90-647cbc1e8da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b76922b-2cb8-4178-a08d-1bcdbfd8892e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02727113-f23d-4a48-a59c-2df8e32d10fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431f19ae-4a54-495a-b05c-fea542ec166f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86834af1-d130-4b8f-9bf5-5b2790e0c0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f1729b-d899-4b87-89e6-5c664bad9d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa33da1-9ff2-429c-8433-34738339c14d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3d0258-b3a1-4300-bccb-3e835a3f0403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8e2a471-5b9a-4b14-83d9-a737ce837bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fb5c0c-f9d5-4293-96ec-a5c08a5b177d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3667fb-0a3e-41ed-96a2-9597196f9be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b9cbf3-6c90-4e06-a221-a0c1b2a91038",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412e4bc8-d446-44da-8771-aa19a68cfe0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fdfde67-c0c6-4bfc-b519-f84d36caf6a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5bf11c-0779-44a4-9344-874c67d255c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27aa5adf-695d-4a28-b606-372f4ee29e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842ce18a-95d1-460c-8436-b808c20bf2ca",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0bc773-0e1b-4a1d-9ad8-15868f28c77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8033f4be-2766-421a-97b8-4cbd907a3c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6add85f7-08ac-4fb8-8083-eecff9b5a72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc3975d-4bb2-443f-a9ca-8ecb84e81aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cdc93d-b9d2-4303-920d-e397af29ad74",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b09bc2-ade0-43f8-9ac0-3e6cb0925827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4156be58-a678-44a6-83da-b4100ef51459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b1f9a3-22a7-4304-8b6b-65e98879b6e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca9c5d1-06fd-4a5c-a343-688f9227b026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee777a3-4217-44ce-8801-b244595bf2ed",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0918930a-c53d-4ac3-a89d-4c3ed0bc7831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8449e988-97d2-46d7-be35-00f86cff675f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d0771a-9887-4ef3-8bde-5257096948b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf318443-be4c-40a5-b7fb-2fe947f092fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a7d415-1a59-40f9-91d5-052f9801b5d8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c14a400-a14f-45c2-a45d-9f88396e6bff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63c5016b-9131-4d7c-a57c-86002258b5b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1793c618-0bba-4d00-b94f-85f613356273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e729bb22-972b-402f-9c4e-b465332ec809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45a4891-59bf-4b98-9cc0-7274ad84d34b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0fc75c-7f46-4bef-ae88-c6987ec3cdd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f353a821-3240-44ec-8c53-5edf8ebff026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8dd3c5d-0877-4551-87b7-5939785afc31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bddca9f0-7b1f-4b4a-b8d9-45ec8d8c7369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7783a2b-f1e2-4b65-a8ea-13c2c2e1b5f9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7696ea30-fc77-48d9-ba06-208afe92affc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a9ae7ad-22b9-4b1c-b2d8-ca83bebbb6b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49b125b-5fc9-491c-b47d-14d18f9f2263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ebc33b-89fd-458b-a1c4-14b9147fa3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13701099-9320-4550-a87a-0d0f59eb7490",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43658ebc-ffef-493e-8c9b-599413b74864",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc4a4fc6-e634-4739-83d8-17ab84d285f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5936e334-a50a-410b-a4e7-20931d4b6eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf67bfb1-ea16-46f7-b08a-f39628ad6824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1760490f-4ea4-4abf-87a1-dd8cfc7fb15b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb28606a-342a-47d3-96ec-00ce338fe78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb54fc1-87d4-4936-9545-5c22544e9332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d8e2ad-d2d9-434d-b968-398bfb52e498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b49ae8-b486-4398-a112-6d8341a2a6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376b7d86-f158-44d9-a9d1-82f110fde0a1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8828f0-f6ca-400d-9971-bf6b900c9df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb561aed-79a1-457b-83d3-9c75db986699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d482054d-5ea1-459a-abe0-c6a7aa79d069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65c778f-7518-46c7-9a3e-4cbe3142d461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74245f2c-32ef-4fc6-861a-58101be0e0c5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375aa081-425b-48f5-8200-475c9482e1d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6014601-b74d-4207-b308-71913d020489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b81bb04-052f-41c4-8def-2a2792dd8d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f003b6dc-246b-48ea-8244-48bb00f11693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3ae4bf-b917-4576-922c-c345911daabf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df96f01f-f839-43f5-8899-62b950d3478a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2374a569-5457-4ca4-9d01-09c2ac3f6198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "503760ae-2267-4e68-a232-23daace6b6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03b9adb-01a5-4767-a579-d10840c61c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33d1988-b03c-4fed-b1ad-6c9649c0dab7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33ec370-2ca5-4c6e-8acc-8657d558f73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b49c49c-b59d-4bc8-8feb-ae06e868bf94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "471e6e70-6bf0-4fbb-a247-163afc8dc89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8963c17a-de89-48f1-87cf-c32a7e15b450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c281d35-0cf4-49e0-9ced-a28aff8cf0e5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb335e2-64a7-4bde-a67e-2f2d86958379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e4e1dd-17f2-49b9-995b-5064fae5449b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3716126-c604-47cc-bc0e-ae350a4d378d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa8630e-8c93-4d46-b7f4-aea5400b49e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26d62ab-b6ef-4340-897e-262b61497692",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c5501a-1ef0-499d-b359-08e50473002d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973b6e56-45ad-4566-80d5-fc2d19785b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9365f1f9-986e-4a0b-8295-ade96a6ba90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c21e6da-7101-4a26-a902-cb566db569f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46947b8-3374-4554-bc75-e4260bcef949",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139374ba-08e6-4828-9587-3c2567a3fd4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88bc24ae-0f2a-41ee-a4b2-168eaae93843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c22add-d6bd-4c7a-bbeb-dbdcf0a730ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f672840-12c9-4887-8afc-2a09e5c1840d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e0f948-ef94-4e28-a880-ca7037727fe4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2890d5-a7ee-4918-bea6-bd7f777bdc5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4a741e-0c1f-4a99-87ac-6c8141077209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03103600-f855-45d9-9fb3-da25b2891811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2946396c-bf3c-4788-ab6e-24094337db04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15f3b48-d209-451c-9158-713b55c27f78",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a127ff17-7441-4bef-b487-b6b19b009894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2699639-d306-49e6-9765-155b686bd3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b1df50-b1d7-4a50-89c0-aacfa7f660a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ca542f-2628-43f8-84ec-70197d396bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48996ce2-e492-4451-b08e-e954951e1b85",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b6ac8a-db89-4fbb-94a9-face825c9684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1391a14-4ca8-43f5-a88f-9ebcdfa9c686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4d141d-83b9-4402-b8c6-59bc02ecf1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc46a07-71ec-4e17-9c22-a9e7c3bd9448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f434ce6b-8276-4044-8370-fbe5bb82a3de",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351b806b-06e6-4ebf-905f-0d2535345d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2dc849f-3e3b-4e16-b752-cb700702523d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78014735-a65c-4fd7-9ddb-a737e18e295c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65fdaa2-1c1e-4f0e-98c0-8f3ed2190f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ced696e-3917-46d4-891d-131cb5d0373d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624cd5d2-db70-42e7-b0ca-4d7f34e40838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54eded88-c404-479d-9d4f-c2bdb6271abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15acb6be-6301-44fc-9f4b-56810438a804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f9c11e-87ae-4ef3-aff1-2348eedd179d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad62edd2-cfef-4663-a755-1a97b8bee13e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a7c890-78e0-46f2-b582-9af1ba9ae04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe7bab1-528e-4b78-9cb7-16a61be82e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fb42d4-1fc1-484b-aead-c90082f089aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6158070-b1ec-4bb2-b49b-24133c641301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2a4a4d-2fd9-4304-9e12-e1739a9f93c7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ff657d-eac4-4399-93f8-3bdf1b53bde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735650c5-eeb7-41fe-9b40-233940a20b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23d118c-ff79-4bef-8f15-58d386acf553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c9598f-5181-4da5-9737-11d50e16c913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a29f48b-385b-41a9-adee-ce3cac26ccb4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb16dd96-7569-4e02-9bad-c1418f94d1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e9b50a-0f55-4627-9ee1-571aacdb6790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008a9332-a802-4002-8aa2-7afd8dad8927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac4afeb-bd97-4054-82ff-8ebddf3b7fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb531055-27b2-41d0-9b60-f5774b18e7b4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a753a3be-5bc9-4e07-b01f-9ed6467bf0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8044e3-5747-4c79-a0b3-bf01257b16b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b02165-e418-4217-a6b5-ed83cda9f221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92dbe89-34f1-4e46-ab42-5138fefde53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6780cc30-b52a-4ad5-9cd7-e552a1c9298f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c197d4fd-a50d-4835-a708-28030b8d9f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e1ad45-5f73-4aa5-a9fe-23f1c9b52db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a863f422-0e01-4026-a4d4-6111470079a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24782f16-3b05-4b93-9dcf-4ff4331200a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c19dce-9205-4e34-a59b-34dd1185444a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc281d1-6204-4231-9f4a-3f49bcd4594a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456a8d20-017e-41ba-9980-f56212d3b705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcc8ec2-734a-4351-9252-e9926f8ad4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ded5ad-9536-4009-99e4-90c324298ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339a49dc-4f66-4b05-9304-3e70057131f4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43122742-a699-4c9e-8cf6-22f8a40464c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd8efbb-c8fd-49d2-94c5-30eb825c74fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75180d95-8e38-498b-8925-e4edcad5af57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119b189e-39d5-4ced-8ab1-912a3326dac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18865560-0c27-42bf-aca5-243bfeb5a66c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6e89ec-b594-4387-b532-c8374a9beea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "576a8563-016b-49fc-92b7-757784653fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9cd37f-b678-4fc6-ba50-4e0c47cbe9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d18642-ac8f-4470-a133-cf33f7075dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46489edf-a0b5-464b-8297-9b01d8e93eb6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004e884b-3756-4ff5-bcab-7ae0895d1148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da5f7b5-8913-4449-9cb6-7bd431bb6a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf09e5c-cf5a-40e0-97a4-4b323143bc3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ed357e-3448-4677-85fc-3695be6cb756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea43c53a-e619-4af5-b5a1-93d93e8c88a3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015b0505-be8a-4c96-83a9-8ced5ee624c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd5d3b0-f154-410a-9717-7d64f641fe41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0738f7ce-386d-44a9-89d9-a6ee9efa3f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3aef49-da6a-4099-968e-c91e851ab4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae31c692-ee34-41aa-b0c5-0e58249630cf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e7e248-ddba-4b72-808e-785bbf8495cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1a84e2-f9e2-4255-a2bb-60b2d7f2ad9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f37279b-218d-4e5e-a75d-ee57960c0a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67bb2ae-d7b1-4416-be69-bbe4adbe4dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72293c88-80ec-442b-8798-a7272907abc7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9fabc2-b4c2-409c-aca0-18284d78e295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67621c6b-a053-42b2-9807-1d713301e133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a65dccb-4676-477e-9111-fd4c61d373de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361df804-71b6-45b6-9160-e305d0249a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df3c06a-9e4f-4439-9361-79c89b9f5062",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11b916e-9920-4d1b-a901-0b9e11b83d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c78ea6-e3fd-4f77-8617-c9a537805c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9142d9-f597-41d9-8077-6fc241ae38cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65367217-4cdf-4c44-b1eb-2e31482c9112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c1c470-e4c1-4ea6-bd03-9fb47b96896e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa21e5d1-6496-48c4-a764-4309b292d937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b7c448-e6dc-48f9-a721-2f35eacd2c0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3578d9-f87b-4471-9a94-7d1f936fcdeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a31856-c604-4280-8d4c-83af0e43e272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc1472c-bb32-4f51-883b-1db4907f6279",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b324bd94-790c-4124-bd3d-76d6e4c32309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3e34ba-b36d-4423-b250-dc22e73799ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd15ffa-c0e2-4360-9c7a-a819be879f0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def8fa44-0c84-4385-95ff-9eb28b9e07e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fae72a-a776-40de-bc89-1736615850fe",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973c99af-87ee-4599-abca-e59584a77b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e7e8be-51b4-4382-ae6d-d7f4f5456934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace3f7eb-ac07-4388-9d94-52526c427e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca05a736-06c4-4ff5-aea1-32ee619fc256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb0e97e-9832-4fef-aa7d-3e14ac0ace0f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc50576-5477-400e-928a-86fa3495afcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b1aa46d-10ce-452b-aee1-49b4d764b82e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df63bfb5-a61a-4435-9854-43bd69f9dea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95ac8da-ae37-4d8f-ad6f-85bd7c3202d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4391a2-a7bb-41ef-a778-17af512f3767",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaf472b-4c55-4263-bc1c-5f449bc889e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00917d42-4ac2-4cab-996b-f9a1026644a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46bc4a8-830c-4c91-bd46-53cf49494121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4630c734-bf75-4897-aecd-f9d294dd48d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b606a264-b2c3-4637-836a-68b53470369f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f6598a-6ab7-4c2c-81cf-b31cac152e6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61f44844-9667-4196-ae82-cf50083c2c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1414627-20d2-44e3-8b4f-aa818efe5016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4746d2ee-e293-4dab-adac-2b657720ff68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2446cef1-56e9-4f25-b7ad-132588204de3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83aa865-8702-40df-833e-6e00e381027a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c75e4558-7547-4079-8006-9481dbdfe8f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55a5c18-6021-4ead-a70b-1409dd4f97f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb6398f-1fdd-457e-ad25-97b0635bb4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabd3ced-102d-44a6-8b2a-39846106a340",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6d945d-389a-4793-8a7a-f8fadba3d8ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8332767e-bc4b-46a5-be30-381ea8477369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13923627-d207-4400-aa69-23fd44a8bda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1438701-c4a0-4b4f-ad0c-d9fe9a25cb85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a7d040-9ba2-423a-b9c3-102e4fda5757",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372f590c-b1ce-439f-988f-187d7b5e6175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1267aade-e782-458e-bdd9-c0db5b484005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2976bba0-8a86-4667-8186-e5d93601600b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de03e180-53a9-4504-9731-1162aef072da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02725f29-6f0b-4e61-b5d8-32dc6d12acf1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c83d9e-906b-444c-91c9-94b721f89b78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ae7289-fd96-43fc-9550-5909dc903e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbc6c1c-717d-4e7a-b751-b92b07deb78a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506ff00c-0df5-4d71-8aa9-f9ead73d3c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97aed8f2-98c8-4a4a-a94f-72bba6a8ac0e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b8853e-f737-489d-90da-f068a24555d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f7b6c7-d95f-42da-bd39-5ad141227615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df6bb83-ab14-4c79-8c5e-20dc612ddd83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94949527-77f1-4045-8662-dd749dea7be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4138c9c7-5c7f-41b4-955a-9e60801c97a0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbc9702-fa87-428f-910a-c1743de29691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89443727-dd64-48c0-8316-b9840e413396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e766f8be-c659-4701-8d8f-a11dcc39790a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6286af37-bd69-4194-86a7-e1888b522528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81073039-b900-451d-8395-c19e0034d962",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9757bc48-5ece-4b1d-9895-b09f231bf904",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5caab457-0145-4c32-9fb4-e5fc53456ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5c807e-f379-4147-9db8-616687a39ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6387d3f-e047-4ffb-8308-59e427c818cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1f04e3-d5fb-4954-9b61-ff2777782924",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0cbeec-3c74-4a3c-b094-96c5005aafac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de37587e-37e1-4ebe-813f-0cbe13f58ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b3d967-4eaf-4162-a543-bee58861bda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24f8e01-2d83-4ff8-818e-2e8724d92431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d63816-7497-4e99-9d71-a9dea96243fa",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df0c9ff-7a6e-45c9-8cdb-767905071bf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "441bc265-8804-4298-8b35-68c2ebbba02b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3704c1b4-4d69-4045-95e3-2f80dfe2cad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3cfaa8-6ae1-4824-a354-92a055fe4958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150f9071-c895-4400-9071-2c4d3b706c84",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3239ff-e4e1-48ca-a6da-be940af44ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef73190f-60ff-401f-a0e2-9034c4d70e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cfef47-c20d-4d78-a098-7ac3ef7519c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7dc7148-6d8a-4a48-993c-4bd91b956d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578acb37-44f3-4314-a706-6542e4d3ee2f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c555cbaa-f893-491b-8ad6-c07ea75c4b3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab67f98e-20a4-47ca-9bf3-7aabdd1a7795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c288f5-0bfe-48f3-a40a-1b94204789a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247e33ea-5377-4120-8315-e82a2129da15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd497de-1bf7-40e9-abaf-0880408ae986",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6255718b-b9e8-41ad-85bd-5db3228c06a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9db86d6-100f-4239-b23b-603fbfc9a1e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fa0658-7a13-4d5e-adfa-1cb47d660621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474aa5c6-43c0-4d0b-8e28-d9b1b2707954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd6b81e-f70c-49c4-9e23-2e60db358d00",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dab9ae6-64d3-4257-ac61-e23ab10f1213",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039e51a4-2a16-42c0-9563-20d1b35181e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a1c551-8858-46bf-95f5-963fe98ff1c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d207870-4c5e-4a3c-82c5-2aa7d5b34657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0214fec9-3186-4bfa-a99a-8dfd99cb338a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933135de-a976-4d9f-a311-aa012109791e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5386dfbc-cff0-417a-bcfe-af2179912f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a2683f-2d55-43b1-b5f1-992625b6c1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e93cb18-2371-4460-a977-803791d2091f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7deac5-87d4-4283-98a4-2f85a36311b2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf2c762-9ae2-4fd2-8645-b90a5c89b488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e41f0786-58e1-4528-ad92-1dadf8c541fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae26c3e5-6d8d-454a-89a6-07201e7ffd6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3519a4-a6ea-4e1d-bdd5-4c8cd4bf24b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b832f913-9ed9-4d96-9906-dbba87fa717c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81f6f8f-6e90-4b29-9923-d7a23bc3b647",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66a5ace7-56e9-4557-b3a2-a384b07e5153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb75db6-90c5-4e6f-a9f7-1f7e0a216306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3068594b-7d1c-4e45-ba0c-7e5ec03ce26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4338056-0da3-42af-b3a0-2b83e58bfb4a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fb9774-17cd-46fd-9c12-21cea9fd277d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6685d9fa-d195-4187-8380-af7b3258fdf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0b6165-5b92-42bb-b8b6-53cf3e3aa33e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413e8506-d27a-4f73-be72-968a6df65070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c86f817-12d5-4d41-828d-a87b4f7a0c7a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188d1f16-255e-4dbc-aba0-8650c9fac09c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9bcf58-ba8d-4ec4-9bf7-912b66ca13f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82f55c8-e1d0-42cb-a786-2bed2eee04a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dae9708-36c5-4d22-a80f-642b194c425e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd49b149-1b50-4d6d-95d2-4be3dd50761f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e07b736-df80-4ed9-a96d-dc58b706476b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f2ad120-b302-47b8-927e-bbe53eb3556b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bc71f4-f983-4f2f-b167-5301f6a9beb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17ccb2c-c434-4d68-a02c-cc274b529eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7910ee2-39e2-45a7-af90-e3c06f4175fd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6152463f-391e-4d5a-85af-6d751de85f5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57b6f467-422d-4154-8363-4f1c921d8f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f379286-b630-4d89-b3b9-a4701ab82ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a834fcc6-d1da-47e3-85b3-53e7549e5215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec9da78-6305-4333-b791-a39e43bee940",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bd917e-a0dc-4d38-b6e0-567c51cf2655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff90d3ee-6615-4a1d-82be-7e5ab3b0dd03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1052fef6-d88f-4b21-b6ad-16acb37572c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3b542b-8a03-4b53-85a1-072608937bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6607383-e84e-4490-b417-9a441a5354e5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c247559-ad2a-4230-b9cc-91faa33aef40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f6088db-19e0-4196-8352-c7652b4e7172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e34606c-f968-4df9-8bc4-4536859870e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31573de-6563-4932-9b76-7beddaff2678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43e3434-0f1d-4756-9fca-61ca35d86c17",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e378c81-f5d8-40f7-ae55-2f0c5c46b6ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be88baf-0f92-4bef-b10c-95e0c06c3b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0516353-5479-43f4-a295-63a403d97998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9a14b3-9a9b-4ef9-b35a-2106e6233a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790061ab-51f7-42ec-89cb-39d183769083",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6743d07d-4faa-43b1-bd40-78a7b904a2c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87c9d0af-7fb0-4ffc-a454-b99feaa93d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea04888-caf8-4b20-b95e-075f9f119f42",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7571a3-0d56-4eeb-ac94-e0076decc72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455a57f1-9a3d-4296-a81e-bce8a61caa59",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644eaac0-d810-4dd5-bd95-dc3c39f83e4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f66ba39c-4bf4-4436-b432-bcad41a8273b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f264a0-f78c-46b0-a72b-6d1624a01d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b526bb0-3022-420b-8a54-99d7e61e4c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3102f333-af76-461e-b141-19b0e3e03afc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3a4baa-060e-4859-bade-b8c699bbc31a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc79df07-37a9-4726-a97a-ac26627ddd4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e055f81c-58a2-420c-9438-9cae367e508a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ed0c97-da95-41c5-a2de-28ea834d345e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d9aef3-5d03-4476-b91e-94067e686600",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cc6c49-6f02-474b-9295-e4537837bc0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d2d0208-92a1-455b-8a3f-e11fad12e6b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48ee449-64a4-4b3f-9ddd-da76cc67032f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0bddae-e491-49cd-afdf-0652e2a9c6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c1e81c-a390-456c-a4e8-9bc44e68ac44",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80f7b24-a028-40f5-a74c-849924555ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3fb1f72-27ba-4d4a-b66b-01b814c1ea5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61be3c5e-945a-4ef7-9990-6a324179cbd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923b6bb3-7441-4205-80f6-5bab2842d8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af191dc-63c0-4aa9-aca6-10a0930076f1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16493bd-56d8-472c-a13c-6348ff730a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaefd9fd-e863-403f-ae03-f56cec0dbb79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b49f5d-3d65-42e6-b624-43340c39221f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04065762-dfdf-4fab-bc72-d7446dfaaedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166ab715-3e7e-438d-a493-50b73361eec0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec2fe1b-f992-4131-bae3-bb80750302fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cf9a9f7-80e3-49df-9745-2ab0b1423bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3944e0a-06cc-4f49-b633-3d4ba899fed5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed89419-df41-4c8d-a753-0a2b11d8d7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddde87e-4729-4713-97e0-11286447f8fc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ef9f26-bf4f-47f1-80e6-3b0ad6752588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5daea08-2725-407a-9307-3879bfa84e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04de5a02-3368-46ad-87a7-489282a564e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52127a1c-ad50-497f-9df5-83461a507cd5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54245a28-d3ec-46f5-9785-6caf1e6ed8b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9da8fdf-7d3c-4309-a83f-7fd1a4c60ffe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b080699c-32cc-4953-975a-a4539b491bcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a19e21d-aa07-41de-88cb-b8d443eeaa97"
                    }
                  }
                ]
              },
              {
                "id": "f08b6c00-8dd0-485c-b004-02714ecfd339",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab0c8bd8-b20e-4741-9927-c7f17b3c4198",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e98e73-f085-4ecb-a191-0f2234252718",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8dce035d-768e-41fd-9e60-f45becad711b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930e456d-f77b-46cd-ac0d-ea0f7782441e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbf6cad6-d12a-4677-a355-8b9dcff2b1a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17fbccf8-8f6c-4761-bd31-4677149c9e73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dca2641a-8061-4711-97fb-2a5bd803996c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76d9fb66-d7bb-4e60-9dce-cc994b049b6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2c73681-1c66-49fe-8d4a-743f83546c16"
                    }
                  }
                ]
              },
              {
                "id": "ae756cd5-9223-4777-84dc-1aea1fd4c5e0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ede99c54-2784-4a18-92ce-8df51a1d14a3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bf5d85-7f9d-4265-b00c-4ecb98e0b27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1638904d-f391-429b-a280-f767332499d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9aed20f-6d84-417f-bd1a-5501c846a249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73407f93-91ea-46a3-985a-b07fa5389314"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cc350756-d97a-4b8c-8fb9-2d44b9083de7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "79533621-9dbe-48e2-bc8e-69a8bf81f70e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3abf21df-9a21-4962-8d79-6fdaecb6af71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9c2c1ff5-bca2-4f9a-95d8-1c5a371d5642"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c481b0d-2f2b-4b1f-ae33-5f3342fedfb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aabe4fb0-18f4-4cb2-8fb0-b6b2b005e2aa"
                    }
                  }
                ]
              },
              {
                "id": "a21ec883-b0b3-4600-aefe-d70fac546ccc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a16f7542-638a-40b5-bb1d-dd9e9ba8284b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e030ce8b-77f1-4fb9-9d23-560a3cba056a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76a24955-7083-497e-8a42-674d81ebb1ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eacfb218-8f05-4e22-89e1-092cd1615996"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "005982de-8d2c-4f86-baf1-47adfe432431",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "30eefa96-8f58-45c7-8ca0-341264bc3b6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb3c3f8d-49c9-46b8-a916-4b1ac2211783",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ffbcba89-737b-450e-91d0-7db4d6440f37"
            }
          }
        ]
      },
      {
        "id": "ddf35988-7660-4472-adf9-9b5b1e2d4df1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "791682d1-f575-4d8c-83c8-8f7e061ee68c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b518986f-7563-499c-82c2-8c34614d67c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d267928d-75b6-4ef5-af78-e7a6bb3acabe",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b981fa-a5f9-4b4c-a2c6-92f7a6226e0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5b5a169-4c02-4213-85c5-086c11a426a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c42c056-57da-4eb3-8f84-5345655cd9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f5bc3e8-9dfe-4b3c-87b7-8dd1bfe9dec5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3719b37-d09d-46e0-adb4-d1029dd787ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ab36ca1-001e-4d8f-ade4-4150365aa024"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24adc7d1-326c-4007-936d-2c14dc1507e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9128d0e-dc65-4b0e-848c-34cd31c0dc5e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46d6f9b9-1017-4ad9-876f-879a582a437a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "57cd51d5-817f-4100-a523-887f6df4c00a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e54f5132-7f26-44cd-9abc-562123ee63cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a3b6a84-9362-4efa-95d3-6a3c89b77022"
            }
          }
        ]
      },
      {
        "id": "a75d83b1-d8bb-4b6a-a284-f29f5281bb56",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0bad7ff5-86fb-4094-bef2-d31d976ea629",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85f2400b-9eff-48f3-b16b-70b4ed14ba46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf2d51fe-0d1e-4400-b895-43a0d82aedcb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4167b4a4-9b3d-4829-bd03-af9d4d152ee2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cd3c20a-885a-4414-9d7a-70b2869d9141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb33fecf-2be2-4f58-93cd-271792f9dd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b47f196-b7bf-4c3e-9e43-4b7090342fe0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6851c06-cce9-4df6-8d3f-8a42fe185a43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1f10753-b21d-4da8-b0db-10b74854abc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65cdd48f-0a49-4a76-87e7-3dab5beaacd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb89b011-e202-411b-8a55-1144a653bb11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34e06ffd-855b-4b3d-936f-54609d544ae4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7363cc4b-5430-45a3-882d-d1fcf3d4bfa1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e39ccd8b-9735-4529-b07e-864096ca757f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6afdf5cb-5988-43ba-9eb5-08178471ede5"
            }
          }
        ]
      },
      {
        "id": "184981f2-30ab-45e6-846f-7c71e688aa21",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "792fa06c-35be-4e14-b35d-b1d134df1162",
            "name": "Negative Testing",
            "item": [
              {
                "id": "335e61b8-2739-4492-a005-ff81cbedf537",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "140adb1f-473b-4ef4-a73c-f28573555770",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e676d173-02b5-45ad-9784-9506b1ad9445",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96f14d87-4a35-4888-8625-4ffe1518723d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "290a8679-af97-4276-8dd8-ebdb88d6e4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b8cc782-0b33-4511-97ff-de7b026309ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c603fbf4-3c20-489e-85f3-52dd3e960e87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d2fe894-875d-43d7-bd55-c55acb217d68"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b29e76f-5a6f-432a-96af-f2439c5ed5e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dbd834a-57e9-4e48-b2fd-f10e34ed06ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1d988fd-19ec-42a4-9f6d-590a6aeba6df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ffc5b137-a9a4-4b8b-a538-b01fe9f1959b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e2f8980-8f12-4b45-9511-0f435b0afaa7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b733008-7cca-430e-b545-6d383589911d"
            }
          }
        ]
      },
      {
        "id": "480ebbed-9fdc-4673-818d-91a1c0c65e90",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f412f9cf-cca2-4158-ba5b-91b98c365b07",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06eb60ed-d6f0-4556-9ca7-26ce7afa3e65",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bf117d05-4cde-4918-8da8-593b049bcdc6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ef58468-9ea9-4131-b8fa-fd2c244cab41",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "871fc2bd-e4f1-40d9-b3db-8d637d7111a8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.62765957446808,
      "responseMin": 9,
      "responseMax": 1026,
      "responseSd": 44.92361145493111,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707525166592,
      "completed": 1707525211679
    },
    "executions": [
      {
        "id": "ecbbb09c-2b3f-4bf5-80d4-cc3979fdf545",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "853fb765-5c96-4b84-b53a-49d60154ab18",
          "httpRequestId": "8959a715-aef4-436f-984e-89e917f38929"
        },
        "item": {
          "id": "ecbbb09c-2b3f-4bf5-80d4-cc3979fdf545",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e6721e91-2f89-4c28-9915-8c7cf83eb600",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "987b0d2f-01c1-48a2-a0e4-2dfba131cb45",
        "cursor": {
          "ref": "1393add4-6662-4319-86e5-b569ce065329",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "85c9f14f-fe2e-4f2d-8f61-8aa330c0c785"
        },
        "item": {
          "id": "987b0d2f-01c1-48a2-a0e4-2dfba131cb45",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "49825d16-15cb-437d-9ec3-f2db75557c62",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "65ba6099-7536-44f5-b13d-a488415414fa",
        "cursor": {
          "ref": "0abee664-d0eb-491b-9f43-ea45f636c8e2",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "143b65c6-0832-4db5-9350-531c85422fa3"
        },
        "item": {
          "id": "65ba6099-7536-44f5-b13d-a488415414fa",
          "name": "did_json"
        },
        "response": {
          "id": "560130f3-0ae6-4b9b-81dc-9b3d402f6ab0",
          "status": "OK",
          "code": 200,
          "responseTime": 1026,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6273e12-b9db-4506-b466-5e817298ad56",
        "cursor": {
          "ref": "9621c202-7674-40c3-8cc9-bd72a1f8cfbf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "44be42c4-f9f9-41c3-b409-18e7ff3e681f"
        },
        "item": {
          "id": "f6273e12-b9db-4506-b466-5e817298ad56",
          "name": "did:invalid"
        },
        "response": {
          "id": "a3e69e95-37d5-4e41-af1f-b6cb9b5f668a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6273e12-b9db-4506-b466-5e817298ad56",
        "cursor": {
          "ref": "9621c202-7674-40c3-8cc9-bd72a1f8cfbf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "44be42c4-f9f9-41c3-b409-18e7ff3e681f"
        },
        "item": {
          "id": "f6273e12-b9db-4506-b466-5e817298ad56",
          "name": "did:invalid"
        },
        "response": {
          "id": "a3e69e95-37d5-4e41-af1f-b6cb9b5f668a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3abf682-3946-4453-a69f-a2e82e0ba697",
        "cursor": {
          "ref": "edcba370-8bda-4953-b7b7-4494d2b16b57",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c4d896c6-8fa1-4ef6-9014-a3f0cd4bf9a5"
        },
        "item": {
          "id": "e3abf682-3946-4453-a69f-a2e82e0ba697",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "235dbb21-e2b6-4a52-b6ba-2434091784c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3abf682-3946-4453-a69f-a2e82e0ba697",
        "cursor": {
          "ref": "edcba370-8bda-4953-b7b7-4494d2b16b57",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c4d896c6-8fa1-4ef6-9014-a3f0cd4bf9a5"
        },
        "item": {
          "id": "e3abf682-3946-4453-a69f-a2e82e0ba697",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "235dbb21-e2b6-4a52-b6ba-2434091784c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de92a567-fb56-42f1-9903-2b10a753da1c",
        "cursor": {
          "ref": "cac75ef0-81cb-4012-8c78-71e78af5c530",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e5703455-ce6a-448e-b9e5-c255c49e4cdc"
        },
        "item": {
          "id": "de92a567-fb56-42f1-9903-2b10a753da1c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b1d81b1d-003d-4bf1-9a0d-adfd7705f66d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de92a567-fb56-42f1-9903-2b10a753da1c",
        "cursor": {
          "ref": "cac75ef0-81cb-4012-8c78-71e78af5c530",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e5703455-ce6a-448e-b9e5-c255c49e4cdc"
        },
        "item": {
          "id": "de92a567-fb56-42f1-9903-2b10a753da1c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b1d81b1d-003d-4bf1-9a0d-adfd7705f66d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee13c9b-1087-4fda-8068-92d69a92be5a",
        "cursor": {
          "ref": "2e5e5850-a759-4cb9-a6fd-cda6a9078f3b",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "47c1788b-5264-4eed-a6ea-6dc6f5ac3869"
        },
        "item": {
          "id": "cee13c9b-1087-4fda-8068-92d69a92be5a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2b60c207-d2e7-415d-8e77-ec81e66fc7d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee13c9b-1087-4fda-8068-92d69a92be5a",
        "cursor": {
          "ref": "2e5e5850-a759-4cb9-a6fd-cda6a9078f3b",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "47c1788b-5264-4eed-a6ea-6dc6f5ac3869"
        },
        "item": {
          "id": "cee13c9b-1087-4fda-8068-92d69a92be5a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2b60c207-d2e7-415d-8e77-ec81e66fc7d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ab7d25-63be-4388-b8fd-d17ede62d0f6",
        "cursor": {
          "ref": "ceb9cad3-5034-4a95-8c5a-b8ed9405d79b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ec148751-696e-40c9-b4b0-24f627eebd54"
        },
        "item": {
          "id": "66ab7d25-63be-4388-b8fd-d17ede62d0f6",
          "name": "identifiers"
        },
        "response": {
          "id": "d0c4c949-332d-4994-9334-b8e9edad1d25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "66ab7d25-63be-4388-b8fd-d17ede62d0f6",
        "cursor": {
          "ref": "ceb9cad3-5034-4a95-8c5a-b8ed9405d79b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ec148751-696e-40c9-b4b0-24f627eebd54"
        },
        "item": {
          "id": "66ab7d25-63be-4388-b8fd-d17ede62d0f6",
          "name": "identifiers"
        },
        "response": {
          "id": "d0c4c949-332d-4994-9334-b8e9edad1d25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "391e6321-5137-48ea-84d3-802df1dbfd78",
        "cursor": {
          "ref": "7088487d-b11e-48ba-8822-0a0b957aad97",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "52ef15f8-4e34-40e8-9b6d-4e27354f0c0d"
        },
        "item": {
          "id": "391e6321-5137-48ea-84d3-802df1dbfd78",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "df7abd34-e529-46fe-a16b-75c2b08bc0fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391e6321-5137-48ea-84d3-802df1dbfd78",
        "cursor": {
          "ref": "7088487d-b11e-48ba-8822-0a0b957aad97",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "52ef15f8-4e34-40e8-9b6d-4e27354f0c0d"
        },
        "item": {
          "id": "391e6321-5137-48ea-84d3-802df1dbfd78",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "df7abd34-e529-46fe-a16b-75c2b08bc0fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0d4fe4-5122-4ba6-81e2-e81082f60572",
        "cursor": {
          "ref": "468957da-a326-437f-8bd1-4d2a9143dbf7",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "107b0bb6-2871-4535-9377-af667f83c315"
        },
        "item": {
          "id": "5a0d4fe4-5122-4ba6-81e2-e81082f60572",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dd0ad65e-1243-47e1-bf21-47df1728a0a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0d4fe4-5122-4ba6-81e2-e81082f60572",
        "cursor": {
          "ref": "468957da-a326-437f-8bd1-4d2a9143dbf7",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "107b0bb6-2871-4535-9377-af667f83c315"
        },
        "item": {
          "id": "5a0d4fe4-5122-4ba6-81e2-e81082f60572",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dd0ad65e-1243-47e1-bf21-47df1728a0a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a59a3e3-e67e-40d4-9f64-2d09681ea70d",
        "cursor": {
          "ref": "a92c4a2a-00c8-4689-bdfb-18cdeaa0cf81",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c6b9e3e8-5534-4c64-92ac-07f93c460e6c"
        },
        "item": {
          "id": "5a59a3e3-e67e-40d4-9f64-2d09681ea70d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e7926385-588e-46f1-8813-d0e48ed14eac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a59a3e3-e67e-40d4-9f64-2d09681ea70d",
        "cursor": {
          "ref": "a92c4a2a-00c8-4689-bdfb-18cdeaa0cf81",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c6b9e3e8-5534-4c64-92ac-07f93c460e6c"
        },
        "item": {
          "id": "5a59a3e3-e67e-40d4-9f64-2d09681ea70d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e7926385-588e-46f1-8813-d0e48ed14eac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca84ce77-b112-4e51-b6ed-e9bb3ab339bc",
        "cursor": {
          "ref": "a65f542c-d99d-4142-a658-f33aa6bc1b8c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0121109d-09bd-4304-89b3-12b128f17793"
        },
        "item": {
          "id": "ca84ce77-b112-4e51-b6ed-e9bb3ab339bc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c4ec5107-dc48-4727-8738-86eb60366aaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca84ce77-b112-4e51-b6ed-e9bb3ab339bc",
        "cursor": {
          "ref": "a65f542c-d99d-4142-a658-f33aa6bc1b8c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0121109d-09bd-4304-89b3-12b128f17793"
        },
        "item": {
          "id": "ca84ce77-b112-4e51-b6ed-e9bb3ab339bc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c4ec5107-dc48-4727-8738-86eb60366aaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e0b3f0-99b2-452a-b3c9-ae91424da8a5",
        "cursor": {
          "ref": "fa815132-34b8-4c85-9390-b13f0ad5e9f0",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ed6846cd-7521-4528-be56-e626678667c7"
        },
        "item": {
          "id": "73e0b3f0-99b2-452a-b3c9-ae91424da8a5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0d6480bb-9725-48a0-acc7-bfada57c0b7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e0b3f0-99b2-452a-b3c9-ae91424da8a5",
        "cursor": {
          "ref": "fa815132-34b8-4c85-9390-b13f0ad5e9f0",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ed6846cd-7521-4528-be56-e626678667c7"
        },
        "item": {
          "id": "73e0b3f0-99b2-452a-b3c9-ae91424da8a5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0d6480bb-9725-48a0-acc7-bfada57c0b7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8b1666-469a-4e92-9ac6-00ea48712e33",
        "cursor": {
          "ref": "807fcee0-c3aa-4d01-b578-77b4686e6e8b",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "188fe4b5-1839-45f7-9557-5ec4980baafb"
        },
        "item": {
          "id": "7e8b1666-469a-4e92-9ac6-00ea48712e33",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "36c293e0-8cea-4e66-8a70-1e2c9922a147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8b1666-469a-4e92-9ac6-00ea48712e33",
        "cursor": {
          "ref": "807fcee0-c3aa-4d01-b578-77b4686e6e8b",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "188fe4b5-1839-45f7-9557-5ec4980baafb"
        },
        "item": {
          "id": "7e8b1666-469a-4e92-9ac6-00ea48712e33",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "36c293e0-8cea-4e66-8a70-1e2c9922a147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a574c1-d27e-4f26-b1e3-3f021eeba977",
        "cursor": {
          "ref": "0c1f5bec-5678-46ed-8ef6-6da10ef57e47",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "632580cf-729e-4f4b-af21-ad1f45654623"
        },
        "item": {
          "id": "83a574c1-d27e-4f26-b1e3-3f021eeba977",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "287763fb-feca-47bb-a0ab-1aef1ca6375a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a574c1-d27e-4f26-b1e3-3f021eeba977",
        "cursor": {
          "ref": "0c1f5bec-5678-46ed-8ef6-6da10ef57e47",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "632580cf-729e-4f4b-af21-ad1f45654623"
        },
        "item": {
          "id": "83a574c1-d27e-4f26-b1e3-3f021eeba977",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "287763fb-feca-47bb-a0ab-1aef1ca6375a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011dd44a-1334-42ed-8380-1098467c2268",
        "cursor": {
          "ref": "89bfe838-5c52-4eb1-bf22-cb3de05aaf5b",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "80ac17b4-f419-4163-9403-01a1f88b0bd1"
        },
        "item": {
          "id": "011dd44a-1334-42ed-8380-1098467c2268",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e0551b70-a692-4c36-a9f6-0c9cf57814fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011dd44a-1334-42ed-8380-1098467c2268",
        "cursor": {
          "ref": "89bfe838-5c52-4eb1-bf22-cb3de05aaf5b",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "80ac17b4-f419-4163-9403-01a1f88b0bd1"
        },
        "item": {
          "id": "011dd44a-1334-42ed-8380-1098467c2268",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e0551b70-a692-4c36-a9f6-0c9cf57814fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88663ab-5e1c-46c9-9e2e-f051b74eea5f",
        "cursor": {
          "ref": "56894aed-bac5-4ceb-9b31-6330acc8cb92",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e6434c5c-2fa2-4143-884c-d493b482cc47"
        },
        "item": {
          "id": "e88663ab-5e1c-46c9-9e2e-f051b74eea5f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e247b325-5093-429b-87a9-b6a6a25e31d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88663ab-5e1c-46c9-9e2e-f051b74eea5f",
        "cursor": {
          "ref": "56894aed-bac5-4ceb-9b31-6330acc8cb92",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e6434c5c-2fa2-4143-884c-d493b482cc47"
        },
        "item": {
          "id": "e88663ab-5e1c-46c9-9e2e-f051b74eea5f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e247b325-5093-429b-87a9-b6a6a25e31d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c99bf2-5031-4d70-a7cb-5537bee160b1",
        "cursor": {
          "ref": "0dab3ad8-f9de-42fa-8490-da2c1a9d776d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "74cdd1e6-17f1-4458-8831-354390e71cc1"
        },
        "item": {
          "id": "13c99bf2-5031-4d70-a7cb-5537bee160b1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "884c90e0-0484-48c8-a202-b3fc066fa662",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c99bf2-5031-4d70-a7cb-5537bee160b1",
        "cursor": {
          "ref": "0dab3ad8-f9de-42fa-8490-da2c1a9d776d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "74cdd1e6-17f1-4458-8831-354390e71cc1"
        },
        "item": {
          "id": "13c99bf2-5031-4d70-a7cb-5537bee160b1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "884c90e0-0484-48c8-a202-b3fc066fa662",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fcba870-cb99-4210-b69d-45cfc8ad6013",
        "cursor": {
          "ref": "02c913ac-787f-40ea-9d93-3ea46ea21bf5",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1e8848ab-6777-463a-8786-bb37330bb7de"
        },
        "item": {
          "id": "5fcba870-cb99-4210-b69d-45cfc8ad6013",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8ccb8171-4e3c-4714-84f1-d4a7d02cc320",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fcba870-cb99-4210-b69d-45cfc8ad6013",
        "cursor": {
          "ref": "02c913ac-787f-40ea-9d93-3ea46ea21bf5",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1e8848ab-6777-463a-8786-bb37330bb7de"
        },
        "item": {
          "id": "5fcba870-cb99-4210-b69d-45cfc8ad6013",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8ccb8171-4e3c-4714-84f1-d4a7d02cc320",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e2e817-2c4a-4022-9d94-1fbf601a8d66",
        "cursor": {
          "ref": "c011fc45-af51-4bca-9efe-79b49f875d84",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f73e86ec-5c73-43bb-a807-893526e18fd0"
        },
        "item": {
          "id": "35e2e817-2c4a-4022-9d94-1fbf601a8d66",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b2641d42-3458-4e33-a7b6-b93b1d214023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e2e817-2c4a-4022-9d94-1fbf601a8d66",
        "cursor": {
          "ref": "c011fc45-af51-4bca-9efe-79b49f875d84",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f73e86ec-5c73-43bb-a807-893526e18fd0"
        },
        "item": {
          "id": "35e2e817-2c4a-4022-9d94-1fbf601a8d66",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b2641d42-3458-4e33-a7b6-b93b1d214023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6cba3b-e5b2-44b3-866a-8a00db111d2a",
        "cursor": {
          "ref": "50fb4976-8f43-47b6-a7c7-e88be1c9185c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7c4ec90d-dcca-4def-a641-46a7341a9358"
        },
        "item": {
          "id": "7b6cba3b-e5b2-44b3-866a-8a00db111d2a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e453ed07-40a2-40c4-bdd5-f56e6d840568",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6cba3b-e5b2-44b3-866a-8a00db111d2a",
        "cursor": {
          "ref": "50fb4976-8f43-47b6-a7c7-e88be1c9185c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7c4ec90d-dcca-4def-a641-46a7341a9358"
        },
        "item": {
          "id": "7b6cba3b-e5b2-44b3-866a-8a00db111d2a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e453ed07-40a2-40c4-bdd5-f56e6d840568",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a79f98-836c-4460-a91a-21846948c193",
        "cursor": {
          "ref": "4d5efc73-6788-48cc-b869-07c3ca6ef8b7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ef080030-148f-407c-9a32-37fa36044d0d"
        },
        "item": {
          "id": "c7a79f98-836c-4460-a91a-21846948c193",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7e877a1d-6533-4ff9-89e7-47795e5f6e4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a79f98-836c-4460-a91a-21846948c193",
        "cursor": {
          "ref": "4d5efc73-6788-48cc-b869-07c3ca6ef8b7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ef080030-148f-407c-9a32-37fa36044d0d"
        },
        "item": {
          "id": "c7a79f98-836c-4460-a91a-21846948c193",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7e877a1d-6533-4ff9-89e7-47795e5f6e4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7d7c78-0f1c-457e-aa75-19cf68568e2a",
        "cursor": {
          "ref": "3eb7ab1a-e45f-48e1-9149-2e8341d6ed6b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0552aaf8-0e3f-41fe-a150-d1fb79091821"
        },
        "item": {
          "id": "eb7d7c78-0f1c-457e-aa75-19cf68568e2a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ed14c0c5-c065-4930-8542-39462f152f87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7d7c78-0f1c-457e-aa75-19cf68568e2a",
        "cursor": {
          "ref": "3eb7ab1a-e45f-48e1-9149-2e8341d6ed6b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0552aaf8-0e3f-41fe-a150-d1fb79091821"
        },
        "item": {
          "id": "eb7d7c78-0f1c-457e-aa75-19cf68568e2a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ed14c0c5-c065-4930-8542-39462f152f87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c688a4-20f1-47fc-8d67-a68f4bf0a83b",
        "cursor": {
          "ref": "96d46c90-e8f2-4cf2-9782-41aa0c1ce362",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bed6adfb-c9c5-4e88-a3f5-cceda3526f6c"
        },
        "item": {
          "id": "a3c688a4-20f1-47fc-8d67-a68f4bf0a83b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5177597d-48c0-40e6-8b18-dec0597f12d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c688a4-20f1-47fc-8d67-a68f4bf0a83b",
        "cursor": {
          "ref": "96d46c90-e8f2-4cf2-9782-41aa0c1ce362",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bed6adfb-c9c5-4e88-a3f5-cceda3526f6c"
        },
        "item": {
          "id": "a3c688a4-20f1-47fc-8d67-a68f4bf0a83b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5177597d-48c0-40e6-8b18-dec0597f12d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e82f3b-4569-4794-bfc8-72222c17c0cc",
        "cursor": {
          "ref": "40913f65-79f0-4743-9b6f-67c23b396a37",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "878ae583-93cb-4bef-8d90-5387fa6b1692"
        },
        "item": {
          "id": "d5e82f3b-4569-4794-bfc8-72222c17c0cc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "532c85b7-6868-48e6-8752-b000e5676d70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e82f3b-4569-4794-bfc8-72222c17c0cc",
        "cursor": {
          "ref": "40913f65-79f0-4743-9b6f-67c23b396a37",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "878ae583-93cb-4bef-8d90-5387fa6b1692"
        },
        "item": {
          "id": "d5e82f3b-4569-4794-bfc8-72222c17c0cc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "532c85b7-6868-48e6-8752-b000e5676d70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcf726d-3af8-4289-be79-21dd395ab80a",
        "cursor": {
          "ref": "44196c5f-dc11-46ca-9216-26aeb3abf41e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aefcb986-7671-45d6-8a51-f14b9f24d8c5"
        },
        "item": {
          "id": "0dcf726d-3af8-4289-be79-21dd395ab80a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eea85ecb-6970-4894-be22-ea3570356e2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcf726d-3af8-4289-be79-21dd395ab80a",
        "cursor": {
          "ref": "44196c5f-dc11-46ca-9216-26aeb3abf41e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aefcb986-7671-45d6-8a51-f14b9f24d8c5"
        },
        "item": {
          "id": "0dcf726d-3af8-4289-be79-21dd395ab80a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eea85ecb-6970-4894-be22-ea3570356e2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c21017-236f-40c7-9c0b-bd9480c89ad0",
        "cursor": {
          "ref": "18d85f99-c161-4afc-9ee4-f70c00516451",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9f735c03-35cb-47bc-be41-b807b3402c3f"
        },
        "item": {
          "id": "31c21017-236f-40c7-9c0b-bd9480c89ad0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a58d03c1-8402-44c5-8709-f70fd421affa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c21017-236f-40c7-9c0b-bd9480c89ad0",
        "cursor": {
          "ref": "18d85f99-c161-4afc-9ee4-f70c00516451",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9f735c03-35cb-47bc-be41-b807b3402c3f"
        },
        "item": {
          "id": "31c21017-236f-40c7-9c0b-bd9480c89ad0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a58d03c1-8402-44c5-8709-f70fd421affa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f50f98-4e48-4015-9b31-7f07add9c252",
        "cursor": {
          "ref": "a1021755-f8c2-4945-ad39-57f430cbd86d",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8183bacf-2ff6-4649-a2e9-037311c6c049"
        },
        "item": {
          "id": "43f50f98-4e48-4015-9b31-7f07add9c252",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "79702125-6805-48c8-bce9-b36a4c985ca1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f50f98-4e48-4015-9b31-7f07add9c252",
        "cursor": {
          "ref": "a1021755-f8c2-4945-ad39-57f430cbd86d",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8183bacf-2ff6-4649-a2e9-037311c6c049"
        },
        "item": {
          "id": "43f50f98-4e48-4015-9b31-7f07add9c252",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "79702125-6805-48c8-bce9-b36a4c985ca1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090a320e-7e21-4681-acde-68a6cd389ce8",
        "cursor": {
          "ref": "c43199ac-1141-4503-8857-ba3db0b2c800",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "608e3354-b458-499b-ac46-44cdd2c8af59"
        },
        "item": {
          "id": "090a320e-7e21-4681-acde-68a6cd389ce8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7cee48f0-a9df-4aa7-92c9-463d60a3d909",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090a320e-7e21-4681-acde-68a6cd389ce8",
        "cursor": {
          "ref": "c43199ac-1141-4503-8857-ba3db0b2c800",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "608e3354-b458-499b-ac46-44cdd2c8af59"
        },
        "item": {
          "id": "090a320e-7e21-4681-acde-68a6cd389ce8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7cee48f0-a9df-4aa7-92c9-463d60a3d909",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c20fbe-6ab3-474c-bdd0-e4b4af77769c",
        "cursor": {
          "ref": "3002f4ee-cab1-41e2-9e22-9bdf1aacedc3",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1fd8db6a-b8ae-416b-9682-fc8a900c9444"
        },
        "item": {
          "id": "f3c20fbe-6ab3-474c-bdd0-e4b4af77769c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "34de0389-dd17-4757-99e6-18b3ecac9749",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c20fbe-6ab3-474c-bdd0-e4b4af77769c",
        "cursor": {
          "ref": "3002f4ee-cab1-41e2-9e22-9bdf1aacedc3",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1fd8db6a-b8ae-416b-9682-fc8a900c9444"
        },
        "item": {
          "id": "f3c20fbe-6ab3-474c-bdd0-e4b4af77769c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "34de0389-dd17-4757-99e6-18b3ecac9749",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256e21b9-cdf4-4d85-aaf3-9e061477ebdf",
        "cursor": {
          "ref": "515afcf0-8762-4a3a-9771-2408335bca65",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8d64d75c-000c-4a83-b4ca-5a402e9fd64d"
        },
        "item": {
          "id": "256e21b9-cdf4-4d85-aaf3-9e061477ebdf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "65819249-d4e4-423e-8e7b-452a1e64ba26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256e21b9-cdf4-4d85-aaf3-9e061477ebdf",
        "cursor": {
          "ref": "515afcf0-8762-4a3a-9771-2408335bca65",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8d64d75c-000c-4a83-b4ca-5a402e9fd64d"
        },
        "item": {
          "id": "256e21b9-cdf4-4d85-aaf3-9e061477ebdf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "65819249-d4e4-423e-8e7b-452a1e64ba26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbdb034-d2f0-4420-b544-0e4d5af6c04b",
        "cursor": {
          "ref": "bc219b3c-5710-41fe-8b36-3bdf457f919d",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "636eaf50-0c69-4797-bbe4-59ffb5bb2455"
        },
        "item": {
          "id": "acbdb034-d2f0-4420-b544-0e4d5af6c04b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "caa63142-f3b7-42c4-b76e-80bbef3dc7cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbdb034-d2f0-4420-b544-0e4d5af6c04b",
        "cursor": {
          "ref": "bc219b3c-5710-41fe-8b36-3bdf457f919d",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "636eaf50-0c69-4797-bbe4-59ffb5bb2455"
        },
        "item": {
          "id": "acbdb034-d2f0-4420-b544-0e4d5af6c04b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "caa63142-f3b7-42c4-b76e-80bbef3dc7cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f573d43b-e387-4c45-a8a0-fe725c492782",
        "cursor": {
          "ref": "449b5ce1-4270-43ce-b0d3-7152ea015904",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "713de02c-4754-4c70-a3c6-9e112c00d677"
        },
        "item": {
          "id": "f573d43b-e387-4c45-a8a0-fe725c492782",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4a6dc2ea-d3d2-403e-b902-65779040c44c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f573d43b-e387-4c45-a8a0-fe725c492782",
        "cursor": {
          "ref": "449b5ce1-4270-43ce-b0d3-7152ea015904",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "713de02c-4754-4c70-a3c6-9e112c00d677"
        },
        "item": {
          "id": "f573d43b-e387-4c45-a8a0-fe725c492782",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4a6dc2ea-d3d2-403e-b902-65779040c44c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e06db27-5e9e-4c38-8605-f6b96bd335d4",
        "cursor": {
          "ref": "1b94b9ed-2b3e-42ce-b708-ffa5c6bebc40",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "17cdb9b4-9808-47fa-9100-fe66ee1b665f"
        },
        "item": {
          "id": "5e06db27-5e9e-4c38-8605-f6b96bd335d4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e50a523b-7942-4a9c-9180-b0289e5b862a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e06db27-5e9e-4c38-8605-f6b96bd335d4",
        "cursor": {
          "ref": "1b94b9ed-2b3e-42ce-b708-ffa5c6bebc40",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "17cdb9b4-9808-47fa-9100-fe66ee1b665f"
        },
        "item": {
          "id": "5e06db27-5e9e-4c38-8605-f6b96bd335d4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e50a523b-7942-4a9c-9180-b0289e5b862a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873ed0f4-2535-44c3-b97e-8a5300b35cf2",
        "cursor": {
          "ref": "e8266998-9520-4484-93f4-d70bd6a9d64f",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2866f882-e55d-40d3-a1ec-7c9c7895bf49"
        },
        "item": {
          "id": "873ed0f4-2535-44c3-b97e-8a5300b35cf2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f21a9140-4d94-4f63-9566-f911a93dd7d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873ed0f4-2535-44c3-b97e-8a5300b35cf2",
        "cursor": {
          "ref": "e8266998-9520-4484-93f4-d70bd6a9d64f",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2866f882-e55d-40d3-a1ec-7c9c7895bf49"
        },
        "item": {
          "id": "873ed0f4-2535-44c3-b97e-8a5300b35cf2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f21a9140-4d94-4f63-9566-f911a93dd7d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea31821-c19f-40d6-80ad-49ee8c9b23ad",
        "cursor": {
          "ref": "398bea46-4f77-4881-88c3-af5378ef5cea",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a633fd1b-f1b9-406c-849b-fabc6603f5b9"
        },
        "item": {
          "id": "1ea31821-c19f-40d6-80ad-49ee8c9b23ad",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "829793ce-7182-4571-bc5f-ceb38136ae61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea31821-c19f-40d6-80ad-49ee8c9b23ad",
        "cursor": {
          "ref": "398bea46-4f77-4881-88c3-af5378ef5cea",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a633fd1b-f1b9-406c-849b-fabc6603f5b9"
        },
        "item": {
          "id": "1ea31821-c19f-40d6-80ad-49ee8c9b23ad",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "829793ce-7182-4571-bc5f-ceb38136ae61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee65fce-acbe-4921-a16c-a30edefbe8da",
        "cursor": {
          "ref": "d4f3d928-8385-49e3-ac6c-ca7f110f8934",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a396c005-d9cd-4123-9ab7-c9a6473b5600"
        },
        "item": {
          "id": "4ee65fce-acbe-4921-a16c-a30edefbe8da",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0425dfb3-a980-478b-98c0-71d6b583ab9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee65fce-acbe-4921-a16c-a30edefbe8da",
        "cursor": {
          "ref": "d4f3d928-8385-49e3-ac6c-ca7f110f8934",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a396c005-d9cd-4123-9ab7-c9a6473b5600"
        },
        "item": {
          "id": "4ee65fce-acbe-4921-a16c-a30edefbe8da",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0425dfb3-a980-478b-98c0-71d6b583ab9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed04e53-4f6e-4ef6-95a9-0cd231c5c4ca",
        "cursor": {
          "ref": "40e7bd1e-6046-4f30-8ee8-7adaeba1c4ac",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bdbf9601-926e-4f2b-898e-f9a8eac77420"
        },
        "item": {
          "id": "0ed04e53-4f6e-4ef6-95a9-0cd231c5c4ca",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6006e5fd-e5c1-4613-9aba-e2ff26ab0acc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed04e53-4f6e-4ef6-95a9-0cd231c5c4ca",
        "cursor": {
          "ref": "40e7bd1e-6046-4f30-8ee8-7adaeba1c4ac",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bdbf9601-926e-4f2b-898e-f9a8eac77420"
        },
        "item": {
          "id": "0ed04e53-4f6e-4ef6-95a9-0cd231c5c4ca",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6006e5fd-e5c1-4613-9aba-e2ff26ab0acc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce31e185-a9b1-4e80-805e-dd5525cd74cb",
        "cursor": {
          "ref": "655bc4bf-3263-4f7e-8a60-196c07c72557",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "22b9508e-6f25-42e9-95cf-3f4263e9397e"
        },
        "item": {
          "id": "ce31e185-a9b1-4e80-805e-dd5525cd74cb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cec05eec-01ba-44c0-91ec-7d957724ab50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce31e185-a9b1-4e80-805e-dd5525cd74cb",
        "cursor": {
          "ref": "655bc4bf-3263-4f7e-8a60-196c07c72557",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "22b9508e-6f25-42e9-95cf-3f4263e9397e"
        },
        "item": {
          "id": "ce31e185-a9b1-4e80-805e-dd5525cd74cb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cec05eec-01ba-44c0-91ec-7d957724ab50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249b97fc-2b13-45d0-bf4c-97e1f2202f33",
        "cursor": {
          "ref": "fc7fb5f0-e66d-4ff6-8a16-b0b1c5307e69",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "097608b3-fa3f-45e2-a90b-b592da60a22b"
        },
        "item": {
          "id": "249b97fc-2b13-45d0-bf4c-97e1f2202f33",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5eabff80-c52d-418a-8e79-77ce64860781",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249b97fc-2b13-45d0-bf4c-97e1f2202f33",
        "cursor": {
          "ref": "fc7fb5f0-e66d-4ff6-8a16-b0b1c5307e69",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "097608b3-fa3f-45e2-a90b-b592da60a22b"
        },
        "item": {
          "id": "249b97fc-2b13-45d0-bf4c-97e1f2202f33",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5eabff80-c52d-418a-8e79-77ce64860781",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf4e4f2-02a2-444d-babb-bb03efc7fd6a",
        "cursor": {
          "ref": "53fb8619-75e4-4016-b33c-a3472f829ecd",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f3c2241c-97ae-45d5-999e-245321ea1bf5"
        },
        "item": {
          "id": "dcf4e4f2-02a2-444d-babb-bb03efc7fd6a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0543faba-5db3-4724-8beb-161138abba26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf4e4f2-02a2-444d-babb-bb03efc7fd6a",
        "cursor": {
          "ref": "53fb8619-75e4-4016-b33c-a3472f829ecd",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f3c2241c-97ae-45d5-999e-245321ea1bf5"
        },
        "item": {
          "id": "dcf4e4f2-02a2-444d-babb-bb03efc7fd6a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0543faba-5db3-4724-8beb-161138abba26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595ef62e-64bc-4261-b61f-c95daa97e7e2",
        "cursor": {
          "ref": "5d1a881c-9532-484e-b154-eaa80f61cd2c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "370f561e-21ca-4a84-84a8-0dd28d4952b3"
        },
        "item": {
          "id": "595ef62e-64bc-4261-b61f-c95daa97e7e2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5b8a2e91-fe18-4bfb-b875-93a544cb6a98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595ef62e-64bc-4261-b61f-c95daa97e7e2",
        "cursor": {
          "ref": "5d1a881c-9532-484e-b154-eaa80f61cd2c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "370f561e-21ca-4a84-84a8-0dd28d4952b3"
        },
        "item": {
          "id": "595ef62e-64bc-4261-b61f-c95daa97e7e2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5b8a2e91-fe18-4bfb-b875-93a544cb6a98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516c3193-0a87-4390-ac04-7a4cc71336bd",
        "cursor": {
          "ref": "0028eaf4-5055-480f-8361-05fe43c87b4b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "358b2ccd-b559-4730-a07d-bce2149654ba"
        },
        "item": {
          "id": "516c3193-0a87-4390-ac04-7a4cc71336bd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7b83747a-4b1a-474d-a46c-9480339b8d9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516c3193-0a87-4390-ac04-7a4cc71336bd",
        "cursor": {
          "ref": "0028eaf4-5055-480f-8361-05fe43c87b4b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "358b2ccd-b559-4730-a07d-bce2149654ba"
        },
        "item": {
          "id": "516c3193-0a87-4390-ac04-7a4cc71336bd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7b83747a-4b1a-474d-a46c-9480339b8d9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bd7c06-f739-4114-82d0-a756e3a493c8",
        "cursor": {
          "ref": "586a744a-4476-4aad-846f-ffa2ce14c679",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0f76d209-ba59-4f47-a6ce-51c6cf716ffd"
        },
        "item": {
          "id": "e5bd7c06-f739-4114-82d0-a756e3a493c8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c0c3c450-b179-4ff1-b262-a9f82c18f347",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bd7c06-f739-4114-82d0-a756e3a493c8",
        "cursor": {
          "ref": "586a744a-4476-4aad-846f-ffa2ce14c679",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0f76d209-ba59-4f47-a6ce-51c6cf716ffd"
        },
        "item": {
          "id": "e5bd7c06-f739-4114-82d0-a756e3a493c8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c0c3c450-b179-4ff1-b262-a9f82c18f347",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf4ff57-055a-4772-bf2e-1ad947f868b1",
        "cursor": {
          "ref": "1de37554-f131-4cf9-85f4-ac7e4179b175",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2e20df02-936b-4ed4-9685-647737874476"
        },
        "item": {
          "id": "3cf4ff57-055a-4772-bf2e-1ad947f868b1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0711b98f-3932-4606-ae79-6b8368cda006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf4ff57-055a-4772-bf2e-1ad947f868b1",
        "cursor": {
          "ref": "1de37554-f131-4cf9-85f4-ac7e4179b175",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2e20df02-936b-4ed4-9685-647737874476"
        },
        "item": {
          "id": "3cf4ff57-055a-4772-bf2e-1ad947f868b1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0711b98f-3932-4606-ae79-6b8368cda006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf914baa-f828-4607-9ff0-6972cfee66fd",
        "cursor": {
          "ref": "45f0f8e4-0778-4a2a-bcf9-bc95951baac7",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "96ce289e-42d8-46c1-bc57-87c5f5105190"
        },
        "item": {
          "id": "bf914baa-f828-4607-9ff0-6972cfee66fd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "90340f93-bd43-4bcb-824f-9c4c50cedec2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf914baa-f828-4607-9ff0-6972cfee66fd",
        "cursor": {
          "ref": "45f0f8e4-0778-4a2a-bcf9-bc95951baac7",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "96ce289e-42d8-46c1-bc57-87c5f5105190"
        },
        "item": {
          "id": "bf914baa-f828-4607-9ff0-6972cfee66fd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "90340f93-bd43-4bcb-824f-9c4c50cedec2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c418e65-4c89-498d-8ac1-912e5408ae1c",
        "cursor": {
          "ref": "dc3cc176-607b-417b-b318-771c42612f2d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8c39981d-c268-4ffb-85ff-1b89519a7b44"
        },
        "item": {
          "id": "0c418e65-4c89-498d-8ac1-912e5408ae1c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4642ea8c-f7ca-4189-823a-bb87e95711d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c418e65-4c89-498d-8ac1-912e5408ae1c",
        "cursor": {
          "ref": "dc3cc176-607b-417b-b318-771c42612f2d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8c39981d-c268-4ffb-85ff-1b89519a7b44"
        },
        "item": {
          "id": "0c418e65-4c89-498d-8ac1-912e5408ae1c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4642ea8c-f7ca-4189-823a-bb87e95711d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a61b61-b2f6-4dab-99d5-318364ef98a6",
        "cursor": {
          "ref": "c9f1239f-e17a-4df7-9f31-e4c29fcb6983",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c2e9e49d-3199-4ca5-9792-0a778d328f89"
        },
        "item": {
          "id": "29a61b61-b2f6-4dab-99d5-318364ef98a6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d4560ede-9b40-47b1-89d3-de7417161fd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a61b61-b2f6-4dab-99d5-318364ef98a6",
        "cursor": {
          "ref": "c9f1239f-e17a-4df7-9f31-e4c29fcb6983",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c2e9e49d-3199-4ca5-9792-0a778d328f89"
        },
        "item": {
          "id": "29a61b61-b2f6-4dab-99d5-318364ef98a6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d4560ede-9b40-47b1-89d3-de7417161fd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b66cef4-d4a4-4411-b87b-8691a06861b0",
        "cursor": {
          "ref": "45fda283-5f39-44ce-84f5-08cfc0767514",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "21f59015-13eb-4344-8283-1ff07083c321"
        },
        "item": {
          "id": "7b66cef4-d4a4-4411-b87b-8691a06861b0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "349a1447-b960-45d0-a5b0-811d06662461",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b66cef4-d4a4-4411-b87b-8691a06861b0",
        "cursor": {
          "ref": "45fda283-5f39-44ce-84f5-08cfc0767514",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "21f59015-13eb-4344-8283-1ff07083c321"
        },
        "item": {
          "id": "7b66cef4-d4a4-4411-b87b-8691a06861b0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "349a1447-b960-45d0-a5b0-811d06662461",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309d205d-bc2c-49cc-829c-0a33f9b7889d",
        "cursor": {
          "ref": "384ad9b1-d4c0-4733-a571-71f3690d51d0",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a082cde6-1a51-4e32-b244-670f04762f42"
        },
        "item": {
          "id": "309d205d-bc2c-49cc-829c-0a33f9b7889d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "104b56e2-9e3b-4707-9ec0-0bfefcd5417b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309d205d-bc2c-49cc-829c-0a33f9b7889d",
        "cursor": {
          "ref": "384ad9b1-d4c0-4733-a571-71f3690d51d0",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a082cde6-1a51-4e32-b244-670f04762f42"
        },
        "item": {
          "id": "309d205d-bc2c-49cc-829c-0a33f9b7889d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "104b56e2-9e3b-4707-9ec0-0bfefcd5417b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94debf0-d419-4991-80f1-28d83e4f63f4",
        "cursor": {
          "ref": "c595854d-6b38-4d06-8c44-fb96cfa85fb8",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "32a69aa6-2766-454a-aa60-423fd79da29b"
        },
        "item": {
          "id": "b94debf0-d419-4991-80f1-28d83e4f63f4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "498108f0-e992-4ff1-b40f-21de1b63be29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94debf0-d419-4991-80f1-28d83e4f63f4",
        "cursor": {
          "ref": "c595854d-6b38-4d06-8c44-fb96cfa85fb8",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "32a69aa6-2766-454a-aa60-423fd79da29b"
        },
        "item": {
          "id": "b94debf0-d419-4991-80f1-28d83e4f63f4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "498108f0-e992-4ff1-b40f-21de1b63be29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eceac18-235b-4f0c-9630-f7d8ed96ec04",
        "cursor": {
          "ref": "a0255506-a639-4a79-91bd-a25333726626",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5ecedc8d-1d9e-42c5-b98e-2645ed0e0fe6"
        },
        "item": {
          "id": "6eceac18-235b-4f0c-9630-f7d8ed96ec04",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c6b3e9d8-22a7-43bb-b4ec-fd90e39e7f15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eceac18-235b-4f0c-9630-f7d8ed96ec04",
        "cursor": {
          "ref": "a0255506-a639-4a79-91bd-a25333726626",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5ecedc8d-1d9e-42c5-b98e-2645ed0e0fe6"
        },
        "item": {
          "id": "6eceac18-235b-4f0c-9630-f7d8ed96ec04",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c6b3e9d8-22a7-43bb-b4ec-fd90e39e7f15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112c6622-eb1c-4896-9634-0f66bab1f55b",
        "cursor": {
          "ref": "638aa107-5518-45f0-9f75-f4e2a344f37b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "36ab635e-5fa1-47f0-aa8b-33050b256c83"
        },
        "item": {
          "id": "112c6622-eb1c-4896-9634-0f66bab1f55b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7afa18ec-e4d0-4381-acd1-155dd7f3c53b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112c6622-eb1c-4896-9634-0f66bab1f55b",
        "cursor": {
          "ref": "638aa107-5518-45f0-9f75-f4e2a344f37b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "36ab635e-5fa1-47f0-aa8b-33050b256c83"
        },
        "item": {
          "id": "112c6622-eb1c-4896-9634-0f66bab1f55b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7afa18ec-e4d0-4381-acd1-155dd7f3c53b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfc3904-01ad-483e-844f-ffb4dfd6cede",
        "cursor": {
          "ref": "7c29a332-7ea1-4d35-9103-e7e327a44a4c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cead2e24-d6ec-4468-a2ee-0424057a43c4"
        },
        "item": {
          "id": "6cfc3904-01ad-483e-844f-ffb4dfd6cede",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "250aa639-6ae6-4312-ae6a-dd25cda13456",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfc3904-01ad-483e-844f-ffb4dfd6cede",
        "cursor": {
          "ref": "7c29a332-7ea1-4d35-9103-e7e327a44a4c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cead2e24-d6ec-4468-a2ee-0424057a43c4"
        },
        "item": {
          "id": "6cfc3904-01ad-483e-844f-ffb4dfd6cede",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "250aa639-6ae6-4312-ae6a-dd25cda13456",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205d13f9-3228-4da2-8245-03301d683cc2",
        "cursor": {
          "ref": "adfe3fe1-cd2a-4fbf-9b14-ae62d8b1947f",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a0d24b50-5732-4e9b-911c-dc62841f4445"
        },
        "item": {
          "id": "205d13f9-3228-4da2-8245-03301d683cc2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "23111a23-4b52-4e6d-8fa2-d011b0316ff8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205d13f9-3228-4da2-8245-03301d683cc2",
        "cursor": {
          "ref": "adfe3fe1-cd2a-4fbf-9b14-ae62d8b1947f",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a0d24b50-5732-4e9b-911c-dc62841f4445"
        },
        "item": {
          "id": "205d13f9-3228-4da2-8245-03301d683cc2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "23111a23-4b52-4e6d-8fa2-d011b0316ff8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79156901-1e74-49e7-8486-1655da805abb",
        "cursor": {
          "ref": "1372e762-2797-4dd0-8fa0-33c69cc840e6",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e5764c64-a491-4f2f-bf52-53b1f9be55f1"
        },
        "item": {
          "id": "79156901-1e74-49e7-8486-1655da805abb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8dc74f6e-d97f-4d9e-9b2e-4846979f2863",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79156901-1e74-49e7-8486-1655da805abb",
        "cursor": {
          "ref": "1372e762-2797-4dd0-8fa0-33c69cc840e6",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e5764c64-a491-4f2f-bf52-53b1f9be55f1"
        },
        "item": {
          "id": "79156901-1e74-49e7-8486-1655da805abb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8dc74f6e-d97f-4d9e-9b2e-4846979f2863",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0767de95-ce89-4bb5-a10f-47224e51a947",
        "cursor": {
          "ref": "3a29aff3-9079-48c0-80c4-eebdbfd2390d",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "66a7d8cd-be75-41c3-90f0-61f74804ab4f"
        },
        "item": {
          "id": "0767de95-ce89-4bb5-a10f-47224e51a947",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6fbf4471-30f4-47a6-867e-9756a2594733",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0767de95-ce89-4bb5-a10f-47224e51a947",
        "cursor": {
          "ref": "3a29aff3-9079-48c0-80c4-eebdbfd2390d",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "66a7d8cd-be75-41c3-90f0-61f74804ab4f"
        },
        "item": {
          "id": "0767de95-ce89-4bb5-a10f-47224e51a947",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6fbf4471-30f4-47a6-867e-9756a2594733",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f6d5d7-c1b3-4c54-8b23-d961f5c283d7",
        "cursor": {
          "ref": "2c367130-9d89-4913-9ce3-02a7fed042e6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "98f40ec9-a7a3-4003-b165-682ea8579bba"
        },
        "item": {
          "id": "14f6d5d7-c1b3-4c54-8b23-d961f5c283d7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b6e4f2cb-793d-482f-a2a6-184ac6a94e3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f6d5d7-c1b3-4c54-8b23-d961f5c283d7",
        "cursor": {
          "ref": "2c367130-9d89-4913-9ce3-02a7fed042e6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "98f40ec9-a7a3-4003-b165-682ea8579bba"
        },
        "item": {
          "id": "14f6d5d7-c1b3-4c54-8b23-d961f5c283d7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b6e4f2cb-793d-482f-a2a6-184ac6a94e3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebed7bd-5dd4-46ca-b3d2-aaf770266ae4",
        "cursor": {
          "ref": "752041f8-539f-4c03-be8b-0854d62288f6",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7ffdf142-1c04-4957-83ae-b2d40c845be1"
        },
        "item": {
          "id": "8ebed7bd-5dd4-46ca-b3d2-aaf770266ae4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e1f86730-a480-49f9-9372-25978a15ac7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebed7bd-5dd4-46ca-b3d2-aaf770266ae4",
        "cursor": {
          "ref": "752041f8-539f-4c03-be8b-0854d62288f6",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7ffdf142-1c04-4957-83ae-b2d40c845be1"
        },
        "item": {
          "id": "8ebed7bd-5dd4-46ca-b3d2-aaf770266ae4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e1f86730-a480-49f9-9372-25978a15ac7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd2bbae-c5e5-4b27-a449-a19bef2249eb",
        "cursor": {
          "ref": "1631f3b4-6145-430b-be53-29523df3402d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "32f19fcf-95e3-4945-8a19-829ebb9cc69d"
        },
        "item": {
          "id": "bfd2bbae-c5e5-4b27-a449-a19bef2249eb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d05b2db9-2d23-4ec3-9295-0759ec26883c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd2bbae-c5e5-4b27-a449-a19bef2249eb",
        "cursor": {
          "ref": "1631f3b4-6145-430b-be53-29523df3402d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "32f19fcf-95e3-4945-8a19-829ebb9cc69d"
        },
        "item": {
          "id": "bfd2bbae-c5e5-4b27-a449-a19bef2249eb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d05b2db9-2d23-4ec3-9295-0759ec26883c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a2bdd8-5366-4c7d-87a8-670528c429ac",
        "cursor": {
          "ref": "35ce5281-6840-47b3-adde-d2eb73ae7031",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "830051ee-df60-45d0-98c9-a7220ec641b9"
        },
        "item": {
          "id": "f4a2bdd8-5366-4c7d-87a8-670528c429ac",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3d49e418-2074-4399-a0fe-67a8abe651ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a2bdd8-5366-4c7d-87a8-670528c429ac",
        "cursor": {
          "ref": "35ce5281-6840-47b3-adde-d2eb73ae7031",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "830051ee-df60-45d0-98c9-a7220ec641b9"
        },
        "item": {
          "id": "f4a2bdd8-5366-4c7d-87a8-670528c429ac",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3d49e418-2074-4399-a0fe-67a8abe651ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6b1a72-b638-4595-950d-abdccd1938e5",
        "cursor": {
          "ref": "5014748b-2fdf-4c5c-a924-0cf7ff54d8d2",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c28c0e08-8faf-4fb0-9f95-e233b6aabb1d"
        },
        "item": {
          "id": "7f6b1a72-b638-4595-950d-abdccd1938e5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "533c2a57-117b-43ed-b6ca-3d5d8a62cf54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6b1a72-b638-4595-950d-abdccd1938e5",
        "cursor": {
          "ref": "5014748b-2fdf-4c5c-a924-0cf7ff54d8d2",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c28c0e08-8faf-4fb0-9f95-e233b6aabb1d"
        },
        "item": {
          "id": "7f6b1a72-b638-4595-950d-abdccd1938e5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "533c2a57-117b-43ed-b6ca-3d5d8a62cf54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49004174-1f6d-4122-a85f-c0bf45c2dc63",
        "cursor": {
          "ref": "947f4271-799b-411a-b898-3a0ef3f9342e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9dbee601-38ef-43a8-8ac4-3e186362b7fd"
        },
        "item": {
          "id": "49004174-1f6d-4122-a85f-c0bf45c2dc63",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "135034f6-ac75-45f2-a313-19c756507df0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49004174-1f6d-4122-a85f-c0bf45c2dc63",
        "cursor": {
          "ref": "947f4271-799b-411a-b898-3a0ef3f9342e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9dbee601-38ef-43a8-8ac4-3e186362b7fd"
        },
        "item": {
          "id": "49004174-1f6d-4122-a85f-c0bf45c2dc63",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "135034f6-ac75-45f2-a313-19c756507df0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b374e85-99b6-4416-9bca-d03da96d54a8",
        "cursor": {
          "ref": "67fb7826-acfe-41d8-be93-419e7aa29dd9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6a573913-e729-45ee-bb78-708a2387e60f"
        },
        "item": {
          "id": "7b374e85-99b6-4416-9bca-d03da96d54a8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e43203f4-674f-4dad-b3f9-6d980f3c59dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b374e85-99b6-4416-9bca-d03da96d54a8",
        "cursor": {
          "ref": "67fb7826-acfe-41d8-be93-419e7aa29dd9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6a573913-e729-45ee-bb78-708a2387e60f"
        },
        "item": {
          "id": "7b374e85-99b6-4416-9bca-d03da96d54a8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e43203f4-674f-4dad-b3f9-6d980f3c59dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada09bcc-cfaa-45d0-a39c-903b012a499b",
        "cursor": {
          "ref": "a543690c-f152-4b8b-81be-2d3f86afcb30",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fe311694-2cab-4a7c-b645-fcf70d199d22"
        },
        "item": {
          "id": "ada09bcc-cfaa-45d0-a39c-903b012a499b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bb48a733-f4a2-49da-9806-4b3a22237d22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada09bcc-cfaa-45d0-a39c-903b012a499b",
        "cursor": {
          "ref": "a543690c-f152-4b8b-81be-2d3f86afcb30",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fe311694-2cab-4a7c-b645-fcf70d199d22"
        },
        "item": {
          "id": "ada09bcc-cfaa-45d0-a39c-903b012a499b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bb48a733-f4a2-49da-9806-4b3a22237d22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf2ac3f-d8de-4a78-961e-e381abeb30b2",
        "cursor": {
          "ref": "01f517b0-b9db-4fc0-a698-cb6847712049",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "15c0fe26-8a01-4f0b-b252-46defa8368bb"
        },
        "item": {
          "id": "8cf2ac3f-d8de-4a78-961e-e381abeb30b2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a9d071e0-6136-4979-b4ed-5a2bca6c8a7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf2ac3f-d8de-4a78-961e-e381abeb30b2",
        "cursor": {
          "ref": "01f517b0-b9db-4fc0-a698-cb6847712049",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "15c0fe26-8a01-4f0b-b252-46defa8368bb"
        },
        "item": {
          "id": "8cf2ac3f-d8de-4a78-961e-e381abeb30b2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a9d071e0-6136-4979-b4ed-5a2bca6c8a7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634d5b8e-2d37-4440-b8fc-b1ebda992d2d",
        "cursor": {
          "ref": "13424b76-06df-4ee3-9d3d-ef4fb7f6abf2",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ad5354d4-3aa6-48f2-8fa9-b61247fee002"
        },
        "item": {
          "id": "634d5b8e-2d37-4440-b8fc-b1ebda992d2d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9bf6731d-7ab2-482d-8775-c781ed141a7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634d5b8e-2d37-4440-b8fc-b1ebda992d2d",
        "cursor": {
          "ref": "13424b76-06df-4ee3-9d3d-ef4fb7f6abf2",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ad5354d4-3aa6-48f2-8fa9-b61247fee002"
        },
        "item": {
          "id": "634d5b8e-2d37-4440-b8fc-b1ebda992d2d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9bf6731d-7ab2-482d-8775-c781ed141a7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24ef03c-1c6e-4e4b-83ac-6309c1cd4ecf",
        "cursor": {
          "ref": "1025ae5a-294d-4636-bd7d-3ccd28d0fc92",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e07ed76a-66d3-4c0e-ad74-1f3b2fbaa235"
        },
        "item": {
          "id": "b24ef03c-1c6e-4e4b-83ac-6309c1cd4ecf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "10924460-91ba-44aa-8fd7-4f64f8bb9381",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24ef03c-1c6e-4e4b-83ac-6309c1cd4ecf",
        "cursor": {
          "ref": "1025ae5a-294d-4636-bd7d-3ccd28d0fc92",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e07ed76a-66d3-4c0e-ad74-1f3b2fbaa235"
        },
        "item": {
          "id": "b24ef03c-1c6e-4e4b-83ac-6309c1cd4ecf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "10924460-91ba-44aa-8fd7-4f64f8bb9381",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508e18f1-e57c-41bb-88d7-79a18eaa5b01",
        "cursor": {
          "ref": "e6ba48b0-5d0c-41a5-b9ad-36551f291d6b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "17fc4576-a9eb-4762-8e44-0e43c805eafe"
        },
        "item": {
          "id": "508e18f1-e57c-41bb-88d7-79a18eaa5b01",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6fa3a486-7038-4891-8a19-661ad31c14ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508e18f1-e57c-41bb-88d7-79a18eaa5b01",
        "cursor": {
          "ref": "e6ba48b0-5d0c-41a5-b9ad-36551f291d6b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "17fc4576-a9eb-4762-8e44-0e43c805eafe"
        },
        "item": {
          "id": "508e18f1-e57c-41bb-88d7-79a18eaa5b01",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6fa3a486-7038-4891-8a19-661ad31c14ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b07463d-1095-477a-a86e-d8d749af2d67",
        "cursor": {
          "ref": "fafae8df-6ef9-4780-bb8c-77e09df8089c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "593af888-486a-4e92-9010-96002b1a0e26"
        },
        "item": {
          "id": "0b07463d-1095-477a-a86e-d8d749af2d67",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3579fc78-c753-4cca-a634-ced9cf0d814a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b07463d-1095-477a-a86e-d8d749af2d67",
        "cursor": {
          "ref": "fafae8df-6ef9-4780-bb8c-77e09df8089c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "593af888-486a-4e92-9010-96002b1a0e26"
        },
        "item": {
          "id": "0b07463d-1095-477a-a86e-d8d749af2d67",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3579fc78-c753-4cca-a634-ced9cf0d814a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c432a61-d050-4070-b3be-2a3cac862f4f",
        "cursor": {
          "ref": "c924685b-6083-4016-9c78-cbe2eb5716ae",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a6a5d903-90cd-41f4-a092-b6ba871ab958"
        },
        "item": {
          "id": "7c432a61-d050-4070-b3be-2a3cac862f4f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "03033c55-fd8e-4fb3-b7ff-cb96de833b2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c432a61-d050-4070-b3be-2a3cac862f4f",
        "cursor": {
          "ref": "c924685b-6083-4016-9c78-cbe2eb5716ae",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a6a5d903-90cd-41f4-a092-b6ba871ab958"
        },
        "item": {
          "id": "7c432a61-d050-4070-b3be-2a3cac862f4f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "03033c55-fd8e-4fb3-b7ff-cb96de833b2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88e598e-64b8-49db-8eb3-eaa086d912b9",
        "cursor": {
          "ref": "eef0edc7-fffc-4d6a-b4be-4204f6acc013",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f730b51e-ee1d-456f-836f-1f81822d48fa"
        },
        "item": {
          "id": "a88e598e-64b8-49db-8eb3-eaa086d912b9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e029f31e-b482-40a4-8980-49d1828489e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88e598e-64b8-49db-8eb3-eaa086d912b9",
        "cursor": {
          "ref": "eef0edc7-fffc-4d6a-b4be-4204f6acc013",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f730b51e-ee1d-456f-836f-1f81822d48fa"
        },
        "item": {
          "id": "a88e598e-64b8-49db-8eb3-eaa086d912b9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e029f31e-b482-40a4-8980-49d1828489e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecac8d2f-1cfb-4947-b16a-33c07d3be3d8",
        "cursor": {
          "ref": "479c6ae6-9470-45e6-8e6d-73f096f66150",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4ee4debd-9e04-4ac5-a2f0-975e57937205"
        },
        "item": {
          "id": "ecac8d2f-1cfb-4947-b16a-33c07d3be3d8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "797eea0b-eac2-4eab-ac9c-b9a9f64a619e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecac8d2f-1cfb-4947-b16a-33c07d3be3d8",
        "cursor": {
          "ref": "479c6ae6-9470-45e6-8e6d-73f096f66150",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4ee4debd-9e04-4ac5-a2f0-975e57937205"
        },
        "item": {
          "id": "ecac8d2f-1cfb-4947-b16a-33c07d3be3d8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "797eea0b-eac2-4eab-ac9c-b9a9f64a619e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6912ed-9059-4f33-8cc5-206dec2ccf8d",
        "cursor": {
          "ref": "4a6bfbb4-7108-4e6e-8d26-7b7f0f9eb76c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "afe63414-7cf0-40cb-ba5f-6da438170697"
        },
        "item": {
          "id": "ea6912ed-9059-4f33-8cc5-206dec2ccf8d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "905683cd-f91d-4b73-9406-2c05b6405014",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6912ed-9059-4f33-8cc5-206dec2ccf8d",
        "cursor": {
          "ref": "4a6bfbb4-7108-4e6e-8d26-7b7f0f9eb76c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "afe63414-7cf0-40cb-ba5f-6da438170697"
        },
        "item": {
          "id": "ea6912ed-9059-4f33-8cc5-206dec2ccf8d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "905683cd-f91d-4b73-9406-2c05b6405014",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69fdd84-0402-492f-9b68-e60836ae5c5f",
        "cursor": {
          "ref": "b5d8a2bc-c75b-4ea2-a44b-93710ce69dd7",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1b152b02-06ed-4c6c-95af-8c3298db4989"
        },
        "item": {
          "id": "f69fdd84-0402-492f-9b68-e60836ae5c5f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ad23e368-ccf4-45b1-9efb-3d9349e1142d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69fdd84-0402-492f-9b68-e60836ae5c5f",
        "cursor": {
          "ref": "b5d8a2bc-c75b-4ea2-a44b-93710ce69dd7",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1b152b02-06ed-4c6c-95af-8c3298db4989"
        },
        "item": {
          "id": "f69fdd84-0402-492f-9b68-e60836ae5c5f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ad23e368-ccf4-45b1-9efb-3d9349e1142d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67bb8a7-6dcd-4846-9265-9a64a25ee9ae",
        "cursor": {
          "ref": "264b7b97-1dab-4dba-b2c9-98c648199fb0",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9f32ec6a-4da6-4915-ae81-25ca17493b49"
        },
        "item": {
          "id": "b67bb8a7-6dcd-4846-9265-9a64a25ee9ae",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c1d20d03-7048-4956-b853-9bfe00849f38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67bb8a7-6dcd-4846-9265-9a64a25ee9ae",
        "cursor": {
          "ref": "264b7b97-1dab-4dba-b2c9-98c648199fb0",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9f32ec6a-4da6-4915-ae81-25ca17493b49"
        },
        "item": {
          "id": "b67bb8a7-6dcd-4846-9265-9a64a25ee9ae",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c1d20d03-7048-4956-b853-9bfe00849f38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fac98c0-d74a-46bf-804f-d57499c308bb",
        "cursor": {
          "ref": "d02389b5-7b08-45e2-921e-e9eae7ee2d79",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "862670f6-d51c-4d9a-a839-d3220689892a"
        },
        "item": {
          "id": "2fac98c0-d74a-46bf-804f-d57499c308bb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cd9deadb-2362-4772-90f5-f8db3aebcafc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fac98c0-d74a-46bf-804f-d57499c308bb",
        "cursor": {
          "ref": "d02389b5-7b08-45e2-921e-e9eae7ee2d79",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "862670f6-d51c-4d9a-a839-d3220689892a"
        },
        "item": {
          "id": "2fac98c0-d74a-46bf-804f-d57499c308bb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cd9deadb-2362-4772-90f5-f8db3aebcafc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2e8a14-ab60-4a69-8cf8-8c4c87ab1f20",
        "cursor": {
          "ref": "c0d869d2-b016-4e77-a824-54dca98196e2",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "56e47676-8f55-4637-a185-e85635c82c5f"
        },
        "item": {
          "id": "8c2e8a14-ab60-4a69-8cf8-8c4c87ab1f20",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1b09598d-a8ad-4c40-be30-c88a76041b51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2e8a14-ab60-4a69-8cf8-8c4c87ab1f20",
        "cursor": {
          "ref": "c0d869d2-b016-4e77-a824-54dca98196e2",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "56e47676-8f55-4637-a185-e85635c82c5f"
        },
        "item": {
          "id": "8c2e8a14-ab60-4a69-8cf8-8c4c87ab1f20",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1b09598d-a8ad-4c40-be30-c88a76041b51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d28bb7-dce0-4959-bd40-9317b88e3dfb",
        "cursor": {
          "ref": "4dee4e4c-420e-4f16-a431-750df1bed7cf",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "48158291-402a-431e-9224-18fb97a06094"
        },
        "item": {
          "id": "38d28bb7-dce0-4959-bd40-9317b88e3dfb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "431641b4-21e1-446a-b088-71531384542a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d28bb7-dce0-4959-bd40-9317b88e3dfb",
        "cursor": {
          "ref": "4dee4e4c-420e-4f16-a431-750df1bed7cf",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "48158291-402a-431e-9224-18fb97a06094"
        },
        "item": {
          "id": "38d28bb7-dce0-4959-bd40-9317b88e3dfb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "431641b4-21e1-446a-b088-71531384542a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e0bc06-25e4-4a2d-b61a-13ccef2c1565",
        "cursor": {
          "ref": "f1f74e1c-7be4-4f4e-ba4a-4fce47a9be90",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6d24cbf0-ce37-4ff0-b031-149211223c80"
        },
        "item": {
          "id": "12e0bc06-25e4-4a2d-b61a-13ccef2c1565",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9f1491e5-54e9-45e4-9b8d-ed55775715b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e0bc06-25e4-4a2d-b61a-13ccef2c1565",
        "cursor": {
          "ref": "f1f74e1c-7be4-4f4e-ba4a-4fce47a9be90",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6d24cbf0-ce37-4ff0-b031-149211223c80"
        },
        "item": {
          "id": "12e0bc06-25e4-4a2d-b61a-13ccef2c1565",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9f1491e5-54e9-45e4-9b8d-ed55775715b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91093c54-eded-4cb4-a06c-5daec9905ec2",
        "cursor": {
          "ref": "eed478c4-080f-46e1-b08c-30841f0dd53c",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ec8c8139-c351-4e51-a3bd-e0e6b93a4e7b"
        },
        "item": {
          "id": "91093c54-eded-4cb4-a06c-5daec9905ec2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2368f5e3-5181-46eb-a60c-7c6160c843cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91093c54-eded-4cb4-a06c-5daec9905ec2",
        "cursor": {
          "ref": "eed478c4-080f-46e1-b08c-30841f0dd53c",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ec8c8139-c351-4e51-a3bd-e0e6b93a4e7b"
        },
        "item": {
          "id": "91093c54-eded-4cb4-a06c-5daec9905ec2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2368f5e3-5181-46eb-a60c-7c6160c843cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647194e2-c78b-46c7-9ca9-e2ebb136c69c",
        "cursor": {
          "ref": "f6044277-e5b9-4ebd-b907-be0a08bbf267",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0b42cbf8-1b78-4aa4-9c59-741093839bf7"
        },
        "item": {
          "id": "647194e2-c78b-46c7-9ca9-e2ebb136c69c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "db75bc82-0ebb-4fba-87b8-89a92fa6a945",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647194e2-c78b-46c7-9ca9-e2ebb136c69c",
        "cursor": {
          "ref": "f6044277-e5b9-4ebd-b907-be0a08bbf267",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0b42cbf8-1b78-4aa4-9c59-741093839bf7"
        },
        "item": {
          "id": "647194e2-c78b-46c7-9ca9-e2ebb136c69c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "db75bc82-0ebb-4fba-87b8-89a92fa6a945",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767acf75-a81c-44d5-a38c-8f5a3fbedec8",
        "cursor": {
          "ref": "14b91cc2-e52b-4862-9deb-d08bb6ba1126",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38e4448d-e4de-4e72-a5b6-b981ac62049e"
        },
        "item": {
          "id": "767acf75-a81c-44d5-a38c-8f5a3fbedec8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "35529d64-2ca5-4160-a599-892e15a92f9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767acf75-a81c-44d5-a38c-8f5a3fbedec8",
        "cursor": {
          "ref": "14b91cc2-e52b-4862-9deb-d08bb6ba1126",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38e4448d-e4de-4e72-a5b6-b981ac62049e"
        },
        "item": {
          "id": "767acf75-a81c-44d5-a38c-8f5a3fbedec8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "35529d64-2ca5-4160-a599-892e15a92f9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ce478e-db75-4452-a832-bfe45877e8e8",
        "cursor": {
          "ref": "57cfdf87-a13e-4712-b126-aedbfbd07833",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e2e9d59a-e77b-458a-8219-863a4578a68a"
        },
        "item": {
          "id": "04ce478e-db75-4452-a832-bfe45877e8e8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ce3ca79e-21d0-4801-af52-83a81c122f03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ce478e-db75-4452-a832-bfe45877e8e8",
        "cursor": {
          "ref": "57cfdf87-a13e-4712-b126-aedbfbd07833",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e2e9d59a-e77b-458a-8219-863a4578a68a"
        },
        "item": {
          "id": "04ce478e-db75-4452-a832-bfe45877e8e8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ce3ca79e-21d0-4801-af52-83a81c122f03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c819b38-366d-4dab-ac5f-f1302453be65",
        "cursor": {
          "ref": "1935a66e-d28c-4613-83ea-2a9a498476e9",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "96c5516e-0564-4caf-886d-7e08dd7dcab1"
        },
        "item": {
          "id": "2c819b38-366d-4dab-ac5f-f1302453be65",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "50470f53-e900-4c28-b8f6-3d3aac0790f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c819b38-366d-4dab-ac5f-f1302453be65",
        "cursor": {
          "ref": "1935a66e-d28c-4613-83ea-2a9a498476e9",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "96c5516e-0564-4caf-886d-7e08dd7dcab1"
        },
        "item": {
          "id": "2c819b38-366d-4dab-ac5f-f1302453be65",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "50470f53-e900-4c28-b8f6-3d3aac0790f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814fa330-ecdc-4852-8ef3-2db353276c0f",
        "cursor": {
          "ref": "fc363c15-8b62-4c28-8114-64276ad52806",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6e8d742d-cba0-48a4-af42-7e1af41288d7"
        },
        "item": {
          "id": "814fa330-ecdc-4852-8ef3-2db353276c0f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "db3a934f-9216-444f-acc6-17317c4f5673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814fa330-ecdc-4852-8ef3-2db353276c0f",
        "cursor": {
          "ref": "fc363c15-8b62-4c28-8114-64276ad52806",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6e8d742d-cba0-48a4-af42-7e1af41288d7"
        },
        "item": {
          "id": "814fa330-ecdc-4852-8ef3-2db353276c0f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "db3a934f-9216-444f-acc6-17317c4f5673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32b8bbe-3aff-488f-aaad-3889b00973b1",
        "cursor": {
          "ref": "cd65455a-0160-465f-81e2-653588c5d7e0",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7cc83f02-f8a5-4ac9-9208-37b69532140d"
        },
        "item": {
          "id": "a32b8bbe-3aff-488f-aaad-3889b00973b1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "58b14d54-0576-4089-814c-f78075b5da2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32b8bbe-3aff-488f-aaad-3889b00973b1",
        "cursor": {
          "ref": "cd65455a-0160-465f-81e2-653588c5d7e0",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7cc83f02-f8a5-4ac9-9208-37b69532140d"
        },
        "item": {
          "id": "a32b8bbe-3aff-488f-aaad-3889b00973b1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "58b14d54-0576-4089-814c-f78075b5da2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039f4918-03c8-47b9-ba97-f815979adbef",
        "cursor": {
          "ref": "ee3228c9-d7d7-416d-9f28-23de56d7fe3c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "13b2bc5d-bef5-426f-bca7-9a5453e75039"
        },
        "item": {
          "id": "039f4918-03c8-47b9-ba97-f815979adbef",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5435d411-bc74-4551-8d4a-22aa9146053e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039f4918-03c8-47b9-ba97-f815979adbef",
        "cursor": {
          "ref": "ee3228c9-d7d7-416d-9f28-23de56d7fe3c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "13b2bc5d-bef5-426f-bca7-9a5453e75039"
        },
        "item": {
          "id": "039f4918-03c8-47b9-ba97-f815979adbef",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5435d411-bc74-4551-8d4a-22aa9146053e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbd8394-9d1d-463c-bc5a-4bc6ae8588b6",
        "cursor": {
          "ref": "a5523864-fb40-42f5-b50a-86f107400896",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0e224657-5a91-4fec-91fd-fcd454cc803b"
        },
        "item": {
          "id": "4bbd8394-9d1d-463c-bc5a-4bc6ae8588b6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0928a740-5e4b-4427-9fb7-2318bef6e4e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbd8394-9d1d-463c-bc5a-4bc6ae8588b6",
        "cursor": {
          "ref": "a5523864-fb40-42f5-b50a-86f107400896",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0e224657-5a91-4fec-91fd-fcd454cc803b"
        },
        "item": {
          "id": "4bbd8394-9d1d-463c-bc5a-4bc6ae8588b6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0928a740-5e4b-4427-9fb7-2318bef6e4e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8fc878-fef1-4ce1-8b06-1bf018dfef0f",
        "cursor": {
          "ref": "9d50d33a-ab48-4f96-bc10-b6619d4f5dcc",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2c94d50a-f487-4bce-b191-a579a601a4a0"
        },
        "item": {
          "id": "0a8fc878-fef1-4ce1-8b06-1bf018dfef0f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4457b663-e4e5-437e-832f-a15e26823af3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8fc878-fef1-4ce1-8b06-1bf018dfef0f",
        "cursor": {
          "ref": "9d50d33a-ab48-4f96-bc10-b6619d4f5dcc",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2c94d50a-f487-4bce-b191-a579a601a4a0"
        },
        "item": {
          "id": "0a8fc878-fef1-4ce1-8b06-1bf018dfef0f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4457b663-e4e5-437e-832f-a15e26823af3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffd8b80-e22b-487a-9556-3ea42d61eb56",
        "cursor": {
          "ref": "04387e31-02e1-4843-909f-cfe599b85579",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2d8d7d00-9df3-4916-be07-80dc6b348bfe"
        },
        "item": {
          "id": "2ffd8b80-e22b-487a-9556-3ea42d61eb56",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "820c50a6-8c08-40c9-90f1-dad9259e04e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffd8b80-e22b-487a-9556-3ea42d61eb56",
        "cursor": {
          "ref": "04387e31-02e1-4843-909f-cfe599b85579",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2d8d7d00-9df3-4916-be07-80dc6b348bfe"
        },
        "item": {
          "id": "2ffd8b80-e22b-487a-9556-3ea42d61eb56",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "820c50a6-8c08-40c9-90f1-dad9259e04e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76312f42-bb1a-4450-b80d-5f275f0c88e3",
        "cursor": {
          "ref": "71f48fac-d7ad-49bb-81b7-7d56971cb6f3",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "84f991a6-d14d-4df4-bad0-64e2b32e6d67"
        },
        "item": {
          "id": "76312f42-bb1a-4450-b80d-5f275f0c88e3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0d1b4133-dba7-4aef-9b7c-f2433e292ae9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76312f42-bb1a-4450-b80d-5f275f0c88e3",
        "cursor": {
          "ref": "71f48fac-d7ad-49bb-81b7-7d56971cb6f3",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "84f991a6-d14d-4df4-bad0-64e2b32e6d67"
        },
        "item": {
          "id": "76312f42-bb1a-4450-b80d-5f275f0c88e3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0d1b4133-dba7-4aef-9b7c-f2433e292ae9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb95289-27be-4eec-a8e5-47c9b2802169",
        "cursor": {
          "ref": "6d0fbe6e-4a9e-43e4-9487-8c0ae7d21181",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9c85937d-194c-4318-9159-914642431c03"
        },
        "item": {
          "id": "0fb95289-27be-4eec-a8e5-47c9b2802169",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8be07162-bf3a-49a7-b080-a480623395b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb95289-27be-4eec-a8e5-47c9b2802169",
        "cursor": {
          "ref": "6d0fbe6e-4a9e-43e4-9487-8c0ae7d21181",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9c85937d-194c-4318-9159-914642431c03"
        },
        "item": {
          "id": "0fb95289-27be-4eec-a8e5-47c9b2802169",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8be07162-bf3a-49a7-b080-a480623395b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd67ef0-e279-45a3-825c-1e10b315869b",
        "cursor": {
          "ref": "ba3f2bca-667e-4dc5-bf29-8b7d4bfbdd22",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5e0b2ee3-25c4-455d-8105-f65c1a2b80be"
        },
        "item": {
          "id": "4bd67ef0-e279-45a3-825c-1e10b315869b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f2a71841-8583-42e2-9f30-b05c6edb6d90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd67ef0-e279-45a3-825c-1e10b315869b",
        "cursor": {
          "ref": "ba3f2bca-667e-4dc5-bf29-8b7d4bfbdd22",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5e0b2ee3-25c4-455d-8105-f65c1a2b80be"
        },
        "item": {
          "id": "4bd67ef0-e279-45a3-825c-1e10b315869b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f2a71841-8583-42e2-9f30-b05c6edb6d90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d5db7f-47ea-4904-aa1a-51d830136645",
        "cursor": {
          "ref": "1010139e-c5b4-44f7-96c5-c4ab34040d11",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7e2d408b-bb99-4346-b162-ac5deffb52c9"
        },
        "item": {
          "id": "d5d5db7f-47ea-4904-aa1a-51d830136645",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a2014cbb-deac-4383-9069-6ac67a4b9df7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d5db7f-47ea-4904-aa1a-51d830136645",
        "cursor": {
          "ref": "1010139e-c5b4-44f7-96c5-c4ab34040d11",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7e2d408b-bb99-4346-b162-ac5deffb52c9"
        },
        "item": {
          "id": "d5d5db7f-47ea-4904-aa1a-51d830136645",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a2014cbb-deac-4383-9069-6ac67a4b9df7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1f9eca-eceb-4d12-afb5-3c637cb5af3e",
        "cursor": {
          "ref": "f57cf6b7-c358-412a-8bef-45484f17f9a7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5bb9ff94-303b-4844-a749-81a8e411fa36"
        },
        "item": {
          "id": "7f1f9eca-eceb-4d12-afb5-3c637cb5af3e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5306ba22-578a-47ee-b97e-f19bad1af9ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1f9eca-eceb-4d12-afb5-3c637cb5af3e",
        "cursor": {
          "ref": "f57cf6b7-c358-412a-8bef-45484f17f9a7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5bb9ff94-303b-4844-a749-81a8e411fa36"
        },
        "item": {
          "id": "7f1f9eca-eceb-4d12-afb5-3c637cb5af3e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5306ba22-578a-47ee-b97e-f19bad1af9ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d10662e-e301-4aa9-aea9-7106a40a6d4b",
        "cursor": {
          "ref": "17aa4472-ad90-46cf-b33a-b35dddd64936",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c44f76dc-6d08-40f4-bdae-bbc5d8aa0511"
        },
        "item": {
          "id": "8d10662e-e301-4aa9-aea9-7106a40a6d4b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e9dec237-641e-40f1-849c-efd815095cb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d10662e-e301-4aa9-aea9-7106a40a6d4b",
        "cursor": {
          "ref": "17aa4472-ad90-46cf-b33a-b35dddd64936",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c44f76dc-6d08-40f4-bdae-bbc5d8aa0511"
        },
        "item": {
          "id": "8d10662e-e301-4aa9-aea9-7106a40a6d4b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e9dec237-641e-40f1-849c-efd815095cb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfdaa21-f2dc-4fc6-abc4-0035026541cf",
        "cursor": {
          "ref": "0c404d73-2078-4b3b-851a-591a01d83651",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d4a94b15-1b56-485d-ab52-8d24b51c0254"
        },
        "item": {
          "id": "4bfdaa21-f2dc-4fc6-abc4-0035026541cf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d36f5d32-b846-40f8-85f1-d985258f8015",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfdaa21-f2dc-4fc6-abc4-0035026541cf",
        "cursor": {
          "ref": "0c404d73-2078-4b3b-851a-591a01d83651",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d4a94b15-1b56-485d-ab52-8d24b51c0254"
        },
        "item": {
          "id": "4bfdaa21-f2dc-4fc6-abc4-0035026541cf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d36f5d32-b846-40f8-85f1-d985258f8015",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494b0aba-35da-4ba0-97f9-cba5a5b00cdd",
        "cursor": {
          "ref": "90294a9a-ed42-4a2e-8e8c-6e67382dca97",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bf3c23e7-d6f4-4371-9983-82599bfc2c73"
        },
        "item": {
          "id": "494b0aba-35da-4ba0-97f9-cba5a5b00cdd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5fa7cd2c-0d5b-4b23-b74d-7f6f496eb709",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494b0aba-35da-4ba0-97f9-cba5a5b00cdd",
        "cursor": {
          "ref": "90294a9a-ed42-4a2e-8e8c-6e67382dca97",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bf3c23e7-d6f4-4371-9983-82599bfc2c73"
        },
        "item": {
          "id": "494b0aba-35da-4ba0-97f9-cba5a5b00cdd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5fa7cd2c-0d5b-4b23-b74d-7f6f496eb709",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f791b148-1a2c-47c9-b8c9-da20fb8db202",
        "cursor": {
          "ref": "dcbe0ab6-b18a-478a-99c6-1b4eec340770",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4856774c-2778-4f4e-b589-526dbdafb525"
        },
        "item": {
          "id": "f791b148-1a2c-47c9-b8c9-da20fb8db202",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "288ffa41-e5ce-4516-9a8e-3597e86d7fa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f791b148-1a2c-47c9-b8c9-da20fb8db202",
        "cursor": {
          "ref": "dcbe0ab6-b18a-478a-99c6-1b4eec340770",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4856774c-2778-4f4e-b589-526dbdafb525"
        },
        "item": {
          "id": "f791b148-1a2c-47c9-b8c9-da20fb8db202",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "288ffa41-e5ce-4516-9a8e-3597e86d7fa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cacc0e1-a30b-4a11-8b59-df00bbe85f3c",
        "cursor": {
          "ref": "12ef526b-0953-498c-84ac-da5f38961f42",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5da96078-43f7-44ed-b869-cadef425b20b"
        },
        "item": {
          "id": "6cacc0e1-a30b-4a11-8b59-df00bbe85f3c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2e091371-9326-405d-80ce-b829465a7e9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cacc0e1-a30b-4a11-8b59-df00bbe85f3c",
        "cursor": {
          "ref": "12ef526b-0953-498c-84ac-da5f38961f42",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5da96078-43f7-44ed-b869-cadef425b20b"
        },
        "item": {
          "id": "6cacc0e1-a30b-4a11-8b59-df00bbe85f3c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2e091371-9326-405d-80ce-b829465a7e9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563cd283-26b5-4e0e-9cd2-8cfc9bc78ea1",
        "cursor": {
          "ref": "abfea8fd-e3eb-4305-a12c-e1cbc4ddd83d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dd6a6551-3353-4f0e-b737-e0fb8867a6e6"
        },
        "item": {
          "id": "563cd283-26b5-4e0e-9cd2-8cfc9bc78ea1",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8d11ca2c-4f0a-4b94-ab51-bbd7e7adaada",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "563cd283-26b5-4e0e-9cd2-8cfc9bc78ea1",
        "cursor": {
          "ref": "abfea8fd-e3eb-4305-a12c-e1cbc4ddd83d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dd6a6551-3353-4f0e-b737-e0fb8867a6e6"
        },
        "item": {
          "id": "563cd283-26b5-4e0e-9cd2-8cfc9bc78ea1",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8d11ca2c-4f0a-4b94-ab51-bbd7e7adaada",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "be03f04b-0df6-446b-9da8-5bbb38eeb573",
        "cursor": {
          "ref": "6bfb391e-0b19-4f50-b422-85e50e1397d2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4fe83c26-b5cf-4374-8d0d-8d2fca10a5f1"
        },
        "item": {
          "id": "be03f04b-0df6-446b-9da8-5bbb38eeb573",
          "name": "credentials_issue"
        },
        "response": {
          "id": "023b57f5-b2e9-401a-8964-ef2f2755bd31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "be03f04b-0df6-446b-9da8-5bbb38eeb573",
        "cursor": {
          "ref": "6bfb391e-0b19-4f50-b422-85e50e1397d2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4fe83c26-b5cf-4374-8d0d-8d2fca10a5f1"
        },
        "item": {
          "id": "be03f04b-0df6-446b-9da8-5bbb38eeb573",
          "name": "credentials_issue"
        },
        "response": {
          "id": "023b57f5-b2e9-401a-8964-ef2f2755bd31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "1721624f-c121-4a63-b259-829a3d80f7af",
        "cursor": {
          "ref": "aad7a1ec-0baf-4a64-b963-b73d1225bea0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "56fae414-46fe-4387-bd38-cf41f829edae"
        },
        "item": {
          "id": "1721624f-c121-4a63-b259-829a3d80f7af",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2e255c95-5d75-447e-9bd1-8273156b9ae9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "1721624f-c121-4a63-b259-829a3d80f7af",
        "cursor": {
          "ref": "aad7a1ec-0baf-4a64-b963-b73d1225bea0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "56fae414-46fe-4387-bd38-cf41f829edae"
        },
        "item": {
          "id": "1721624f-c121-4a63-b259-829a3d80f7af",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2e255c95-5d75-447e-9bd1-8273156b9ae9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "43776ccd-7529-411b-a0a0-455ef9efc8c9",
        "cursor": {
          "ref": "66aecbde-93bd-43a2-a658-d6de5eb63a6b",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "db8569ad-4528-4652-bdf0-d27e08fb3abb"
        },
        "item": {
          "id": "43776ccd-7529-411b-a0a0-455ef9efc8c9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "841ed1c2-3a39-4bec-a315-d0439127dbfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "43776ccd-7529-411b-a0a0-455ef9efc8c9",
        "cursor": {
          "ref": "66aecbde-93bd-43a2-a658-d6de5eb63a6b",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "db8569ad-4528-4652-bdf0-d27e08fb3abb"
        },
        "item": {
          "id": "43776ccd-7529-411b-a0a0-455ef9efc8c9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "841ed1c2-3a39-4bec-a315-d0439127dbfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "6ef6cc94-036f-486e-8a2e-f3536373acc5",
        "cursor": {
          "ref": "6603190a-693a-4401-9973-73a6fa6f45c4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8c7b992c-9ed3-4160-b764-baabbcd80231"
        },
        "item": {
          "id": "6ef6cc94-036f-486e-8a2e-f3536373acc5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "94d5e2a2-18e1-4bc2-8224-00fd28222955",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "6ef6cc94-036f-486e-8a2e-f3536373acc5",
        "cursor": {
          "ref": "6603190a-693a-4401-9973-73a6fa6f45c4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8c7b992c-9ed3-4160-b764-baabbcd80231"
        },
        "item": {
          "id": "6ef6cc94-036f-486e-8a2e-f3536373acc5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "94d5e2a2-18e1-4bc2-8224-00fd28222955",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "8210e1c7-6138-41c6-a60f-a8a2c52bc114",
        "cursor": {
          "ref": "13c23165-b5c7-4d48-a73f-b0232f6d895e",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4b5f9218-4128-475e-9b44-9009402111c2"
        },
        "item": {
          "id": "8210e1c7-6138-41c6-a60f-a8a2c52bc114",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "805003f3-26fd-4ae7-8758-3bdcd7a16ecb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8210e1c7-6138-41c6-a60f-a8a2c52bc114",
        "cursor": {
          "ref": "13c23165-b5c7-4d48-a73f-b0232f6d895e",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4b5f9218-4128-475e-9b44-9009402111c2"
        },
        "item": {
          "id": "8210e1c7-6138-41c6-a60f-a8a2c52bc114",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "805003f3-26fd-4ae7-8758-3bdcd7a16ecb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1de1a167-24a9-45d4-9a26-dfa8eb21cfc5",
        "cursor": {
          "ref": "d134bee1-3965-4c6d-8d37-2fbc1f06c050",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4b81d76a-bdd1-4f5a-8493-7ca1d702a657"
        },
        "item": {
          "id": "1de1a167-24a9-45d4-9a26-dfa8eb21cfc5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6376dbf3-0a25-4f54-925e-2a416c1d96c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1de1a167-24a9-45d4-9a26-dfa8eb21cfc5",
        "cursor": {
          "ref": "d134bee1-3965-4c6d-8d37-2fbc1f06c050",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4b81d76a-bdd1-4f5a-8493-7ca1d702a657"
        },
        "item": {
          "id": "1de1a167-24a9-45d4-9a26-dfa8eb21cfc5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6376dbf3-0a25-4f54-925e-2a416c1d96c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "8cdddc86-889d-47f2-8f91-d68988ff69f3",
        "cursor": {
          "ref": "171e159f-91c5-4f4e-939e-48a7e90bf166",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bb98bd78-fb77-4d7f-8cc3-86e2d2978a44"
        },
        "item": {
          "id": "8cdddc86-889d-47f2-8f91-d68988ff69f3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c48a27bb-93ab-4aff-98c4-77cbb7f0cdf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdddc86-889d-47f2-8f91-d68988ff69f3",
        "cursor": {
          "ref": "171e159f-91c5-4f4e-939e-48a7e90bf166",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bb98bd78-fb77-4d7f-8cc3-86e2d2978a44"
        },
        "item": {
          "id": "8cdddc86-889d-47f2-8f91-d68988ff69f3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c48a27bb-93ab-4aff-98c4-77cbb7f0cdf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4513ca3c-40ea-4769-8575-1bb6dd280bf3",
        "cursor": {
          "ref": "ad3d131c-dafb-435a-a2c9-495f1f0303b7",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5e90dd9c-90bb-4d6c-9a15-af49fc5867ed"
        },
        "item": {
          "id": "4513ca3c-40ea-4769-8575-1bb6dd280bf3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f801222e-03f9-4225-a5ad-c7acd044dd92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4513ca3c-40ea-4769-8575-1bb6dd280bf3",
        "cursor": {
          "ref": "ad3d131c-dafb-435a-a2c9-495f1f0303b7",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5e90dd9c-90bb-4d6c-9a15-af49fc5867ed"
        },
        "item": {
          "id": "4513ca3c-40ea-4769-8575-1bb6dd280bf3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f801222e-03f9-4225-a5ad-c7acd044dd92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d79efee-2cf6-4188-aedc-10d432f0ece0",
        "cursor": {
          "ref": "faf14ac9-e2c0-4d83-88d6-3c9cb6921878",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2db1022a-79e4-4f1c-98f0-8c429fd895cf"
        },
        "item": {
          "id": "7d79efee-2cf6-4188-aedc-10d432f0ece0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "326962f4-3219-4217-9c00-926383ef4b0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d79efee-2cf6-4188-aedc-10d432f0ece0",
        "cursor": {
          "ref": "faf14ac9-e2c0-4d83-88d6-3c9cb6921878",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2db1022a-79e4-4f1c-98f0-8c429fd895cf"
        },
        "item": {
          "id": "7d79efee-2cf6-4188-aedc-10d432f0ece0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "326962f4-3219-4217-9c00-926383ef4b0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69874303-6927-41cc-8e70-5803f7d4074b",
        "cursor": {
          "ref": "4fe4ec17-aedf-457d-aa56-77f18a6adc4d",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e2d23491-6dba-4793-9433-2096230791af"
        },
        "item": {
          "id": "69874303-6927-41cc-8e70-5803f7d4074b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8a34304e-3d42-498f-95c8-09ab35758f6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69874303-6927-41cc-8e70-5803f7d4074b",
        "cursor": {
          "ref": "4fe4ec17-aedf-457d-aa56-77f18a6adc4d",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e2d23491-6dba-4793-9433-2096230791af"
        },
        "item": {
          "id": "69874303-6927-41cc-8e70-5803f7d4074b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8a34304e-3d42-498f-95c8-09ab35758f6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8672023e-8b61-47ee-b990-20e1b952524b",
        "cursor": {
          "ref": "95cfd63a-4cc5-4a4c-974b-701f5dd47a49",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "74b5c121-943f-4c16-9ac1-4eeb06f0cff4"
        },
        "item": {
          "id": "8672023e-8b61-47ee-b990-20e1b952524b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d81ab730-3d0f-4388-a5c1-2ccea3729cba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8672023e-8b61-47ee-b990-20e1b952524b",
        "cursor": {
          "ref": "95cfd63a-4cc5-4a4c-974b-701f5dd47a49",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "74b5c121-943f-4c16-9ac1-4eeb06f0cff4"
        },
        "item": {
          "id": "8672023e-8b61-47ee-b990-20e1b952524b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d81ab730-3d0f-4388-a5c1-2ccea3729cba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3468bfcd-f64a-4bf4-839a-3fc0d272e706",
        "cursor": {
          "ref": "ad567a55-6958-4391-8fa3-f93714c41897",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "75b40b28-2b6f-40e1-a2bb-27527314e7ac"
        },
        "item": {
          "id": "3468bfcd-f64a-4bf4-839a-3fc0d272e706",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3f23dcd2-a1a0-4ebc-95fb-b7bc5652473d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3468bfcd-f64a-4bf4-839a-3fc0d272e706",
        "cursor": {
          "ref": "ad567a55-6958-4391-8fa3-f93714c41897",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "75b40b28-2b6f-40e1-a2bb-27527314e7ac"
        },
        "item": {
          "id": "3468bfcd-f64a-4bf4-839a-3fc0d272e706",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3f23dcd2-a1a0-4ebc-95fb-b7bc5652473d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f752a75-4495-497d-ac2e-246424a8ee59",
        "cursor": {
          "ref": "39bfbd6b-e101-4d60-b0ec-ddab5707c3e6",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2e0b8a9a-8090-40e7-bb3f-98545b4bbaf0"
        },
        "item": {
          "id": "6f752a75-4495-497d-ac2e-246424a8ee59",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "75415c28-3b01-43fc-b4c7-1eb461f8c770",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f752a75-4495-497d-ac2e-246424a8ee59",
        "cursor": {
          "ref": "39bfbd6b-e101-4d60-b0ec-ddab5707c3e6",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2e0b8a9a-8090-40e7-bb3f-98545b4bbaf0"
        },
        "item": {
          "id": "6f752a75-4495-497d-ac2e-246424a8ee59",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "75415c28-3b01-43fc-b4c7-1eb461f8c770",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b46995-f225-4078-a4db-8d78d27207ef",
        "cursor": {
          "ref": "f9ed279e-224a-4b0d-b98c-7377abb81706",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "49e4dd59-5246-4e10-be5f-c1017bd8654a"
        },
        "item": {
          "id": "40b46995-f225-4078-a4db-8d78d27207ef",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c81c316e-9238-4165-8c22-17cddfbebe54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b46995-f225-4078-a4db-8d78d27207ef",
        "cursor": {
          "ref": "f9ed279e-224a-4b0d-b98c-7377abb81706",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "49e4dd59-5246-4e10-be5f-c1017bd8654a"
        },
        "item": {
          "id": "40b46995-f225-4078-a4db-8d78d27207ef",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c81c316e-9238-4165-8c22-17cddfbebe54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54011a6b-13a8-4732-bb1c-92679b4029fb",
        "cursor": {
          "ref": "5d40c9c4-6d15-4765-a5de-54dc970c6a80",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ba56c688-5e46-49af-b89b-40d1d138814c"
        },
        "item": {
          "id": "54011a6b-13a8-4732-bb1c-92679b4029fb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "29a8a015-f4c5-4061-8f07-3eb50253c13b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54011a6b-13a8-4732-bb1c-92679b4029fb",
        "cursor": {
          "ref": "5d40c9c4-6d15-4765-a5de-54dc970c6a80",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ba56c688-5e46-49af-b89b-40d1d138814c"
        },
        "item": {
          "id": "54011a6b-13a8-4732-bb1c-92679b4029fb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "29a8a015-f4c5-4061-8f07-3eb50253c13b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dcadb8-d975-4e36-b931-69096a092979",
        "cursor": {
          "ref": "13485644-cca2-4241-af5e-efbeb10e3c49",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "204da67d-dfa3-4d3d-b9a5-df4d5c36cfe2"
        },
        "item": {
          "id": "c7dcadb8-d975-4e36-b931-69096a092979",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "daa5f9fd-40da-4a18-bf9c-582204644f86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dcadb8-d975-4e36-b931-69096a092979",
        "cursor": {
          "ref": "13485644-cca2-4241-af5e-efbeb10e3c49",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "204da67d-dfa3-4d3d-b9a5-df4d5c36cfe2"
        },
        "item": {
          "id": "c7dcadb8-d975-4e36-b931-69096a092979",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "daa5f9fd-40da-4a18-bf9c-582204644f86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96d6788-6d1c-4043-a768-38a9d2ff1ab2",
        "cursor": {
          "ref": "bbd3e552-c5a6-4e61-920e-74ac32dd7094",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ed1d0a10-5497-42ca-80eb-b460495bd726"
        },
        "item": {
          "id": "c96d6788-6d1c-4043-a768-38a9d2ff1ab2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "09f4dd26-6e2c-44ec-9693-21975cbd64bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96d6788-6d1c-4043-a768-38a9d2ff1ab2",
        "cursor": {
          "ref": "bbd3e552-c5a6-4e61-920e-74ac32dd7094",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ed1d0a10-5497-42ca-80eb-b460495bd726"
        },
        "item": {
          "id": "c96d6788-6d1c-4043-a768-38a9d2ff1ab2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "09f4dd26-6e2c-44ec-9693-21975cbd64bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efd989a-e811-4a66-b0f1-6b04ca10db2a",
        "cursor": {
          "ref": "4751ba69-9cda-4430-b5ea-29ed5ef635c5",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "41678353-691a-4b8d-bfb2-f50b54347783"
        },
        "item": {
          "id": "7efd989a-e811-4a66-b0f1-6b04ca10db2a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ac7b9107-ff8a-4442-9fc0-25674b3e43fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efd989a-e811-4a66-b0f1-6b04ca10db2a",
        "cursor": {
          "ref": "4751ba69-9cda-4430-b5ea-29ed5ef635c5",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "41678353-691a-4b8d-bfb2-f50b54347783"
        },
        "item": {
          "id": "7efd989a-e811-4a66-b0f1-6b04ca10db2a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ac7b9107-ff8a-4442-9fc0-25674b3e43fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5fe086-0a3a-42a6-a1d7-feeeaefa49e0",
        "cursor": {
          "ref": "c854c263-c8de-4eb0-85b2-c232414c1e77",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "df76c7a4-ac8c-4855-89cf-6808ff147d60"
        },
        "item": {
          "id": "3e5fe086-0a3a-42a6-a1d7-feeeaefa49e0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e73f0097-f9b0-4f0f-856c-3cfb280f3012",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5fe086-0a3a-42a6-a1d7-feeeaefa49e0",
        "cursor": {
          "ref": "c854c263-c8de-4eb0-85b2-c232414c1e77",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "df76c7a4-ac8c-4855-89cf-6808ff147d60"
        },
        "item": {
          "id": "3e5fe086-0a3a-42a6-a1d7-feeeaefa49e0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e73f0097-f9b0-4f0f-856c-3cfb280f3012",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6972c49f-cfc5-419d-9b26-77a31b59c640",
        "cursor": {
          "ref": "de171c16-bdfa-4a8c-ac6c-383839d37ee7",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "894e2bc6-7c67-42c9-9ab4-5fb45ff22514"
        },
        "item": {
          "id": "6972c49f-cfc5-419d-9b26-77a31b59c640",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d54fb85d-79fb-4d26-be95-ad32e3f46f30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6972c49f-cfc5-419d-9b26-77a31b59c640",
        "cursor": {
          "ref": "de171c16-bdfa-4a8c-ac6c-383839d37ee7",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "894e2bc6-7c67-42c9-9ab4-5fb45ff22514"
        },
        "item": {
          "id": "6972c49f-cfc5-419d-9b26-77a31b59c640",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d54fb85d-79fb-4d26-be95-ad32e3f46f30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60427f8-8f91-41dd-a876-d630a6603444",
        "cursor": {
          "ref": "04331ccc-fb77-427d-b49d-5109b41edc7f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "92620e23-517e-4a28-9e7e-148c1fc4e676"
        },
        "item": {
          "id": "d60427f8-8f91-41dd-a876-d630a6603444",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bab02995-f523-4061-9a60-9a6c618a8d98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60427f8-8f91-41dd-a876-d630a6603444",
        "cursor": {
          "ref": "04331ccc-fb77-427d-b49d-5109b41edc7f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "92620e23-517e-4a28-9e7e-148c1fc4e676"
        },
        "item": {
          "id": "d60427f8-8f91-41dd-a876-d630a6603444",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bab02995-f523-4061-9a60-9a6c618a8d98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926f323f-7a15-4de3-a2c2-0d4a8a39a851",
        "cursor": {
          "ref": "4cfb3c71-02ee-44fb-a2c2-636bac63c8d0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f1175a3-753f-400d-818d-a4f2e59c4226"
        },
        "item": {
          "id": "926f323f-7a15-4de3-a2c2-0d4a8a39a851",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1b400b4b-8134-4156-893f-f8ae37b67a20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926f323f-7a15-4de3-a2c2-0d4a8a39a851",
        "cursor": {
          "ref": "4cfb3c71-02ee-44fb-a2c2-636bac63c8d0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f1175a3-753f-400d-818d-a4f2e59c4226"
        },
        "item": {
          "id": "926f323f-7a15-4de3-a2c2-0d4a8a39a851",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1b400b4b-8134-4156-893f-f8ae37b67a20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbadae6-5ddf-4e1a-a82c-96337551d52e",
        "cursor": {
          "ref": "d5fbd130-7750-4923-826c-8f67ec9edc9e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "22dc8094-9dc6-4508-a903-e06d8c80865a"
        },
        "item": {
          "id": "dcbadae6-5ddf-4e1a-a82c-96337551d52e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d873975a-737f-49af-8cdc-9a0db299424f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbadae6-5ddf-4e1a-a82c-96337551d52e",
        "cursor": {
          "ref": "d5fbd130-7750-4923-826c-8f67ec9edc9e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "22dc8094-9dc6-4508-a903-e06d8c80865a"
        },
        "item": {
          "id": "dcbadae6-5ddf-4e1a-a82c-96337551d52e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d873975a-737f-49af-8cdc-9a0db299424f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e18b7c-ddbc-4752-b3d7-19ae08715b03",
        "cursor": {
          "ref": "8c8f0436-1ec8-4c11-980f-cad1839ef9e7",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3c2be7de-90f3-455e-9ff1-cff1e781e85b"
        },
        "item": {
          "id": "85e18b7c-ddbc-4752-b3d7-19ae08715b03",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6b4e1893-4c38-4424-8270-20d2044f5c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e18b7c-ddbc-4752-b3d7-19ae08715b03",
        "cursor": {
          "ref": "8c8f0436-1ec8-4c11-980f-cad1839ef9e7",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3c2be7de-90f3-455e-9ff1-cff1e781e85b"
        },
        "item": {
          "id": "85e18b7c-ddbc-4752-b3d7-19ae08715b03",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6b4e1893-4c38-4424-8270-20d2044f5c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524d6196-2a63-4110-8859-06864ff0e32f",
        "cursor": {
          "ref": "9c1ed2e2-1309-4c07-a87b-4e4e28656b9e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "32a0fe12-7101-458c-8138-5e8873292374"
        },
        "item": {
          "id": "524d6196-2a63-4110-8859-06864ff0e32f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2c16ec85-7293-4f2e-ae88-6abca08fc98e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524d6196-2a63-4110-8859-06864ff0e32f",
        "cursor": {
          "ref": "9c1ed2e2-1309-4c07-a87b-4e4e28656b9e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "32a0fe12-7101-458c-8138-5e8873292374"
        },
        "item": {
          "id": "524d6196-2a63-4110-8859-06864ff0e32f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2c16ec85-7293-4f2e-ae88-6abca08fc98e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd2c062-9ff0-4bc0-8e5b-0caf176a4099",
        "cursor": {
          "ref": "ccaf9623-1a08-4b2e-963c-d4d0ca278168",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "da65c536-8382-4eaf-b6f2-0f3ef55a1dde"
        },
        "item": {
          "id": "bfd2c062-9ff0-4bc0-8e5b-0caf176a4099",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cd89e3ec-57ef-4818-8e07-0a55ccf7b274",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd2c062-9ff0-4bc0-8e5b-0caf176a4099",
        "cursor": {
          "ref": "ccaf9623-1a08-4b2e-963c-d4d0ca278168",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "da65c536-8382-4eaf-b6f2-0f3ef55a1dde"
        },
        "item": {
          "id": "bfd2c062-9ff0-4bc0-8e5b-0caf176a4099",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cd89e3ec-57ef-4818-8e07-0a55ccf7b274",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ff4931-1be8-454d-a3c8-15f15c9bb5f0",
        "cursor": {
          "ref": "5c8935cc-0758-49f3-878d-d47d566c96e3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c896b299-0476-4bde-abdf-dd807048ff10"
        },
        "item": {
          "id": "87ff4931-1be8-454d-a3c8-15f15c9bb5f0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "43bbd3e0-632f-4267-b03b-878039f69d46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ff4931-1be8-454d-a3c8-15f15c9bb5f0",
        "cursor": {
          "ref": "5c8935cc-0758-49f3-878d-d47d566c96e3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c896b299-0476-4bde-abdf-dd807048ff10"
        },
        "item": {
          "id": "87ff4931-1be8-454d-a3c8-15f15c9bb5f0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "43bbd3e0-632f-4267-b03b-878039f69d46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81948bd-0512-4b42-be0b-e0d9caadc8ca",
        "cursor": {
          "ref": "187aaeae-fd52-4ae9-944b-798c626b3e7a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e716f409-f6e2-4032-8538-60411626e73c"
        },
        "item": {
          "id": "f81948bd-0512-4b42-be0b-e0d9caadc8ca",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7c5c1925-020a-42b9-9580-72068ede9e37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81948bd-0512-4b42-be0b-e0d9caadc8ca",
        "cursor": {
          "ref": "187aaeae-fd52-4ae9-944b-798c626b3e7a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e716f409-f6e2-4032-8538-60411626e73c"
        },
        "item": {
          "id": "f81948bd-0512-4b42-be0b-e0d9caadc8ca",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7c5c1925-020a-42b9-9580-72068ede9e37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43fd808-f611-4c65-8731-e65faa6dded4",
        "cursor": {
          "ref": "4a8f2003-f5de-42f7-8962-e3476aef3763",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b53aa350-86f8-4178-bc86-22e54521edf8"
        },
        "item": {
          "id": "e43fd808-f611-4c65-8731-e65faa6dded4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2341f8d8-25db-4639-ba38-897d454b07ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43fd808-f611-4c65-8731-e65faa6dded4",
        "cursor": {
          "ref": "4a8f2003-f5de-42f7-8962-e3476aef3763",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b53aa350-86f8-4178-bc86-22e54521edf8"
        },
        "item": {
          "id": "e43fd808-f611-4c65-8731-e65faa6dded4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2341f8d8-25db-4639-ba38-897d454b07ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08dcee4-27c6-41da-a126-f3dc5671d4e7",
        "cursor": {
          "ref": "21f53073-da43-42ad-b0f1-c637fb71e2a7",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b230b40e-16ff-4a92-84d2-26006e1b5570"
        },
        "item": {
          "id": "a08dcee4-27c6-41da-a126-f3dc5671d4e7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7cc7bc21-8b3c-46e8-a91a-b5813d7a1dd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08dcee4-27c6-41da-a126-f3dc5671d4e7",
        "cursor": {
          "ref": "21f53073-da43-42ad-b0f1-c637fb71e2a7",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b230b40e-16ff-4a92-84d2-26006e1b5570"
        },
        "item": {
          "id": "a08dcee4-27c6-41da-a126-f3dc5671d4e7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7cc7bc21-8b3c-46e8-a91a-b5813d7a1dd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b5bfec-2df8-4d12-99ba-c2cbdcf838b4",
        "cursor": {
          "ref": "f656e0f7-2df5-4e25-9bb4-e236d9e5ec6b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e8c56b1d-7133-4fff-98ef-3daa03a4e8c5"
        },
        "item": {
          "id": "78b5bfec-2df8-4d12-99ba-c2cbdcf838b4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "628d034e-70b0-4ecb-98f0-8fdab9c9cd2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b5bfec-2df8-4d12-99ba-c2cbdcf838b4",
        "cursor": {
          "ref": "f656e0f7-2df5-4e25-9bb4-e236d9e5ec6b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e8c56b1d-7133-4fff-98ef-3daa03a4e8c5"
        },
        "item": {
          "id": "78b5bfec-2df8-4d12-99ba-c2cbdcf838b4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "628d034e-70b0-4ecb-98f0-8fdab9c9cd2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3add1a94-b81e-45e7-8d0f-c57be381626b",
        "cursor": {
          "ref": "a957b569-906a-4e16-bae3-d8010b063a86",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c63947d5-2162-4ebb-8323-034b8fe39171"
        },
        "item": {
          "id": "3add1a94-b81e-45e7-8d0f-c57be381626b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "79818e38-b39d-4d53-8c13-5b58dc9ddb00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3add1a94-b81e-45e7-8d0f-c57be381626b",
        "cursor": {
          "ref": "a957b569-906a-4e16-bae3-d8010b063a86",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c63947d5-2162-4ebb-8323-034b8fe39171"
        },
        "item": {
          "id": "3add1a94-b81e-45e7-8d0f-c57be381626b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "79818e38-b39d-4d53-8c13-5b58dc9ddb00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdaf6a3d-df6a-4734-a352-eee9d7613d6d",
        "cursor": {
          "ref": "692cbd9e-d6f8-4baa-9780-9a9adcfc50af",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9e23eff4-07bd-4d78-9039-4330292d1b8c"
        },
        "item": {
          "id": "fdaf6a3d-df6a-4734-a352-eee9d7613d6d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f0ab2aee-04d7-4252-80d0-17431da0a876",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdaf6a3d-df6a-4734-a352-eee9d7613d6d",
        "cursor": {
          "ref": "692cbd9e-d6f8-4baa-9780-9a9adcfc50af",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9e23eff4-07bd-4d78-9039-4330292d1b8c"
        },
        "item": {
          "id": "fdaf6a3d-df6a-4734-a352-eee9d7613d6d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f0ab2aee-04d7-4252-80d0-17431da0a876",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2348d99e-fb9e-4f43-a958-096a89665d41",
        "cursor": {
          "ref": "a49992e4-466a-4055-82f7-c881ac434894",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "568bc233-d860-4008-b26f-52d047f1d3d4"
        },
        "item": {
          "id": "2348d99e-fb9e-4f43-a958-096a89665d41",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3197e51d-a192-4a37-8e6c-604fd2252bce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2348d99e-fb9e-4f43-a958-096a89665d41",
        "cursor": {
          "ref": "a49992e4-466a-4055-82f7-c881ac434894",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "568bc233-d860-4008-b26f-52d047f1d3d4"
        },
        "item": {
          "id": "2348d99e-fb9e-4f43-a958-096a89665d41",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3197e51d-a192-4a37-8e6c-604fd2252bce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3656b24-3b81-4487-b2bd-5f4032e2daa4",
        "cursor": {
          "ref": "566dfcd1-a334-40b7-804c-e68f01295028",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5752fb3c-f1b5-4642-9f80-14aef5c4e682"
        },
        "item": {
          "id": "c3656b24-3b81-4487-b2bd-5f4032e2daa4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e1fdb28b-7d54-4cc6-b205-1df248018808",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3656b24-3b81-4487-b2bd-5f4032e2daa4",
        "cursor": {
          "ref": "566dfcd1-a334-40b7-804c-e68f01295028",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5752fb3c-f1b5-4642-9f80-14aef5c4e682"
        },
        "item": {
          "id": "c3656b24-3b81-4487-b2bd-5f4032e2daa4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e1fdb28b-7d54-4cc6-b205-1df248018808",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77e22a1-6d98-4873-8283-20478836914c",
        "cursor": {
          "ref": "26ff573d-4c75-4d30-aaf8-d663741c98c3",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6311baf8-6b96-46fa-b4bc-def7a03b041b"
        },
        "item": {
          "id": "e77e22a1-6d98-4873-8283-20478836914c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c2dbba27-4b96-40d6-84e2-121513b27be9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77e22a1-6d98-4873-8283-20478836914c",
        "cursor": {
          "ref": "26ff573d-4c75-4d30-aaf8-d663741c98c3",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6311baf8-6b96-46fa-b4bc-def7a03b041b"
        },
        "item": {
          "id": "e77e22a1-6d98-4873-8283-20478836914c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c2dbba27-4b96-40d6-84e2-121513b27be9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2209e41b-7d61-4d4b-a75e-30f53cf0e37c",
        "cursor": {
          "ref": "0490beff-20f6-45fb-b305-ac3184e46607",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fa84d66f-dc85-49b9-83d9-4d634ba11973"
        },
        "item": {
          "id": "2209e41b-7d61-4d4b-a75e-30f53cf0e37c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "512fb454-a2d7-40b0-9a49-dcdadc40827d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2209e41b-7d61-4d4b-a75e-30f53cf0e37c",
        "cursor": {
          "ref": "0490beff-20f6-45fb-b305-ac3184e46607",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fa84d66f-dc85-49b9-83d9-4d634ba11973"
        },
        "item": {
          "id": "2209e41b-7d61-4d4b-a75e-30f53cf0e37c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "512fb454-a2d7-40b0-9a49-dcdadc40827d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9c5d76-17f8-4f00-a0d1-651ec3ec25f6",
        "cursor": {
          "ref": "26710009-711d-428a-b4fa-05bffe1fc36c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0f348340-1fc0-41dc-93da-39127b014bc8"
        },
        "item": {
          "id": "ca9c5d76-17f8-4f00-a0d1-651ec3ec25f6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ba115d29-34d0-4a4a-95ff-6e5ef70628be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9c5d76-17f8-4f00-a0d1-651ec3ec25f6",
        "cursor": {
          "ref": "26710009-711d-428a-b4fa-05bffe1fc36c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0f348340-1fc0-41dc-93da-39127b014bc8"
        },
        "item": {
          "id": "ca9c5d76-17f8-4f00-a0d1-651ec3ec25f6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ba115d29-34d0-4a4a-95ff-6e5ef70628be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96401d0-61b0-4b62-9d76-784081de41a2",
        "cursor": {
          "ref": "dabc9daa-0412-48f8-bfd6-473c38ced7e0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "119f30aa-dcb4-4335-8bab-7ac86febecf4"
        },
        "item": {
          "id": "f96401d0-61b0-4b62-9d76-784081de41a2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2a2837b6-3bbf-4c4f-b798-39add9a5077c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96401d0-61b0-4b62-9d76-784081de41a2",
        "cursor": {
          "ref": "dabc9daa-0412-48f8-bfd6-473c38ced7e0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "119f30aa-dcb4-4335-8bab-7ac86febecf4"
        },
        "item": {
          "id": "f96401d0-61b0-4b62-9d76-784081de41a2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2a2837b6-3bbf-4c4f-b798-39add9a5077c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c5a62e-9aa4-439a-afe0-6e9b58febee2",
        "cursor": {
          "ref": "0e472423-3e41-47e2-9618-0f2690bdb648",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2a310257-f930-4fa4-95dd-9096860b0261"
        },
        "item": {
          "id": "b3c5a62e-9aa4-439a-afe0-6e9b58febee2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7238ae10-27c8-46ab-9ca7-8e07bf5ed1e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c5a62e-9aa4-439a-afe0-6e9b58febee2",
        "cursor": {
          "ref": "0e472423-3e41-47e2-9618-0f2690bdb648",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2a310257-f930-4fa4-95dd-9096860b0261"
        },
        "item": {
          "id": "b3c5a62e-9aa4-439a-afe0-6e9b58febee2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7238ae10-27c8-46ab-9ca7-8e07bf5ed1e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa12f6e-fba1-4a15-8546-8944b0e093b8",
        "cursor": {
          "ref": "f2142c17-eba1-4de0-9c72-d3f9c86bf838",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "324adb0a-ffcb-4dcc-803b-918d5713b522"
        },
        "item": {
          "id": "5fa12f6e-fba1-4a15-8546-8944b0e093b8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e00dd0cc-c0e0-49a6-851c-2aecaacbe648",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa12f6e-fba1-4a15-8546-8944b0e093b8",
        "cursor": {
          "ref": "f2142c17-eba1-4de0-9c72-d3f9c86bf838",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "324adb0a-ffcb-4dcc-803b-918d5713b522"
        },
        "item": {
          "id": "5fa12f6e-fba1-4a15-8546-8944b0e093b8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e00dd0cc-c0e0-49a6-851c-2aecaacbe648",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620ea203-21bb-4858-8092-812a6abe6d0d",
        "cursor": {
          "ref": "9acda57b-37ba-4be0-bb8f-92db22de30d3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "49010658-601c-44ef-a852-ac0ad2a718b3"
        },
        "item": {
          "id": "620ea203-21bb-4858-8092-812a6abe6d0d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a9994e76-e3ae-435d-a827-5bedae3ccdd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620ea203-21bb-4858-8092-812a6abe6d0d",
        "cursor": {
          "ref": "9acda57b-37ba-4be0-bb8f-92db22de30d3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "49010658-601c-44ef-a852-ac0ad2a718b3"
        },
        "item": {
          "id": "620ea203-21bb-4858-8092-812a6abe6d0d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a9994e76-e3ae-435d-a827-5bedae3ccdd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd48480-5dd7-43e4-b09c-4ae55984b106",
        "cursor": {
          "ref": "9c040ae0-cef3-4d6d-95a2-73f1ff2e1d2e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3cacc5e0-64e7-4cf0-b6cc-e93560aa8a1e"
        },
        "item": {
          "id": "dfd48480-5dd7-43e4-b09c-4ae55984b106",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f4b67c60-7815-4547-a6c4-87656b910907",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd48480-5dd7-43e4-b09c-4ae55984b106",
        "cursor": {
          "ref": "9c040ae0-cef3-4d6d-95a2-73f1ff2e1d2e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3cacc5e0-64e7-4cf0-b6cc-e93560aa8a1e"
        },
        "item": {
          "id": "dfd48480-5dd7-43e4-b09c-4ae55984b106",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f4b67c60-7815-4547-a6c4-87656b910907",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174d30d4-a964-405d-af07-6db9e332b727",
        "cursor": {
          "ref": "b408df05-ac42-42b5-a3d5-ad40ddc53933",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "db922c4d-6ce3-4991-8d89-b8d97950369a"
        },
        "item": {
          "id": "174d30d4-a964-405d-af07-6db9e332b727",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b0e386b3-717d-4169-bfac-dabd71faf47d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174d30d4-a964-405d-af07-6db9e332b727",
        "cursor": {
          "ref": "b408df05-ac42-42b5-a3d5-ad40ddc53933",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "db922c4d-6ce3-4991-8d89-b8d97950369a"
        },
        "item": {
          "id": "174d30d4-a964-405d-af07-6db9e332b727",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b0e386b3-717d-4169-bfac-dabd71faf47d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad8b8a3-41df-4b42-a2f6-64c43bd478b6",
        "cursor": {
          "ref": "388444c8-b21f-483d-8926-162edb71be8d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "964b052b-1f55-48e4-8e9c-f50de2492085"
        },
        "item": {
          "id": "bad8b8a3-41df-4b42-a2f6-64c43bd478b6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "00d764b6-41c7-49c3-b4a7-67e2a1ab4f04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad8b8a3-41df-4b42-a2f6-64c43bd478b6",
        "cursor": {
          "ref": "388444c8-b21f-483d-8926-162edb71be8d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "964b052b-1f55-48e4-8e9c-f50de2492085"
        },
        "item": {
          "id": "bad8b8a3-41df-4b42-a2f6-64c43bd478b6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "00d764b6-41c7-49c3-b4a7-67e2a1ab4f04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cd4eb8-de8e-4f68-ab4b-690a0e50447f",
        "cursor": {
          "ref": "f3915e26-aa07-4057-b074-2046137c6377",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f3c80d26-757f-4b23-a357-0e411cb06cff"
        },
        "item": {
          "id": "a1cd4eb8-de8e-4f68-ab4b-690a0e50447f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0b2d9186-b17f-4a8e-a913-27c93d725bad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cd4eb8-de8e-4f68-ab4b-690a0e50447f",
        "cursor": {
          "ref": "f3915e26-aa07-4057-b074-2046137c6377",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f3c80d26-757f-4b23-a357-0e411cb06cff"
        },
        "item": {
          "id": "a1cd4eb8-de8e-4f68-ab4b-690a0e50447f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0b2d9186-b17f-4a8e-a913-27c93d725bad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934fc225-a42d-42d5-8262-b9fbe895841f",
        "cursor": {
          "ref": "c2afd6a6-d43d-4b94-9fc2-f1ce1f864555",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9f6f4b29-e32c-4d9e-b5a5-4b2d91111b04"
        },
        "item": {
          "id": "934fc225-a42d-42d5-8262-b9fbe895841f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a1c0445f-528a-429c-88f1-91a38a8d06a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934fc225-a42d-42d5-8262-b9fbe895841f",
        "cursor": {
          "ref": "c2afd6a6-d43d-4b94-9fc2-f1ce1f864555",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9f6f4b29-e32c-4d9e-b5a5-4b2d91111b04"
        },
        "item": {
          "id": "934fc225-a42d-42d5-8262-b9fbe895841f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a1c0445f-528a-429c-88f1-91a38a8d06a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cbefa8-9d7c-4e2e-a501-592725e09459",
        "cursor": {
          "ref": "9f056132-9cf0-4a7f-a7bb-3da589b3c990",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b6ded416-5b7f-47c9-8164-2471022fd9dc"
        },
        "item": {
          "id": "a5cbefa8-9d7c-4e2e-a501-592725e09459",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d7cfa19d-6d71-474d-a45f-6662e80b7b75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cbefa8-9d7c-4e2e-a501-592725e09459",
        "cursor": {
          "ref": "9f056132-9cf0-4a7f-a7bb-3da589b3c990",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b6ded416-5b7f-47c9-8164-2471022fd9dc"
        },
        "item": {
          "id": "a5cbefa8-9d7c-4e2e-a501-592725e09459",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d7cfa19d-6d71-474d-a45f-6662e80b7b75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b31d521-1196-4108-9f4f-e3bf1976dbd7",
        "cursor": {
          "ref": "3c11057d-0667-425f-a6f6-0389dc913b8f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b85ea65e-1df0-404e-b2fd-ac16e2a16202"
        },
        "item": {
          "id": "2b31d521-1196-4108-9f4f-e3bf1976dbd7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ca20c671-4065-48e8-985d-5be60230a74e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b31d521-1196-4108-9f4f-e3bf1976dbd7",
        "cursor": {
          "ref": "3c11057d-0667-425f-a6f6-0389dc913b8f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b85ea65e-1df0-404e-b2fd-ac16e2a16202"
        },
        "item": {
          "id": "2b31d521-1196-4108-9f4f-e3bf1976dbd7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ca20c671-4065-48e8-985d-5be60230a74e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf21ba3c-010a-4c5f-a050-3484192668ce",
        "cursor": {
          "ref": "8335de92-cdab-408b-99ea-ab289e276a23",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d0d17063-4aab-46b0-ae14-e80dfa5cd5a8"
        },
        "item": {
          "id": "cf21ba3c-010a-4c5f-a050-3484192668ce",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ab50831d-5853-4077-8877-b7a77ae81e0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf21ba3c-010a-4c5f-a050-3484192668ce",
        "cursor": {
          "ref": "8335de92-cdab-408b-99ea-ab289e276a23",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d0d17063-4aab-46b0-ae14-e80dfa5cd5a8"
        },
        "item": {
          "id": "cf21ba3c-010a-4c5f-a050-3484192668ce",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ab50831d-5853-4077-8877-b7a77ae81e0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8bc026-383b-4979-ac85-d7b9496f4c1a",
        "cursor": {
          "ref": "9ccc709a-6de5-4ef2-82df-1b68f4fae459",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c8fe1d21-989d-4c92-aabb-fa944014fcaf"
        },
        "item": {
          "id": "df8bc026-383b-4979-ac85-d7b9496f4c1a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c81f62cd-fc5a-4564-af21-09ba284bae26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8bc026-383b-4979-ac85-d7b9496f4c1a",
        "cursor": {
          "ref": "9ccc709a-6de5-4ef2-82df-1b68f4fae459",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c8fe1d21-989d-4c92-aabb-fa944014fcaf"
        },
        "item": {
          "id": "df8bc026-383b-4979-ac85-d7b9496f4c1a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c81f62cd-fc5a-4564-af21-09ba284bae26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352f15a8-e659-4a62-8736-a0f21ee84732",
        "cursor": {
          "ref": "f2d2ebb9-7663-48d8-9e32-ec1e000623f1",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f997306e-85ca-421d-845b-c797286f222e"
        },
        "item": {
          "id": "352f15a8-e659-4a62-8736-a0f21ee84732",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "80c0d824-9809-4fad-958e-62a7bd11d338",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352f15a8-e659-4a62-8736-a0f21ee84732",
        "cursor": {
          "ref": "f2d2ebb9-7663-48d8-9e32-ec1e000623f1",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f997306e-85ca-421d-845b-c797286f222e"
        },
        "item": {
          "id": "352f15a8-e659-4a62-8736-a0f21ee84732",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "80c0d824-9809-4fad-958e-62a7bd11d338",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6675b327-0734-404d-a767-3ceaef12269a",
        "cursor": {
          "ref": "3b15f6c1-1df2-4d88-9cb6-3b851a07c687",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "31c175cd-fbbd-473c-b831-ae6f5fe47b3a"
        },
        "item": {
          "id": "6675b327-0734-404d-a767-3ceaef12269a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "05646cf2-3259-4528-9778-c4615c224c54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6675b327-0734-404d-a767-3ceaef12269a",
        "cursor": {
          "ref": "3b15f6c1-1df2-4d88-9cb6-3b851a07c687",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "31c175cd-fbbd-473c-b831-ae6f5fe47b3a"
        },
        "item": {
          "id": "6675b327-0734-404d-a767-3ceaef12269a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "05646cf2-3259-4528-9778-c4615c224c54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c22f6d-8fec-4308-88ae-f1abf0d11673",
        "cursor": {
          "ref": "59e9b766-f026-4417-90d2-45ad46e2f989",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8db7ff74-7ca5-4430-8b03-e64db3eee5d3"
        },
        "item": {
          "id": "b8c22f6d-8fec-4308-88ae-f1abf0d11673",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d1104d60-236d-4d5c-a5f2-0a3a40382732",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c22f6d-8fec-4308-88ae-f1abf0d11673",
        "cursor": {
          "ref": "59e9b766-f026-4417-90d2-45ad46e2f989",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8db7ff74-7ca5-4430-8b03-e64db3eee5d3"
        },
        "item": {
          "id": "b8c22f6d-8fec-4308-88ae-f1abf0d11673",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d1104d60-236d-4d5c-a5f2-0a3a40382732",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a521af3f-1a19-4ca3-a6af-dd7f2163190e",
        "cursor": {
          "ref": "17390848-3a10-43dc-ae33-6a8e696ef2dc",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d3a82418-981e-4c58-b491-6fd4706173bf"
        },
        "item": {
          "id": "a521af3f-1a19-4ca3-a6af-dd7f2163190e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1cac4388-7c4a-4197-8d06-226347bee040",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a521af3f-1a19-4ca3-a6af-dd7f2163190e",
        "cursor": {
          "ref": "17390848-3a10-43dc-ae33-6a8e696ef2dc",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d3a82418-981e-4c58-b491-6fd4706173bf"
        },
        "item": {
          "id": "a521af3f-1a19-4ca3-a6af-dd7f2163190e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1cac4388-7c4a-4197-8d06-226347bee040",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fddf805-69fc-4654-8c1f-8ee6694d89d3",
        "cursor": {
          "ref": "b968b327-1ac6-4a9b-b870-5030cc481d16",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ef85f167-db86-40c3-bacd-02d462334e22"
        },
        "item": {
          "id": "8fddf805-69fc-4654-8c1f-8ee6694d89d3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "daa285a6-5573-4910-893a-97cd4cd78e30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fddf805-69fc-4654-8c1f-8ee6694d89d3",
        "cursor": {
          "ref": "b968b327-1ac6-4a9b-b870-5030cc481d16",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ef85f167-db86-40c3-bacd-02d462334e22"
        },
        "item": {
          "id": "8fddf805-69fc-4654-8c1f-8ee6694d89d3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "daa285a6-5573-4910-893a-97cd4cd78e30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab7243e-6414-4b3b-a191-685e9717ef94",
        "cursor": {
          "ref": "a61f40ef-87b2-4165-9866-f0614ea79238",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1a99740c-0a0b-4297-bf35-5a5de63add9f"
        },
        "item": {
          "id": "dab7243e-6414-4b3b-a191-685e9717ef94",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bc568abc-62ef-4e79-bb79-22c8b6da326d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab7243e-6414-4b3b-a191-685e9717ef94",
        "cursor": {
          "ref": "a61f40ef-87b2-4165-9866-f0614ea79238",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1a99740c-0a0b-4297-bf35-5a5de63add9f"
        },
        "item": {
          "id": "dab7243e-6414-4b3b-a191-685e9717ef94",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bc568abc-62ef-4e79-bb79-22c8b6da326d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ee7b93-af97-47e3-8639-d4381adce26c",
        "cursor": {
          "ref": "76ddbcdf-308c-48a1-84b2-d363a39762b7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "abb358a1-0a23-426d-8ced-665e8ed77c71"
        },
        "item": {
          "id": "b4ee7b93-af97-47e3-8639-d4381adce26c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7def8814-32e9-4c31-b672-2f8834b232e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ee7b93-af97-47e3-8639-d4381adce26c",
        "cursor": {
          "ref": "76ddbcdf-308c-48a1-84b2-d363a39762b7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "abb358a1-0a23-426d-8ced-665e8ed77c71"
        },
        "item": {
          "id": "b4ee7b93-af97-47e3-8639-d4381adce26c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7def8814-32e9-4c31-b672-2f8834b232e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8223ce26-4e8f-4aa3-bb05-a035e901ce38",
        "cursor": {
          "ref": "720ad568-7aeb-4592-bb89-6fada47d4eb7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8773ff1d-9393-4f23-bc50-5acd8d0b795d"
        },
        "item": {
          "id": "8223ce26-4e8f-4aa3-bb05-a035e901ce38",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "aa3fc77b-0b8a-4cf5-bda8-5865f82c771d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8223ce26-4e8f-4aa3-bb05-a035e901ce38",
        "cursor": {
          "ref": "720ad568-7aeb-4592-bb89-6fada47d4eb7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8773ff1d-9393-4f23-bc50-5acd8d0b795d"
        },
        "item": {
          "id": "8223ce26-4e8f-4aa3-bb05-a035e901ce38",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "aa3fc77b-0b8a-4cf5-bda8-5865f82c771d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d016aa4-6849-46e6-b946-90701ba47f6b",
        "cursor": {
          "ref": "5cd01471-4feb-4bfc-85fa-bf881755d602",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3606f478-a0e0-4379-805f-c9fe84eee709"
        },
        "item": {
          "id": "1d016aa4-6849-46e6-b946-90701ba47f6b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4b985868-ba0e-4b2f-a184-bba6ec18fcc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d016aa4-6849-46e6-b946-90701ba47f6b",
        "cursor": {
          "ref": "5cd01471-4feb-4bfc-85fa-bf881755d602",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3606f478-a0e0-4379-805f-c9fe84eee709"
        },
        "item": {
          "id": "1d016aa4-6849-46e6-b946-90701ba47f6b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4b985868-ba0e-4b2f-a184-bba6ec18fcc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9a5deb-7c3f-4213-bc22-bbd1288c6afd",
        "cursor": {
          "ref": "8b0dfc1c-53d8-4d4b-addd-7aafd52a7928",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a053f16d-985f-4ecf-b936-2358e462f3fc"
        },
        "item": {
          "id": "5e9a5deb-7c3f-4213-bc22-bbd1288c6afd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "de41850b-dce3-476d-bac6-a078d0e197a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9a5deb-7c3f-4213-bc22-bbd1288c6afd",
        "cursor": {
          "ref": "8b0dfc1c-53d8-4d4b-addd-7aafd52a7928",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a053f16d-985f-4ecf-b936-2358e462f3fc"
        },
        "item": {
          "id": "5e9a5deb-7c3f-4213-bc22-bbd1288c6afd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "de41850b-dce3-476d-bac6-a078d0e197a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71c46b4-0a0e-44c3-a0a3-9bab751d181a",
        "cursor": {
          "ref": "b0e977b2-a6e2-402e-8d19-a65c3630dd62",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "34ee2d77-9561-4ee9-b24f-44c43ce06616"
        },
        "item": {
          "id": "b71c46b4-0a0e-44c3-a0a3-9bab751d181a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "931c647d-5792-4d23-a433-9c33041413b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71c46b4-0a0e-44c3-a0a3-9bab751d181a",
        "cursor": {
          "ref": "b0e977b2-a6e2-402e-8d19-a65c3630dd62",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "34ee2d77-9561-4ee9-b24f-44c43ce06616"
        },
        "item": {
          "id": "b71c46b4-0a0e-44c3-a0a3-9bab751d181a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "931c647d-5792-4d23-a433-9c33041413b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311060cc-9334-40cc-abaa-371f628e6d96",
        "cursor": {
          "ref": "fde2ae3a-a509-4a4d-8bbc-0a46830c5b3a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ce956e5e-e0cc-415b-a0f0-9c90a39d4551"
        },
        "item": {
          "id": "311060cc-9334-40cc-abaa-371f628e6d96",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e89c75a8-4f50-4380-842c-44503ba26583",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311060cc-9334-40cc-abaa-371f628e6d96",
        "cursor": {
          "ref": "fde2ae3a-a509-4a4d-8bbc-0a46830c5b3a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ce956e5e-e0cc-415b-a0f0-9c90a39d4551"
        },
        "item": {
          "id": "311060cc-9334-40cc-abaa-371f628e6d96",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e89c75a8-4f50-4380-842c-44503ba26583",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4419da-cb35-4b9d-8a76-3236ee4674cb",
        "cursor": {
          "ref": "cda56f34-e5ea-4efd-aed3-64c64f2ef3a6",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f45e1733-da72-4ff3-a8b7-7a48564a2639"
        },
        "item": {
          "id": "0f4419da-cb35-4b9d-8a76-3236ee4674cb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d891e28e-dd4b-4e24-a0c3-9a53097b736e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4419da-cb35-4b9d-8a76-3236ee4674cb",
        "cursor": {
          "ref": "cda56f34-e5ea-4efd-aed3-64c64f2ef3a6",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f45e1733-da72-4ff3-a8b7-7a48564a2639"
        },
        "item": {
          "id": "0f4419da-cb35-4b9d-8a76-3236ee4674cb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d891e28e-dd4b-4e24-a0c3-9a53097b736e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb7c846-3ceb-42c3-89dd-961b25e0375a",
        "cursor": {
          "ref": "b0800b37-f584-4cb3-8ba0-e809b04b0a6d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0c2a1e77-538f-4512-abc6-11018229e37e"
        },
        "item": {
          "id": "bdb7c846-3ceb-42c3-89dd-961b25e0375a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a4d1f8ec-ea1c-4141-abf5-3aff5723f3c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb7c846-3ceb-42c3-89dd-961b25e0375a",
        "cursor": {
          "ref": "b0800b37-f584-4cb3-8ba0-e809b04b0a6d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0c2a1e77-538f-4512-abc6-11018229e37e"
        },
        "item": {
          "id": "bdb7c846-3ceb-42c3-89dd-961b25e0375a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a4d1f8ec-ea1c-4141-abf5-3aff5723f3c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200a480e-5ca2-4663-a24f-de17fd43a0da",
        "cursor": {
          "ref": "a8703d80-bdfb-4509-8026-44b30ffa42e4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aac77444-e6f8-429b-9164-f0dd6e677a80"
        },
        "item": {
          "id": "200a480e-5ca2-4663-a24f-de17fd43a0da",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b8523fc2-4de4-4567-9ace-f6adb8afa759",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200a480e-5ca2-4663-a24f-de17fd43a0da",
        "cursor": {
          "ref": "a8703d80-bdfb-4509-8026-44b30ffa42e4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aac77444-e6f8-429b-9164-f0dd6e677a80"
        },
        "item": {
          "id": "200a480e-5ca2-4663-a24f-de17fd43a0da",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b8523fc2-4de4-4567-9ace-f6adb8afa759",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33541c4-b70b-4606-93aa-bb723e94a2a5",
        "cursor": {
          "ref": "20e182d2-2ff1-434c-a335-acae8d250f6b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7e90994d-35b4-4a73-9edc-b7fcb73ea5b2"
        },
        "item": {
          "id": "f33541c4-b70b-4606-93aa-bb723e94a2a5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e4703d3f-b11b-4115-b42c-e17931fecf19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33541c4-b70b-4606-93aa-bb723e94a2a5",
        "cursor": {
          "ref": "20e182d2-2ff1-434c-a335-acae8d250f6b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7e90994d-35b4-4a73-9edc-b7fcb73ea5b2"
        },
        "item": {
          "id": "f33541c4-b70b-4606-93aa-bb723e94a2a5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e4703d3f-b11b-4115-b42c-e17931fecf19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef08ac3-95b2-4962-8462-3d0943724746",
        "cursor": {
          "ref": "41b776ad-d74b-4580-89a7-5bee620fd835",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8689cede-3c23-499e-be68-0c4325818085"
        },
        "item": {
          "id": "3ef08ac3-95b2-4962-8462-3d0943724746",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a54d8b7a-01e8-4f92-bfbb-af71030db4fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef08ac3-95b2-4962-8462-3d0943724746",
        "cursor": {
          "ref": "41b776ad-d74b-4580-89a7-5bee620fd835",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8689cede-3c23-499e-be68-0c4325818085"
        },
        "item": {
          "id": "3ef08ac3-95b2-4962-8462-3d0943724746",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a54d8b7a-01e8-4f92-bfbb-af71030db4fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ca47ff-f07f-4a6f-99c4-69f354a18e6e",
        "cursor": {
          "ref": "259b0f22-1d32-4d6a-973e-dd03b4027924",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f4e84980-af7f-4026-b764-572fbf231b47"
        },
        "item": {
          "id": "d1ca47ff-f07f-4a6f-99c4-69f354a18e6e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "efad759f-c5d2-45c7-a689-6ff6567fe2c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ca47ff-f07f-4a6f-99c4-69f354a18e6e",
        "cursor": {
          "ref": "259b0f22-1d32-4d6a-973e-dd03b4027924",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f4e84980-af7f-4026-b764-572fbf231b47"
        },
        "item": {
          "id": "d1ca47ff-f07f-4a6f-99c4-69f354a18e6e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "efad759f-c5d2-45c7-a689-6ff6567fe2c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517188cc-019c-4ba7-93e3-5bf182f6ebfd",
        "cursor": {
          "ref": "dfb8ce87-66c7-4d26-a456-070321a216a8",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ad488217-ae61-4370-817a-502b2a51645e"
        },
        "item": {
          "id": "517188cc-019c-4ba7-93e3-5bf182f6ebfd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2204aaab-eea4-473e-9008-6ae795619d9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517188cc-019c-4ba7-93e3-5bf182f6ebfd",
        "cursor": {
          "ref": "dfb8ce87-66c7-4d26-a456-070321a216a8",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ad488217-ae61-4370-817a-502b2a51645e"
        },
        "item": {
          "id": "517188cc-019c-4ba7-93e3-5bf182f6ebfd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2204aaab-eea4-473e-9008-6ae795619d9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222d4a08-041d-4416-acb1-58f3efa414bc",
        "cursor": {
          "ref": "2a1f0500-654a-4370-b191-12e00dcfe9f6",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "aa3bb419-fa21-4981-a8d3-60a82c565010"
        },
        "item": {
          "id": "222d4a08-041d-4416-acb1-58f3efa414bc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "bb0c5df0-b97c-477a-9d27-d8650b978014",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222d4a08-041d-4416-acb1-58f3efa414bc",
        "cursor": {
          "ref": "2a1f0500-654a-4370-b191-12e00dcfe9f6",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "aa3bb419-fa21-4981-a8d3-60a82c565010"
        },
        "item": {
          "id": "222d4a08-041d-4416-acb1-58f3efa414bc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "bb0c5df0-b97c-477a-9d27-d8650b978014",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512b6bc6-0f40-4f1f-acac-88bb5a4a71be",
        "cursor": {
          "ref": "55b0bdf0-81a1-4749-ac2e-3beff286acea",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "13b7c447-15f5-47c5-baaa-f1f4bfb1e752"
        },
        "item": {
          "id": "512b6bc6-0f40-4f1f-acac-88bb5a4a71be",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8dfc6663-c1ac-4a99-9d78-bc8e92b11718",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512b6bc6-0f40-4f1f-acac-88bb5a4a71be",
        "cursor": {
          "ref": "55b0bdf0-81a1-4749-ac2e-3beff286acea",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "13b7c447-15f5-47c5-baaa-f1f4bfb1e752"
        },
        "item": {
          "id": "512b6bc6-0f40-4f1f-acac-88bb5a4a71be",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8dfc6663-c1ac-4a99-9d78-bc8e92b11718",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d72fac-f204-4039-b5c7-4af2f7daa963",
        "cursor": {
          "ref": "c9213e04-64d5-46d6-a01f-4bfdccbec8fb",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9ee37fd0-32a5-4f91-a746-cb5c32cc9c04"
        },
        "item": {
          "id": "49d72fac-f204-4039-b5c7-4af2f7daa963",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "420dbff7-a6bf-4e83-87a2-b538f11181cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d72fac-f204-4039-b5c7-4af2f7daa963",
        "cursor": {
          "ref": "c9213e04-64d5-46d6-a01f-4bfdccbec8fb",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9ee37fd0-32a5-4f91-a746-cb5c32cc9c04"
        },
        "item": {
          "id": "49d72fac-f204-4039-b5c7-4af2f7daa963",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "420dbff7-a6bf-4e83-87a2-b538f11181cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7c62ee-08d8-407a-9ead-b1951e9c9978",
        "cursor": {
          "ref": "643400ff-001f-4629-b1be-fa89b8ba2cb3",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b4cc74b1-03b3-48fe-93f2-137ef4722826"
        },
        "item": {
          "id": "ea7c62ee-08d8-407a-9ead-b1951e9c9978",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c9a472a3-b072-488a-badb-70a846c99885",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7c62ee-08d8-407a-9ead-b1951e9c9978",
        "cursor": {
          "ref": "643400ff-001f-4629-b1be-fa89b8ba2cb3",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b4cc74b1-03b3-48fe-93f2-137ef4722826"
        },
        "item": {
          "id": "ea7c62ee-08d8-407a-9ead-b1951e9c9978",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c9a472a3-b072-488a-badb-70a846c99885",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2d4311-45ca-4df5-8298-3b8159ad9943",
        "cursor": {
          "ref": "698483a2-854b-4150-8244-cb7fbbaf1a61",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7036d3b0-5956-4fe3-b0b4-d4f59c650e8e"
        },
        "item": {
          "id": "9f2d4311-45ca-4df5-8298-3b8159ad9943",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2bf758b4-fa35-4c8d-9bcb-0fdea648f428",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2d4311-45ca-4df5-8298-3b8159ad9943",
        "cursor": {
          "ref": "698483a2-854b-4150-8244-cb7fbbaf1a61",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7036d3b0-5956-4fe3-b0b4-d4f59c650e8e"
        },
        "item": {
          "id": "9f2d4311-45ca-4df5-8298-3b8159ad9943",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2bf758b4-fa35-4c8d-9bcb-0fdea648f428",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b07f74-4c05-4a4a-952b-eccbad1ace95",
        "cursor": {
          "ref": "0d5a2254-d79a-4167-a49d-4e30165b4f54",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "53db31c8-4095-4bde-a2f8-4fc2fd49005e"
        },
        "item": {
          "id": "63b07f74-4c05-4a4a-952b-eccbad1ace95",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "454e8d21-5b24-4e59-a4c8-00c5433b2c56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 110,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b07f74-4c05-4a4a-952b-eccbad1ace95",
        "cursor": {
          "ref": "0d5a2254-d79a-4167-a49d-4e30165b4f54",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "53db31c8-4095-4bde-a2f8-4fc2fd49005e"
        },
        "item": {
          "id": "63b07f74-4c05-4a4a-952b-eccbad1ace95",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "454e8d21-5b24-4e59-a4c8-00c5433b2c56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 110,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41879c4a-44ca-42a9-a5be-59710e33d5fe",
        "cursor": {
          "ref": "fbe5eecc-00e1-4a88-a936-62a3d2e90f0e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6c2c421f-62cb-41ea-9b45-8bc78e88bda7"
        },
        "item": {
          "id": "41879c4a-44ca-42a9-a5be-59710e33d5fe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ef5bfb65-2ebb-4bf3-960b-13ac7e565123",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41879c4a-44ca-42a9-a5be-59710e33d5fe",
        "cursor": {
          "ref": "fbe5eecc-00e1-4a88-a936-62a3d2e90f0e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6c2c421f-62cb-41ea-9b45-8bc78e88bda7"
        },
        "item": {
          "id": "41879c4a-44ca-42a9-a5be-59710e33d5fe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ef5bfb65-2ebb-4bf3-960b-13ac7e565123",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e86fd1d-6ebd-4257-aad3-9476e19ad9cb",
        "cursor": {
          "ref": "4ae71546-8fab-41b9-8a1f-435809456b0c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d8345972-9af5-4b99-9d1b-1d6670b979b4"
        },
        "item": {
          "id": "2e86fd1d-6ebd-4257-aad3-9476e19ad9cb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3b2d35a7-0534-4e35-8f24-ef9ed67d7420",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e86fd1d-6ebd-4257-aad3-9476e19ad9cb",
        "cursor": {
          "ref": "4ae71546-8fab-41b9-8a1f-435809456b0c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d8345972-9af5-4b99-9d1b-1d6670b979b4"
        },
        "item": {
          "id": "2e86fd1d-6ebd-4257-aad3-9476e19ad9cb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3b2d35a7-0534-4e35-8f24-ef9ed67d7420",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4110559f-67e4-4fef-9817-491d6cce5e45",
        "cursor": {
          "ref": "033a1994-bb9b-4dd6-aa5d-af0ffa04a795",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3d491f2b-10c5-468f-af49-59cc835dd1ab"
        },
        "item": {
          "id": "4110559f-67e4-4fef-9817-491d6cce5e45",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f3756b7c-7c24-4f59-89b9-62f0ef89d26d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4110559f-67e4-4fef-9817-491d6cce5e45",
        "cursor": {
          "ref": "033a1994-bb9b-4dd6-aa5d-af0ffa04a795",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3d491f2b-10c5-468f-af49-59cc835dd1ab"
        },
        "item": {
          "id": "4110559f-67e4-4fef-9817-491d6cce5e45",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f3756b7c-7c24-4f59-89b9-62f0ef89d26d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fee7793-8516-4f44-8903-81938fd2e99b",
        "cursor": {
          "ref": "f322b5e1-91ac-4dea-a484-60700d9f2d97",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a30ddcb7-3cbf-4e21-b15b-38b391b21e43"
        },
        "item": {
          "id": "4fee7793-8516-4f44-8903-81938fd2e99b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "90e2af9f-c13c-4ab2-8109-9f9294bee84d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fee7793-8516-4f44-8903-81938fd2e99b",
        "cursor": {
          "ref": "f322b5e1-91ac-4dea-a484-60700d9f2d97",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a30ddcb7-3cbf-4e21-b15b-38b391b21e43"
        },
        "item": {
          "id": "4fee7793-8516-4f44-8903-81938fd2e99b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "90e2af9f-c13c-4ab2-8109-9f9294bee84d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9375f5b7-e453-4bed-a021-d62b46534d86",
        "cursor": {
          "ref": "f9894e4d-ed63-4b44-ba39-3c64126ae4f8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9dca648d-f4ac-4942-b2de-1e06f5dd080b"
        },
        "item": {
          "id": "9375f5b7-e453-4bed-a021-d62b46534d86",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c48058a6-1b6b-4025-84ef-42a03e1df7de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9375f5b7-e453-4bed-a021-d62b46534d86",
        "cursor": {
          "ref": "f9894e4d-ed63-4b44-ba39-3c64126ae4f8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9dca648d-f4ac-4942-b2de-1e06f5dd080b"
        },
        "item": {
          "id": "9375f5b7-e453-4bed-a021-d62b46534d86",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c48058a6-1b6b-4025-84ef-42a03e1df7de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e85c71c-8ac6-4ee4-a6c9-c0555c47aa2c",
        "cursor": {
          "ref": "9b47e219-f648-4a48-b60d-d14c804db3c3",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ab10bcb4-048a-43c5-9862-54902cc63879"
        },
        "item": {
          "id": "8e85c71c-8ac6-4ee4-a6c9-c0555c47aa2c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "84ef1139-2de9-41bb-9338-b4a0c018dfaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e85c71c-8ac6-4ee4-a6c9-c0555c47aa2c",
        "cursor": {
          "ref": "9b47e219-f648-4a48-b60d-d14c804db3c3",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ab10bcb4-048a-43c5-9862-54902cc63879"
        },
        "item": {
          "id": "8e85c71c-8ac6-4ee4-a6c9-c0555c47aa2c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "84ef1139-2de9-41bb-9338-b4a0c018dfaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ddb63b-7ac7-4d3a-ac4d-dcd000ab798a",
        "cursor": {
          "ref": "6a086d71-3542-4af5-992b-3f59e50b5a81",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8cf85259-beaf-451a-a23f-eee3be6960a6"
        },
        "item": {
          "id": "e4ddb63b-7ac7-4d3a-ac4d-dcd000ab798a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e6e047b9-393f-4d8c-86a2-1273ca79bdaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ddb63b-7ac7-4d3a-ac4d-dcd000ab798a",
        "cursor": {
          "ref": "6a086d71-3542-4af5-992b-3f59e50b5a81",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8cf85259-beaf-451a-a23f-eee3be6960a6"
        },
        "item": {
          "id": "e4ddb63b-7ac7-4d3a-ac4d-dcd000ab798a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e6e047b9-393f-4d8c-86a2-1273ca79bdaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e3611a-8a94-448c-aafb-391ebbfa27a7",
        "cursor": {
          "ref": "25c4f64a-9df2-4f13-9c3f-1d93bb6fceb4",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6b4886f7-6264-4d7d-9869-5543a5448b8b"
        },
        "item": {
          "id": "e9e3611a-8a94-448c-aafb-391ebbfa27a7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0e80ca8d-a448-4b79-816b-a3e1a69169f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e3611a-8a94-448c-aafb-391ebbfa27a7",
        "cursor": {
          "ref": "25c4f64a-9df2-4f13-9c3f-1d93bb6fceb4",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6b4886f7-6264-4d7d-9869-5543a5448b8b"
        },
        "item": {
          "id": "e9e3611a-8a94-448c-aafb-391ebbfa27a7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0e80ca8d-a448-4b79-816b-a3e1a69169f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf89a32-572b-4a11-85e1-55bad40272df",
        "cursor": {
          "ref": "0e20cf6f-fe18-461b-8b00-58674d797646",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3ff55b7f-c472-4dd0-8925-1363d7c544a6"
        },
        "item": {
          "id": "6cf89a32-572b-4a11-85e1-55bad40272df",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "52135b48-3e1e-4eff-9059-396f7d39c44d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf89a32-572b-4a11-85e1-55bad40272df",
        "cursor": {
          "ref": "0e20cf6f-fe18-461b-8b00-58674d797646",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3ff55b7f-c472-4dd0-8925-1363d7c544a6"
        },
        "item": {
          "id": "6cf89a32-572b-4a11-85e1-55bad40272df",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "52135b48-3e1e-4eff-9059-396f7d39c44d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0577c9-e00f-4276-87a2-d688a50711e2",
        "cursor": {
          "ref": "3a3a334e-2ff2-4d70-a1a8-20ac99d07bc4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6f95d82c-13dd-4398-b8ac-b313a7005c0d"
        },
        "item": {
          "id": "9a0577c9-e00f-4276-87a2-d688a50711e2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1600dd93-3dd1-4232-9ddb-902daa4b7dc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0577c9-e00f-4276-87a2-d688a50711e2",
        "cursor": {
          "ref": "3a3a334e-2ff2-4d70-a1a8-20ac99d07bc4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6f95d82c-13dd-4398-b8ac-b313a7005c0d"
        },
        "item": {
          "id": "9a0577c9-e00f-4276-87a2-d688a50711e2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1600dd93-3dd1-4232-9ddb-902daa4b7dc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c892828e-5a3c-4ab0-a15f-af5d3d69cd05",
        "cursor": {
          "ref": "0c25e2d8-5a67-44ce-a6f1-bb339e05f227",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c1c596b3-6ee8-4148-8ae9-e03d89836c69"
        },
        "item": {
          "id": "c892828e-5a3c-4ab0-a15f-af5d3d69cd05",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "585aaa6a-5802-4c4b-b486-966ab106743b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c892828e-5a3c-4ab0-a15f-af5d3d69cd05",
        "cursor": {
          "ref": "0c25e2d8-5a67-44ce-a6f1-bb339e05f227",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c1c596b3-6ee8-4148-8ae9-e03d89836c69"
        },
        "item": {
          "id": "c892828e-5a3c-4ab0-a15f-af5d3d69cd05",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "585aaa6a-5802-4c4b-b486-966ab106743b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d714e6-7b4a-44c1-9f49-8dc838d2cc1a",
        "cursor": {
          "ref": "0007b3f5-60b1-40de-b966-a2557f4a87de",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4e5ea779-c929-42f8-9ef2-3b639a25bc2f"
        },
        "item": {
          "id": "d5d714e6-7b4a-44c1-9f49-8dc838d2cc1a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "24b73698-c7ca-46ff-a499-03016b4b3beb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d714e6-7b4a-44c1-9f49-8dc838d2cc1a",
        "cursor": {
          "ref": "0007b3f5-60b1-40de-b966-a2557f4a87de",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4e5ea779-c929-42f8-9ef2-3b639a25bc2f"
        },
        "item": {
          "id": "d5d714e6-7b4a-44c1-9f49-8dc838d2cc1a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "24b73698-c7ca-46ff-a499-03016b4b3beb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b55e076-5c31-4841-8c67-64ee934cfc8f",
        "cursor": {
          "ref": "3e8a5ca8-4bf0-4d1f-8697-0c9bb65403d8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "338b1bff-175c-44d3-8d30-9184b1b8b98c"
        },
        "item": {
          "id": "3b55e076-5c31-4841-8c67-64ee934cfc8f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1b27d319-e7c8-49ed-bf9a-be2339ed99f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b55e076-5c31-4841-8c67-64ee934cfc8f",
        "cursor": {
          "ref": "3e8a5ca8-4bf0-4d1f-8697-0c9bb65403d8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "338b1bff-175c-44d3-8d30-9184b1b8b98c"
        },
        "item": {
          "id": "3b55e076-5c31-4841-8c67-64ee934cfc8f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1b27d319-e7c8-49ed-bf9a-be2339ed99f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69710cd0-d279-4eda-8e27-5d4c55bfca3f",
        "cursor": {
          "ref": "4bc0a1ef-0efc-42ec-946f-a19110f54858",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3e99a5dc-eeb5-4132-81e2-dc0d5045de0f"
        },
        "item": {
          "id": "69710cd0-d279-4eda-8e27-5d4c55bfca3f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cf6ffc58-d4bd-46cc-a2ed-00b81fe4db18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69710cd0-d279-4eda-8e27-5d4c55bfca3f",
        "cursor": {
          "ref": "4bc0a1ef-0efc-42ec-946f-a19110f54858",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3e99a5dc-eeb5-4132-81e2-dc0d5045de0f"
        },
        "item": {
          "id": "69710cd0-d279-4eda-8e27-5d4c55bfca3f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cf6ffc58-d4bd-46cc-a2ed-00b81fe4db18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93192e4-bea8-4da6-9cb2-de4acda858c3",
        "cursor": {
          "ref": "b526817a-40ef-4b7a-be31-f6e094a4326b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f1f69004-265d-44fa-8307-db3348527735"
        },
        "item": {
          "id": "d93192e4-bea8-4da6-9cb2-de4acda858c3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7fbc466e-2c22-4b72-bc9b-c46550ea43f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93192e4-bea8-4da6-9cb2-de4acda858c3",
        "cursor": {
          "ref": "b526817a-40ef-4b7a-be31-f6e094a4326b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f1f69004-265d-44fa-8307-db3348527735"
        },
        "item": {
          "id": "d93192e4-bea8-4da6-9cb2-de4acda858c3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7fbc466e-2c22-4b72-bc9b-c46550ea43f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3430ffaf-27a4-461f-b746-0dc79bcf0f12",
        "cursor": {
          "ref": "c0a1337e-3810-484e-8046-2f1ca76ca85c",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7b6f2606-0b30-42b2-9baf-a8441a292836"
        },
        "item": {
          "id": "3430ffaf-27a4-461f-b746-0dc79bcf0f12",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "41daac50-7d8f-4823-9331-38e517153342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3430ffaf-27a4-461f-b746-0dc79bcf0f12",
        "cursor": {
          "ref": "c0a1337e-3810-484e-8046-2f1ca76ca85c",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7b6f2606-0b30-42b2-9baf-a8441a292836"
        },
        "item": {
          "id": "3430ffaf-27a4-461f-b746-0dc79bcf0f12",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "41daac50-7d8f-4823-9331-38e517153342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0faec4-6ec9-4d29-8ab1-6772857c9523",
        "cursor": {
          "ref": "ab9df590-890b-41f3-8b3e-a7f31693c2a4",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "eb67046b-4608-411f-8aad-7b77f8cb7b28"
        },
        "item": {
          "id": "7c0faec4-6ec9-4d29-8ab1-6772857c9523",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5ef1a7a3-49a2-420c-880d-8b0ca3e6e9f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0faec4-6ec9-4d29-8ab1-6772857c9523",
        "cursor": {
          "ref": "ab9df590-890b-41f3-8b3e-a7f31693c2a4",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "eb67046b-4608-411f-8aad-7b77f8cb7b28"
        },
        "item": {
          "id": "7c0faec4-6ec9-4d29-8ab1-6772857c9523",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5ef1a7a3-49a2-420c-880d-8b0ca3e6e9f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354b5878-85c2-4a6a-8167-776438bafb8a",
        "cursor": {
          "ref": "9cd118bd-bcc6-40e5-952f-9392c9b3185d",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "75fba6bb-d09c-4d56-80c6-806ec72f6705"
        },
        "item": {
          "id": "354b5878-85c2-4a6a-8167-776438bafb8a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "05859e5c-4983-4bf5-96e4-2433c6d44374",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354b5878-85c2-4a6a-8167-776438bafb8a",
        "cursor": {
          "ref": "9cd118bd-bcc6-40e5-952f-9392c9b3185d",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "75fba6bb-d09c-4d56-80c6-806ec72f6705"
        },
        "item": {
          "id": "354b5878-85c2-4a6a-8167-776438bafb8a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "05859e5c-4983-4bf5-96e4-2433c6d44374",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb69dc5-19ce-4fda-b17b-82a7cd2c6d09",
        "cursor": {
          "ref": "b51ef6a4-7037-4143-a520-73a92f57311f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "638bf325-ead1-4664-9e96-7d6e97af784d"
        },
        "item": {
          "id": "fdb69dc5-19ce-4fda-b17b-82a7cd2c6d09",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f21f3d2d-2d91-4aaa-a01c-bdd7620b9b60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb69dc5-19ce-4fda-b17b-82a7cd2c6d09",
        "cursor": {
          "ref": "b51ef6a4-7037-4143-a520-73a92f57311f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "638bf325-ead1-4664-9e96-7d6e97af784d"
        },
        "item": {
          "id": "fdb69dc5-19ce-4fda-b17b-82a7cd2c6d09",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f21f3d2d-2d91-4aaa-a01c-bdd7620b9b60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5bfe8e8-56de-4750-940f-f71e6f2702e9",
        "cursor": {
          "ref": "b44561a3-899b-407f-b8d2-e30c96fd5ecb",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a70935b7-f3df-4ec0-ad27-107227857b5e"
        },
        "item": {
          "id": "c5bfe8e8-56de-4750-940f-f71e6f2702e9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "78e08161-f3bd-4fe8-9506-dae15ca92d9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5bfe8e8-56de-4750-940f-f71e6f2702e9",
        "cursor": {
          "ref": "b44561a3-899b-407f-b8d2-e30c96fd5ecb",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a70935b7-f3df-4ec0-ad27-107227857b5e"
        },
        "item": {
          "id": "c5bfe8e8-56de-4750-940f-f71e6f2702e9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "78e08161-f3bd-4fe8-9506-dae15ca92d9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5ed3ee-95ab-4e86-b192-bd1dbad51914",
        "cursor": {
          "ref": "73a77f3a-f546-401f-8f76-212636309afe",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0f237706-f7b5-49d6-9b53-1eef30f7b36a"
        },
        "item": {
          "id": "4d5ed3ee-95ab-4e86-b192-bd1dbad51914",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f99c5ff6-6f7a-4a21-b35c-23e1c67be9c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5ed3ee-95ab-4e86-b192-bd1dbad51914",
        "cursor": {
          "ref": "73a77f3a-f546-401f-8f76-212636309afe",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0f237706-f7b5-49d6-9b53-1eef30f7b36a"
        },
        "item": {
          "id": "4d5ed3ee-95ab-4e86-b192-bd1dbad51914",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f99c5ff6-6f7a-4a21-b35c-23e1c67be9c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90182011-d0f9-42e3-982f-6beb57fea5fa",
        "cursor": {
          "ref": "b334080c-bdf0-4bc8-9be4-d34b48da8b6e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "76742f10-1006-42e8-a4e1-8bec7f02daad"
        },
        "item": {
          "id": "90182011-d0f9-42e3-982f-6beb57fea5fa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d45e555b-28bc-481b-b289-956c39a78100",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90182011-d0f9-42e3-982f-6beb57fea5fa",
        "cursor": {
          "ref": "b334080c-bdf0-4bc8-9be4-d34b48da8b6e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "76742f10-1006-42e8-a4e1-8bec7f02daad"
        },
        "item": {
          "id": "90182011-d0f9-42e3-982f-6beb57fea5fa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d45e555b-28bc-481b-b289-956c39a78100",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d976c1a-8f6f-4441-b287-5b78b26c7b19",
        "cursor": {
          "ref": "d2a59078-dfeb-49bd-8647-489240daab0d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "36d55195-2cb0-453d-b3e4-56d645e9c314"
        },
        "item": {
          "id": "6d976c1a-8f6f-4441-b287-5b78b26c7b19",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "607b50d4-36b4-44fe-b481-3a4c07c46a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d976c1a-8f6f-4441-b287-5b78b26c7b19",
        "cursor": {
          "ref": "d2a59078-dfeb-49bd-8647-489240daab0d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "36d55195-2cb0-453d-b3e4-56d645e9c314"
        },
        "item": {
          "id": "6d976c1a-8f6f-4441-b287-5b78b26c7b19",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "607b50d4-36b4-44fe-b481-3a4c07c46a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ffdbd-33e7-42ae-98c0-0583acf9cc3a",
        "cursor": {
          "ref": "18681055-9c9c-44a9-b76e-cd7649896f9e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "31b3de1d-3207-4d00-8cde-66749327b2db"
        },
        "item": {
          "id": "089ffdbd-33e7-42ae-98c0-0583acf9cc3a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "15098839-fc9a-48dc-b194-596d11982a92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ffdbd-33e7-42ae-98c0-0583acf9cc3a",
        "cursor": {
          "ref": "18681055-9c9c-44a9-b76e-cd7649896f9e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "31b3de1d-3207-4d00-8cde-66749327b2db"
        },
        "item": {
          "id": "089ffdbd-33e7-42ae-98c0-0583acf9cc3a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "15098839-fc9a-48dc-b194-596d11982a92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0648c0d8-8dd6-4b26-a4ef-5875a39df012",
        "cursor": {
          "ref": "bd2afa8c-1abc-44fd-b6cd-2798e7576f02",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "94e5bf5f-f4d4-4c44-9f46-5448a5974b0c"
        },
        "item": {
          "id": "0648c0d8-8dd6-4b26-a4ef-5875a39df012",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a36a6e2e-318c-42e5-921c-6a784bf7fc21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0648c0d8-8dd6-4b26-a4ef-5875a39df012",
        "cursor": {
          "ref": "bd2afa8c-1abc-44fd-b6cd-2798e7576f02",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "94e5bf5f-f4d4-4c44-9f46-5448a5974b0c"
        },
        "item": {
          "id": "0648c0d8-8dd6-4b26-a4ef-5875a39df012",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a36a6e2e-318c-42e5-921c-6a784bf7fc21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b76922b-2cb8-4178-a08d-1bcdbfd8892e",
        "cursor": {
          "ref": "192b8eae-f17e-4cc8-8675-843fb714ee26",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "da5b2a8b-cac3-40d2-a228-f056d619c7db"
        },
        "item": {
          "id": "6b76922b-2cb8-4178-a08d-1bcdbfd8892e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d6a6dc20-218c-4c27-8f42-502c5950bb82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b76922b-2cb8-4178-a08d-1bcdbfd8892e",
        "cursor": {
          "ref": "192b8eae-f17e-4cc8-8675-843fb714ee26",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "da5b2a8b-cac3-40d2-a228-f056d619c7db"
        },
        "item": {
          "id": "6b76922b-2cb8-4178-a08d-1bcdbfd8892e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d6a6dc20-218c-4c27-8f42-502c5950bb82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa33da1-9ff2-429c-8433-34738339c14d",
        "cursor": {
          "ref": "97b98148-5fdb-451a-8b52-8c1884244b3f",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f6d86afc-7c32-4936-b1de-a0664ddfb430"
        },
        "item": {
          "id": "eaa33da1-9ff2-429c-8433-34738339c14d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f04daa10-4e28-4a00-bb48-35ff32403a18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa33da1-9ff2-429c-8433-34738339c14d",
        "cursor": {
          "ref": "97b98148-5fdb-451a-8b52-8c1884244b3f",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f6d86afc-7c32-4936-b1de-a0664ddfb430"
        },
        "item": {
          "id": "eaa33da1-9ff2-429c-8433-34738339c14d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f04daa10-4e28-4a00-bb48-35ff32403a18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b9cbf3-6c90-4e06-a221-a0c1b2a91038",
        "cursor": {
          "ref": "2cacd73f-e6d2-4802-9baf-ebb5c9624200",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f6d88f32-2233-4125-8f64-73684252d15c"
        },
        "item": {
          "id": "a5b9cbf3-6c90-4e06-a221-a0c1b2a91038",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c96df9bb-bb15-43bf-b5d6-bd873f59b78b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b9cbf3-6c90-4e06-a221-a0c1b2a91038",
        "cursor": {
          "ref": "2cacd73f-e6d2-4802-9baf-ebb5c9624200",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f6d88f32-2233-4125-8f64-73684252d15c"
        },
        "item": {
          "id": "a5b9cbf3-6c90-4e06-a221-a0c1b2a91038",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c96df9bb-bb15-43bf-b5d6-bd873f59b78b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842ce18a-95d1-460c-8436-b808c20bf2ca",
        "cursor": {
          "ref": "350943de-7730-43bd-b9b1-a33695a0897b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "91358ab2-d45c-4da6-b1ca-4ec4f64a9e4b"
        },
        "item": {
          "id": "842ce18a-95d1-460c-8436-b808c20bf2ca",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7f9fb1e7-f9c9-43ff-b713-9c60b08092cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842ce18a-95d1-460c-8436-b808c20bf2ca",
        "cursor": {
          "ref": "350943de-7730-43bd-b9b1-a33695a0897b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "91358ab2-d45c-4da6-b1ca-4ec4f64a9e4b"
        },
        "item": {
          "id": "842ce18a-95d1-460c-8436-b808c20bf2ca",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7f9fb1e7-f9c9-43ff-b713-9c60b08092cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cdc93d-b9d2-4303-920d-e397af29ad74",
        "cursor": {
          "ref": "dcb8c9ca-0a83-49f3-baaa-b38f105a8cab",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "08526e7b-3d1f-48d6-a958-d31783c9be96"
        },
        "item": {
          "id": "21cdc93d-b9d2-4303-920d-e397af29ad74",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f85c6a32-81cb-407e-b40e-c8ab63be6352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cdc93d-b9d2-4303-920d-e397af29ad74",
        "cursor": {
          "ref": "dcb8c9ca-0a83-49f3-baaa-b38f105a8cab",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "08526e7b-3d1f-48d6-a958-d31783c9be96"
        },
        "item": {
          "id": "21cdc93d-b9d2-4303-920d-e397af29ad74",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f85c6a32-81cb-407e-b40e-c8ab63be6352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee777a3-4217-44ce-8801-b244595bf2ed",
        "cursor": {
          "ref": "fd1e430d-564d-4c13-b213-9d675ed2daa4",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "54c4b007-9f09-4df5-9d63-de8860057e10"
        },
        "item": {
          "id": "aee777a3-4217-44ce-8801-b244595bf2ed",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9373b972-c4a6-408d-8885-8c97daf35b5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee777a3-4217-44ce-8801-b244595bf2ed",
        "cursor": {
          "ref": "fd1e430d-564d-4c13-b213-9d675ed2daa4",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "54c4b007-9f09-4df5-9d63-de8860057e10"
        },
        "item": {
          "id": "aee777a3-4217-44ce-8801-b244595bf2ed",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9373b972-c4a6-408d-8885-8c97daf35b5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a7d415-1a59-40f9-91d5-052f9801b5d8",
        "cursor": {
          "ref": "af89662f-57d1-48fe-9c32-e89bea53317c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "05f79146-3144-4081-bedc-ce01cca6c463"
        },
        "item": {
          "id": "f4a7d415-1a59-40f9-91d5-052f9801b5d8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "812c1d52-5f53-4e94-a0f4-86d91fe3f32c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a7d415-1a59-40f9-91d5-052f9801b5d8",
        "cursor": {
          "ref": "af89662f-57d1-48fe-9c32-e89bea53317c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "05f79146-3144-4081-bedc-ce01cca6c463"
        },
        "item": {
          "id": "f4a7d415-1a59-40f9-91d5-052f9801b5d8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "812c1d52-5f53-4e94-a0f4-86d91fe3f32c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45a4891-59bf-4b98-9cc0-7274ad84d34b",
        "cursor": {
          "ref": "18ab111a-9e55-4452-b0fb-322ebe23cd39",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "886fd004-6837-44b8-8b8e-8309b2dd4d56"
        },
        "item": {
          "id": "d45a4891-59bf-4b98-9cc0-7274ad84d34b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "31e443a0-b2d0-49c0-9ff1-6d6067b28d36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45a4891-59bf-4b98-9cc0-7274ad84d34b",
        "cursor": {
          "ref": "18ab111a-9e55-4452-b0fb-322ebe23cd39",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "886fd004-6837-44b8-8b8e-8309b2dd4d56"
        },
        "item": {
          "id": "d45a4891-59bf-4b98-9cc0-7274ad84d34b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "31e443a0-b2d0-49c0-9ff1-6d6067b28d36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7783a2b-f1e2-4b65-a8ea-13c2c2e1b5f9",
        "cursor": {
          "ref": "269c5744-43c8-44e7-90da-8972f167dc61",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6c2a3ba6-7463-43fc-971c-59cb4d8dd8ba"
        },
        "item": {
          "id": "f7783a2b-f1e2-4b65-a8ea-13c2c2e1b5f9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4f71189b-8208-4764-a7ee-a6b474f1ff36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7783a2b-f1e2-4b65-a8ea-13c2c2e1b5f9",
        "cursor": {
          "ref": "269c5744-43c8-44e7-90da-8972f167dc61",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6c2a3ba6-7463-43fc-971c-59cb4d8dd8ba"
        },
        "item": {
          "id": "f7783a2b-f1e2-4b65-a8ea-13c2c2e1b5f9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4f71189b-8208-4764-a7ee-a6b474f1ff36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13701099-9320-4550-a87a-0d0f59eb7490",
        "cursor": {
          "ref": "31b3d703-48ab-416f-b49e-fd59cd6721bc",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2fb27af9-1ca4-424b-b28f-38f9fcef94f5"
        },
        "item": {
          "id": "13701099-9320-4550-a87a-0d0f59eb7490",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c4b9a4da-54b4-416e-8cec-ec10fd852831",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13701099-9320-4550-a87a-0d0f59eb7490",
        "cursor": {
          "ref": "31b3d703-48ab-416f-b49e-fd59cd6721bc",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2fb27af9-1ca4-424b-b28f-38f9fcef94f5"
        },
        "item": {
          "id": "13701099-9320-4550-a87a-0d0f59eb7490",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c4b9a4da-54b4-416e-8cec-ec10fd852831",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1760490f-4ea4-4abf-87a1-dd8cfc7fb15b",
        "cursor": {
          "ref": "c2ee8083-20ad-4b26-a0a9-de0cbeadf472",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "00f9579d-1747-48ed-94d5-cef58016be5d"
        },
        "item": {
          "id": "1760490f-4ea4-4abf-87a1-dd8cfc7fb15b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9ed7aba5-d15d-4263-b3fa-bf4e232d5bdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1760490f-4ea4-4abf-87a1-dd8cfc7fb15b",
        "cursor": {
          "ref": "c2ee8083-20ad-4b26-a0a9-de0cbeadf472",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "00f9579d-1747-48ed-94d5-cef58016be5d"
        },
        "item": {
          "id": "1760490f-4ea4-4abf-87a1-dd8cfc7fb15b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9ed7aba5-d15d-4263-b3fa-bf4e232d5bdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376b7d86-f158-44d9-a9d1-82f110fde0a1",
        "cursor": {
          "ref": "d4f340ac-3abb-44d7-a864-21a7849bd2b2",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b35f2769-e06a-41c8-aaca-985e0438d22c"
        },
        "item": {
          "id": "376b7d86-f158-44d9-a9d1-82f110fde0a1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "20610418-7411-484c-9869-02dcd98ee7e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376b7d86-f158-44d9-a9d1-82f110fde0a1",
        "cursor": {
          "ref": "d4f340ac-3abb-44d7-a864-21a7849bd2b2",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b35f2769-e06a-41c8-aaca-985e0438d22c"
        },
        "item": {
          "id": "376b7d86-f158-44d9-a9d1-82f110fde0a1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "20610418-7411-484c-9869-02dcd98ee7e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74245f2c-32ef-4fc6-861a-58101be0e0c5",
        "cursor": {
          "ref": "c1e57893-e220-45a4-8744-1c10dfc6e0b5",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "37d07082-9d99-4718-8186-7667d13a318f"
        },
        "item": {
          "id": "74245f2c-32ef-4fc6-861a-58101be0e0c5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a112ae02-6109-492d-8b86-744e40b0d55d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74245f2c-32ef-4fc6-861a-58101be0e0c5",
        "cursor": {
          "ref": "c1e57893-e220-45a4-8744-1c10dfc6e0b5",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "37d07082-9d99-4718-8186-7667d13a318f"
        },
        "item": {
          "id": "74245f2c-32ef-4fc6-861a-58101be0e0c5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a112ae02-6109-492d-8b86-744e40b0d55d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3ae4bf-b917-4576-922c-c345911daabf",
        "cursor": {
          "ref": "9ffa3bf5-030c-40dc-b671-20c425c67cb7",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9be76242-1919-4e48-94b5-518a0dcb5e05"
        },
        "item": {
          "id": "4d3ae4bf-b917-4576-922c-c345911daabf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "aa15175d-75f7-4f4f-a752-8eea9941ffbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3ae4bf-b917-4576-922c-c345911daabf",
        "cursor": {
          "ref": "9ffa3bf5-030c-40dc-b671-20c425c67cb7",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9be76242-1919-4e48-94b5-518a0dcb5e05"
        },
        "item": {
          "id": "4d3ae4bf-b917-4576-922c-c345911daabf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "aa15175d-75f7-4f4f-a752-8eea9941ffbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33d1988-b03c-4fed-b1ad-6c9649c0dab7",
        "cursor": {
          "ref": "1e34a5b5-5d7f-41b5-b769-e3bd21c8bc50",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5d79939d-4902-414f-946d-40a4807fbc9d"
        },
        "item": {
          "id": "c33d1988-b03c-4fed-b1ad-6c9649c0dab7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "71aee809-5f79-40fa-b764-9f96a517c98d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33d1988-b03c-4fed-b1ad-6c9649c0dab7",
        "cursor": {
          "ref": "1e34a5b5-5d7f-41b5-b769-e3bd21c8bc50",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5d79939d-4902-414f-946d-40a4807fbc9d"
        },
        "item": {
          "id": "c33d1988-b03c-4fed-b1ad-6c9649c0dab7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "71aee809-5f79-40fa-b764-9f96a517c98d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c281d35-0cf4-49e0-9ced-a28aff8cf0e5",
        "cursor": {
          "ref": "cbc9b5bb-13f9-47fd-989e-b6a8c3547d12",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2ac8f204-16a5-4c60-a084-d4e3395a5804"
        },
        "item": {
          "id": "5c281d35-0cf4-49e0-9ced-a28aff8cf0e5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1abd83ce-759d-4ab5-a22b-512bc9f0d769",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c281d35-0cf4-49e0-9ced-a28aff8cf0e5",
        "cursor": {
          "ref": "cbc9b5bb-13f9-47fd-989e-b6a8c3547d12",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2ac8f204-16a5-4c60-a084-d4e3395a5804"
        },
        "item": {
          "id": "5c281d35-0cf4-49e0-9ced-a28aff8cf0e5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1abd83ce-759d-4ab5-a22b-512bc9f0d769",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26d62ab-b6ef-4340-897e-262b61497692",
        "cursor": {
          "ref": "22a83de5-effa-49e2-9f8d-e2cfdee27eaf",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f368dc30-2a37-4f17-a7b6-540d9b271b83"
        },
        "item": {
          "id": "c26d62ab-b6ef-4340-897e-262b61497692",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0269b506-f831-4277-abd8-6772670d5999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26d62ab-b6ef-4340-897e-262b61497692",
        "cursor": {
          "ref": "22a83de5-effa-49e2-9f8d-e2cfdee27eaf",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f368dc30-2a37-4f17-a7b6-540d9b271b83"
        },
        "item": {
          "id": "c26d62ab-b6ef-4340-897e-262b61497692",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0269b506-f831-4277-abd8-6772670d5999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46947b8-3374-4554-bc75-e4260bcef949",
        "cursor": {
          "ref": "fb2cca1c-83d1-4f62-abe3-fa095bd1fbe2",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "413a19b8-7a2f-4b1c-8b89-bc660d43cd31"
        },
        "item": {
          "id": "a46947b8-3374-4554-bc75-e4260bcef949",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "be094b62-6a2a-459a-a0ee-04117d1d5054",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46947b8-3374-4554-bc75-e4260bcef949",
        "cursor": {
          "ref": "fb2cca1c-83d1-4f62-abe3-fa095bd1fbe2",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "413a19b8-7a2f-4b1c-8b89-bc660d43cd31"
        },
        "item": {
          "id": "a46947b8-3374-4554-bc75-e4260bcef949",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "be094b62-6a2a-459a-a0ee-04117d1d5054",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e0f948-ef94-4e28-a880-ca7037727fe4",
        "cursor": {
          "ref": "b471d83e-4ec8-4a80-b797-83c21f73eac8",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fb6b3a2b-5c03-4e52-8ef1-02d0054875ae"
        },
        "item": {
          "id": "12e0f948-ef94-4e28-a880-ca7037727fe4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "45107499-3948-4183-82f0-df7acf412175",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e0f948-ef94-4e28-a880-ca7037727fe4",
        "cursor": {
          "ref": "b471d83e-4ec8-4a80-b797-83c21f73eac8",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fb6b3a2b-5c03-4e52-8ef1-02d0054875ae"
        },
        "item": {
          "id": "12e0f948-ef94-4e28-a880-ca7037727fe4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "45107499-3948-4183-82f0-df7acf412175",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15f3b48-d209-451c-9158-713b55c27f78",
        "cursor": {
          "ref": "d0b46d1d-873b-4642-9e33-5a8d04186671",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3601a14b-efb9-44ab-b341-a458569c55fb"
        },
        "item": {
          "id": "c15f3b48-d209-451c-9158-713b55c27f78",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a1537851-ccd1-4c64-84aa-119a5a46e253",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15f3b48-d209-451c-9158-713b55c27f78",
        "cursor": {
          "ref": "d0b46d1d-873b-4642-9e33-5a8d04186671",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3601a14b-efb9-44ab-b341-a458569c55fb"
        },
        "item": {
          "id": "c15f3b48-d209-451c-9158-713b55c27f78",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a1537851-ccd1-4c64-84aa-119a5a46e253",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48996ce2-e492-4451-b08e-e954951e1b85",
        "cursor": {
          "ref": "e817dce5-7c5e-4844-bd1d-9afebfe76f13",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a2f8bf1d-17c7-490f-82b6-22cdfa24bb36"
        },
        "item": {
          "id": "48996ce2-e492-4451-b08e-e954951e1b85",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5f4ada7f-e4e7-4fbc-b00f-da2082fc2623",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48996ce2-e492-4451-b08e-e954951e1b85",
        "cursor": {
          "ref": "e817dce5-7c5e-4844-bd1d-9afebfe76f13",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a2f8bf1d-17c7-490f-82b6-22cdfa24bb36"
        },
        "item": {
          "id": "48996ce2-e492-4451-b08e-e954951e1b85",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5f4ada7f-e4e7-4fbc-b00f-da2082fc2623",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f434ce6b-8276-4044-8370-fbe5bb82a3de",
        "cursor": {
          "ref": "3d05c44f-c272-4609-a816-d154c048f3c4",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d722bbd6-6a99-471d-b4d3-f47122e89bfc"
        },
        "item": {
          "id": "f434ce6b-8276-4044-8370-fbe5bb82a3de",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ab8829e2-16d5-449c-8f13-b8c6fe24e224",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 112,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f434ce6b-8276-4044-8370-fbe5bb82a3de",
        "cursor": {
          "ref": "3d05c44f-c272-4609-a816-d154c048f3c4",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d722bbd6-6a99-471d-b4d3-f47122e89bfc"
        },
        "item": {
          "id": "f434ce6b-8276-4044-8370-fbe5bb82a3de",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ab8829e2-16d5-449c-8f13-b8c6fe24e224",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 112,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ced696e-3917-46d4-891d-131cb5d0373d",
        "cursor": {
          "ref": "c3bd04aa-4584-4b47-bdea-f037d2e5d0e8",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4ab00ede-d212-476e-8fcf-4221bad38807"
        },
        "item": {
          "id": "5ced696e-3917-46d4-891d-131cb5d0373d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f7a62f62-9f59-49be-9bce-a8121f096b5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ced696e-3917-46d4-891d-131cb5d0373d",
        "cursor": {
          "ref": "c3bd04aa-4584-4b47-bdea-f037d2e5d0e8",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4ab00ede-d212-476e-8fcf-4221bad38807"
        },
        "item": {
          "id": "5ced696e-3917-46d4-891d-131cb5d0373d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f7a62f62-9f59-49be-9bce-a8121f096b5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad62edd2-cfef-4663-a755-1a97b8bee13e",
        "cursor": {
          "ref": "7a60b2fa-df3b-4887-81d1-c48517231511",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d35819fd-3ac2-4838-9878-39596a0b01bf"
        },
        "item": {
          "id": "ad62edd2-cfef-4663-a755-1a97b8bee13e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c2c6618d-95a1-43e1-a3e6-9ac29535fce5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad62edd2-cfef-4663-a755-1a97b8bee13e",
        "cursor": {
          "ref": "7a60b2fa-df3b-4887-81d1-c48517231511",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d35819fd-3ac2-4838-9878-39596a0b01bf"
        },
        "item": {
          "id": "ad62edd2-cfef-4663-a755-1a97b8bee13e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c2c6618d-95a1-43e1-a3e6-9ac29535fce5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2a4a4d-2fd9-4304-9e12-e1739a9f93c7",
        "cursor": {
          "ref": "1279ef53-309a-467a-8e2a-9505b8242e9c",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ad213862-ee36-49ba-b03a-b43197d9af3d"
        },
        "item": {
          "id": "5d2a4a4d-2fd9-4304-9e12-e1739a9f93c7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c3b66c60-3db9-4fc2-a10b-d5e42536c1ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2a4a4d-2fd9-4304-9e12-e1739a9f93c7",
        "cursor": {
          "ref": "1279ef53-309a-467a-8e2a-9505b8242e9c",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ad213862-ee36-49ba-b03a-b43197d9af3d"
        },
        "item": {
          "id": "5d2a4a4d-2fd9-4304-9e12-e1739a9f93c7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c3b66c60-3db9-4fc2-a10b-d5e42536c1ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a29f48b-385b-41a9-adee-ce3cac26ccb4",
        "cursor": {
          "ref": "01cdb459-2360-4709-a73d-e83a03190c51",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ccb390b6-a092-48b5-b8a0-c6f4afaf409b"
        },
        "item": {
          "id": "0a29f48b-385b-41a9-adee-ce3cac26ccb4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "32659c6e-08ef-454e-9e19-9deb82971edd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a29f48b-385b-41a9-adee-ce3cac26ccb4",
        "cursor": {
          "ref": "01cdb459-2360-4709-a73d-e83a03190c51",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ccb390b6-a092-48b5-b8a0-c6f4afaf409b"
        },
        "item": {
          "id": "0a29f48b-385b-41a9-adee-ce3cac26ccb4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "32659c6e-08ef-454e-9e19-9deb82971edd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb531055-27b2-41d0-9b60-f5774b18e7b4",
        "cursor": {
          "ref": "b4ce16fa-2c90-4868-b13c-90296ec0f838",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a7fa4780-4d8f-4cf6-a4af-3d3566333f4a"
        },
        "item": {
          "id": "fb531055-27b2-41d0-9b60-f5774b18e7b4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "734f5956-c424-49ca-bb42-82062c575cea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb531055-27b2-41d0-9b60-f5774b18e7b4",
        "cursor": {
          "ref": "b4ce16fa-2c90-4868-b13c-90296ec0f838",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a7fa4780-4d8f-4cf6-a4af-3d3566333f4a"
        },
        "item": {
          "id": "fb531055-27b2-41d0-9b60-f5774b18e7b4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "734f5956-c424-49ca-bb42-82062c575cea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6780cc30-b52a-4ad5-9cd7-e552a1c9298f",
        "cursor": {
          "ref": "b41af31e-dca0-477f-b9e9-ddfcfbbdecde",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c76b623c-01b0-4785-998d-3584aa97d95f"
        },
        "item": {
          "id": "6780cc30-b52a-4ad5-9cd7-e552a1c9298f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "25e85394-bb98-41b5-bf1a-d8de7aa2c0a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6780cc30-b52a-4ad5-9cd7-e552a1c9298f",
        "cursor": {
          "ref": "b41af31e-dca0-477f-b9e9-ddfcfbbdecde",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c76b623c-01b0-4785-998d-3584aa97d95f"
        },
        "item": {
          "id": "6780cc30-b52a-4ad5-9cd7-e552a1c9298f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "25e85394-bb98-41b5-bf1a-d8de7aa2c0a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c19dce-9205-4e34-a59b-34dd1185444a",
        "cursor": {
          "ref": "f2bd2b88-dd03-439d-93ec-bd233f2a92c7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "58b0365f-37d6-4111-bfcb-4f2d2b48fa7b"
        },
        "item": {
          "id": "41c19dce-9205-4e34-a59b-34dd1185444a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "978ac14f-9b28-46ab-b381-ef86bf47c619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c19dce-9205-4e34-a59b-34dd1185444a",
        "cursor": {
          "ref": "f2bd2b88-dd03-439d-93ec-bd233f2a92c7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "58b0365f-37d6-4111-bfcb-4f2d2b48fa7b"
        },
        "item": {
          "id": "41c19dce-9205-4e34-a59b-34dd1185444a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "978ac14f-9b28-46ab-b381-ef86bf47c619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339a49dc-4f66-4b05-9304-3e70057131f4",
        "cursor": {
          "ref": "63d59ed1-941f-4a58-8123-a6a463774e38",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "727a7c05-9edc-443c-b145-eb2c0805b28b"
        },
        "item": {
          "id": "339a49dc-4f66-4b05-9304-3e70057131f4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9cc7407c-5267-4d6f-a5c1-89dfcbeed78c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339a49dc-4f66-4b05-9304-3e70057131f4",
        "cursor": {
          "ref": "63d59ed1-941f-4a58-8123-a6a463774e38",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "727a7c05-9edc-443c-b145-eb2c0805b28b"
        },
        "item": {
          "id": "339a49dc-4f66-4b05-9304-3e70057131f4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9cc7407c-5267-4d6f-a5c1-89dfcbeed78c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18865560-0c27-42bf-aca5-243bfeb5a66c",
        "cursor": {
          "ref": "9ece8f84-5f07-4301-ba01-5c6ec4335381",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "28b80b57-696e-4f59-af4d-d6aa087e050b"
        },
        "item": {
          "id": "18865560-0c27-42bf-aca5-243bfeb5a66c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ac345609-bb84-4f4f-9262-4cfc900eb6d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18865560-0c27-42bf-aca5-243bfeb5a66c",
        "cursor": {
          "ref": "9ece8f84-5f07-4301-ba01-5c6ec4335381",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "28b80b57-696e-4f59-af4d-d6aa087e050b"
        },
        "item": {
          "id": "18865560-0c27-42bf-aca5-243bfeb5a66c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ac345609-bb84-4f4f-9262-4cfc900eb6d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46489edf-a0b5-464b-8297-9b01d8e93eb6",
        "cursor": {
          "ref": "2de15561-87e3-46ae-8d11-542a4bdf6a81",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d0ee3034-2a57-4121-9713-1830ea511fc2"
        },
        "item": {
          "id": "46489edf-a0b5-464b-8297-9b01d8e93eb6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0666a428-c792-494a-b7a0-553f5bd04abd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46489edf-a0b5-464b-8297-9b01d8e93eb6",
        "cursor": {
          "ref": "2de15561-87e3-46ae-8d11-542a4bdf6a81",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d0ee3034-2a57-4121-9713-1830ea511fc2"
        },
        "item": {
          "id": "46489edf-a0b5-464b-8297-9b01d8e93eb6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0666a428-c792-494a-b7a0-553f5bd04abd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea43c53a-e619-4af5-b5a1-93d93e8c88a3",
        "cursor": {
          "ref": "d1341900-dc74-4ad8-9196-07d149a3acc1",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a05bbc40-6cc3-44f3-8ad5-342015469ddd"
        },
        "item": {
          "id": "ea43c53a-e619-4af5-b5a1-93d93e8c88a3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "02a1e07b-2d59-4173-8dc3-e15d03ba92e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea43c53a-e619-4af5-b5a1-93d93e8c88a3",
        "cursor": {
          "ref": "d1341900-dc74-4ad8-9196-07d149a3acc1",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a05bbc40-6cc3-44f3-8ad5-342015469ddd"
        },
        "item": {
          "id": "ea43c53a-e619-4af5-b5a1-93d93e8c88a3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "02a1e07b-2d59-4173-8dc3-e15d03ba92e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae31c692-ee34-41aa-b0c5-0e58249630cf",
        "cursor": {
          "ref": "3df81bac-23f1-44d3-a5d2-d91ad8fad29b",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b835c17c-84a6-4eab-ac13-11181de0be33"
        },
        "item": {
          "id": "ae31c692-ee34-41aa-b0c5-0e58249630cf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "827084af-73e7-4ea5-9345-a86d98c0fc74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae31c692-ee34-41aa-b0c5-0e58249630cf",
        "cursor": {
          "ref": "3df81bac-23f1-44d3-a5d2-d91ad8fad29b",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b835c17c-84a6-4eab-ac13-11181de0be33"
        },
        "item": {
          "id": "ae31c692-ee34-41aa-b0c5-0e58249630cf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "827084af-73e7-4ea5-9345-a86d98c0fc74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72293c88-80ec-442b-8798-a7272907abc7",
        "cursor": {
          "ref": "4baadc28-4038-40f8-b8a8-74a81882a1f2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e12f9c21-cbfa-40e3-adcf-0c3eb4bd11fc"
        },
        "item": {
          "id": "72293c88-80ec-442b-8798-a7272907abc7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9ea354c4-6102-4d41-96eb-40b859677b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72293c88-80ec-442b-8798-a7272907abc7",
        "cursor": {
          "ref": "4baadc28-4038-40f8-b8a8-74a81882a1f2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e12f9c21-cbfa-40e3-adcf-0c3eb4bd11fc"
        },
        "item": {
          "id": "72293c88-80ec-442b-8798-a7272907abc7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9ea354c4-6102-4d41-96eb-40b859677b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df3c06a-9e4f-4439-9361-79c89b9f5062",
        "cursor": {
          "ref": "c4780f0d-b3ae-4e7f-8e75-b48429d6b682",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b680b09a-0323-42a3-8331-9942ca1d4c0d"
        },
        "item": {
          "id": "0df3c06a-9e4f-4439-9361-79c89b9f5062",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bf7e3d74-f7bb-4d26-a64b-bf6c1a18c31f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df3c06a-9e4f-4439-9361-79c89b9f5062",
        "cursor": {
          "ref": "c4780f0d-b3ae-4e7f-8e75-b48429d6b682",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b680b09a-0323-42a3-8331-9942ca1d4c0d"
        },
        "item": {
          "id": "0df3c06a-9e4f-4439-9361-79c89b9f5062",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bf7e3d74-f7bb-4d26-a64b-bf6c1a18c31f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c1c470-e4c1-4ea6-bd03-9fb47b96896e",
        "cursor": {
          "ref": "16b26f39-b713-4e34-8327-5a9a9a70aa30",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8a0c7985-cbd2-48ef-8063-7939b04957e8"
        },
        "item": {
          "id": "98c1c470-e4c1-4ea6-bd03-9fb47b96896e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b30fc9ec-26eb-4b3a-b969-1fbac66d27ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c1c470-e4c1-4ea6-bd03-9fb47b96896e",
        "cursor": {
          "ref": "16b26f39-b713-4e34-8327-5a9a9a70aa30",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8a0c7985-cbd2-48ef-8063-7939b04957e8"
        },
        "item": {
          "id": "98c1c470-e4c1-4ea6-bd03-9fb47b96896e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b30fc9ec-26eb-4b3a-b969-1fbac66d27ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc1472c-bb32-4f51-883b-1db4907f6279",
        "cursor": {
          "ref": "582e0ad5-ced0-426e-ac5d-efe726986fe5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "43b55907-9123-4c39-9271-9c57a5588a06"
        },
        "item": {
          "id": "dbc1472c-bb32-4f51-883b-1db4907f6279",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2083be79-6ee1-4909-9277-e8028c9a511c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc1472c-bb32-4f51-883b-1db4907f6279",
        "cursor": {
          "ref": "582e0ad5-ced0-426e-ac5d-efe726986fe5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "43b55907-9123-4c39-9271-9c57a5588a06"
        },
        "item": {
          "id": "dbc1472c-bb32-4f51-883b-1db4907f6279",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2083be79-6ee1-4909-9277-e8028c9a511c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fae72a-a776-40de-bc89-1736615850fe",
        "cursor": {
          "ref": "8a68b6fc-4334-40b4-ba81-aafa61db9ed7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b8db4ec9-5e8d-47eb-adab-c201f397a633"
        },
        "item": {
          "id": "78fae72a-a776-40de-bc89-1736615850fe",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9a0ae858-44b8-4c86-8b79-2cedf955948a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fae72a-a776-40de-bc89-1736615850fe",
        "cursor": {
          "ref": "8a68b6fc-4334-40b4-ba81-aafa61db9ed7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b8db4ec9-5e8d-47eb-adab-c201f397a633"
        },
        "item": {
          "id": "78fae72a-a776-40de-bc89-1736615850fe",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9a0ae858-44b8-4c86-8b79-2cedf955948a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb0e97e-9832-4fef-aa7d-3e14ac0ace0f",
        "cursor": {
          "ref": "164dda1b-7b8b-4c45-8fd8-636d37b564d6",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b0eca9a3-8b87-4f80-9201-e286ec5d5254"
        },
        "item": {
          "id": "cdb0e97e-9832-4fef-aa7d-3e14ac0ace0f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "23a74521-f26a-429e-a0d6-0775568c7c7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb0e97e-9832-4fef-aa7d-3e14ac0ace0f",
        "cursor": {
          "ref": "164dda1b-7b8b-4c45-8fd8-636d37b564d6",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b0eca9a3-8b87-4f80-9201-e286ec5d5254"
        },
        "item": {
          "id": "cdb0e97e-9832-4fef-aa7d-3e14ac0ace0f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "23a74521-f26a-429e-a0d6-0775568c7c7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4391a2-a7bb-41ef-a778-17af512f3767",
        "cursor": {
          "ref": "044e62b8-34bb-4335-a773-eeff59b39439",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9aacbca2-6294-4ed5-893a-8587f4c41e5f"
        },
        "item": {
          "id": "4b4391a2-a7bb-41ef-a778-17af512f3767",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b8c3f979-9e49-4bcc-9a29-765b4a865aec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4391a2-a7bb-41ef-a778-17af512f3767",
        "cursor": {
          "ref": "044e62b8-34bb-4335-a773-eeff59b39439",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9aacbca2-6294-4ed5-893a-8587f4c41e5f"
        },
        "item": {
          "id": "4b4391a2-a7bb-41ef-a778-17af512f3767",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b8c3f979-9e49-4bcc-9a29-765b4a865aec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b606a264-b2c3-4637-836a-68b53470369f",
        "cursor": {
          "ref": "e9b55b8c-d614-4aaf-a67c-bbd4a77c0cd8",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bafd364d-37e5-4f26-9740-f079cb7b7095"
        },
        "item": {
          "id": "b606a264-b2c3-4637-836a-68b53470369f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ba5f2497-f287-4558-86ea-44516079a318",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b606a264-b2c3-4637-836a-68b53470369f",
        "cursor": {
          "ref": "e9b55b8c-d614-4aaf-a67c-bbd4a77c0cd8",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bafd364d-37e5-4f26-9740-f079cb7b7095"
        },
        "item": {
          "id": "b606a264-b2c3-4637-836a-68b53470369f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ba5f2497-f287-4558-86ea-44516079a318",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2446cef1-56e9-4f25-b7ad-132588204de3",
        "cursor": {
          "ref": "3e59cab9-e4a7-47a8-ab48-fefe51800184",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0fcfc717-5eb6-40bb-94aa-e46343b8f7ff"
        },
        "item": {
          "id": "2446cef1-56e9-4f25-b7ad-132588204de3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c3c1df6d-3ec2-4f23-b988-b80e1d105ea5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2446cef1-56e9-4f25-b7ad-132588204de3",
        "cursor": {
          "ref": "3e59cab9-e4a7-47a8-ab48-fefe51800184",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0fcfc717-5eb6-40bb-94aa-e46343b8f7ff"
        },
        "item": {
          "id": "2446cef1-56e9-4f25-b7ad-132588204de3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c3c1df6d-3ec2-4f23-b988-b80e1d105ea5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabd3ced-102d-44a6-8b2a-39846106a340",
        "cursor": {
          "ref": "2c12e4f1-758c-49e3-9c55-4d91b8e76b61",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b8599198-0bc9-4994-bdfd-e71060c4ad76"
        },
        "item": {
          "id": "aabd3ced-102d-44a6-8b2a-39846106a340",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1ae6d1ba-5c90-48c5-85e6-c25e5e49f4d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabd3ced-102d-44a6-8b2a-39846106a340",
        "cursor": {
          "ref": "2c12e4f1-758c-49e3-9c55-4d91b8e76b61",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b8599198-0bc9-4994-bdfd-e71060c4ad76"
        },
        "item": {
          "id": "aabd3ced-102d-44a6-8b2a-39846106a340",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1ae6d1ba-5c90-48c5-85e6-c25e5e49f4d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a7d040-9ba2-423a-b9c3-102e4fda5757",
        "cursor": {
          "ref": "dbd735d4-0f81-4f79-8a86-28793b88f539",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d37e63b1-cfdd-4424-bd14-444e9b125dfd"
        },
        "item": {
          "id": "38a7d040-9ba2-423a-b9c3-102e4fda5757",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a4dcb97d-53f9-423e-8c07-ec5223414849",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a7d040-9ba2-423a-b9c3-102e4fda5757",
        "cursor": {
          "ref": "dbd735d4-0f81-4f79-8a86-28793b88f539",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d37e63b1-cfdd-4424-bd14-444e9b125dfd"
        },
        "item": {
          "id": "38a7d040-9ba2-423a-b9c3-102e4fda5757",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a4dcb97d-53f9-423e-8c07-ec5223414849",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02725f29-6f0b-4e61-b5d8-32dc6d12acf1",
        "cursor": {
          "ref": "aceb78a8-7f04-486e-8caf-cbf9d808b658",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a0e204ee-8cf4-410e-83d9-c6bb65be4d34"
        },
        "item": {
          "id": "02725f29-6f0b-4e61-b5d8-32dc6d12acf1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "66359b6e-2e82-4bba-b04f-1dd66069e1f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02725f29-6f0b-4e61-b5d8-32dc6d12acf1",
        "cursor": {
          "ref": "aceb78a8-7f04-486e-8caf-cbf9d808b658",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a0e204ee-8cf4-410e-83d9-c6bb65be4d34"
        },
        "item": {
          "id": "02725f29-6f0b-4e61-b5d8-32dc6d12acf1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "66359b6e-2e82-4bba-b04f-1dd66069e1f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97aed8f2-98c8-4a4a-a94f-72bba6a8ac0e",
        "cursor": {
          "ref": "ea726168-7b51-46f4-9930-8ec8ba155a57",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "eaa343d5-643a-4b22-bbab-d27b1519d7da"
        },
        "item": {
          "id": "97aed8f2-98c8-4a4a-a94f-72bba6a8ac0e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ce000222-5fb0-4207-83d5-7f3c8dea961d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97aed8f2-98c8-4a4a-a94f-72bba6a8ac0e",
        "cursor": {
          "ref": "ea726168-7b51-46f4-9930-8ec8ba155a57",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "eaa343d5-643a-4b22-bbab-d27b1519d7da"
        },
        "item": {
          "id": "97aed8f2-98c8-4a4a-a94f-72bba6a8ac0e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ce000222-5fb0-4207-83d5-7f3c8dea961d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4138c9c7-5c7f-41b4-955a-9e60801c97a0",
        "cursor": {
          "ref": "ed33b129-c2ec-4b4c-a5f6-1fcef30a811c",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a34aaec7-a0c1-4225-886f-9464d03bcecc"
        },
        "item": {
          "id": "4138c9c7-5c7f-41b4-955a-9e60801c97a0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cae1698a-59bf-4d1e-af07-e45f7c6b2ef0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4138c9c7-5c7f-41b4-955a-9e60801c97a0",
        "cursor": {
          "ref": "ed33b129-c2ec-4b4c-a5f6-1fcef30a811c",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a34aaec7-a0c1-4225-886f-9464d03bcecc"
        },
        "item": {
          "id": "4138c9c7-5c7f-41b4-955a-9e60801c97a0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cae1698a-59bf-4d1e-af07-e45f7c6b2ef0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81073039-b900-451d-8395-c19e0034d962",
        "cursor": {
          "ref": "182e4436-e17c-4853-9c78-5926a2b280de",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c0d0d6d6-e539-4899-9526-4095c55e8351"
        },
        "item": {
          "id": "81073039-b900-451d-8395-c19e0034d962",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eef9d423-8100-4fbd-9ed4-f87f79a6c17b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81073039-b900-451d-8395-c19e0034d962",
        "cursor": {
          "ref": "182e4436-e17c-4853-9c78-5926a2b280de",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c0d0d6d6-e539-4899-9526-4095c55e8351"
        },
        "item": {
          "id": "81073039-b900-451d-8395-c19e0034d962",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eef9d423-8100-4fbd-9ed4-f87f79a6c17b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1f04e3-d5fb-4954-9b61-ff2777782924",
        "cursor": {
          "ref": "59849d75-dbe8-4407-92dd-9d7e3bd71684",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "32c759c7-e940-48a6-a5bb-98f31a142941"
        },
        "item": {
          "id": "af1f04e3-d5fb-4954-9b61-ff2777782924",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6e267cfe-f268-434c-88c3-dd1ca0095465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1f04e3-d5fb-4954-9b61-ff2777782924",
        "cursor": {
          "ref": "59849d75-dbe8-4407-92dd-9d7e3bd71684",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "32c759c7-e940-48a6-a5bb-98f31a142941"
        },
        "item": {
          "id": "af1f04e3-d5fb-4954-9b61-ff2777782924",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6e267cfe-f268-434c-88c3-dd1ca0095465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d63816-7497-4e99-9d71-a9dea96243fa",
        "cursor": {
          "ref": "6bd55150-ab11-4743-8e8b-f58ea06e3898",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0894eabe-f679-4d40-b3a8-94cb9d91fb03"
        },
        "item": {
          "id": "76d63816-7497-4e99-9d71-a9dea96243fa",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ff56c2f6-6eec-4353-a332-f5c466fef388",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d63816-7497-4e99-9d71-a9dea96243fa",
        "cursor": {
          "ref": "6bd55150-ab11-4743-8e8b-f58ea06e3898",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0894eabe-f679-4d40-b3a8-94cb9d91fb03"
        },
        "item": {
          "id": "76d63816-7497-4e99-9d71-a9dea96243fa",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ff56c2f6-6eec-4353-a332-f5c466fef388",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150f9071-c895-4400-9071-2c4d3b706c84",
        "cursor": {
          "ref": "3f781a96-0d60-4257-8b1a-c2feaf888cf7",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b83d72c8-3c6c-4a1d-9402-58be9515d46f"
        },
        "item": {
          "id": "150f9071-c895-4400-9071-2c4d3b706c84",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d384194e-5a5a-4873-b9e0-3cbb95f547d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150f9071-c895-4400-9071-2c4d3b706c84",
        "cursor": {
          "ref": "3f781a96-0d60-4257-8b1a-c2feaf888cf7",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b83d72c8-3c6c-4a1d-9402-58be9515d46f"
        },
        "item": {
          "id": "150f9071-c895-4400-9071-2c4d3b706c84",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d384194e-5a5a-4873-b9e0-3cbb95f547d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578acb37-44f3-4314-a706-6542e4d3ee2f",
        "cursor": {
          "ref": "8d1a6fda-998e-4c2a-965a-d5fe761e00b0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b0db69a0-8681-41ae-8a4c-8411208139a0"
        },
        "item": {
          "id": "578acb37-44f3-4314-a706-6542e4d3ee2f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "333fae33-9d93-4c15-a089-8b9a5d13d23b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578acb37-44f3-4314-a706-6542e4d3ee2f",
        "cursor": {
          "ref": "8d1a6fda-998e-4c2a-965a-d5fe761e00b0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b0db69a0-8681-41ae-8a4c-8411208139a0"
        },
        "item": {
          "id": "578acb37-44f3-4314-a706-6542e4d3ee2f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "333fae33-9d93-4c15-a089-8b9a5d13d23b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd497de-1bf7-40e9-abaf-0880408ae986",
        "cursor": {
          "ref": "b11c0bab-02a7-4cbf-aad2-a0ff118a0a08",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "092a0ac0-0868-4fda-a513-ff5018a2fe51"
        },
        "item": {
          "id": "6fd497de-1bf7-40e9-abaf-0880408ae986",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "466d7e55-0df9-4226-8407-c71d1aa91aaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd497de-1bf7-40e9-abaf-0880408ae986",
        "cursor": {
          "ref": "b11c0bab-02a7-4cbf-aad2-a0ff118a0a08",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "092a0ac0-0868-4fda-a513-ff5018a2fe51"
        },
        "item": {
          "id": "6fd497de-1bf7-40e9-abaf-0880408ae986",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "466d7e55-0df9-4226-8407-c71d1aa91aaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd6b81e-f70c-49c4-9e23-2e60db358d00",
        "cursor": {
          "ref": "5fa9d9cd-9b78-419c-a815-e22726597f9c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "21165a29-9f6f-46a7-bad9-a7bc6d82951c"
        },
        "item": {
          "id": "4dd6b81e-f70c-49c4-9e23-2e60db358d00",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d6e4b7e5-1e1a-4538-91fd-53ac15b3aad0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd6b81e-f70c-49c4-9e23-2e60db358d00",
        "cursor": {
          "ref": "5fa9d9cd-9b78-419c-a815-e22726597f9c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "21165a29-9f6f-46a7-bad9-a7bc6d82951c"
        },
        "item": {
          "id": "4dd6b81e-f70c-49c4-9e23-2e60db358d00",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d6e4b7e5-1e1a-4538-91fd-53ac15b3aad0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0214fec9-3186-4bfa-a99a-8dfd99cb338a",
        "cursor": {
          "ref": "d6a750ba-379a-4849-bb7b-f2a8e956177d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b41b4437-90a4-4ea4-8df1-0e1611fd3009"
        },
        "item": {
          "id": "0214fec9-3186-4bfa-a99a-8dfd99cb338a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "05e4aca9-17e8-48a0-8c24-82b84195b375",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0214fec9-3186-4bfa-a99a-8dfd99cb338a",
        "cursor": {
          "ref": "d6a750ba-379a-4849-bb7b-f2a8e956177d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b41b4437-90a4-4ea4-8df1-0e1611fd3009"
        },
        "item": {
          "id": "0214fec9-3186-4bfa-a99a-8dfd99cb338a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "05e4aca9-17e8-48a0-8c24-82b84195b375",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7deac5-87d4-4283-98a4-2f85a36311b2",
        "cursor": {
          "ref": "7b235253-ae17-48f3-92ad-fd891c9a6912",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "000c3d4a-61b7-41d6-9ed9-f8c988f9fdc5"
        },
        "item": {
          "id": "cf7deac5-87d4-4283-98a4-2f85a36311b2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c5356519-5cca-4e7f-8b26-599ad6889b0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7deac5-87d4-4283-98a4-2f85a36311b2",
        "cursor": {
          "ref": "7b235253-ae17-48f3-92ad-fd891c9a6912",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "000c3d4a-61b7-41d6-9ed9-f8c988f9fdc5"
        },
        "item": {
          "id": "cf7deac5-87d4-4283-98a4-2f85a36311b2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c5356519-5cca-4e7f-8b26-599ad6889b0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b832f913-9ed9-4d96-9906-dbba87fa717c",
        "cursor": {
          "ref": "7fbb1a91-e16e-4ad9-ab1d-db01906019e9",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9ee00cc2-5837-4651-991d-4785091e86bd"
        },
        "item": {
          "id": "b832f913-9ed9-4d96-9906-dbba87fa717c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "adf57ab3-599d-42af-81e0-ce6b290cdde6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b832f913-9ed9-4d96-9906-dbba87fa717c",
        "cursor": {
          "ref": "7fbb1a91-e16e-4ad9-ab1d-db01906019e9",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9ee00cc2-5837-4651-991d-4785091e86bd"
        },
        "item": {
          "id": "b832f913-9ed9-4d96-9906-dbba87fa717c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "adf57ab3-599d-42af-81e0-ce6b290cdde6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4338056-0da3-42af-b3a0-2b83e58bfb4a",
        "cursor": {
          "ref": "115948e8-48eb-49fa-811b-7c8e9d30c105",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c73fb556-82f3-4530-9946-a6ee1c508349"
        },
        "item": {
          "id": "f4338056-0da3-42af-b3a0-2b83e58bfb4a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7372c252-a966-49fa-a4e8-0164915b5716",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4338056-0da3-42af-b3a0-2b83e58bfb4a",
        "cursor": {
          "ref": "115948e8-48eb-49fa-811b-7c8e9d30c105",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c73fb556-82f3-4530-9946-a6ee1c508349"
        },
        "item": {
          "id": "f4338056-0da3-42af-b3a0-2b83e58bfb4a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7372c252-a966-49fa-a4e8-0164915b5716",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c86f817-12d5-4d41-828d-a87b4f7a0c7a",
        "cursor": {
          "ref": "1110ba5b-fc19-44cd-a318-f1d43a314f0d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c5f12311-d764-4edf-b31f-ca0544e12ce8"
        },
        "item": {
          "id": "9c86f817-12d5-4d41-828d-a87b4f7a0c7a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e70a2174-80c9-43e2-b312-99a3b40f3dfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c86f817-12d5-4d41-828d-a87b4f7a0c7a",
        "cursor": {
          "ref": "1110ba5b-fc19-44cd-a318-f1d43a314f0d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c5f12311-d764-4edf-b31f-ca0544e12ce8"
        },
        "item": {
          "id": "9c86f817-12d5-4d41-828d-a87b4f7a0c7a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e70a2174-80c9-43e2-b312-99a3b40f3dfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd49b149-1b50-4d6d-95d2-4be3dd50761f",
        "cursor": {
          "ref": "32d47c83-0ae0-4354-bd39-d8e3047d0c34",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "59ff4441-3e22-4b38-bb3a-3ad38fab44f0"
        },
        "item": {
          "id": "dd49b149-1b50-4d6d-95d2-4be3dd50761f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "268b7127-72da-408d-b07b-5346a4f99068",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd49b149-1b50-4d6d-95d2-4be3dd50761f",
        "cursor": {
          "ref": "32d47c83-0ae0-4354-bd39-d8e3047d0c34",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "59ff4441-3e22-4b38-bb3a-3ad38fab44f0"
        },
        "item": {
          "id": "dd49b149-1b50-4d6d-95d2-4be3dd50761f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "268b7127-72da-408d-b07b-5346a4f99068",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7910ee2-39e2-45a7-af90-e3c06f4175fd",
        "cursor": {
          "ref": "1c274bff-b9ed-4187-af6a-3720c9a14cd3",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c2b1c0c9-bfd6-4675-9b0d-24d0c00facaa"
        },
        "item": {
          "id": "c7910ee2-39e2-45a7-af90-e3c06f4175fd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "64c55dbe-38fb-4fee-a770-050831a349d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7910ee2-39e2-45a7-af90-e3c06f4175fd",
        "cursor": {
          "ref": "1c274bff-b9ed-4187-af6a-3720c9a14cd3",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c2b1c0c9-bfd6-4675-9b0d-24d0c00facaa"
        },
        "item": {
          "id": "c7910ee2-39e2-45a7-af90-e3c06f4175fd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "64c55dbe-38fb-4fee-a770-050831a349d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec9da78-6305-4333-b791-a39e43bee940",
        "cursor": {
          "ref": "0bde8354-e188-42c7-a4db-9f90a3a738fc",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "8e20bec0-f576-4222-a3fb-72427cb6fead"
        },
        "item": {
          "id": "8ec9da78-6305-4333-b791-a39e43bee940",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5c592e83-612a-424e-87ac-05ef00b740ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec9da78-6305-4333-b791-a39e43bee940",
        "cursor": {
          "ref": "0bde8354-e188-42c7-a4db-9f90a3a738fc",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "8e20bec0-f576-4222-a3fb-72427cb6fead"
        },
        "item": {
          "id": "8ec9da78-6305-4333-b791-a39e43bee940",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5c592e83-612a-424e-87ac-05ef00b740ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6607383-e84e-4490-b417-9a441a5354e5",
        "cursor": {
          "ref": "4718fd80-a3dc-49d3-83cc-6a1c84e38b37",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b9093034-4fb0-4387-b875-451d129f5e84"
        },
        "item": {
          "id": "e6607383-e84e-4490-b417-9a441a5354e5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b624c705-0c71-4ccf-a8a6-df38962ed6bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6607383-e84e-4490-b417-9a441a5354e5",
        "cursor": {
          "ref": "4718fd80-a3dc-49d3-83cc-6a1c84e38b37",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b9093034-4fb0-4387-b875-451d129f5e84"
        },
        "item": {
          "id": "e6607383-e84e-4490-b417-9a441a5354e5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b624c705-0c71-4ccf-a8a6-df38962ed6bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43e3434-0f1d-4756-9fca-61ca35d86c17",
        "cursor": {
          "ref": "6d3fb780-bba6-44c0-979a-78a9d5843d9f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "bc991439-49f2-402f-950d-874c1c336ca7"
        },
        "item": {
          "id": "f43e3434-0f1d-4756-9fca-61ca35d86c17",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a17e2dae-1938-47cc-8467-42f64894ad40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43e3434-0f1d-4756-9fca-61ca35d86c17",
        "cursor": {
          "ref": "6d3fb780-bba6-44c0-979a-78a9d5843d9f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "bc991439-49f2-402f-950d-874c1c336ca7"
        },
        "item": {
          "id": "f43e3434-0f1d-4756-9fca-61ca35d86c17",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a17e2dae-1938-47cc-8467-42f64894ad40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790061ab-51f7-42ec-89cb-39d183769083",
        "cursor": {
          "ref": "da0c7404-a817-4c3e-9587-e70cb62592a0",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b2257d07-ede2-4468-8eac-ae2d470c191e"
        },
        "item": {
          "id": "790061ab-51f7-42ec-89cb-39d183769083",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bd1c8430-9465-42f9-91cb-d59afeab64c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790061ab-51f7-42ec-89cb-39d183769083",
        "cursor": {
          "ref": "da0c7404-a817-4c3e-9587-e70cb62592a0",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b2257d07-ede2-4468-8eac-ae2d470c191e"
        },
        "item": {
          "id": "790061ab-51f7-42ec-89cb-39d183769083",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bd1c8430-9465-42f9-91cb-d59afeab64c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455a57f1-9a3d-4296-a81e-bce8a61caa59",
        "cursor": {
          "ref": "e1f8fa43-ccea-4e9a-83e2-c24b97f7d653",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c8061e12-0bfa-458a-af21-c9e4a8daadfc"
        },
        "item": {
          "id": "455a57f1-9a3d-4296-a81e-bce8a61caa59",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fcc84c7b-7a41-4565-81e1-de677451c6e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455a57f1-9a3d-4296-a81e-bce8a61caa59",
        "cursor": {
          "ref": "e1f8fa43-ccea-4e9a-83e2-c24b97f7d653",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c8061e12-0bfa-458a-af21-c9e4a8daadfc"
        },
        "item": {
          "id": "455a57f1-9a3d-4296-a81e-bce8a61caa59",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fcc84c7b-7a41-4565-81e1-de677451c6e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3102f333-af76-461e-b141-19b0e3e03afc",
        "cursor": {
          "ref": "68f40783-60cc-4328-b454-01ea96621b37",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e2930916-afea-440a-8383-13227ac582b1"
        },
        "item": {
          "id": "3102f333-af76-461e-b141-19b0e3e03afc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6c007dac-e294-41fb-9ce6-fcd5fb4af835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3102f333-af76-461e-b141-19b0e3e03afc",
        "cursor": {
          "ref": "68f40783-60cc-4328-b454-01ea96621b37",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e2930916-afea-440a-8383-13227ac582b1"
        },
        "item": {
          "id": "3102f333-af76-461e-b141-19b0e3e03afc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6c007dac-e294-41fb-9ce6-fcd5fb4af835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d9aef3-5d03-4476-b91e-94067e686600",
        "cursor": {
          "ref": "29ed4eff-f3ad-416f-af82-796e5c3bff6f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9e3cab05-8e05-487c-8143-52515d1a532d"
        },
        "item": {
          "id": "a8d9aef3-5d03-4476-b91e-94067e686600",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5344f68a-2eff-43f9-bbf4-c77f72a5ee6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d9aef3-5d03-4476-b91e-94067e686600",
        "cursor": {
          "ref": "29ed4eff-f3ad-416f-af82-796e5c3bff6f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9e3cab05-8e05-487c-8143-52515d1a532d"
        },
        "item": {
          "id": "a8d9aef3-5d03-4476-b91e-94067e686600",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5344f68a-2eff-43f9-bbf4-c77f72a5ee6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c1e81c-a390-456c-a4e8-9bc44e68ac44",
        "cursor": {
          "ref": "e5ec73e2-b641-48e9-ac8a-c28de30c633c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5bf6c2b9-a4c6-47bc-b46a-7a7ebceee85b"
        },
        "item": {
          "id": "68c1e81c-a390-456c-a4e8-9bc44e68ac44",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5d6fac89-1fde-418b-aa9e-ff6506b334b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c1e81c-a390-456c-a4e8-9bc44e68ac44",
        "cursor": {
          "ref": "e5ec73e2-b641-48e9-ac8a-c28de30c633c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5bf6c2b9-a4c6-47bc-b46a-7a7ebceee85b"
        },
        "item": {
          "id": "68c1e81c-a390-456c-a4e8-9bc44e68ac44",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5d6fac89-1fde-418b-aa9e-ff6506b334b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af191dc-63c0-4aa9-aca6-10a0930076f1",
        "cursor": {
          "ref": "061828ac-bca9-4c78-9843-010b514fdcf2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "aed426a9-7414-437b-8552-c36e40d75f1b"
        },
        "item": {
          "id": "9af191dc-63c0-4aa9-aca6-10a0930076f1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "02c3ceed-c3cf-4664-bd51-c639b0fc5d7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af191dc-63c0-4aa9-aca6-10a0930076f1",
        "cursor": {
          "ref": "061828ac-bca9-4c78-9843-010b514fdcf2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "aed426a9-7414-437b-8552-c36e40d75f1b"
        },
        "item": {
          "id": "9af191dc-63c0-4aa9-aca6-10a0930076f1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "02c3ceed-c3cf-4664-bd51-c639b0fc5d7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166ab715-3e7e-438d-a493-50b73361eec0",
        "cursor": {
          "ref": "0b664624-e64b-47a9-b08b-3d2a4b947f81",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e8172508-0a3a-464d-a40e-c31a956f0bfb"
        },
        "item": {
          "id": "166ab715-3e7e-438d-a493-50b73361eec0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "63797b5d-1da2-4333-970b-14cbbb654a4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166ab715-3e7e-438d-a493-50b73361eec0",
        "cursor": {
          "ref": "0b664624-e64b-47a9-b08b-3d2a4b947f81",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e8172508-0a3a-464d-a40e-c31a956f0bfb"
        },
        "item": {
          "id": "166ab715-3e7e-438d-a493-50b73361eec0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "63797b5d-1da2-4333-970b-14cbbb654a4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddde87e-4729-4713-97e0-11286447f8fc",
        "cursor": {
          "ref": "2f8ed69c-9fa3-46d6-bfe3-b810d287ff72",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "967434d1-34b7-450a-a3bc-f75f3bee40fa"
        },
        "item": {
          "id": "1ddde87e-4729-4713-97e0-11286447f8fc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1e137560-12d3-4d63-af25-fa018f3756d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddde87e-4729-4713-97e0-11286447f8fc",
        "cursor": {
          "ref": "2f8ed69c-9fa3-46d6-bfe3-b810d287ff72",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "967434d1-34b7-450a-a3bc-f75f3bee40fa"
        },
        "item": {
          "id": "1ddde87e-4729-4713-97e0-11286447f8fc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1e137560-12d3-4d63-af25-fa018f3756d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0c8bd8-b20e-4741-9927-c7f17b3c4198",
        "cursor": {
          "ref": "1d73f6ef-93d3-427b-bff6-b8a89be5743b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "774796b4-cea2-401f-a966-9e9e0a1c4fb8"
        },
        "item": {
          "id": "ab0c8bd8-b20e-4741-9927-c7f17b3c4198",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fcb6e423-acc0-4367-bf88-ba3e8c9da249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0c8bd8-b20e-4741-9927-c7f17b3c4198",
        "cursor": {
          "ref": "1d73f6ef-93d3-427b-bff6-b8a89be5743b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "774796b4-cea2-401f-a966-9e9e0a1c4fb8"
        },
        "item": {
          "id": "ab0c8bd8-b20e-4741-9927-c7f17b3c4198",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fcb6e423-acc0-4367-bf88-ba3e8c9da249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede99c54-2784-4a18-92ce-8df51a1d14a3",
        "cursor": {
          "ref": "710911fb-5442-451e-a0f5-a2471d46ed79",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d9b2d61d-8e70-458d-b59c-75c0c03eca98"
        },
        "item": {
          "id": "ede99c54-2784-4a18-92ce-8df51a1d14a3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3c1fc8dd-2d0d-48bc-ba44-6671e6b3eec1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ede99c54-2784-4a18-92ce-8df51a1d14a3",
        "cursor": {
          "ref": "710911fb-5442-451e-a0f5-a2471d46ed79",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d9b2d61d-8e70-458d-b59c-75c0c03eca98"
        },
        "item": {
          "id": "ede99c54-2784-4a18-92ce-8df51a1d14a3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3c1fc8dd-2d0d-48bc-ba44-6671e6b3eec1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "79533621-9dbe-48e2-bc8e-69a8bf81f70e",
        "cursor": {
          "ref": "97e300e5-4fec-420b-87e9-ea121061bf4c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ed7a6dfa-3b5f-4b93-a087-256fc39b37d2"
        },
        "item": {
          "id": "79533621-9dbe-48e2-bc8e-69a8bf81f70e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e72bbbaf-aae8-41c1-9fc6-fe6842775571",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "79533621-9dbe-48e2-bc8e-69a8bf81f70e",
        "cursor": {
          "ref": "97e300e5-4fec-420b-87e9-ea121061bf4c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ed7a6dfa-3b5f-4b93-a087-256fc39b37d2"
        },
        "item": {
          "id": "79533621-9dbe-48e2-bc8e-69a8bf81f70e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e72bbbaf-aae8-41c1-9fc6-fe6842775571",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "a21ec883-b0b3-4600-aefe-d70fac546ccc",
        "cursor": {
          "ref": "c3216b8d-506c-4ffa-8c37-9b654e4f461a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "26baf41f-2a9e-40d2-94f2-f9649aa2f700"
        },
        "item": {
          "id": "a21ec883-b0b3-4600-aefe-d70fac546ccc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "90b91e61-c4d2-4fe8-9e26-6e453e067890",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "a21ec883-b0b3-4600-aefe-d70fac546ccc",
        "cursor": {
          "ref": "c3216b8d-506c-4ffa-8c37-9b654e4f461a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "26baf41f-2a9e-40d2-94f2-f9649aa2f700"
        },
        "item": {
          "id": "a21ec883-b0b3-4600-aefe-d70fac546ccc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "90b91e61-c4d2-4fe8-9e26-6e453e067890",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "d267928d-75b6-4ef5-af78-e7a6bb3acabe",
        "cursor": {
          "ref": "b805bdcd-a502-4b07-8fb4-d82edef05302",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "00ce2649-aaa9-4b9e-b585-46eb60ef5205"
        },
        "item": {
          "id": "d267928d-75b6-4ef5-af78-e7a6bb3acabe",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b26eae4-3278-4af6-be60-ed9d1b0c9f64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d267928d-75b6-4ef5-af78-e7a6bb3acabe",
        "cursor": {
          "ref": "b805bdcd-a502-4b07-8fb4-d82edef05302",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "00ce2649-aaa9-4b9e-b585-46eb60ef5205"
        },
        "item": {
          "id": "d267928d-75b6-4ef5-af78-e7a6bb3acabe",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b26eae4-3278-4af6-be60-ed9d1b0c9f64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d267928d-75b6-4ef5-af78-e7a6bb3acabe",
        "cursor": {
          "ref": "b805bdcd-a502-4b07-8fb4-d82edef05302",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "00ce2649-aaa9-4b9e-b585-46eb60ef5205"
        },
        "item": {
          "id": "d267928d-75b6-4ef5-af78-e7a6bb3acabe",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b26eae4-3278-4af6-be60-ed9d1b0c9f64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2d51fe-0d1e-4400-b895-43a0d82aedcb",
        "cursor": {
          "ref": "3aa29aca-4f0c-45dc-934e-ec4ac4c1e1fb",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "439bd244-af38-4299-a0ea-cc4e440d71b3"
        },
        "item": {
          "id": "bf2d51fe-0d1e-4400-b895-43a0d82aedcb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "80f2e19d-9482-49c5-b6e0-c30a889b9e0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2d51fe-0d1e-4400-b895-43a0d82aedcb",
        "cursor": {
          "ref": "3aa29aca-4f0c-45dc-934e-ec4ac4c1e1fb",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "439bd244-af38-4299-a0ea-cc4e440d71b3"
        },
        "item": {
          "id": "bf2d51fe-0d1e-4400-b895-43a0d82aedcb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "80f2e19d-9482-49c5-b6e0-c30a889b9e0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140adb1f-473b-4ef4-a73c-f28573555770",
        "cursor": {
          "ref": "74ec9a0f-7552-4213-b3c5-0a2bcb0c6e71",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "aa0dc4ed-6f6f-4d3f-9b86-4b5c5644ddb0"
        },
        "item": {
          "id": "140adb1f-473b-4ef4-a73c-f28573555770",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8e6f0e42-e425-431d-956b-f7af091eab11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140adb1f-473b-4ef4-a73c-f28573555770",
        "cursor": {
          "ref": "74ec9a0f-7552-4213-b3c5-0a2bcb0c6e71",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "aa0dc4ed-6f6f-4d3f-9b86-4b5c5644ddb0"
        },
        "item": {
          "id": "140adb1f-473b-4ef4-a73c-f28573555770",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8e6f0e42-e425-431d-956b-f7af091eab11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}