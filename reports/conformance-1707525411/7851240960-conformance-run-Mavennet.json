{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c6c35164-e41d-4821-9375-068558ba5b1a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1c22fb72-b6c1-4e2e-9f25-de6341421cef",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ae4ce40-a5db-4bfd-8bce-41caae11afc5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bdec24d6-b2b3-49b6-9eb8-ac054d942e0b"
                }
              }
            ]
          },
          {
            "id": "53889ceb-6ab3-4a58-9a76-6875eb73d35e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7729b5c1-aaec-4611-9b7c-b0eb86078bf2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9d903eb1-98cc-4ccf-ba80-d2f6081496e7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bd3361dc-c98a-40cf-9f4f-60463bfb479d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d447b98e-451b-4539-b092-b0595907fa4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e49a6f67-6f27-4bd3-974e-c9c7df6f8a38",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9f866de-4d7d-4572-95c9-056d30f63d20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ec2c946-ec12-4e5d-a040-479bf1b31c4a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b46e24ff-456d-4404-8256-6dd23f41f597",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71cb96e4-f0c9-4142-b53e-37a3835aed78"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "80a330a6-b8ac-464d-b3d5-cddd7400b576",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a30b15a9-fbff-4e0f-8f79-4c7b41dbcfc9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5ecba6a-ca03-4e89-9e74-b6724430069a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d9e925a6-7475-491f-a8a3-b4ef8eb30679"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b59d8d98-9f82-49b6-b259-8aa4d696b6cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f570c0a9-3231-4da4-aec8-89c4ffd2ed7c"
            }
          }
        ]
      },
      {
        "id": "c092038e-974e-4e1d-af51-8b601cf88540",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "48cdd274-8690-4137-be83-9b7488de720f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "620c884c-47ae-4fae-83c5-f6690b0a606a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f8133d9-1e81-4474-9301-f311e116f3d3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9038a7eb-5f5e-4aa6-85d7-7ef53385366a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d088d984-fb88-4bf0-a435-bbebac3e165e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564c72c3-294e-4d4c-a929-a56215cd0803",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5c2f49-9a13-435e-a63f-78b6b7914f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ada09ed-1114-4d64-b968-68ecc1c6659c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b19e78-3706-41b8-9027-85c2d2dbba22",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1e9bec-7e85-410e-aaa4-791db922637e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "475f1e52-e410-4f64-b68f-00a2d3788839"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f223784-4084-4037-a116-e4659f559c88",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bbf2a2e0-93b0-445b-89f7-d47843e794c4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1c6493-c08b-4f06-8654-44dcdce8f34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "350a6d68-bd7d-4dda-87d7-ae92af7248d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601fa2cc-9c5d-4058-befa-23efc087486d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0ece9a-1665-4d94-a748-ce8480ab4897"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "70b40dee-3927-494a-ae99-74a114804882",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b9a78c6-fa84-4b1a-badd-01d33f752603",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a4e37b4-9f31-416b-be51-4096c412a7b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d6d75739-c912-49c5-a34b-530c04fb3962"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2b39a62-25d4-4ddd-8052-770f53b4a986",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3ad77573-5d68-478b-8704-37644e9b47f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4e7ceb8-cc21-48ca-bd81-d2fba188f0b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6bbe645-8b1b-4e6d-9881-44173d3006b8"
            }
          }
        ]
      },
      {
        "id": "7e51e838-1f27-48fd-baa7-c766e03173b9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e7d72f42-7b82-48aa-aedb-a289865778b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31adacd7-98b9-4cda-aaa0-4671a0b3e83a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "68554aa1-dd93-4a85-8d6a-f7e7af0fce9d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e32c58-decc-4d96-93c6-ea74748d0f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5adeeb3-9ad7-4e12-8b81-b6fc4e897f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a732969d-6002-4345-bf8c-93ae56941974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9aa412f7-d580-4e69-ab07-54ff591fc4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2d5b53-9ed7-4bd3-8832-4f4cccf09190",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f09350c-7b60-40bb-8f0a-059c7a0874a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b346b51-a790-4498-b6d5-0e3ba891e731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bc268c-08ad-43fa-af2d-d101f6cbf84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ca92f77-ff1f-4d74-a7df-69389c84cc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbbcd12-d8ea-48dc-bbd4-600ec3a0d47a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546dd891-bf86-4b17-8486-bf74f5ad07de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe78184-087a-475e-a724-cb4ca36ffece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693d6c32-eebe-4a18-82db-17b592ec1502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2355e16a-0c6a-4577-a279-ce1de06f7301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455d106b-1776-47b2-95aa-a5f0ecd57825",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493c91e1-2021-4271-a29e-e206dccad8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2241a1-0e70-4668-a910-d9ebf006437b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff664365-ef15-4fe7-bac0-3e8a95444845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53b1cfa7-7029-4335-b833-ad128fe934bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ce6821-e3bf-48ce-bffc-61f00de6d14d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829c6515-503c-40ae-93f1-e81571cf490b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ac90a2-3fe5-49b7-a520-07cfb258a513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bae9b02-25c2-4ce9-893c-e214dc867fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b69b786-33c7-40c6-918c-e690ae86c810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9676cd55-7cda-4701-994d-7e74e4700076",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82460773-aa8b-424e-9ada-8740bd7dd0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b8a899-898e-41ed-8dba-d9213975f713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33655b8-3680-43f7-9474-670874d56405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bada227-77b8-4518-af1a-60c6a1ba9310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590a7f9e-b8d4-451c-978b-6e79085e5dba",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516179ac-5d6c-4180-b621-f695df60cada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac74035-2633-4046-8f7a-bbb718544a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9b8441-dd58-4453-bcfd-1544c49f49b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "880f4355-66ee-4e7d-9e96-55340910d041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc773397-0b4f-4620-b33f-461d23176528",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05a44c0-2edf-45b7-8ec5-62f1710376f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4318df-2eee-4c2e-a7a8-b6e329f9818b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2a5442-9ddf-4e62-a484-941be19b22b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41fc899b-088e-4495-bd29-1ca6633c9df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1d7035-49a1-4b78-9428-92f14256ef59",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482db1c2-37ea-4760-98db-ea1be79be110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41fb23ec-0ce6-4f61-8f1d-e1cc3dd4f64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c8c062-29ba-449d-bbd7-4aeb034b14d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5933fe9-45a6-40a0-a990-4e33950e80e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d847c332-6660-4497-97fd-cbf0f3f339ba",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a005cd3a-3580-4c88-a9d5-eec124ff7f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1586062-2846-4a89-b4d8-8c8fed286152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd48d10-4f1f-49b9-b227-5a0b07f855fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b67a2e31-d1f4-4a92-9087-c100940a4f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c334dc-6041-4025-9560-0e53fd36d0dd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd83d4f-1358-4404-b1dd-2efff00f7f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9aafdf-e6f9-4b28-ab0d-0639a1f20e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab4260c-7c6b-4d98-aed9-e73be6485a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d444770-e723-48f6-9d7a-7ad89d6001a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee8fb2c-5609-41e5-ba95-e65c186cd45e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9784f888-f1db-434c-9535-88a17e1a42f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c82d1fb-d4f7-4c13-8492-f07b853b5e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976292bf-dea9-41d7-bf15-b98273e2b735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48406180-d471-49f2-8e94-d2475e805f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9cf61d-89c0-451c-8f29-98609a3a025a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229ae8e3-4490-4ae0-ae45-37c32c552195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a940ce7-d150-488f-aba9-f712f1e6f916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44f35d6-8d9d-4e83-9837-f25d73c14a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad571e82-90cd-4701-beb4-9d7ee75f8d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a110fba-c42d-4a0f-b804-295cfd6c406b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b92893-202f-4c91-88ee-102859d6c9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a775e199-62e3-44e1-bef6-7bd4e5d8f652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666ae134-f1a9-4cbe-93a4-134c375dbe97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e898e70-8b7e-4f09-8696-a6067d1a875f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ae42be-2a71-44fa-95f4-e4c36e5ddc5a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fe0261-41cb-48ba-84a8-1828bc969f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e12de0f-f618-469a-9158-6219488f994b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36f2668-f69a-40bb-aaf6-7514015e9db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38114a6b-f108-412b-9448-35474e4bd502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184d0c54-dcab-4468-b493-48a322f77294",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae89d01-dd25-48a7-a703-3a36d761899b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74163de0-ea65-4de9-8312-b3cd92ab73e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9264af-2e1f-41ce-8ae8-184d57ee0708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa815ed3-3874-4b0e-a371-23a26fa0024a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c6551c-ed46-4af2-8a52-31b1feb38c2a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f35899-4b27-44f0-a10e-0b9fb60dba61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7cd0ba-e2ae-4b46-9dd3-42c16c9e9e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a475d2-490d-452e-91bd-9b55d3f4390f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a33795e5-3321-4c09-8975-bd65f2f129bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717d9466-f173-41bc-8b70-54458324e114",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a675c66b-222c-4c20-a0dc-49fcb556ee9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45017455-6f28-44d5-b896-8ec196686c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5003a66f-5813-4b85-be77-bde728402f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "364627f1-ccf5-4ced-b7b2-c22afbffc168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb24105-306b-4be2-865a-6ccbca5bab57",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ddb396-d106-4f73-955a-b6a80cfbc635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c49e0bb-e73e-4be5-baf0-e969027dfa92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834f10a6-e52c-4c81-a287-edbe0986e155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ccdfcd2-f04e-450e-9564-9126f4f4948a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8057b6-5f6d-4ec8-9c8a-35692ca19165",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685685e5-02db-4607-bc79-930d142cf1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1dd9fd-9eac-4b66-90ef-17ebee37fca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47954d12-7810-4402-9719-fc74c3111d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfb0d2c-757b-4baf-8cd4-5df296169103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc6cb6d-3aa9-4f43-b5a5-cb1152d8e2a0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ed01d8-aec1-4d9b-9f11-10964c446883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67acfe26-cf8b-4963-9912-d5e72f625a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9513443e-fa82-46b8-87a0-77d1e7c8152d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a06a8f06-19f9-4fe4-b40b-daaeb774ee86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d2d743-e479-4bf4-9bc5-c5eb26183ebe",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cb0d84-70f2-4f13-9780-76ce8555992e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5785f1da-b649-424e-a5eb-212d4a39d095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7142c576-9149-46f7-9ed8-816c4b333cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9ec442-a396-4b27-96f9-38f37f9f8a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c564ae3-a545-4a4f-804b-aafdb7f2321e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0177116f-74d4-41bc-861b-7e586a3f09aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2787c716-6d06-4761-b932-510e79669b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ec55d8-26b3-40cb-903a-214736b54162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2be3527d-7912-4edc-8290-7861600b06d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62806ab-ae04-4145-9dd4-789073dac67d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa2aa30-4a65-4808-a150-5dbd4da8cccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc70860-93ea-4fcf-a13e-9ce1c88ae572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7071de-179c-462c-a08d-403a6e5afccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b92d13-0474-4fdf-8812-1940c467f58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f011f630-c576-481c-9f42-15c22ed55df9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cffde94-d62d-4eb9-bbf0-36b78858b115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e800b732-2e35-4f8d-a014-4e20f3493d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50e7010-d8c7-49e7-aa93-ee5bb0984991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5be275-ede0-4893-87ee-3f6a343bbed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce0d51b-e981-4393-8329-a024ecb21827",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c2a1fa-644d-4e8d-86b2-045d0436bf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6894e63-b0f2-4155-b521-6d77e6525108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcd5e9b-ce78-46ca-8ba0-cf05ee4a9ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab3992d-d934-4a84-baf2-50db2521c33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1caf0b53-5dee-43b3-adce-67360efb8c6a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54399e64-ba58-4fb8-b01b-c0c3ca24eec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fe7cd4-6cfe-405d-bfe3-d591e9b8d9fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa70196-4a1a-4e25-8a00-9e4368ef6579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0492cc3e-65ac-4825-ba48-e8e84301993a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc9cd9f-ba1b-4b3f-8b85-dd229f523d9c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7465b611-a27c-4839-85c4-2030058c11da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df62f7f-bf7c-471c-81df-5b013a2a8617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced816b1-65af-4e23-bf1c-e53a4be47b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f03694e6-f05e-4ce5-a2b5-5022b07c4631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1736690-8673-4885-8995-d0919baf8e89",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805efe98-33dc-423c-9ae7-baabe6ccc5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb2ea88-5cd1-42fa-9807-75130d2fc4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3751295-8390-456e-b591-f2d451b828b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ce30bc-664d-4270-be12-84bf83040daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ae6097-a6ca-46e1-abb8-d13bff88dde4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aba90c9-ef25-409c-9791-6da1e1ead04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6581c556-0406-435e-ac23-3e6055026082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eae4dd3-a462-403b-9031-54952748154d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e45ea772-0d25-4ba6-ac6c-076dbc151922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332d2dbc-79d0-4818-bd10-e88e7e49e18c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d7e936-44e6-4d92-9123-236b3e204f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3df8f57-6133-43ee-967b-1032727fed97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0910d8fd-8a4e-4e42-846e-24769554daa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a09146ae-25e0-4c55-9bcd-bb5c9b7b3348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4435969-a4bf-4f17-ba4d-34ae14cb1bc4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa62cb92-d671-427a-bcd7-e624e6edaec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454429b3-1bd7-40a1-910b-4371fb10a96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67b51f8-9812-4f15-8210-b87cd774bf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f306d172-122a-4f2a-bdeb-ac6ff95289d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4e5e48-a276-43d0-a6c2-912f0dcf5e6f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271d5126-48a9-4b67-93eb-9d7fe7347ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cd8f30-ee69-4245-8c8f-00756b01fb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d25fd9d-4571-4c9e-bca8-fad00d17ae6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab2286c-d229-4dc9-8077-1ff70184e4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b459b7f-c116-4168-b1fc-f5202ee65484",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4936ca82-da4a-4812-9c81-051bfed23343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fca66b5-2772-4a07-ad5a-1716c3ba5361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a6db8a-5ea1-4309-9c13-d16e9f1a2401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8727396c-c3f9-4628-9843-b87e841cb9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e02c6f-191e-4bd9-9119-3745c02e4921",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9154e15c-dac7-455b-bb1e-b28e7a5f90c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90020f51-26f2-47eb-961f-51583e6d5415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9dc00c-aa0d-4550-8c98-29b99c2c8187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a2424ceb-ef44-4c20-8867-f35a7fc8b9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462fe07e-fbfa-4901-8891-0f78bd76fba9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9f627b-9d05-4706-894c-9c2c99f3a62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74dfbc79-7c4e-48de-aa16-a4883a7d5ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a76e1b-2e02-4a29-852f-5411f9c5974e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1adae4e6-8216-4447-a53a-d42119fed061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7410a197-42b3-457b-a678-d543d1c7bba8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ac70db-f9fc-48ab-9ed2-c6f5bcafcdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8bf202-b456-40ba-91ec-bc1b55f3a7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fabe6a0-b0e6-4d8c-8af5-7b8fb1125964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "925eb240-549f-4f46-bc5b-e93ed0687f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72f197e-af21-457e-bd1b-2ac0282370c9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3fb359-1df4-4dfb-b707-be489c3358ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90a0a64-0465-4192-8ba1-c7d015166f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd58b797-6b3c-4a21-bafb-06c191db9f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f4c6ab8-ace2-4ace-9e62-26a695d8f8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87148ef6-a9b3-4a4c-832e-f5270539adde",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab7ac51-e1ca-4531-a182-9e6ce6e88e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b603ca84-df4c-464e-a17e-1ec810716883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a3cb7b-d68b-4d5c-ae67-f278e5587b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1e2e35-231b-4bd7-ad72-b0f30c68fbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b731bcb6-7a34-4602-9ce9-2d128925385b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f2167c-76ac-4892-95c4-31fe3096c93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247675e9-0bf5-441d-9891-057d566b89e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36dd2d9-bc5a-425f-afc6-11271b33dc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "49820802-0eaa-46af-a60b-dfb1e3e30507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0086227-a326-4740-81cd-7c84d9ec461f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db99ff4-fa10-48dc-bb9a-89599213018c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "491c7918-9006-4db4-a698-69365f7d9e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4c5170-dc41-458c-88e5-bbcbc4affad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "73c2c5f4-488d-47c3-981c-873ab8961de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622b2d30-f9ca-4910-8e52-f84b55cbe294",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e1e3d1-ee32-4bb4-a9f9-f607dbf0f0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ea715d-048e-4c8e-8dcc-8be5f3999bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1053fe-5fcf-4b52-a5a5-f60f025230d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "777ae134-aa83-4b20-bf4f-aaba2d3c5275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3b8948-25cb-4c9b-a4dd-62e12532a1b1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3e0a9c-5fe6-487b-81cb-be5d74c3d8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6967793-e6aa-4ce3-a9d5-7192f82aa669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b344fb40-29e0-41c4-9e5c-bce156e15697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "548d1db6-7b1f-4767-9514-502b19703889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efb946c-29ab-47ab-8627-919587583798",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9453acd-59ac-447a-8a6e-b150573fc07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f4e778-905e-483d-b5f6-82394aa1323f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec1e581-b382-4f00-8d6d-df03d0256450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9b71ff-e272-4026-8f67-d8521084a462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac9707f-019e-4950-9568-f5a2a6f15b58",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35e0de8-d639-4613-aa1b-a71e05b68189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bd3525-7525-4de4-8db2-2a049e93654c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1070a0c-b4f6-484f-a5ce-2af362f795f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "68a0ce37-5720-45d2-83d1-c1af547275af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9203caa-b037-4f2f-914c-6eac4e4c14c7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd3fc5f-a01f-4fa3-8928-605bb73e42bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74876771-7190-4966-b4a7-9bd81b012264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca62f9c6-f0ef-4dc6-b5ca-d46b07da7aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a44f00e8-d3f3-48a3-82ff-364977a94316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26e4cd4-8dcf-4656-bedf-35270cf3c296",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b7d149-c525-4b5d-a06b-9113b7f8513a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc7f46ad-5506-4ad7-a386-788dfde8142c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c1f856-d196-4def-9eca-e4a1eddbb0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0db2b774-742f-46d1-b110-fdc9f59e4325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0634a8b9-5500-4a4e-9005-12ece33bc14a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ce5db9-6d5d-4ae1-892f-9f9a1650c691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42133f7-99da-443b-9d27-6e8faf2ed904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ac6db9-3dc4-4c2f-9e99-849f6d93001f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8644a07-eaab-480e-85ff-9b5c6f0c2668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e58ff75-6d95-4513-8c0b-bcac5e583479",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a024f282-2825-4653-9994-65845bf375c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed26fc6-0ebf-4928-aac4-54fe121caac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc25ce60-b2cf-4562-a9ed-8263b84c4da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa88651-bee1-445d-9c79-b21d39bbcad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f59f9b-ecb6-4bd4-bacd-cb2209617d8b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85077c57-82d8-404a-aa65-83fb5153bbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49fc7c9-ca6e-4436-bbc4-caae61b65361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2181c9b2-121d-42fd-9047-729703ea1f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d00b39eb-51b4-4cfd-8a8a-2c762dd1b5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9be889c-05c2-4361-8cdf-3bc8ba95be1b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f07dc8-815c-4e1c-bfe1-90f41f4af921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97398135-d57f-4ec7-a61c-3bf35d1cf3a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c959189-237b-4c99-9bfe-bf658baf9507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "070c7bb4-a256-4c52-b27d-f9c669bf378f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e83ccc-70ee-4da8-8ffc-56cc54702e25",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25b9ede-dbfe-463f-88dc-620c3a7c219f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11e68bd-ad1f-4947-b4df-6a583189f91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e8e840-85d0-4194-87a0-29de86a991c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "987a94b5-b8ab-4e73-b38c-f2a70c8daac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4471bbb-bd44-4814-b9a0-eba5a531e420",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5cfef8-5d1b-46bc-b52c-bf33d78fa581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f8c5b9-4169-42c0-9393-3d4b18adf6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c119e4a2-71a8-49e2-837e-59dbab2698b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ab77ec-bca5-409d-bd4d-494683c38ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c8d32d-d4dd-4cb0-9e6a-6eed1c62d1af",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd2dafd-2ed0-4b00-9cef-3b5e759d4942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7d9299-192d-41d1-9f83-bf7f972c2ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7430482b-c405-4e78-be50-9abc4f0a8509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ccb0fe1-d765-4270-9adc-185e96011358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbac3ec-c667-49c0-b233-688884c3828f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6c8504-74b9-49d2-b506-711f6e4535d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bcc9a4f-dd6d-4396-bf92-f42b0636f44f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64940e92-50f2-4acc-9f13-0d2aae59eabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cad7ecf0-2e97-483e-90d7-6f15e40fe2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e939790d-030c-4084-9484-6d9ca4512e14",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816654ce-dd3b-4096-96dc-f0603fda8655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d2cd8c-7aa1-4687-b26c-0fc6b63a19a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d105da50-062c-4c8c-bc1f-e21b7490563c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5eebbe32-28ac-48f8-b0a0-ee27375a1692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbdfa6f-e2a3-42f6-83c1-b24f61273eba",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1d2133-9ee4-46c9-a2ab-9a637e8c43e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af5a0d9d-9a7b-4ec8-9f9b-de9de1545110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc0ab49-4f2a-4e58-b049-6a74da9ebb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3c21ac-1be4-4d21-ac95-090f8440c896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e0a239-9aa8-4102-8ba2-f6f34f29731d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a095c69d-b15f-4dbc-89ef-7d8955bf49bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b09c063-e7a3-44c7-a8c1-1cb1475f9edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d04fd77-e879-49aa-bdb3-df8adafd491c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "52c7bb03-4101-4917-91dd-8d2e9b65a752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bc3980-bdb1-4839-bec2-cef43ac8c0ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2866fc90-f322-434f-b129-93a6fb3ee00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182fbf67-7fc3-44ef-9e1e-1b4954779bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcb5160-4a45-46cf-a009-1036660c81eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "677389c3-c3dc-49be-a385-862fdc0e2f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53919c4-f453-4a71-8d33-24b480704b64",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c32405-eb37-4c84-b332-410993e60f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3b47c5-d4e6-42b1-9d78-17ded786b9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db383197-322e-4690-b974-f80ec762c4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d657a54a-76ca-429d-a51f-33e90fca8d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef749322-527c-4b52-994e-0eef65ce30c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b35b26-84b1-4fec-9cd7-ced06a0b5f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c6e803-90c6-4c93-ad8a-fff2fbf158a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408bb3b9-0c58-4e75-9650-f7f5329c9373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc40c86d-a6ab-4886-8a33-bade4493c783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474d8004-d733-422c-9e92-feaef8909ff0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4222e30b-d44c-4b6a-aadd-33dac987114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fdb737-f968-4a96-9bd9-c7fea4d91a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e87362-ed45-4c18-9a5b-1792164a9e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "99f761d5-9f9d-4325-9655-d48a4251f91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433893cf-03e7-4ba5-a5d5-4f9b2b296f67",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457ff5bd-c1cc-437f-9eb7-1cf73086d83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f559887-8e49-47c7-bc76-c0dc02105932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8c7cad-47a2-425b-b717-daa509b993f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "69fa69a5-3dfe-44f0-ab69-94565afe1451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c214fc-e112-4faf-8f0e-c423efdb0565",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2d1eef-f522-435d-b212-68634da5a3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392a53b0-6b67-42e6-84b7-c0196966e0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2cc60e-c610-4702-a75f-7020a85abdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd4807a-5b6f-43b6-9484-6aa08ce8581f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd7ed49-d020-4f27-8581-2279d90793f3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437002ee-65ef-4d19-baf2-8b0bb0c9fd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a88938-23cd-4721-b855-d21ae802ec49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a52286-ee6e-4a0d-9436-d1c52618a032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4f1f5d-99d5-44fc-a423-406f752d9f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d1ac7d-46ea-4fb2-bb8f-7bcff343c26d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65d65c1-29ec-4788-a242-9be5f71c957b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2382355-9a59-435b-932e-3626a7e27bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7d47be-69e2-43ba-bd4b-9d3e3aa5167f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4751fadc-3e75-4864-9e99-bafb7e19474f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2954127-221e-40a8-81b0-2be5d30cbf3f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1100fc-f83d-401e-8354-4a35cc52f81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c917df85-60a4-44a6-8d94-03f8119d1ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b793b32-fcaa-494b-a004-077413687f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "822fe910-04bb-441c-8a73-954f457ce84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab2b7f3-8606-45a3-97e5-0a6b00f9bfa2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f534460-df9f-4486-bfab-0ffee6d1098d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578fac32-97ab-4d0c-b7d1-dd306f982726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42cc86b-7e8c-4690-bd07-b208616c473a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b27e468-17c1-45e4-ae11-96dfaae5c17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8df02b-9f85-4a04-86be-f1a9fc2f3322",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a47392-bbc4-4631-9b5a-b347e26a589b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "532e9221-8adb-4b61-9cb6-c2a465d6e569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af7339c-6561-4f21-9c74-02c578d93f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "428c5bf0-6133-4ac0-a315-7b235b2d8334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbd41b1-fe15-4a1f-a960-195478483d41",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f0639a-85e3-4074-8415-2a7bed096851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a5a116-855b-4d18-b9a7-538ce473238f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1cc643-008e-47dc-a2e1-de16a1cadc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43971041-4e9e-4c06-8f17-c3c1e05aee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d98f84-c7a9-41ae-8233-cc90126328fb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2a9f35-dce5-45a7-95cc-d7389286ea4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9404b23-ff12-47ef-87a0-5c6f8169ab02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b512cad3-ace8-4ae6-8c87-a7694674a041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6efde3c-222d-4984-8166-07fce313d545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba047bb-2d90-4400-9b24-28ec48e16e5c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7133d434-3ed2-4840-bdd6-d53647961963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4008b3dd-9278-461f-af6d-30d6cfac0f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b7d79a-b901-471f-9824-6fba5c659ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6164be4d-880d-477c-aee9-0c4429d3b724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8cd86e-c9dd-4fc3-9ee7-40a67af14a69",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0864cfc5-66b5-46b7-b1a9-36faa9c612d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e27ec93-6c37-4071-b809-15ed1cbc2c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9233d41a-7779-4bac-8cdd-6dbf75d4f57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb7de0f-2c4e-480a-87e7-ccef21fb58ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6a8d3b-e1b7-4ce2-ad5c-72978f79f647",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01976b4-8322-4f3b-91f5-4d9368e5fa1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d2e917-0475-481b-acf3-cbf7597fea7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1c48da-6305-47fe-8620-1afbc32e1c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4b9fe9-09f9-41f4-8ce5-9ba9cbde2565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacb1417-b0ca-4ebd-a0f4-bb396d3a1dd3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa378876-3ea0-4f7c-bd83-6b8f41c10ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f855ee5-b1d0-43c5-8700-679be6cfed6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4cbb3b-2805-4b14-a0d9-686f9db19802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20c0414d-c93a-4f8c-8181-aeb87857feba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5742c57-bd6e-4f7f-a06f-9501949f8f53",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a120d4a1-db10-48f5-8543-57502670cd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0e4031-a6fd-45ea-9da6-18c8c535fc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6aea46-6023-442d-9ef5-6234da115328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "135eb3fd-8d48-4163-b389-f0340953c72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7cf99b-191b-4384-a968-ed368ecba5fd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130c0951-5811-4a7d-8a44-7dfe35937278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c051b9-d1c8-4a3a-a9af-22f05b1938b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba21b33b-f847-4cb2-ab4d-9d02102eeb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c26826b-b176-47c9-9bab-c038e4131e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcc71ff-90d3-46d0-b011-c1e7e8b1c2de",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1ca80a-5cd0-454a-8690-c51ee4329304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b108f5da-7ed4-4321-8966-6c88637463eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e97ebf-a7ae-42c3-a0e1-d0c025a97f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5fc888-ff26-45b8-8d66-de6c7eae89fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0d2d31-c8c7-40c9-b97a-62a370937b95",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d5a9df-11f7-4b21-ac52-5682108c8718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0702f64c-f30e-4376-bc04-5e9893127ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ef9670-5207-483b-8b9e-4143770abce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a397b97-3768-4988-b9f3-912694629ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f982e7e3-fa2d-45a8-93ce-034c934048fd",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24efc805-da3c-49a2-bd5c-570d3874e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6356b79-1e92-4617-9e69-9eb055997fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bdda00-f4eb-4c81-8727-489e47edbffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f57b008f-bd1a-445a-a57b-e4f6b138cfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f431db1-faec-4032-85d9-9fc11a0e9d7d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3928cd-aa4e-435b-8b92-67480d7792a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176bf4c2-e4d6-4fe0-afec-bf2ee6fb6525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e6bc87-44f1-4392-b7bc-32cf9af0e237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "03bef4dc-b404-4b00-8636-bce0009f04c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b277ed35-a589-4e4f-a269-35a6c275847e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ff15d0-bb8e-4f1b-ae64-7601ff3b49d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a9b551-1e5a-4b3f-8fe0-9733db5b2232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b8e48c-9103-42c0-85fc-727db8e231a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "684b9770-a6ba-4402-b70d-ef768c46321c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a69f85-b1c9-4e52-8c1e-0fd5131bfa04",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f18bdad-ee6f-453a-8ee2-d1b88abefa33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5139d1-282b-40b6-8c53-909e2163b1fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7dfdb7-20fb-4cb2-be2b-3566348119a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dcefcd0-659e-4d47-8243-3c6321aa83d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e243de68-3372-4fbd-8e48-3c164d7478ec",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237fe086-9d66-4852-81c0-825d1d23302d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7fa54c-2b56-4924-bcc8-f00e384c2630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1541d91-fd48-40bf-9606-d43c3e7f75c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0507500-c800-4c63-b45b-a100740d00b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe08091-bd45-472b-a20f-b01ad46f3d5d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6c3ef9-69c6-4391-848a-9ecea8da4306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c03262-9c22-4229-9126-7d6853c80d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb289c4-d72a-4cae-bb27-21b5909919a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5184de21-7377-48d3-992c-b3950a6c2ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480f6f59-aed1-4c15-b632-5d799b0ec01e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611f4c9f-cb86-4f38-8f65-1e03d7f17a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5796b6ef-d367-4f4e-b6e1-c2f70adeb008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67e83ab-e5ff-4d29-b707-dddd098fb0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0dbd16b-e5f5-4ddc-9d26-88ecb2a99735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870d5ca3-31c2-46e3-9a6a-8922a58577ff",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d503a5eb-fd14-4267-9687-f1fe4010f986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ca7a97-2da9-4ef4-b75a-e614a3b0cc4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636635db-a886-4d4d-9a07-8973b5dc3ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9fdf286-7b21-4f66-bbee-afc2e16749cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07c94dc-c9f9-432e-a118-dc4040d785c3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f24a25-5355-409f-89cd-1c9ce10ecb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b675c2-91ec-4113-a187-a6a75c89469b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8e4920-e29c-45a8-b7cf-cd73904fc8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5aa20e-192e-4beb-8929-68eec8b68423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b807b22-2c48-41e6-afa2-93031a979ec0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94087661-3b44-48a4-b4c0-a5d753f24297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410ace5d-a8b0-4cc8-ae12-8dee050ae6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa23ef76-c155-494c-8671-f60e88f0766d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1234bd-523f-418f-a3d2-e7c074912778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2358e0b9-2cf4-4e64-aef3-e09617d1ac6b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d3fa2c-cfc7-4100-82d4-a208eb44fae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc3b8f3-cbbc-4839-8d41-40abd9e7bc30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056806a2-5949-4669-bbd9-cf903d22e6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b3295c-d88c-4399-9948-2e9fd9e6bba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e38b76-91b2-46a1-a354-1613053ef8bc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19587fea-2fd0-4649-b735-fd9941dc35d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4248b4d8-fc7e-46fd-82ce-802f53449434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9b3034-a3b3-495a-a816-bf7598f8a2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8defd84b-e6a6-44d2-9340-a95ee055711a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a741b68-d737-4583-b712-46c280fcb4ac",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67b12ff-2fda-4c54-9b90-f5c9315dd727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1d11d5b4-4f9f-4118-aa13-8b3f363ccfb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af165902-a619-4f96-8b8b-0085d21c71c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ea812d-4b0f-4d73-8eef-048e1f393aa0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1aff7d13-7165-4109-9c2d-0eaf4f631488",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "351633f6-5965-4a77-9ecb-fb60b4232916",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c256af-ddc0-4e0f-87b9-3e3b60cfb01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ea5cd21-1b4b-40f6-bfe4-c061a0f16f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb612816-c6c2-49d7-9d91-522a6c7d1c2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c497739c-3dae-43cc-a7d6-299145fa32d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eac1f549-0446-45c0-99bd-031829c9520c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7f14354-8913-4de7-a64d-a5787ab21762"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d252b5ce-0d00-44f2-9d83-c8ec3be25330",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1f95d22-862d-4dea-a3f8-c9bf76ef9e43"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6798510f-31cf-4a38-9ce2-2c29ac2c75aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1635fb20-92ec-4a42-8b15-bdc7909d8ead"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "001992ad-ebdf-4657-a72e-b4d90da50695",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1b4deea-d010-4bcb-a989-81d739e76a6a"
                }
              }
            ]
          },
          {
            "id": "cb36a81c-ff8d-40e0-be73-81fac125ed67",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a1fdc0c-1baf-46f7-88b1-f5ae2669a767",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "8257a19e-028d-461b-ae35-a0927bc3ebb9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44e9cd5-ceea-4caa-92c6-2fdc2e3a685f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "85d7b855-5119-49c8-b7ef-71110aea3541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d39dfd2-34cc-4d91-97a5-9f9b6c594043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd24a229-18a7-46af-8a9d-707d5d67d70a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c86122d4-fbb9-4fb5-9787-bff4f8a5a23e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bae9e8f-fd88-468f-8444-2177ab03c401",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a458e3e8-e9fd-4dcf-aa41-77723c34a937"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44e2ed14-2447-42bf-8922-6a10f17e587e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b6377f26-a254-4add-8af2-15a8a0470f8d"
                    }
                  }
                ]
              },
              {
                "id": "a74f81a7-4f7b-4ed3-b166-18abed703a36",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1c6d61d-91e6-41f0-9c84-e4a1b7144aa9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf198b39-3a7f-4241-b782-a1818673fd01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65bf9716-f51a-4866-813f-6eca197301e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f2f57e7-c783-4d72-9a97-7cc1f13ea6f1"
                    }
                  }
                ]
              },
              {
                "id": "5f046124-bf4f-435c-bb46-9ddc3aa070eb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0877b93c-4d73-4d82-9d7c-9da2f79a13c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3845871b-008c-479f-a036-ce83c4e75826"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25bd7453-9e41-446c-8bf0-361221b71e61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b34ab13b-0bf5-4c2c-9a97-7bc9b4f5bca2"
                    }
                  }
                ]
              },
              {
                "id": "cbbe8434-ef17-4bcb-ab45-e60d8c6b21b5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "819da1f7-3aa6-40da-99ac-ff98609d8bb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "035cb838-a4c9-40d4-a8ef-6681706bc063"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3781271-e9d3-4104-9b5a-19faed0bff3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dd55d66b-6ff8-45cf-9287-f7309370e176"
                    }
                  }
                ]
              },
              {
                "id": "256cb514-d2f1-4a9b-94e2-99970a087be4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83f7bbcb-487a-4615-a97d-e0301e0ef4ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43645ad5-151e-494d-a734-1ecb515b1f8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88a6edb6-7d03-4a40-b554-54d9f8a6046e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d0291fc0-1742-4879-a0d4-af947b34e971"
                    }
                  }
                ]
              },
              {
                "id": "2df5b3ab-181a-4cd4-bfaf-49fb749672e3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01582353-eff7-4f0c-94dd-a2cdc58004bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72f58a07-051b-43be-903c-93b22516bdd4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "118a93ec-0ed2-40d3-93e7-882aa9f9d4b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ef1b5a2-d0f5-4408-b70a-0dff31270249"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4da7381-c94a-4c87-8abb-a9d2d6d3343f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12cd7d36-8b44-432c-a595-a887ccb801ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3365981e-0e1f-4fa3-8db9-f3e7ae9e3591",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9806569c-4fa5-4408-88af-008d7d54fbe7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7b4171d-47e1-4d90-8040-66072dc91525",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b91dfbb9-9132-4631-a04b-094fc3f43c19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1099ece9-d326-45d5-9f74-649954d1df0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18b934f1-f646-4aba-af80-26c987ecb0b3"
            }
          }
        ]
      },
      {
        "id": "33e32aa4-cc63-4de2-b272-d49f93ab3da0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "57100b04-f614-4dc7-a002-2116a84e503c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf1a645a-8fd4-4e29-86aa-8eb62b2c7d93",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e79b1b0-8143-4f24-acd1-65c676cb9afb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34a7cdb-2b42-4703-a47f-1616c38c8ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3bd0fa-44f0-435d-9f21-33fb894a0f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8a7324-352e-40ff-ac6f-063f54eb8187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b894be-eded-4940-bd2b-3ecd66b1f64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee8074c-3ffd-45dd-aa60-0c73a2bf20b7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ccfd9c8-07c2-4290-b3fe-ca4a2f8b8a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e49f03-90a1-4923-b7c1-50bc5363f9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e0b441-0757-44fa-9b4c-e496e0f6b2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b1fcbae-5104-4ea1-9b20-5eb4ee4b5d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da6ff2e-c64d-409d-875c-7be79d0f1066",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc564fe-4edc-4a61-829d-16a732cbea48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7593cf6-f2d8-4983-9888-7bfe2975d29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a190f10-6d24-4891-b3a2-e0f02454a1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87a5284b-bdd3-4b0b-80bd-2c8970f3b2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06af4e9f-a0f9-4c5f-8c66-f4194fbde819",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ff660e-3c5b-4e5d-afe9-1955ae6f4214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9064cdc0-1372-4015-8a21-d21666db5dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a010c6bf-40e6-46e4-b225-2a1b49c39e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b628936d-6b07-42db-9f41-5cee29bfee7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cb41fa-577e-4e8b-9780-94ec605a6751",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b217613-26b3-4f99-bbf2-6060a254feea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae60761-3a98-4cd9-be8f-7667e1ebac70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b070ce06-faa5-49e8-9ab1-9172f702e542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddfb80d5-cb1b-4e6a-a99d-2354a2d02f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d16b4b9-d79c-4aed-a30c-d1e6248fb925",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373c71fd-7616-46fe-8b81-287b6448e30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ddba17d-7b53-41e5-aef2-03ea2dd54557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb8b7f2-3883-4a57-ac73-77fc967ff711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a5a594a-8d3c-4a0d-bd40-ef01e2b39732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662b0d9b-aba7-46c6-a27a-580f4e684ae5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44fc5cd-13ec-4031-8c7e-5933507423ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9756c370-7780-45a0-9c92-e49eae0641d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd9e192-012e-44cf-a8d0-2c4eebc53c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "052d7157-95f7-4805-b393-0e83630a2c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d840f6c-e960-4984-8b1c-e58fcc127553",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49aa221a-263f-4039-ad4e-5f15fcda71d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fec1708-15fd-448a-aa27-ea5384f4af96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7d005c-e6ff-4785-9df9-7483db935d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5db144de-2dab-4676-9865-1358778c048f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f7bd84-0f84-415f-8919-871ac635759e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53b917b-1784-4b97-99c2-e6765f9c6e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d40583d-6921-42ea-af7a-0ab77bb48f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2ed4a9-f4f5-4412-955e-8525032992bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb4f0f3-59c8-42ed-8bf6-053fbe913bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498bfd3d-6d29-4f98-ae1c-b6f0eb483c43",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3950a192-6483-459f-a68b-2cdf1a20c7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49455a7c-9a72-45d5-825f-1f99486aedc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1eea2b3-cc3b-4765-96ed-aaf9670b16c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2a918c-431e-43c3-94d3-539f0b8c263e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77436e63-5248-4c30-b506-f340d2a5ed31",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79ff2ce-7378-44df-bebc-190bd584927b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1733031-4b2b-4c83-9c6f-85b274cb0fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a586d56-78d7-4336-be24-1e52ac0b0524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc48981-3d08-4fe3-b117-dee3a575efa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97b1419-a90e-446e-b6aa-f494b6d60305",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e7cd45-1ba6-46b9-b710-31aca6a24817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a6f589-e72a-4baa-868d-baa1052b6d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe51fb8-6dd9-47e3-8a39-e90065399c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ccde8c67-d29e-4704-bf3a-bec23ce154ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d8507e-e55b-48f4-a8cb-a80876d6aebf",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddee855-bfd4-4002-817d-ea45f25d2957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d15c4c-49a2-4d3e-9b30-5e038992cb2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0210c576-1d2a-46e2-8240-ed60160b9359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef27e7d-dd2d-4314-aade-c81445fbebaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ace92d-a9c4-45e5-bc99-741645eceb16",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a79bd4-1a4f-443a-b97e-9eb291d44961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ce4f02-3126-47ad-beb0-5d210892073c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bb78bc-4cdd-41b8-ae28-5b762f96fd1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d25e9a-7163-4574-9481-75d6275cfaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4398215f-914a-4f82-aa60-990cf1a7763b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c318fdb-ab97-40ba-98a8-17f8575e2fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc20697b-dd3d-4abf-95c3-3a20cd697ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2b67d7-925f-47ac-8d98-61cf46ca4855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a849cf-18ed-4eb7-897f-b6e01ee7d1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084d3281-5ac3-41e9-a142-32b62670d86e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9d73c1-7663-4253-b1c4-859d37d37088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14a1e43-7c76-463c-9527-6fc2d5122cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34f1774-8177-429b-83c3-11dde2c87fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc5e720-eb30-4c7f-b481-4c67c5c86b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbe8b4b-1645-48bb-b028-a418bfd89625",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e97802-6814-46a7-b431-47872a295556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75cb0236-b27f-4121-a425-132f3abc594c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de25f82-2745-4384-92d0-0dd888d9492b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "20ff097b-e60d-4dbb-81bd-cd8e0ca2a81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b937bae-f96e-4014-9bf8-552126a452df",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bc265c-c596-4ff8-a288-65646fc744d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6725025-08cb-4368-a26c-9db8b81a90e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2a6db0-c0b5-4b30-b5c7-75cda7f66d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "680bcb6d-a6a0-4a74-85fe-bc84f8d418dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d85c0c-32cf-4dbe-be51-a26ca5f10291",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99167f8b-272f-4520-9e69-c8c29086c0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ba00d3-bd17-4139-8688-871343efdc0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d21d8f6-a7be-48f8-bfd6-751723afdb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63c816c8-fcfa-439d-9ce9-01f5c4e3a7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b3fa2f-4dd8-4ce7-a17f-096e431d0fa7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3356ede0-5db5-49d1-aa84-a98940c664c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99559a63-cd82-432d-9a37-7103dbee58dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ca9440-7431-4659-b073-9f8fc8a2d5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "182022f8-afa4-4b4f-8bb3-d6a8dcfce523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187f7bea-b1d8-4569-bf9c-0ea35c32c861",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989e5755-2e18-4554-9387-a7356cb3a597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6c4ab2-b8f2-4eca-b4cc-f330cd7ef2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac6ad8d-3ebe-4926-a2a5-8bb398a28d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db635d12-1bc4-456e-88a1-721852a24956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e271a3c7-c575-4014-bcbe-f2a7d5f2ab02",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3830874-9aa8-4d5e-85f0-6f20fd610920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7bbbe8-2daa-4615-830b-10db1cb7f077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae4bdc3-2672-432c-92ea-06937fbae746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d78fa4dd-19fb-4df2-a92f-f22f653622c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e61ca4f-df84-4a7f-8957-2e1b0777c6c9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd579ec9-4815-4f2b-88a0-3572777866a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3208a4a7-6b05-42d3-b8e2-7ed3baeece40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6fddf0-b677-4b54-92de-ddbe93a87e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cbc5610-a289-4ec2-90c1-203b8aafa043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8679807c-6c4f-482a-9db0-3114bcd37a5b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12785ec-f1c1-4ffc-b0e8-ac3e699aeddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e4e962-1fa3-4629-976b-8b1a9be2e3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e72aca-b2f1-4092-b111-45b46e6b7a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7471fde-1f4c-414c-982b-6e0e3328f588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2634586a-ef74-415c-9e50-19a8f5e8a4eb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3356111c-bac1-4d8e-88e2-fdcc340b414a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac2f60f-b249-462d-b500-5c1661dc2638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48dbd89f-7865-437a-a584-f98d267dcef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb62b267-ad91-42dc-a8fd-8d7211105381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e5bdb3-d6c1-4de6-8476-ee001d489979",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1de9d87-4901-44b7-9766-b5e0cf279816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf92e09-c293-4012-937e-d04942cc8d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f459f46-a72a-439d-87b4-070b28155ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0307394-24f5-4281-8e23-8a8998807867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c371d1-7d94-4e98-beb3-36b325eab929",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa633cb2-a464-458f-a456-de8d8527de57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd10c9a-b293-4429-b019-509470a259b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdcdd7c-7bbe-440b-a401-521300e4d379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff6f363-88e7-4629-a45f-621a18675fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955d06fd-2862-4f46-807a-c6f07bab3e0b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf31142-beb3-4060-971e-7ee7e2ff3ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c99fd4a-de1f-4569-b6e2-0c4d7281c998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b836d1d3-d98e-4d83-9478-1f0cf2d1a4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc231a3-1950-4b1a-8ccf-d5bd6be87ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89a27b3-f32b-4fcf-b6dc-438c7afa2495",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d6788b-afdb-4445-b8f0-20c4a30f4169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d3d7ac-a984-4552-9ce6-59030a10664f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba94643c-00cf-4e26-80c1-c33925677eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ec9f9a-7396-4819-8dbd-6aab8a503919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05aaae8-0d31-49cc-a84f-98fa3198c45c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004d2bbf-e293-44ee-b5b5-d2ea03a16890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04db820-bf19-4546-88c4-9d27a5f90249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d168c1d-6e38-401d-94b7-16bde271a13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10db75c6-6f15-46c8-8bb9-f3e8249d69e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4145da65-2ff4-4742-8119-7fb09655bd4f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29256da-9768-405f-ab65-35c8b137bbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9c4e1e-2b6f-4c25-b359-2b83e7d97293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220c7bde-e7bd-48a4-95e9-36e4240b1b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4011b0-80f0-443d-81d1-067cb030bfb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6c9e4e-8bc0-4367-aba4-4c61ffbae7cc",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69177698-dcfe-4e06-8b28-e9af592e3435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34637293-0190-4b28-88b3-25c153a83b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ded7ecc-c1ba-45bb-9b0f-e72b0371e863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1edc0859-a4ab-4fb4-9b21-dc20419138b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00ba768c-9d57-4277-8541-6b0f6bc11187",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1dc6594e-f113-4637-8914-a9671ba977f7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0191b9-edf9-48f6-aab5-728625cd1da4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0d74f17e-395c-43eb-b651-ff88e2459046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81be152-bfa3-49d4-a4c2-5f48f2e9e3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13481c1d-5873-4e04-88c5-1b66e958a9f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71207be6-8079-4162-8d44-a03e9d74db51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffdc2a78-e889-438f-8fb8-07333c7a0f38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f62ba566-629c-404d-acb0-85fc0a183d81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc1e2933-1eb9-4ae8-96b1-d5ba5597e1ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7afe1410-0f6a-4ee2-82e6-39835dd0bc66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "480f4a79-f779-4328-b454-976ae52853a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "790433c0-2e36-4371-85da-c7033fd1ec0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d25ae151-4e35-4acc-9517-519a8bfe9ad0"
            }
          }
        ]
      },
      {
        "id": "c51b0a2a-696c-4046-9882-6a18d8efbfce",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "bde4de40-3f79-4039-b05d-a97c10bd06bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9b740e3-32a9-43ba-bcb9-8208e34c2c1e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6868cd5b-79a5-4141-ab17-1bebb43e460a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0608bab-3639-45f8-a348-d639e5871031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ddb13b-db8c-4036-a663-5efe18f2ce7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bef777-b564-40d6-8fef-2b9f057b35ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3fd1d97-23a8-49eb-9fcd-bafd9b2db8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e917fd2-af0d-4fc5-971f-1005f860c874",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36576549-f90b-4ffb-8469-fb395ce6aada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b5c548-0b22-4cf3-88a8-86fcc9fff5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8971ffb0-223c-4a72-92a6-a84c27d85e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0da1840-7ea6-4422-b6d1-9324b214a6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e920aaa-da81-4d6c-a13a-17b9b9700d27",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92e8e4a-1d61-4835-8574-aec37ec525a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd37141e-cf84-48d9-8609-03b9002e3e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e7af42-28d1-4a9d-9495-63160c011a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20dd1e8c-3a43-4f00-a31d-a8faa88c3502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c499e7e3-dc73-4627-8b97-6d04327b4b30",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c382a0bb-354d-4cdd-91e8-53cf75c43ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc524d1b-38e7-4f26-bd04-724c867ad622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515bf735-4be7-4ab0-aa4c-5ca9cbfcdeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5011584a-b94e-4bc9-9a34-d6c31d3a4b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdd50cd-8cd9-4ea0-8135-51d90a60193d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb5d2fc-00b0-43d5-8c6d-f7ac36fe6e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8698065b-80ec-4349-afef-7551779ec3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dee26cc-12d8-4d06-a3fc-99e75437ed3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dac5853-9dcc-47a9-9ebf-f4a0a18644f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2affb953-69b2-4035-b58c-2f6deccfaf37",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17df5a7-d55e-4562-a0d2-1cf1c4445612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7cae90f-dc4d-4e51-8302-6bfb580238ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72efbeee-cda3-47d7-b894-31fc747a4e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "975d8574-d4cc-4f75-a549-059f35a4b5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f690413-c372-4cf1-a7f2-71f7adc425bd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03e3eee-a3d2-4f7d-ad3d-75b1788102a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f7aa6b-3ee8-43ae-ba58-2e5f340789b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4015ec18-34fe-410f-8ec7-052d5cf07c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc35f94c-45e1-4820-9ff8-beb881fa675c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a6e51a-1cbb-4758-aa18-ef7a7ac43d6d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ff0206-8f28-4d88-82ed-4b98cfacbd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37f94b0-456f-4137-a9af-5e705bd45f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba4ec01-f7ca-4403-a38c-97ef3ae33cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78d6cf2f-8089-49f8-85bd-81c6802a7c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2d81af-431c-4145-a651-0f0b9ca61686",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df60cd0e-a611-4418-a609-7597f06e65cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa4a416-05c8-43bc-a05f-ab6a2c26cdb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a215a7-a6df-4ea9-9dbd-d575f23958b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2293aaef-0337-44c1-949d-e19243526c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ab6cd8-b8c8-4227-9b11-ee49b3e8e396",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d4f22d-1d0e-453e-b835-dfd9cc0f37f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd23538-b623-4974-83d0-dde719f1f0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5404339f-f54a-421c-8327-ad03355be81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9d4aa5-d664-4b78-b516-01fcfb7d3bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af3d072-c2cf-4b3b-bf3f-04a1ca82d2b3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7343a320-efb6-40bc-adc2-4efe8b5e0db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672a493b-1cfe-49fb-b2e2-dcc2a7c5889f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4036d2e-3b98-4e6a-bbca-4ff7b7874bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "63976f83-22d7-4613-bc56-5b6f44daf13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1778bb-1175-4d53-9131-4ed1b9c0ca93",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef2852c-cad9-44cb-97ed-2bfc216a3733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e22fba07-efdc-4491-8a5b-45f77a988a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2897aa5-bb1f-4b14-9af2-650a52db5b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bcef9534-e454-4fc5-92e0-a4f1acffdb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7ec2ff-78c4-410f-93e1-cc8d106f5521",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8b958e-59a3-4e5a-b989-7b9e03840a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a02ecb-c306-4661-ae94-e8407335817d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2f2921-e7f9-4cc6-bda3-edb382e529e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e07f4fe3-0731-49c0-97be-1a1e4050585e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e64286-95d5-4e41-8eae-3329ba2518a5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3eaa3e-1e27-450a-9623-b53bde11fbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39fa979-7334-4de9-82bc-abf58f34c671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942ee659-6f3f-4a36-89e9-4365145bc925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eef7aaf-df02-4452-bcdb-91bdeaf8600f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dd2abf-ec89-445d-94a6-0d083d3da56f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cd5e92-b69b-4b47-b336-6fb77ff9e1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80478d5f-6c1e-43cb-9ab1-b317b9fbb537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9254517-e053-44e1-8cbc-b2d8ab92116c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "174c3097-4b62-4335-8e79-b6da60d85f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613851ed-7383-41e1-b408-b2630a0ee473",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d5dbe7-222e-4d7c-a18e-0d6bd3d593a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f453a5-1d1c-4bbe-8402-00ccbcc5567a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab4485a-4385-437e-ad74-131b5394a39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ce9078-2a45-4af8-a6f9-2dc1cb016440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc21735-5331-49bd-99c8-f208492bd3fb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9001985-3330-4150-9201-3794630e4b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51ebbe0-534b-4b01-8ffd-071d7cdb29e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c07ab3-82a2-4375-afd5-63da2dfeb9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ae712a-06d7-45b1-87ec-3f4788aa8995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a248a1-b2e5-41ee-88ae-70dba6d96c1b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811bd32c-0ac0-4697-9751-21e71beaac5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce27d533-2575-43ce-bb08-88e5872c16ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22477e86-8332-4729-b759-ecc007ef1698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e55735b-b42f-4b19-905d-bc41a2925813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dc28cb-97f1-412a-a85f-acd5b46886c9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae62c86-b46a-4a7e-9491-73a9f046d2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f81ee28-1d80-4a2a-b729-d646e868f41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16be6c5d-452f-4709-897e-065132d28598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f10c01-f024-45b6-9750-48d358e82020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0796c15e-d954-4bf1-b24a-7f5403b32e3b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776dae98-39ce-4fbc-bf99-0b2e064c214d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f49594d-a5da-4a0d-8731-8ef9501e3be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56aaffbf-1220-400e-931d-a14fc1decd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8de75c2b-3e53-4271-95f2-6d60258ef6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e23daf-747c-4cbf-82aa-bc917f8bea92",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6a9c3c-615a-4475-97b4-29ccb719d139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7552ed-2a25-4c72-893d-c5f8c9ed78c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696824aa-3b09-401b-acb8-47db1beda0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0405d7b6-1136-4b72-ad93-cb60b0dcb24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869003e1-d3d1-456c-9332-90146d6c94b2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e490bb-0681-4a7e-ab44-d8d9776a4df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460146f5-fb95-412a-bc83-50dee43f5be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ea2945-b1a8-40af-82fc-d2071dc2b5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df73b479-3758-44be-ba34-7fa2ba63db8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5430cdf-0110-402a-a761-d4d7c48a797b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be133c32-7912-4321-865b-3e83c3e576b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb275a6-db55-4d49-b682-27a5bb3fd1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170d6223-734a-489f-aaaf-f11b731c4cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8061eff-7821-42f7-8063-2ceca52165f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e25ff8d-0bb4-41f2-8335-45fdcf9c2b55",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea7992e-b4fc-4aa1-849a-1700924aead1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afd1aeb-95ba-4425-94aa-f5b0cbb482da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c64861-964f-40ab-aa8d-ab66be9b92b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b47e3ba2-9f92-49ce-86bf-9735d5d92af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d8cb74-2358-4830-ae5b-492bea3b5e0b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73f9d2c-254b-47bf-8c36-1494cc6ecc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae0b8e1-f414-4221-9dfc-f94f64c9a879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ac1d17-db68-4dd6-a59c-d0cc55aeb015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e513cdc2-ee8b-4581-b947-03a9d1d8ff24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea039828-83dc-4947-9cbe-a0a16ed927ee",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3884417d-66d1-4a0c-a0ba-09ff57126720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bd83f8-242a-412a-bf01-5e05534fa49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0991f7d-41c7-4446-adb3-96377946e426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64649119-e947-4027-bac6-729f566c0058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d815bf0a-3600-41d0-8000-41b278fd79c3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51569496-c3ba-42fa-81ce-1a06257015c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2efe6153-e6df-41c2-9dcc-bcdd4090f37e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343fa93c-fc41-4e11-a3b8-6407d3f9cdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f268702-ebf4-4c1b-9f55-8b912112cda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca9e0d3-e1eb-4a3e-955c-f4fc114224dc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e98114-7fcd-4d05-ae58-c09e7021b2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62595040-de46-4489-af0d-8eba3f65a88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7eacbd-fa68-48f1-b1cd-0224db831a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a42eba-dfc4-4eba-8824-4d3ee0ca947e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b88ec9-248e-4dfc-b181-e49b53c44f81",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b20fc0-9adb-48a3-8cd6-b09a974112d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4284461-ae8d-4329-9e07-4e319d679fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb735904-d9e3-47d7-a58a-d9977ac891b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf353eba-aa23-4a4c-9514-a3794a460d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c477b5b2-1411-4d36-a7c3-5e5600bf59ff",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdc7cd8-62af-4a94-93b0-f397db524612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0849917a-754b-4292-bdcc-3322c30f9a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cffb7d-4558-4121-9f82-646206b33d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdec7844-6611-45f4-b6f1-2f297aa87be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f222ad5-d681-4002-a28b-682737d063c3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e923fcf2-e3a2-4b9d-8a0f-77feb63ce2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6137bec-4e2e-4e36-ab7b-e9d28c9bceae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67a0d5a-8235-44b7-a691-ea22026a0373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6bd18a-0028-4329-827e-b32709b8e928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e956273-24a1-42ae-97d9-32cb92321a0e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d867fa6c-f46f-43d4-bfa0-be47fc9bb518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff7e721-4b78-4cbc-8d03-d70ff4443639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6f35a0-f67e-4578-8545-0515eaec711a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dde8f03-5aca-4140-b790-db2bfcf30ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457f30a7-0512-4480-ba2f-d6f31e9b4644",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9749fd8b-39f2-4c1d-80af-90e111f4dd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad8f156-7b2b-404d-9d3d-16b800bf199f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f98be60-b1be-48e1-acb8-4fb81f2595d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0769f1-e08c-42b3-93ab-f630b3dbeb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1e3ebc-2694-4e88-823d-86676811889e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc684b1b-e722-4640-8d9c-189fa22fa2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd66d08e-0baf-40f6-b4a9-2c8090163548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c3b5b6-f4d6-48b3-815b-0936ba38b56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e068cd-3b25-4a8d-99f6-835af0949911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d2cda7-f4f0-47d0-bc7d-55650c5fcbea",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec5b978-7d85-4324-b298-a0783e71326b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9e1316-e2fd-440f-ba34-b88efc785912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3ba5fe-a462-4902-8543-a5b97d41e458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da9b17aa-e2db-44bf-8d26-ec183aa79e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f6c40f-96c9-45d7-9455-d80cd5a5e3a8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6c7500-becd-4507-a7a1-708da9aeed0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d029962-76b5-42a9-ad69-ea363862e6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b06161-c58a-4d2f-afe5-05a6e56b94b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ff47aa-b6b9-4dbc-ae01-1c5095e9a8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46bb760-491e-41f6-ad8e-89bac1fc83e8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7029bee5-6430-41cb-b920-fdc8c1d21f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc37840-d4f8-41cf-9666-5372c3dee255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879e4543-041a-42cb-a759-53cb360cc7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a94b10-c2c2-4a1b-9922-940584315319"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4d3cce05-893a-4d46-ade8-02de3e146872",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e3fd2c5-3d3f-4a5b-b7b4-cb574eb728e3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce14c2e8-e649-4d0e-907f-a210953e00f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e9914a00-cf17-4a4e-9a7a-61a145ccd86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60426afd-1f85-4138-b6a7-a0a2a1aaef97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef60bdae-28e2-4c17-a777-263b63ec1bba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a3f2dba-ce74-411d-a731-e9581db16cb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a077fa7-258d-4f61-b8b2-bcfb8cc8104d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4d03622-2f56-414b-bfaf-de8c4c5d7e85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48cfe048-e7a1-47e3-8c62-cb4100c04dfe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac12b58e-148b-456f-ac59-dfc452bf8810",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df7b5937-9981-491b-a741-9af7adb78590"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9612a1c-72a8-405d-9d2e-9aa3fb0dca04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52859a46-7fe5-40bb-9a99-dddb88fda6c0"
            }
          }
        ]
      },
      {
        "id": "78b54d65-11eb-441e-9b8d-782131a6cb95",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4915ffbe-bc77-46dc-81b3-30f2e6e75e97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1066271d-647f-492e-9b23-75935230f3c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9422e6e4-d8b1-4ac7-858a-b7f45770f796",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1487444f-676a-45bc-840a-44b593f69730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aafae31a-bed8-406e-bc3a-069d6d00a515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7d5016-afc8-4039-9bc8-8920df7155fc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfa0365-705e-4cc6-802d-d97d06248b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd97721-611d-446f-964f-748c2a7190de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e83624b-0554-4bd0-b20f-9388f574cd32",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bb29e6-40a5-46ec-a3b2-eef5c73d2b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691e0ed7-8371-4fd2-b164-a224776781bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430e5f39-03f9-4e2d-a1a0-f178c9beef7f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa15e6f-ca86-4c05-aa1b-5412abf92699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45700bf-39ec-40f3-80a7-26751a6d3a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff700b8-a78d-47bc-a71f-a9c913f97e51",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea75456a-35c0-4d1d-bf8f-04b56b622fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3132633a-be63-4b28-b4bf-c0e6edde424f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f8c57a-6f8a-4fc4-b0ac-6cc0b0ba91ed",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ab6a73-f0f8-4dc1-9a80-12340ae1259d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d9ad80-fc09-4db1-9861-d4d719e4b960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ace91c-7c83-4cb2-bfa9-df6a3b92a229",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98867fe2-2573-4284-8c6d-ee3a580f56a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523616b5-c632-4b88-ab8d-f3c4803778ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083df5db-7ba9-47b9-b287-b708d612f09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f9e211-208c-4923-b3c4-0310893d77e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4266e8bc-1d0b-477e-bc18-791dedb1057b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7109ddf0-28da-4d7f-be1f-5dcee9091bc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48339f62-6879-4373-a730-3bd20975a6e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e037efc2-e6e6-480a-8955-2b955270dd3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c410536d-d3b7-463c-a34e-0f5ce5bb98d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ab6c91-456d-4c3e-831c-c91a76ce39f2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7529021d-f14c-4a07-9ad9-13777f731e59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a99df64-303f-4faf-b39e-efa72d1e1f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a38913-5891-4786-bbcd-81e7b0cc8046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5dd931-4284-40dc-95ed-f8dcac7d4f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09861c2f-a8e4-403c-a640-334883122a01",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ba0bdf-3444-4584-9822-bc993b2a02a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08361059-1f59-4c7a-8a3f-ae4a831a5bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "697f4fb1-6a40-411e-927f-94a3ddff0bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3da833d-d8fd-4306-8fa2-bbeb6f8f006c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f345567b-c41c-4c1d-9c88-1daae07710e7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c999359-c6d6-43b3-9c58-c917942e9bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59432da-d12e-4640-b9ef-947e98593932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c5efcd-111d-40a3-a270-eb6955409121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2afe642d-7f5b-4756-922a-0863c1cce998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29995ec4-9939-4ef1-83b8-d530960dbf46",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7eb2f6-0bbb-4d63-8717-ef0071845b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3886e4b5-5d6b-4450-8dd5-415a6a118786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d013ce24-23c9-4f1f-a416-2e44bb907d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c98e78c-5a73-4aa0-b400-6ef71b371385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f81f382-f5d9-4af8-85b5-ebea13d4c64b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa082925-35d2-413e-8f39-75a4d4b1fd1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5334aacc-afc0-4d81-aa38-8be4a2e5bcda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe810e5-fdee-4337-a498-b180b2a6e653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa9b769-1bc5-41b6-be61-023350ecf6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8310531a-bafa-4dd7-98e4-0580d2e52bf5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16bb673-aaaf-47a1-a334-c9cd180ce702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeabb67a-8c90-449f-a5b5-e826147aeb94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fddce6a-ef74-457a-8746-00e287fa5e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93f3a74-2019-4b86-a6fd-ff20b9bec50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ce43e3-f4d4-42e8-84c1-d255aedaa1a0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd270c77-3b83-4c1c-adb0-7c2e78d5ea26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0ec1712-4837-4597-8a77-bf794a5a2845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166d2331-16b7-45c0-9cf0-f154cc772171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59232c31-2049-450b-a5d3-ab8fb52c5875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01aade4-510a-4ad4-b34a-e04b487784b8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea564ed-6bb4-4a23-b333-d821b4c06b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7655e6ea-0bca-49ef-a100-ca93c66ed36b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0d3c8c-122d-4145-9e7d-634ffe08e79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a669d9-6ca9-4bcd-9774-1509a481ee3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67aab558-f785-4350-893d-5f0021ef82a5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbf0843-833f-4413-be3c-dc2efe5de7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0cf810-963f-47a9-aa8c-8cfe9369fe73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43d3feb-5a5f-43b4-9680-94dafe80ea31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471756f5-a890-4aae-8914-a93d1db813d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db47ac7a-aaa2-41d8-ac54-6cab6f6ebbee",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09043c7-d462-420f-9f43-78ae41ab0177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dfa2986-fd17-4cf9-a2a2-dcdd5de797bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe9f062-1e75-4f64-8fca-e47786f02eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be933aa-451e-4971-9ca8-47ba1b78bab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d209d7-3268-4d35-af34-2901cda5988e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de65885-55c5-4c8f-81c7-16be3ec16ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e18e7f-2e38-428e-9c1b-0e8e4a97559d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffab5710-8443-4e10-8dd4-2db7db3ce343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848db7f6-2764-41d9-b5e1-1d4c1653fd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101e4282-ca78-46e0-a203-5dca9196e431",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a575997-ca03-42a2-b543-09eebf646c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad5c906-536f-403f-8e9d-10184c7ff2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94d1cea-d10c-4f6e-b221-3ab93442e924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec194088-d2b7-4bdb-954a-6c01262eafad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a3b034-9d44-44c9-af60-ff1155c9e56f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e7989f-12cd-4e1a-94af-80dba6ca3019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee281b10-1099-4c91-aa67-1fe01f43692c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b27d3b9-d2fa-4997-86e0-9c2fcf7b5439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f48882-482f-4693-b978-38777076bac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2e9c18-3011-4e97-81e4-65940f6b9d1e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b73245-c1e8-4a82-8b1c-3798bc3ed107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b437a42-afd3-4efe-b7c3-df46b1aee3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a31902-719a-4a1f-9f54-cbf23e4f21e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889af9a9-c572-4b34-a93a-a50e984588b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b681ecde-aa62-4c97-a3fc-4055ab5b7a54",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd85076-a731-4fa9-88b9-c4ed32b554cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b343524-ba77-48d2-8dd7-67bb38942dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f456751-dfb9-4049-a7bb-04da1f4f0ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1cd243-4219-4881-8f81-d682cc380058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa956b40-77eb-4015-aaa5-67831607862e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5caa889-9d8f-42eb-922e-11e3e4de293c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d05dc63-f093-49ac-a1a3-3f4e61a6afaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3013de3-3dcd-4550-b387-83864dba2219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a7670d-1f67-4250-bd52-382210f3bc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9556e40e-ef1d-4582-9afa-b8172e99e013",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065b4ddd-06e1-4c3a-89db-3cb99734b280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee30ada0-73ce-4bfb-90b8-2bae73af0a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b934ced0-a7bd-47f6-942a-79d281099f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0226c5-a7d4-4dec-a6e0-7c662a7c3f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e8356d-01ad-43c3-ad34-fd780ab3ae89",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1348bc81-6c22-4e2b-baef-dd1306ffcaac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd9c3744-4232-4859-aafb-c65a7d58bf53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b22813-4431-4018-a89f-cc4b73e3d10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d82da3-6a37-4251-9ffc-185861e39b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d8e4a9-5062-4829-8ea2-ab99d5df9837",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fffc2a-7554-43bb-85a3-dab85adad3d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6381eed-4654-4a1b-a098-a21ad205b8bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3255cdfa-9212-423c-ad97-8d2445c05007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34266202-4a47-478a-b10a-3a8eeac71886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09837ec-0626-4ef6-b749-a02d22080db8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3529466e-6954-40fa-ba0b-9762eb9e150b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83380f41-8f5f-4866-9b9e-1c533af928ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c12bbf-ba43-4a07-b23b-d9fd654a79a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00465fa-7822-4052-9812-3ddc55ba26ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789f13f2-3394-469a-b6df-1b9605afa4fa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ea2961-293d-445f-b558-63c0c3cb8dd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61575b8e-6a98-49a4-8b84-e15074342097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bc6718-59ed-4443-a144-076c57a05de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c42aaf3-c9e4-42fa-ba2f-9d9edf48c2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76831e8-5338-4206-8e24-e3193670bafb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf46806-acbe-4508-ae3e-3560ffc70add",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecc6b3c8-fd25-4d74-95cd-81a5ea371945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7894e0-945a-4745-a667-1cb66fa91e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3810afbb-e7e1-4941-90e7-aa9bb7435fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e376c7-4552-408e-969a-b590136925ce",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ce3be5-a903-4977-bc19-bfcb79e97b4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1b20489-c6bc-43bf-b586-c535320721bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abd2670-cb22-4134-a19f-3cf0680f8927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87ffb3d-0ee1-40cf-9b50-b5ab036fc599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b51df65-1b5b-4969-8900-2e9f354998ab",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa43d142-a1d9-4ca3-a435-1f1f5b6fe175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "891f5a92-deb8-438c-88cb-a3d4a2746ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fd7d59-050f-441b-9219-e50f87dd9641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b5f9f1-89d1-4e40-8ab9-d6c0e697e331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcaa45c-b029-4d33-99be-216d9d4dc1d7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a8146b-5fee-4d74-b5c1-42baa6bd7361",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb1eebcf-7735-4062-ac72-4e3670a9c8f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14147e8-f13d-48e0-a50a-7fefbaaa45a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acbf87d-7462-43d1-bbde-ecbda8819264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7a54ae-c586-4fe9-963b-9dbcda042ed7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d20e06e-efc3-40ae-b46d-d3fa95ae3ef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31043a1e-68f9-4603-8324-f24963bb51d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f420417-f2e5-44d4-af21-e8583c0b8ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4637172-dabe-4d7d-af31-d227a54971da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6565a15-5db6-4d7b-9f50-a6573ea47ebc",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd8c295-7d0e-4de3-874a-d709497e04ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b2d9a3-a2d0-446f-9af4-79593a8e1247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e008f67-7929-45bd-9782-e9e5c5c04a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61bbf1a2-485c-4d4a-9d56-115e4dcb281a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a3425a-25bd-4090-8a32-747d9ed9e1fa",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cd4050-f980-4c27-9c2c-7b094249d40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bca497f-7ce1-470d-be15-8fdbfd4927f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30aac6f8-6732-4cac-b7e2-0dd7eb1d1d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930a27f4-02a5-43ec-acd2-d9721947f526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707918c1-b11b-42a8-b7cb-aff02555498b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798db529-17f7-4cf2-9f8b-119d4a24369e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb08764-f408-4273-8b14-ba4188732af2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b50bb2-5bd9-4cd0-86b1-ea78c18c4439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af4ced5-05e6-43c4-8f9d-c50ed8c6679c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4332367-ead0-448a-a24a-2d7ca422911b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ff8027-6166-4718-8151-b5f78f91b373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ff79bc-d54d-428d-b7be-2c08e6829e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee93732-19f2-4c12-b974-e963f3bcb7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbc11f7-461b-4818-ab8f-4985347c7c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f47be7-65b1-4cc0-8180-0cd41a16f09f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eec5575-dcc9-4056-b21f-421458aa60c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d6f87c-fbfa-4ba1-b719-528d6659833f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d8b27a-cd53-4942-bec3-50da1236fbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ee0c9f-010b-45ba-a823-0c810531a618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4c9e8e-5fd9-4e21-8e13-c42d510de192",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693b35cc-c88d-4f0d-9472-66e4cf0b0e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473cbcfa-fb92-4985-b28f-ba4899bf6190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d839569e-95d8-46ef-8f82-573b703b9923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9c0ef4-0c15-45f6-abef-07bed27504e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1e83a0-5eb8-4b5a-b99c-e9cd673a74ca",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ed6ffb-09c6-48e4-8097-fbd543593cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c778f410-84dd-44b6-85bc-d64bdd08d412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281b82d0-3b84-4e2d-9ed5-3f7fab3b6681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc45747d-bb7f-4d1d-bcae-369bfdec940a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cfc7df-0bfb-4b22-980b-a32203e7bdbb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2419cb1d-16f4-4941-aed2-89724ccd75ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70213304-135f-4389-9668-6329660788d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb10481-5a06-40bb-878e-97c541b8bf98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf3f692-67b6-4e9d-9b5f-f383160b8d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e952a150-5084-4353-b873-c3a47628e21a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d4d207-b81c-4c0e-b8e9-3c5adef1387e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1005850-4715-4225-895f-d6d2f82b3f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93847534-c01c-47ea-b2ba-11ef46c157ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10116521-6192-429a-b184-fd601fd0f039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0eb7d9-14d6-4f44-9a24-e9a1be2817d6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50143343-7db8-4772-b73c-9c2de13f2725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70a6ee3-7a85-47cc-8311-53476e395336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5badaea-bebc-41f2-8b5b-e908dad4e7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b5fd58-d085-4b33-a7c1-5cbfc2a83bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be49342f-90f7-4d43-bafa-314b29200603",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dce3d43-a31a-4714-bd70-c3991bb666c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc64d01-4c51-479f-b150-48c9e3b8e7e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f51f59-f025-47ca-989f-6e8d9f986110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ad8e2b-8ce0-487f-9a58-618e58d06703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed26ef3-ea5e-49c3-8929-47e985217c90",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8872c2a5-c309-4f56-867a-30bd1b2cb71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ef2d4a-7381-414a-9e12-158c3cc9fae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f3e86c-5541-4774-a869-c1242e97890e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fb0036-6e86-4cd0-a054-b953c132240c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47180b28-02a2-4753-85b9-a64f48e88b54",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53c88c3-24c7-4718-a687-bb0f37fd0a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40761b06-34ac-4cb4-982d-e2ce50c5c5fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486753da-9874-4839-aed8-70078dee1177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48b942c-59a2-4940-b489-bf61ae374c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50f58ac-b8d4-43ef-93a6-8da6130c431c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed6e260-2904-4941-b87f-28700118f261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d30ca5-9cbd-42e7-a4a1-558a683a8fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2599d931-f970-4098-80b9-8f617249c84b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0daf75bb-9813-4c03-8606-9fa01bd88bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bec13c2-ba2b-4564-82bd-4f5248b2db45",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a9d5e9-e8eb-4c28-8758-da9173f0c3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2bb9ab5-8003-4df7-ad2a-d221bbd68337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd274d3-f567-4cea-9187-993a88cdfe3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb7a9ef-1c8a-4a49-91c9-afa7a0e3010f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8046864e-51a4-4cc6-9e1e-a3c78d5efd4d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8091600-46e2-4a85-a8d4-2ddc9403a4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264850ed-7a0e-44f6-9417-aef56d842b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb32847-04c8-4d32-be8b-7f66e58838ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbb7e37-0ff6-4c76-be69-148ee4a8448d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8577c31d-0675-4388-8e2a-0579a94bbe94",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c6d472-0010-4d5b-8cbe-88e54e0ac04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ed9497-7977-40f6-9120-dcbb0a2a8686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc90c31b-06e9-4c9e-82a0-54fdf9f47f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fbdbf5-54e8-4173-ad1e-cf91e505ec17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e1b5ec-1f37-4f9c-8202-aa054300ae09",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81230b4-6382-46d2-a342-e4424b7d4eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0781facd-8d8e-4e79-8df6-8f7e21019084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4da5419-ef68-44e9-92f7-275a7ccc0ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864d9454-a241-4511-a667-b0bdf1594c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c2dbfe-ae7b-400a-aaeb-1a4e49338837",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad441ed-97b0-48a1-ad21-c9d4f05a3d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd45627-4495-4b80-b3ca-3516e9c6e61f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95af22a-5d1a-43d3-96d5-f55073ec023a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09eec90-5151-423e-b5ef-6bb106afcdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d926772-0747-40a0-bfd1-4f9310086e04",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac85fb9d-bf34-481d-b94a-d05b882de3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fedf6d58-14e6-404e-99b7-11863cc412e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce83fb13-fb1f-4df3-b746-cc1dba6de08b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f709916b-f84f-441c-b018-3f0a2e974329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570ba907-5d9a-45b6-aa01-d3700624a225",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9c1981-51c4-49b9-9efd-894cbb83accc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd1e681-0e47-4b93-94bc-18aa9a7cbf17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0664b3-7c88-451f-ba8d-82e80b358ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6339d2-3a0e-4d3b-aa6f-26f7d90c2bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c313d29f-a67c-4e70-abdb-e559a45baf6b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dd9436-6906-4b9a-82d9-4faf63305a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca9eac1-c97d-445d-8f1f-6ea645745699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb49dd0-8216-4c5d-8fa1-f6721ffc13fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0faf085c-26b4-48ee-a447-bf9a46054a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d18782-9cbe-446f-a0dc-f36555d10f33",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad62289-20cf-4161-8f84-4835ad7ca3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25703f2f-dd45-4a55-8fe0-fda9f53b76d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0b8276-753e-4096-ac9f-ed5ed4c23e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "999f09bc-3ff4-4db9-8a3e-4830a21b6eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63085a24-4d1e-4254-a9b9-fefd657fc107",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848b1474-5e95-4454-af20-7a9775ae2f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a022b9f-ba9b-46e2-ac01-e72f8226ade5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5a42d3-bb1e-469c-92b8-f59559ac8bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a43aaab-75c1-451f-a935-257385e74a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6aa00c-c2d7-4c62-9cde-226d62e98b06",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47297ee-8578-42c8-a4c5-18a64ec8dc99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e321d47-dac9-415c-9783-ae2f9948e473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cec71e-f1e8-4072-940e-54098281d747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beedda81-0ca7-4f6a-8d54-91c7ee15e0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf15651-678f-4efd-a143-5ad5c4d12960",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a050e370-a1f1-494c-b48b-f9432f720d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "248b6f28-7914-4475-9af0-f899d9328340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886adc8e-91fb-4e46-b213-fd15459f9a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c7879c-94fd-41f3-a030-aa2477c63238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e96a76a-f704-4194-9057-8d799e6203e3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27f109f-f758-438d-93fd-1288030ffd10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e469da-8dd3-4878-a3c6-e7853ee75e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde6b352-8bc2-4630-9fce-996b3eb63086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d81e43-55c9-4739-a1b5-0a5d0ee54d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7082bbb8-7d6d-4e85-83a5-77b9200ba99d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14350eb9-8208-4611-8071-4588f660c372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c026937c-d018-4b6e-8114-6b50831cbde2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cc524e-cf98-41de-859e-a1b147288e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dae876c-1fb7-4b60-a726-cf89f5aaaec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b760a52-4db9-43e6-9350-ae4b28b1c618",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3feb8ea3-2cd0-478a-9ea5-10692df7b324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73e165d-258c-4f31-81e3-e0da6abe5879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e9c569-3088-415a-b767-7ab7884085e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78bb5dc0-6e6c-49c0-b9af-8d182c553606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f00ec3-c347-4a87-9301-608c5ba82cee",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03030503-8711-4a8c-b735-ad5a17c0450e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bda1206-3136-4b9f-a5bf-d5b72b2b2b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cceadb44-6b36-40b8-a87f-1169c7f52c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1120de06-42f6-4416-acdc-1fef46632aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956e4eed-e0aa-4286-8d0c-b36fef852f77",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1387a253-63fc-474a-aa4c-5b7480783b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "537af545-1c36-4053-a59e-40d95faad2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d574037d-a901-4ebc-860c-5149d93f8287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8206fe-2fe2-4c19-957c-06ec82dd222e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38d4aa9-7ae5-4aba-81a7-643b666de417",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebe8ddf-c153-4454-a45c-be6562061a00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a107f10-976b-4cd0-bbc3-0bbfc7c61a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037e7c4f-1eb3-4977-99b8-5ac6cf6b5c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31718ef8-e374-488a-9c16-634fa28372d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8200e7bc-3a31-4afc-86a5-91c95e9b90a0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60636e9f-5ebd-4e20-87fc-824511957a16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c60a32c1-d201-414e-9f48-2e0ae476b17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace3b7c8-3312-4611-ba69-353790d7c2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58deeee1-be72-4135-bc96-e61b66f33a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0e7a88-f644-4e6d-b977-70dfd4805d22",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558c1774-7be9-4422-a746-f8e2901b46f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97558abb-8042-4d88-9c15-a1dc5470ab67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7728540b-298d-4942-be6c-6a07562df0f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ff8170-6833-4802-a8e1-2fd7e7eb51e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c0996f-dedf-4675-9515-ed9e5d82bba2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23cf6401-4c6e-4690-8380-e5fd18156cbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53dabf27-2d28-44c2-8f6d-c2d6b5811c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b34aafc-faf9-4688-829c-77b3f28fc6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a48002c-49be-440e-923c-19711c51d171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f30405-3195-455a-b582-99ff5cb904b5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf92b5c3-f182-480c-8edd-f4ca1a2c0c8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11ebcd92-1b9b-4168-b0fd-c89e8e2a09b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a66f046-ac29-49eb-b1a7-052a0be61e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805e9c07-6a2d-432f-a9fe-ab50ce689602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fb27df-7567-4623-b9fc-23377c87d224",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb578485-3ab2-4d20-929c-1cbd7d3edfd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29f6e5e1-89e4-464c-84ad-c83f0e3fc3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdcf594-167b-4fc5-bd52-a895bae4faca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a3247b-f7f2-45d0-9220-a10eb95bccf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce7d1b4-26bb-4e94-9651-bdf3e8dba11b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260c914c-98b3-4cf0-9768-fb5cd8cbc2ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c3dcb8-47af-4dfc-8594-48531bd8c8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb56f53-3dc0-4d32-8adc-e71f9048e672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260e573f-b3a8-46f8-b9a0-d2c1b9cdbbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23fe37c-c281-4b55-bdfc-db6e1cdb5967",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295b0aa6-e4d5-40f7-aab6-b4ad85e6c697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb5126a-5600-426f-b1ed-04044825e421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0717fb45-3f32-4524-894c-bdce1ace8aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4aadb92-ca56-4a00-82b7-102b8874f994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5170eaad-1fef-49fc-aeb3-7acd9e8fede3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959f7942-739e-41dc-80fb-cebcf0d654fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14b583c3-e827-42f7-9ca6-c1c9e652eda6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9428f6ec-8a39-4dd1-91ea-2336bb739734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21393f99-09dc-405b-9dea-466b33bf39f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9333bb-951c-49a5-944c-5735605ca0bf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a90aff-d0ab-44a1-99c7-b796feb92324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5dbe44a-c6b1-40c6-9930-e3d9175ea3ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbde816f-13b0-4578-b198-9772b72614ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9910b740-2e4b-4418-85f8-08e413ba7843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5e8cf6-3e50-4f2a-b0a7-f98bcbaf3a34",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd3fb61-5cd6-43f1-b2f9-9b7c59361882",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af61c3ef-a1fb-4933-a316-0ece3c8a0cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7805dc1-54fb-40e5-98ba-ef9baf6dd635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5ce082-e089-4dea-88e7-9ec8f1497c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c257f9-853c-4d59-b5df-f8f19836565d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf5e9d1-54c0-411f-84a7-bb09bd5b64db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f1f8292-24af-4090-a764-6f29ff13e372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c048d9ac-7f15-4c80-88fc-5215428ce7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27454ae9-11cf-41f9-8492-b8fc0faca494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1833d403-7954-473e-b42d-845a054a81e3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b203815-db9b-4404-9c8a-afb3c5316471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1687f81f-9af6-4d20-9b0b-3aa0eed3d59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1ac23e-4c71-4f60-b84b-5fef1ca7ec72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8c5c41-5166-40ed-befc-f378654b1133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2972ad-3a56-4d08-95e7-4edb87127ee7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c812461e-9cac-45dd-9d9e-9e3ba26a2641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7872ee8a-a607-4b16-b76d-a7c3a07261da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67339d56-c608-4501-88bc-77f13f848443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb5ebde-050f-476b-b878-9bb8f568d481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e1a0f9-cef0-4309-bdeb-f7c237b73d5f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1c40bc-0e2f-416a-8b47-d82c30d3b03d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95b2080e-c6c1-4a23-a2fa-f39ed3390d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c458c2-feca-4275-b9c8-93bf86fe1fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e742f40d-9bf7-4a01-a7a1-2f7f195db77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03caee36-70cf-492e-85bb-1687c9b88c33",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ce8a14-0777-42dd-abaa-0f7ab3b06ab7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee15b71-d7c6-49fc-af86-76f88a3672ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa93390-f8e2-42f3-80af-6e7487bec982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a168d27-9798-4d68-95d9-157c4d15c9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9046229f-0c78-4490-93e4-d23d55d54db3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8377407-2445-4a96-913d-23b708c6d664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bdd5a62-8cd8-4e06-ae01-c8fd23442baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7773794c-fd47-46f2-9826-96ee95ed07c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8474416-86eb-446d-aa70-4fa1426523e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123c00b8-4344-4604-83a0-9f978d6af029",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d2fa4a-50ef-4669-ab1a-e61d2a83e9c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97c5fbb8-3e6b-4dad-8b81-08f9a2df5814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0764f5f-8483-45be-b6d7-1114f4417dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1b9d0b-f439-4946-b368-fbd326f87142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e36ef8-a40a-48f6-b5ef-08c163d68058",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dee3307-9877-4620-9822-d669146c3660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bd026f7-acad-4173-bc81-d6a0b5062894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e8d705-d36b-407f-b3ca-79a864dcd65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba8b5a85-5fa7-4109-a554-82ae4f8c2e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00511ea4-be02-4f94-8cb9-fae6af3b956d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f004c953-baf7-4833-803e-4ec6a4943a83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a17b796-7b50-43dc-8d9e-b25e64ff486e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd0447d-4053-4e19-a5b2-6f6a8a786639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24144f1e-ccfd-4a25-8a30-6e60758957cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d099f74-8bae-4147-a425-ea2d025fc06c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed513933-95d8-4819-97ea-a4a69254665b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b81dfb5e-6992-4c20-ab46-5ada5d056dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6011b937-e76c-46e7-90a7-932410dbb699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a4651bb-de33-4dd9-b2fb-31aeb1dd3ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d15888e-9321-4429-87b9-3b409c7f9afc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc02e030-7aee-4c4b-9ecc-3d591707b438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44876baf-c5ce-4988-b098-dbaf8e7ea322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7781e906-6ade-4478-a704-678c5198fcd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd07559-c307-4ddc-90e8-c3310dddd31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01599d5e-82f7-48c4-8d2a-d51ce505f6fa",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8951882a-7309-4108-abfa-604c908844cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9faab54-73e1-4645-952e-fdebb0fce8bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9494be79-7247-403e-9718-162e8e9d623e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d85e258-cfec-464b-931f-c62d7159e9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef76f4c-3a04-4c12-a99e-2bbc41673b8f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d04b00-bffe-4500-821b-c134e5deabe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97a3b97a-57c2-4ca3-9d26-87fceba8bad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ced6f5d-72ab-4840-a4bf-5641f2554711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2159e4-83b6-4fb3-a848-71002a165ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d805b5a-8ee8-4902-a9b5-817cc718c66e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d7a10f-679c-436d-827c-10218d1c8a4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c46d0a-e2ef-468d-93d1-98d133070072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170f171d-8567-4e88-8d08-57679838f925",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccad1319-1982-462e-9e56-72f8448b2430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246faa81-fe53-4af7-b726-ea5249e5fd71",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6de6d35-6267-4954-a17e-de50af703637",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a5414e5-7924-401e-895d-c57d549de8d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c852d7b-c179-4668-b715-a062c2ca957c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b229128-56b0-4b71-801f-41405d75f8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37268b7-7d6f-48e3-8775-75e1cda3b5d6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df38c02a-56a1-47f9-ba87-12ad9a2e0f76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "debd05ce-1464-41f1-bc7a-b022b95cbed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd93dd4-9bd4-4cd2-9ce0-4fdfaa81bf65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82601bf-930c-49fb-84c0-a3057e4dd819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdcb495-a81f-4899-bd64-7af2a84a70f8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6707d60-04a0-4406-94a8-314610e7c8eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a1de3db-5a90-4d94-af76-870bfca04167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0ea2ff-3d74-48bc-b8d8-85e5e30a72cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a1d7142-8084-4a60-8e5a-bf6e05b879c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca69def-5a23-4854-88cc-6079643fd41e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a719cba7-6827-4b2c-8b30-6c57fff15f4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e3277f8-0ce1-492e-8be5-f6539c0dff8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88a9248-7d4a-407d-b25f-5913de48c7dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7c468b-c980-4d60-84f4-53b7c17b32b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a6e7f9-1abb-494f-ae80-87cc87c6c066",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19d6e88-e2ba-4638-97b7-5ba53572d4ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a674632-b1dc-4b1d-8eed-d0b378c18727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da02d640-a69b-41ec-9b10-774231ab0bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0336809-8186-4500-a498-a31fdcd27b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9b0804-aa52-4e6f-884f-c0584c36900d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91486f31-c711-4e1f-84ff-d6f4e7766441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10dbb171-59c3-4782-b8c1-224ba26bb0f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa5c3c5-9e86-4a67-9349-7fa732e8c966",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01788c26-ebe5-430a-92ec-b128fce7d2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ac2b7a-38a4-493a-ac75-b2450f75d451",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05ffc37-e0cf-4732-8401-289e613fb692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "014a030d-bcb3-441a-b3bc-31d0958e24b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c353459-05af-425f-a7f9-b3233cb23ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1f1f62-e64d-4ae2-9219-60e8554b7180"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93d374c3-3e20-4b6e-b58f-954a27c43764",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bd0658b-3072-4a87-8518-d91b3ea7890d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c26d24a6-8eb9-4fdd-a0e4-31f909078988",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24ffafdd-5fd1-4bcd-8534-af54fc577d46"
                    }
                  }
                ]
              },
              {
                "id": "fc7eb0ea-d268-44a0-b195-d40131ef2d41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "551e545b-6101-498b-829e-09f7f6a19b4e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5fb6ea-362d-4570-9926-e6595e1e002d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "37b8b9d1-8736-4ad1-99f5-6e509b43e939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66dcd3c-eea9-4b06-a387-0468cf43b30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9dc3c55-cdd3-4a96-aa01-3539a41962d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5e9b1c6-13e2-481f-8822-0f37593d41dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c1c458d-df9f-4c04-96a1-ab431c6fe8a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61121bc3-32ef-40ae-a2a9-a9dd47800e4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "643f157f-a4fa-4de9-8afe-deb67e6cfd8d"
                    }
                  }
                ]
              },
              {
                "id": "d2a25ca4-e7ea-41e7-8dd4-a12454e7b475",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "73847631-312c-4a9c-b3a4-c7b409c4bf43",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281db7a2-7e58-4010-8a46-1aacde1ef5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8c897f33-5897-4e7c-be1d-ba640f1ffcca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d2199a-bfd4-4404-9123-72ff151b2825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ab5bf1-0cb8-40dc-b7ae-54638b6c1257"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "62ae10fd-0164-4963-97af-bc10da971d56",
            "name": "Positive Testing",
            "item": [
              {
                "id": "423ff415-2feb-4675-bddf-01933f25f02f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e99db32-cde9-4e88-a755-8cb4c76fc91d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b9d028ad-85de-4ac6-85a0-e956911a763e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36d0a5c9-b4d4-45b4-a539-f06dd96b95ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7741244-50b0-4b09-91af-fdb17fb34f9d"
                    }
                  }
                ]
              },
              {
                "id": "6ddacaf2-d9e2-42c1-9f0b-f828e8164979",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e803297-198a-48bb-ae46-fe3db2d9ee82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8197ab7d-584f-4607-9665-4085377098ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97ae8c21-ef25-4c55-b0ef-bd7061eda411",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "590b6c72-11d2-4342-89b5-53c77e756535"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "969727e6-d556-4308-80c5-03d58a3c6caf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "faaf6fb2-aab9-4dc5-804c-bcd76cd6346e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6787f0f8-16ea-438d-8a53-525cd606a63b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2591ce7-98f2-43de-8276-5b36c2faec15"
            }
          }
        ]
      },
      {
        "id": "10e14f42-fbc5-4646-8339-47e61fb7b44d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "976e2f18-9b16-4885-9bcb-359ffb3453ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90d14f37-b7bb-472d-b1fe-36a3301fdcbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e954b6da-3d7d-4912-ad23-ff02520d53e9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785c32f6-6f09-49de-af7b-1749aa272ea0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "888ec4c0-c0f1-4af9-bbdc-62d692630146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3f321c-dbb7-497e-b65e-89790bf84e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32f94b4d-ebeb-457b-9d1e-1932d14da14e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a98fcd53-4e93-461f-9fcb-edb644782360",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47b15ae1-df1c-4c00-897c-029c3531ef19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ac4c651-6cc6-4337-b355-78857564c670",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01457136-b0d6-4175-8b0e-608baa4d545a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fe1487d-b305-4f06-8be2-192192bee998",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3682656f-ae1f-4c06-8a70-bfc2937cf228"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b38c00e0-1925-4c66-b138-820c16aec050",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6862122a-b5ae-4644-b3d5-91dd36f09ca0"
            }
          }
        ]
      },
      {
        "id": "307c65c4-9966-4f9f-9ae5-c362bda6fb2a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "43fa4018-a69f-453f-b8bc-f0a1ca6e6255",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae30b5f8-20e4-42e9-9719-767f5c597ebe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57bd8304-0d68-4300-bef2-f317729a1494",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac80cea-d918-477b-950c-7b8ff36b2b21",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c3ef85e-647f-41ac-86f4-0a956826e9df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b796c136-dc7f-4407-b5b5-75aee6bf9582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af1d8139-b5fd-40a4-a7e3-0ed9b50d8b8d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaf25065-5ac6-48e5-bd45-6e96d8511866",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2624246e-9bd3-4c2d-bae2-14802bbe2f93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "158445dc-fd02-4bbf-b8a4-f1952404d7fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31ff285f-03a9-49f0-8895-c1b9e60f2fce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "859a2c41-633e-4465-9cc0-e67900c29555",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b426640c-8bfa-4380-965b-fb2bbf3f41c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32d90a79-db60-4926-a185-145d954942cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9bcdfd0c-994e-4f5c-9573-52f0c0486273"
            }
          }
        ]
      },
      {
        "id": "80fb2f66-0e3d-4b07-bcb1-3a733b80187d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "84049d9c-5d1a-4be0-a67e-7dcc26ed1513",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ab22206-6f57-4463-996d-965e207623de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63963ff8-f12d-4c81-aaa7-dca256c80afa",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d40d431-cfab-404f-a3b2-60c1d29e8f31",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78e56272-441a-44f4-8849-945c8ac88629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b56a9d-dcf6-4944-8e2f-461f43756511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d79c381-a429-4f49-8cce-6dc2ec7ce669"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07ebde27-37ac-4675-8fe4-a88e29ee0716",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e476f4ae-22fd-451d-819c-ad07e0fc243b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fad03ca-8eee-4aeb-bbb1-6944040250b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c94e90a7-a3fd-4ab0-8fd2-4564019ce8c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "811282d5-3e9e-4a72-b506-be139bd5764b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eab65153-8aa9-4680-a43b-5040e4f54931"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c421d0da-3903-4a83-b94a-61a42f0b7b38",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76587d05-0def-478c-ad35-2667b12982a1"
            }
          }
        ]
      },
      {
        "id": "a90f49b3-d6d1-44bc-997f-41af4eaecb26",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7054d0f6-9230-4bf1-82f1-d57243719d47",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8de43a7-55e9-4a44-a6bb-00dae3057ef8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0da392a8-d649-4d68-810a-45b88849573a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62e598f2-93eb-4578-9bce-d88727a7036b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "567ec284-2d76-4a17-9303-cede6eb392bb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 76.2877192982456,
      "responseMin": 6,
      "responseMax": 489,
      "responseSd": 85.72957087766491,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707525167522,
      "completed": 1707525198460
    },
    "executions": [
      {
        "id": "1c22fb72-b6c1-4e2e-9f25-de6341421cef",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2dda0eda-e333-474e-8a74-ba0f89cfc84e",
          "httpRequestId": "a3c79941-b3ca-4f36-a939-8be219360d65"
        },
        "item": {
          "id": "1c22fb72-b6c1-4e2e-9f25-de6341421cef",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7441f48a-a3b0-471d-8127-0a1d4771dc84",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "53889ceb-6ab3-4a58-9a76-6875eb73d35e",
        "cursor": {
          "ref": "e5b7c5bf-fe37-4f43-b423-d3f6ff4d303a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4fc3efbf-c7a9-4a8a-973d-7fa66b48313c"
        },
        "item": {
          "id": "53889ceb-6ab3-4a58-9a76-6875eb73d35e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8a24cc3b-ee4a-4b3f-95b3-43afac70e211",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "e49a6f67-6f27-4bd3-974e-c9c7df6f8a38",
        "cursor": {
          "ref": "3b5e830c-d7a5-4584-8fd6-f03e49968078",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "af8ea613-25c9-4f5a-9401-76a6dca17c15"
        },
        "item": {
          "id": "e49a6f67-6f27-4bd3-974e-c9c7df6f8a38",
          "name": "did_json"
        },
        "response": {
          "id": "77f84603-4431-41ee-95c1-355eca30c75a",
          "status": "OK",
          "code": 200,
          "responseTime": 463,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8133d9-1e81-4474-9301-f311e116f3d3",
        "cursor": {
          "ref": "76e6fd7c-1e52-477e-9ae7-b3adf8cb0409",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "767e6c5e-d347-4bbb-92ba-5723857117ff"
        },
        "item": {
          "id": "6f8133d9-1e81-4474-9301-f311e116f3d3",
          "name": "did:invalid"
        },
        "response": {
          "id": "538ce704-ae18-4c14-942e-f9f812d92b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8133d9-1e81-4474-9301-f311e116f3d3",
        "cursor": {
          "ref": "76e6fd7c-1e52-477e-9ae7-b3adf8cb0409",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "767e6c5e-d347-4bbb-92ba-5723857117ff"
        },
        "item": {
          "id": "6f8133d9-1e81-4474-9301-f311e116f3d3",
          "name": "did:invalid"
        },
        "response": {
          "id": "538ce704-ae18-4c14-942e-f9f812d92b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564c72c3-294e-4d4c-a929-a56215cd0803",
        "cursor": {
          "ref": "1b73b1f2-9846-40dd-a619-b1e0935d1b30",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c979f8d4-dd33-44c2-ba40-af60bcd367d2"
        },
        "item": {
          "id": "564c72c3-294e-4d4c-a929-a56215cd0803",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5ad6f420-a7cf-49eb-b644-1833e001230f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b19e78-3706-41b8-9027-85c2d2dbba22",
        "cursor": {
          "ref": "3c096a1c-761a-47d6-bcb9-c388bb61b4fb",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4a683ddf-ab75-493b-bd1f-dcf2d2208bd7"
        },
        "item": {
          "id": "93b19e78-3706-41b8-9027-85c2d2dbba22",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0c40d43a-c459-4add-8612-929b2183a4db",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf2a2e0-93b0-445b-89f7-d47843e794c4",
        "cursor": {
          "ref": "c02dedc2-00c7-4902-907d-ec4c87d960d9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f95fb478-d48c-42e7-9343-8f71329b8ea4"
        },
        "item": {
          "id": "bbf2a2e0-93b0-445b-89f7-d47843e794c4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d6213b78-2736-4358-9991-c224c2dbceab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9a78c6-fa84-4b1a-badd-01d33f752603",
        "cursor": {
          "ref": "0cf86af8-8fed-4e11-a68e-1c33bb3fd9da",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2222159c-4d7f-4241-9279-10e4b359481b"
        },
        "item": {
          "id": "0b9a78c6-fa84-4b1a-badd-01d33f752603",
          "name": "identifiers"
        },
        "response": {
          "id": "efea35fa-fc16-42b6-a64c-368601bf8289",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68554aa1-dd93-4a85-8d6a-f7e7af0fce9d",
        "cursor": {
          "ref": "6028b00a-8f16-4c94-bc4d-da69febc60e5",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9601a017-3c18-4e7d-8cff-a57954026333"
        },
        "item": {
          "id": "68554aa1-dd93-4a85-8d6a-f7e7af0fce9d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "986076b2-db70-4d3b-860c-30a9fa263687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2d5b53-9ed7-4bd3-8832-4f4cccf09190",
        "cursor": {
          "ref": "13e1279c-7670-4b03-a2e5-b2daa4226949",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f33651fb-5fd6-4681-abe7-54f43f3a3af8"
        },
        "item": {
          "id": "7e2d5b53-9ed7-4bd3-8832-4f4cccf09190",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6848c563-9467-4657-84b4-069c02226dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbbcd12-d8ea-48dc-bbd4-600ec3a0d47a",
        "cursor": {
          "ref": "fb5d0d29-16b4-496d-a1b2-ffa25e11f3e7",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3ead6b95-f2d7-4b2f-b0ac-613aa5e60e7b"
        },
        "item": {
          "id": "7cbbcd12-d8ea-48dc-bbd4-600ec3a0d47a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a85170c1-f1e8-4af0-89e8-425ea733ae56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455d106b-1776-47b2-95aa-a5f0ecd57825",
        "cursor": {
          "ref": "db008560-c6d2-4ffa-92d4-ae9240cbd5ec",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "65f30206-99d5-49d7-b239-3892b8455f9b"
        },
        "item": {
          "id": "455d106b-1776-47b2-95aa-a5f0ecd57825",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ec384889-8aa6-4746-aad8-190659404a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ce6821-e3bf-48ce-bffc-61f00de6d14d",
        "cursor": {
          "ref": "ac047d93-b11e-435a-a1a0-667a9ac76b2b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "28c6fe62-fc48-4b27-b5ce-a8efa88484a2"
        },
        "item": {
          "id": "27ce6821-e3bf-48ce-bffc-61f00de6d14d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "678afeca-13e9-4a7a-9561-3880c9e8471d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9676cd55-7cda-4701-994d-7e74e4700076",
        "cursor": {
          "ref": "a78319c4-8840-41f5-b0b4-919b46266f23",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a9a4a1e3-8a7a-4479-8d95-7dea37a6865c"
        },
        "item": {
          "id": "9676cd55-7cda-4701-994d-7e74e4700076",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a2189d1a-5fea-4f00-b30c-7f6cb4d19fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590a7f9e-b8d4-451c-978b-6e79085e5dba",
        "cursor": {
          "ref": "e9842a83-67f9-41ee-94c8-f7cd8806993d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6c77f60a-8223-444e-b76e-928c0e551024"
        },
        "item": {
          "id": "590a7f9e-b8d4-451c-978b-6e79085e5dba",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "969324c7-29d8-4666-a23c-38ce23f95cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc773397-0b4f-4620-b33f-461d23176528",
        "cursor": {
          "ref": "6a8b8eee-7ad0-47b3-a7c4-e393c8c0bb73",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "eb5e8cca-0343-4306-b56b-3af21ce019bd"
        },
        "item": {
          "id": "cc773397-0b4f-4620-b33f-461d23176528",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "07b5a764-1c49-4c6f-ba98-a4aeffd0a359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1d7035-49a1-4b78-9428-92f14256ef59",
        "cursor": {
          "ref": "e4fc21f8-76aa-4a57-b9d7-c153a1bc717b",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c15b7e83-c488-41b8-bd91-5abacf7a1737"
        },
        "item": {
          "id": "fa1d7035-49a1-4b78-9428-92f14256ef59",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "198d450f-86f1-40d7-ae26-c45aaf6b4395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d847c332-6660-4497-97fd-cbf0f3f339ba",
        "cursor": {
          "ref": "a13fd41f-2bf2-4141-a8da-fbd0808b6304",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c88803bf-995f-4a74-8dbe-10897abcc64a"
        },
        "item": {
          "id": "d847c332-6660-4497-97fd-cbf0f3f339ba",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "14daead7-d97f-489a-b781-5f5fd35ae3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c334dc-6041-4025-9560-0e53fd36d0dd",
        "cursor": {
          "ref": "ea903ea4-0170-4eda-9cf2-101aa70f1aa9",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6ce9e93d-915c-4832-9bb5-f6b5d437b92f"
        },
        "item": {
          "id": "24c334dc-6041-4025-9560-0e53fd36d0dd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2075a463-d8c8-4a15-8074-e0424e0fb796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee8fb2c-5609-41e5-ba95-e65c186cd45e",
        "cursor": {
          "ref": "8115c6f5-a759-459b-a25e-dfd8a4b16bd6",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "66a548f0-e1f3-4b9a-9802-04b490d8db48"
        },
        "item": {
          "id": "4ee8fb2c-5609-41e5-ba95-e65c186cd45e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b09bf722-0697-414c-bc38-20ab3bb18c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9cf61d-89c0-451c-8f29-98609a3a025a",
        "cursor": {
          "ref": "5de9c672-e0e1-4932-8cbc-62dca37e10d8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8acfc3b0-635d-478f-a447-a291473bdb03"
        },
        "item": {
          "id": "1a9cf61d-89c0-451c-8f29-98609a3a025a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3faf85f1-9052-4696-a2ed-79f141161402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a110fba-c42d-4a0f-b804-295cfd6c406b",
        "cursor": {
          "ref": "a5ff786e-71eb-45f0-b3cd-659055591a36",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "79cef556-3eb0-4910-a905-3a10d8b259d6"
        },
        "item": {
          "id": "5a110fba-c42d-4a0f-b804-295cfd6c406b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f200289b-0484-4dd0-a063-3f5639bb90c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ae42be-2a71-44fa-95f4-e4c36e5ddc5a",
        "cursor": {
          "ref": "367ba3e5-3c68-4eda-9f64-f744cf5fffef",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1feb6f02-368e-41c9-8f9f-2ff4086214ec"
        },
        "item": {
          "id": "71ae42be-2a71-44fa-95f4-e4c36e5ddc5a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e9c7e274-70ae-4ff7-948b-ea80169b67c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184d0c54-dcab-4468-b493-48a322f77294",
        "cursor": {
          "ref": "664fefc7-6b94-41af-ad49-d13a27461603",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ef9a5802-8323-4659-8f31-2692bc288ad2"
        },
        "item": {
          "id": "184d0c54-dcab-4468-b493-48a322f77294",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "318c7426-a589-4ea7-9db7-494e89050b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c6551c-ed46-4af2-8a52-31b1feb38c2a",
        "cursor": {
          "ref": "15e14644-f68c-4644-838f-b0d8aed8a783",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "af19c6a8-345a-4e9e-bfeb-dad28a142855"
        },
        "item": {
          "id": "77c6551c-ed46-4af2-8a52-31b1feb38c2a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0f8411f9-4554-40c7-a514-c54df378d84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717d9466-f173-41bc-8b70-54458324e114",
        "cursor": {
          "ref": "e1fd334c-a3fd-46b0-b35f-eb559516b048",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b92cb37f-ece4-42cf-881c-72e11c83a98b"
        },
        "item": {
          "id": "717d9466-f173-41bc-8b70-54458324e114",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d4460c1b-c931-4a89-a022-36ff03cac90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb24105-306b-4be2-865a-6ccbca5bab57",
        "cursor": {
          "ref": "21c1d2dc-296c-45ef-9f25-f575df7c5445",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "789ec3bb-a396-4229-96c3-64392094d061"
        },
        "item": {
          "id": "cbb24105-306b-4be2-865a-6ccbca5bab57",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "48465c73-3ba6-45ea-aadf-38ad9774faec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8057b6-5f6d-4ec8-9c8a-35692ca19165",
        "cursor": {
          "ref": "d96932ec-5b35-4ad4-8eec-effbdb3fcaeb",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b7aba07e-fe38-48ab-b57a-14eac9ddc25d"
        },
        "item": {
          "id": "6a8057b6-5f6d-4ec8-9c8a-35692ca19165",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "13acbaba-e8c2-46d5-943f-725af2f73467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc6cb6d-3aa9-4f43-b5a5-cb1152d8e2a0",
        "cursor": {
          "ref": "3e061df2-d054-4abe-b3f1-46394efa4788",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8c5beaea-63b2-4a46-bdf7-526c5f246a1a"
        },
        "item": {
          "id": "5dc6cb6d-3aa9-4f43-b5a5-cb1152d8e2a0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fe2ed740-c067-4f12-86b6-6a39a50de3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d2d743-e479-4bf4-9bc5-c5eb26183ebe",
        "cursor": {
          "ref": "8b9f50a0-06bf-4904-9741-5c33192f3d87",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8bbf433e-6288-4fbd-b715-59a0357e800f"
        },
        "item": {
          "id": "29d2d743-e479-4bf4-9bc5-c5eb26183ebe",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "69e060a5-2d76-4e2b-a15d-86a749cf6e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c564ae3-a545-4a4f-804b-aafdb7f2321e",
        "cursor": {
          "ref": "7dcd59ba-5961-42cc-bee1-14680112b6b5",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f476b4ea-1961-4282-87c9-d1298bcf4f4c"
        },
        "item": {
          "id": "1c564ae3-a545-4a4f-804b-aafdb7f2321e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dec0853b-37e6-440d-96c7-852f17adaf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62806ab-ae04-4145-9dd4-789073dac67d",
        "cursor": {
          "ref": "d13208e9-072a-466a-9828-f0dffb5e82db",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2542e354-0425-4c3b-bfff-281e7c22d81f"
        },
        "item": {
          "id": "f62806ab-ae04-4145-9dd4-789073dac67d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "644dad88-f191-42cf-b09e-7c735b601f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f011f630-c576-481c-9f42-15c22ed55df9",
        "cursor": {
          "ref": "c414b397-188f-427f-b1e7-49c4fc962491",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7dd5098a-8878-4bcc-b860-ce0aaf7239b7"
        },
        "item": {
          "id": "f011f630-c576-481c-9f42-15c22ed55df9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "05c42a01-12f2-4970-abb6-99144ee65254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce0d51b-e981-4393-8329-a024ecb21827",
        "cursor": {
          "ref": "aef70ec0-4762-4fc3-b525-b8abfb3e32cf",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5f76f0a1-1950-43b5-93f1-0332d768f197"
        },
        "item": {
          "id": "7ce0d51b-e981-4393-8329-a024ecb21827",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "688e7441-9cb8-4abb-8df6-f6e5435d673f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1caf0b53-5dee-43b3-adce-67360efb8c6a",
        "cursor": {
          "ref": "7892ff2e-8ce8-4f58-8850-cedb919e28cd",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7cea1e4d-ae67-4fd9-b3a0-b06f8cb522ec"
        },
        "item": {
          "id": "1caf0b53-5dee-43b3-adce-67360efb8c6a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "44072d03-8c5e-4a76-8784-c5f7d5b4d730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc9cd9f-ba1b-4b3f-8b85-dd229f523d9c",
        "cursor": {
          "ref": "60a9494c-07f0-43dc-80e5-d5b011fac9c3",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d2d75064-1dc8-4581-81ad-5fa12c607f3a"
        },
        "item": {
          "id": "6fc9cd9f-ba1b-4b3f-8b85-dd229f523d9c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c66934e4-caa0-4043-9c4b-32101fa6084d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1736690-8673-4885-8995-d0919baf8e89",
        "cursor": {
          "ref": "c421ae49-a53b-4ad1-8e98-cb411e847f24",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "17c7f234-3ea9-4e72-b036-42aee49bee6e"
        },
        "item": {
          "id": "b1736690-8673-4885-8995-d0919baf8e89",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6b5bf171-e1f2-4828-9f26-0805aa96d04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ae6097-a6ca-46e1-abb8-d13bff88dde4",
        "cursor": {
          "ref": "4beaeebf-2837-4f20-844f-cd44ae3cd1f8",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fa2d28c6-491e-4a92-b884-868f893c05dc"
        },
        "item": {
          "id": "c2ae6097-a6ca-46e1-abb8-d13bff88dde4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2e58e034-973c-4906-b61a-43e166de47b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332d2dbc-79d0-4818-bd10-e88e7e49e18c",
        "cursor": {
          "ref": "00a30e36-5b27-4118-a32b-1689cd5c0f6d",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f5034101-5131-47ad-b49c-76524b09ceaf"
        },
        "item": {
          "id": "332d2dbc-79d0-4818-bd10-e88e7e49e18c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b5b765e0-9f0c-4762-8492-7693532a4ec7",
          "status": "Created",
          "code": 201,
          "responseTime": 489,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e4435969-a4bf-4f17-ba4d-34ae14cb1bc4",
        "cursor": {
          "ref": "a5512225-e309-41f7-86c1-66f62c464294",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "49ab78fd-8088-4ab7-9442-8f2c3cacf924"
        },
        "item": {
          "id": "e4435969-a4bf-4f17-ba4d-34ae14cb1bc4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "43730e9f-f626-437e-bb38-109319b38222",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9e4e5e48-a276-43d0-a6c2-912f0dcf5e6f",
        "cursor": {
          "ref": "9366ec75-83c6-4c75-9a3f-8700e3af25ce",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c79e3815-aefb-4969-9cf0-d023ec00787c"
        },
        "item": {
          "id": "9e4e5e48-a276-43d0-a6c2-912f0dcf5e6f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f2c8ec62-4a14-4be6-b204-0085e6fb2568",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3b459b7f-c116-4168-b1fc-f5202ee65484",
        "cursor": {
          "ref": "4174faf5-43d4-4b87-84a9-48173c26c9db",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "014f7484-cfa9-4d05-bb59-b218a7f9e20f"
        },
        "item": {
          "id": "3b459b7f-c116-4168-b1fc-f5202ee65484",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a731371c-34ac-42f9-9d39-2755fd02cb7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e02c6f-191e-4bd9-9119-3745c02e4921",
        "cursor": {
          "ref": "0e794a01-829e-4b95-b6f5-0262814cf385",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4b3a591d-a6be-4b65-8010-377455194025"
        },
        "item": {
          "id": "04e02c6f-191e-4bd9-9119-3745c02e4921",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "59cba5f0-7f74-407d-93e2-7a178717c0b3",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "462fe07e-fbfa-4901-8891-0f78bd76fba9",
        "cursor": {
          "ref": "fa9f5e4d-0fc1-461c-9a52-8dbb5761fe12",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "58950f58-d497-4ec8-9efd-18126801c5a8"
        },
        "item": {
          "id": "462fe07e-fbfa-4901-8891-0f78bd76fba9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2dd3a78d-c8b0-4438-aeb7-81bcb9b81748",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7410a197-42b3-457b-a678-d543d1c7bba8",
        "cursor": {
          "ref": "e02c0bb7-63d0-4ad8-b9cf-344bfb118a99",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eddcbeb0-2d12-457a-aed7-33f9e4be41f1"
        },
        "item": {
          "id": "7410a197-42b3-457b-a678-d543d1c7bba8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c53be944-cf0c-4d61-8f11-2eb6c21a02af",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e72f197e-af21-457e-bd1b-2ac0282370c9",
        "cursor": {
          "ref": "d27a4031-49ec-48dd-9acb-b8660e1be802",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0dc77742-9227-4ba5-9618-8672e1c5a1f2"
        },
        "item": {
          "id": "e72f197e-af21-457e-bd1b-2ac0282370c9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f527340a-207a-446e-a154-7e6b022c6c22",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "87148ef6-a9b3-4a4c-832e-f5270539adde",
        "cursor": {
          "ref": "5742eb6d-6bdb-4a49-8b6a-598904fc1b1d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8c147538-7c07-40ba-a7a8-0eb682184bfd"
        },
        "item": {
          "id": "87148ef6-a9b3-4a4c-832e-f5270539adde",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "70d4efa2-15ff-4de9-92cb-75a12700df1e",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b731bcb6-7a34-4602-9ce9-2d128925385b",
        "cursor": {
          "ref": "f0de5e16-b863-4b27-a037-ecb9ffdbcb6b",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "66c371e4-c90f-4242-9e51-f2fbbc384f48"
        },
        "item": {
          "id": "b731bcb6-7a34-4602-9ce9-2d128925385b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4f61ed13-714a-49cc-b321-f77071a80615",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f0086227-a326-4740-81cd-7c84d9ec461f",
        "cursor": {
          "ref": "f7393df7-aa18-415d-89dd-92cc7dbbe3dd",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b69d4989-debe-499a-baf2-d59a3cb925db"
        },
        "item": {
          "id": "f0086227-a326-4740-81cd-7c84d9ec461f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4acfc670-fa7b-4fac-ae37-8f183235808d",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "622b2d30-f9ca-4910-8e52-f84b55cbe294",
        "cursor": {
          "ref": "8dab11c1-a0f5-41d6-86bc-65b0501fe9f1",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7eb5162e-4d35-4477-a83a-5e57dd2e95a7"
        },
        "item": {
          "id": "622b2d30-f9ca-4910-8e52-f84b55cbe294",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fb63cc91-2b44-44e2-8c46-7c3d033b0158",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6d3b8948-25cb-4c9b-a4dd-62e12532a1b1",
        "cursor": {
          "ref": "f4f0c484-d972-4a00-a7f6-eec249a4155e",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "23f8c1a9-a9ef-4489-861e-72544354d6f1"
        },
        "item": {
          "id": "6d3b8948-25cb-4c9b-a4dd-62e12532a1b1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6cfbe5e5-d2d3-4ed7-b0df-aeb89aa97e1e",
          "status": "Created",
          "code": 201,
          "responseTime": 419,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4efb946c-29ab-47ab-8627-919587583798",
        "cursor": {
          "ref": "9e04d714-a366-4440-99e7-65f1e6962774",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9e1cb524-07f7-451b-bcb5-6d51b5aeb61b"
        },
        "item": {
          "id": "4efb946c-29ab-47ab-8627-919587583798",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a78a7093-57c6-4df8-a766-5186212daab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac9707f-019e-4950-9568-f5a2a6f15b58",
        "cursor": {
          "ref": "a578ac3b-b0de-4694-b770-0c86fa9f1c0c",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f494550e-da02-4d90-8e03-42f1fda4e506"
        },
        "item": {
          "id": "2ac9707f-019e-4950-9568-f5a2a6f15b58",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c83c05ed-77e6-4be9-9fa6-398505d5a64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9203caa-b037-4f2f-914c-6eac4e4c14c7",
        "cursor": {
          "ref": "c3ef48a1-44ca-4a3d-b7c6-f52a83ed52fd",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c63f84d1-ce0f-4d0e-900e-22e041700a42"
        },
        "item": {
          "id": "f9203caa-b037-4f2f-914c-6eac4e4c14c7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d495aae4-009c-4647-80e3-5ecedd7927c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26e4cd4-8dcf-4656-bedf-35270cf3c296",
        "cursor": {
          "ref": "879fe15c-1220-4dfe-a5a2-e8d69b6a0efe",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8ec02636-b5e5-4998-860a-aace1d8007d2"
        },
        "item": {
          "id": "f26e4cd4-8dcf-4656-bedf-35270cf3c296",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "45418657-06e5-43dd-9753-7ac97e9b98f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0634a8b9-5500-4a4e-9005-12ece33bc14a",
        "cursor": {
          "ref": "1d16e6b2-2724-49b2-b3e2-ce9af3f44e26",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7921cf44-411f-4c1c-977a-7333d18dec85"
        },
        "item": {
          "id": "0634a8b9-5500-4a4e-9005-12ece33bc14a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2eb140d9-6279-42e2-aee6-ad3285670047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e58ff75-6d95-4513-8c0b-bcac5e583479",
        "cursor": {
          "ref": "8f06aa8b-7971-4951-8b86-7b6d7237b697",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7317a652-fd98-4477-ae59-1948a62fb49f"
        },
        "item": {
          "id": "3e58ff75-6d95-4513-8c0b-bcac5e583479",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ad40198f-fa31-4d7a-b5db-2d2a4cadca6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f59f9b-ecb6-4bd4-bacd-cb2209617d8b",
        "cursor": {
          "ref": "da2adfd8-5c2c-4ffa-b3be-84efd21d143b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "eb710419-0987-44f2-b66a-d6b4d92704ff"
        },
        "item": {
          "id": "c5f59f9b-ecb6-4bd4-bacd-cb2209617d8b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e2f59195-80e0-48f3-a294-b3a2945a969b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9be889c-05c2-4361-8cdf-3bc8ba95be1b",
        "cursor": {
          "ref": "6dbe7ddb-2720-4ff7-bd97-30f88caa2b1b",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2d3bbb00-5e6b-4382-b752-f077826773ca"
        },
        "item": {
          "id": "d9be889c-05c2-4361-8cdf-3bc8ba95be1b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6d680560-27df-4342-8625-a9d5ca569d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e83ccc-70ee-4da8-8ffc-56cc54702e25",
        "cursor": {
          "ref": "e559cb3d-e2ea-4c83-82df-665aea3975b6",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "11414d4b-f41f-422f-9307-618b9fb44bb4"
        },
        "item": {
          "id": "b1e83ccc-70ee-4da8-8ffc-56cc54702e25",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "555f2334-a7d2-4772-8813-98ac4b9d9475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4471bbb-bd44-4814-b9a0-eba5a531e420",
        "cursor": {
          "ref": "65418988-f674-44c2-b418-d4aa1128fc04",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e5db93c7-381b-4fc9-b65c-c8110a56e1e4"
        },
        "item": {
          "id": "b4471bbb-bd44-4814-b9a0-eba5a531e420",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8fe240b9-7bf9-4238-b199-a199e7219d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c8d32d-d4dd-4cb0-9e6a-6eed1c62d1af",
        "cursor": {
          "ref": "45eb3681-0f98-41e6-b96a-e20375c46b22",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "af779c48-e2db-4ec7-876a-9c821b614758"
        },
        "item": {
          "id": "72c8d32d-d4dd-4cb0-9e6a-6eed1c62d1af",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "fc1f00b8-a954-406c-aae2-037a552996f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbac3ec-c667-49c0-b233-688884c3828f",
        "cursor": {
          "ref": "34c8d1d9-9181-45b1-958d-47ff58f18463",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b5395c09-56ee-4b05-85bc-cafa07010e6e"
        },
        "item": {
          "id": "bdbac3ec-c667-49c0-b233-688884c3828f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "07cb1758-b7b3-41bf-bd03-19084f11ebbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e939790d-030c-4084-9484-6d9ca4512e14",
        "cursor": {
          "ref": "bd9352ff-8d4a-40a1-b7e2-1f3c4b07b318",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b7a8f4d8-8b88-4b1e-8795-0900345135a3"
        },
        "item": {
          "id": "e939790d-030c-4084-9484-6d9ca4512e14",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "31b8a6da-f313-45ab-9a00-2106c41d2d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbdfa6f-e2a3-42f6-83c1-b24f61273eba",
        "cursor": {
          "ref": "78129990-c408-48ee-9aba-7e7a282dbafb",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "27babed7-94dd-4a9e-b5db-0a27d73ec754"
        },
        "item": {
          "id": "9fbdfa6f-e2a3-42f6-83c1-b24f61273eba",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "36cb1d63-ebbc-4a2c-bd50-365d6652531a",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "29e0a239-9aa8-4102-8ba2-f6f34f29731d",
        "cursor": {
          "ref": "a842fb48-875f-403a-898b-aad324d55d2b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "efe0c8c2-5d1d-46a4-97fc-f48d5fd8a6f9"
        },
        "item": {
          "id": "29e0a239-9aa8-4102-8ba2-f6f34f29731d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "192ddf84-d54f-4375-848b-697e1198890f",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "87bc3980-bdb1-4839-bec2-cef43ac8c0ce",
        "cursor": {
          "ref": "40e87d1c-3341-4f09-828a-a0e8de2ab824",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e96924b0-19b2-4485-bd51-3d4daacb5f28"
        },
        "item": {
          "id": "87bc3980-bdb1-4839-bec2-cef43ac8c0ce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dd2ff2f0-b214-4020-b24b-9ccc7219aad8",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d53919c4-f453-4a71-8d33-24b480704b64",
        "cursor": {
          "ref": "a24f9d3f-219e-419b-9210-f86b2a749e16",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ed8d85df-3834-46e8-8cd3-8065fd81c61e"
        },
        "item": {
          "id": "d53919c4-f453-4a71-8d33-24b480704b64",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7d5388b3-695e-47ed-91e6-c0d2164a4c5c",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ef749322-527c-4b52-994e-0eef65ce30c8",
        "cursor": {
          "ref": "9cdc3f3c-711a-4e44-ab1e-42f3df38df59",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2abb58b8-4653-406a-be34-3634bdb360c0"
        },
        "item": {
          "id": "ef749322-527c-4b52-994e-0eef65ce30c8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "935e9ac8-3613-494f-9996-438e7fa1c124",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "474d8004-d733-422c-9e92-feaef8909ff0",
        "cursor": {
          "ref": "5afc70b1-97a8-4496-b169-1cb80ec32182",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a26f9c35-e3a2-476b-b60f-a521884c6b07"
        },
        "item": {
          "id": "474d8004-d733-422c-9e92-feaef8909ff0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "74f5bc20-812f-478f-9509-a0f31dc58aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433893cf-03e7-4ba5-a5d5-4f9b2b296f67",
        "cursor": {
          "ref": "0804fbf9-5b8b-4cc0-b8d4-24ed96100ee7",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b76d1009-4ce8-4731-919f-a2d3b1c057cf"
        },
        "item": {
          "id": "433893cf-03e7-4ba5-a5d5-4f9b2b296f67",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7ba1e7a2-b0a7-46f8-a16c-956bd321dde4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c214fc-e112-4faf-8f0e-c423efdb0565",
        "cursor": {
          "ref": "f85f0380-8303-4dc4-adeb-0d32be3aa80d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2a20a0b2-6c67-4536-a2f0-12e0c5599563"
        },
        "item": {
          "id": "58c214fc-e112-4faf-8f0e-c423efdb0565",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "11278db1-316c-4e1f-a730-9657f56ae026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd7ed49-d020-4f27-8581-2279d90793f3",
        "cursor": {
          "ref": "3baa109e-5f90-4fc3-822a-8baca4c0dbf6",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "47314537-41ca-4631-af58-68c33f16434f"
        },
        "item": {
          "id": "4bd7ed49-d020-4f27-8581-2279d90793f3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ce6c5328-efb8-4205-8292-b3d31bc312c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d1ac7d-46ea-4fb2-bb8f-7bcff343c26d",
        "cursor": {
          "ref": "ca3eb5bd-3ec2-47a6-a299-bf4b511629d4",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e83d6b20-db0c-48ce-a76a-eb35659268c4"
        },
        "item": {
          "id": "98d1ac7d-46ea-4fb2-bb8f-7bcff343c26d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "119e36f6-e498-4efb-81bb-75ef8b7a8620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2954127-221e-40a8-81b0-2be5d30cbf3f",
        "cursor": {
          "ref": "9bc54e34-0fae-4829-a294-83e0dd1be212",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "34d8d2b8-2fc7-4757-b7ca-546aa23554e3"
        },
        "item": {
          "id": "f2954127-221e-40a8-81b0-2be5d30cbf3f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "eb80eb23-fd00-4908-819e-60847efd39ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab2b7f3-8606-45a3-97e5-0a6b00f9bfa2",
        "cursor": {
          "ref": "20f037c2-46df-495d-b29f-c24af9913027",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a3a5a197-26d3-4be2-aa15-b825bcce4f9e"
        },
        "item": {
          "id": "bab2b7f3-8606-45a3-97e5-0a6b00f9bfa2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "70a49845-0572-4471-980a-6604728cd1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8df02b-9f85-4a04-86be-f1a9fc2f3322",
        "cursor": {
          "ref": "d0b28b0e-f0aa-4f71-9f37-9c3d369db295",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c07dc1d8-5b24-4cd4-b723-83cde7d0cab6"
        },
        "item": {
          "id": "ef8df02b-9f85-4a04-86be-f1a9fc2f3322",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3116129e-2645-44c7-bc5f-5e03b6281a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbd41b1-fe15-4a1f-a960-195478483d41",
        "cursor": {
          "ref": "73a871de-0a8f-4b1d-8180-19bba65fb78b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1d3bf6ae-e45b-4346-9b47-920366e8450a"
        },
        "item": {
          "id": "ecbd41b1-fe15-4a1f-a960-195478483d41",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "44e9aef6-59af-4cdd-a966-6f3e250f887f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d98f84-c7a9-41ae-8233-cc90126328fb",
        "cursor": {
          "ref": "057dbc09-3ea8-47ef-b331-e55943ff57a1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "552bf5aa-0a38-4777-b562-c77d4b074818"
        },
        "item": {
          "id": "57d98f84-c7a9-41ae-8233-cc90126328fb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7c2d1b7f-97f1-43ce-ad9d-ddfe2a0edfe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba047bb-2d90-4400-9b24-28ec48e16e5c",
        "cursor": {
          "ref": "a54ec647-5959-414a-821b-fcc1bc879703",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0e48656d-e229-4f2c-869a-5aa61157b30b"
        },
        "item": {
          "id": "1ba047bb-2d90-4400-9b24-28ec48e16e5c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2e246414-3287-4959-b8fc-1293e2f14a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8cd86e-c9dd-4fc3-9ee7-40a67af14a69",
        "cursor": {
          "ref": "f7aa2f8f-604c-444e-83c3-9c43167bb857",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f9e7ee03-e3b1-4c1e-8d4d-ebd3e40c35b4"
        },
        "item": {
          "id": "7c8cd86e-c9dd-4fc3-9ee7-40a67af14a69",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "880df2e8-d680-4632-b0f0-a664678cc5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6a8d3b-e1b7-4ce2-ad5c-72978f79f647",
        "cursor": {
          "ref": "c81add12-72b7-4cfc-b793-1447a3128acc",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8157276c-2527-4f13-8c12-789ec5d35b59"
        },
        "item": {
          "id": "fd6a8d3b-e1b7-4ce2-ad5c-72978f79f647",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1dd3d319-e6c6-4714-95c6-e52302b2e093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacb1417-b0ca-4ebd-a0f4-bb396d3a1dd3",
        "cursor": {
          "ref": "cb0664f1-d740-4875-8459-37563f2d5157",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cd198042-fa50-4e2d-8753-b8dfdec06d5e"
        },
        "item": {
          "id": "dacb1417-b0ca-4ebd-a0f4-bb396d3a1dd3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b8a6d472-59a5-4e0f-bd7c-ed49cfddd231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5742c57-bd6e-4f7f-a06f-9501949f8f53",
        "cursor": {
          "ref": "3f0ac753-dd08-4238-904c-1cf319dd6d69",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "63c99d66-616d-4fe1-9e9b-128d118da545"
        },
        "item": {
          "id": "f5742c57-bd6e-4f7f-a06f-9501949f8f53",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c10c7f65-dde9-47fc-97d6-a22009bb56b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7cf99b-191b-4384-a968-ed368ecba5fd",
        "cursor": {
          "ref": "cec6fe0c-4572-4aad-9cd1-ae78138fb1af",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "739cbb6b-8c66-4291-a659-882784905bec"
        },
        "item": {
          "id": "9c7cf99b-191b-4384-a968-ed368ecba5fd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "27d74ec7-1f38-43c9-9eac-5749ba78266d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcc71ff-90d3-46d0-b011-c1e7e8b1c2de",
        "cursor": {
          "ref": "a5e7911c-ae3a-4b76-ab42-26cb4782024d",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "823768b3-e5da-41b2-b82d-f7908608e644"
        },
        "item": {
          "id": "1fcc71ff-90d3-46d0-b011-c1e7e8b1c2de",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "676d45b8-b164-4033-a3b0-349c039fcb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0d2d31-c8c7-40c9-b97a-62a370937b95",
        "cursor": {
          "ref": "e7c2cfba-239c-4131-9d79-28794773a319",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "24e1c0f8-eee9-42ee-88d1-bde89141ea01"
        },
        "item": {
          "id": "8d0d2d31-c8c7-40c9-b97a-62a370937b95",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b13a02fc-a511-4ef3-a1e3-accabf9ba715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f982e7e3-fa2d-45a8-93ce-034c934048fd",
        "cursor": {
          "ref": "1fe31273-6001-4fb2-a509-e5a13a486a90",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6b4c2b53-187f-4ad2-a6d7-3bc2f010ae50"
        },
        "item": {
          "id": "f982e7e3-fa2d-45a8-93ce-034c934048fd",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6f0e179a-913a-4532-9d52-683f4f8ded94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f431db1-faec-4032-85d9-9fc11a0e9d7d",
        "cursor": {
          "ref": "328e578a-3675-4121-8190-ad4a18651d74",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c42889d0-874a-4325-829e-f6c1aba79bea"
        },
        "item": {
          "id": "0f431db1-faec-4032-85d9-9fc11a0e9d7d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "20741c92-785f-4320-911d-9998ec769fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b277ed35-a589-4e4f-a269-35a6c275847e",
        "cursor": {
          "ref": "9bc59bb9-ee17-4d6e-a098-ae5440968923",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ae0dd5b9-30bf-4f2a-bc80-987123d61b9f"
        },
        "item": {
          "id": "b277ed35-a589-4e4f-a269-35a6c275847e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "05e44ecd-66a0-46c0-abb6-af60bbaaa82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a69f85-b1c9-4e52-8c1e-0fd5131bfa04",
        "cursor": {
          "ref": "cf2470ac-6c76-40b8-84b4-c6c27110d540",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1c3c82cd-b3fd-4bee-ba04-1db347221c48"
        },
        "item": {
          "id": "f9a69f85-b1c9-4e52-8c1e-0fd5131bfa04",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b2224479-372b-4561-9597-e79128dbb388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e243de68-3372-4fbd-8e48-3c164d7478ec",
        "cursor": {
          "ref": "8e4883f5-f7fc-4f59-8316-94ae82503da6",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "806d50d0-21be-4de2-9f1a-ed7a498d8f60"
        },
        "item": {
          "id": "e243de68-3372-4fbd-8e48-3c164d7478ec",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "52217fcf-1534-4b44-b57a-34825467ef74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe08091-bd45-472b-a20f-b01ad46f3d5d",
        "cursor": {
          "ref": "36614467-5917-4e31-96e6-07f571ebf029",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9ca4b83a-d005-47da-b213-f3295714900f"
        },
        "item": {
          "id": "6fe08091-bd45-472b-a20f-b01ad46f3d5d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dbbfcb15-ae90-4de9-b908-6da61e606ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480f6f59-aed1-4c15-b632-5d799b0ec01e",
        "cursor": {
          "ref": "0edcf6f1-b4b9-4ff8-a1aa-99fe2a740ced",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cabbaddb-bb34-4114-9376-1a19f2ae9f5b"
        },
        "item": {
          "id": "480f6f59-aed1-4c15-b632-5d799b0ec01e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "dca3cac8-3b93-4b31-bab7-c246ffb9ab1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870d5ca3-31c2-46e3-9a6a-8922a58577ff",
        "cursor": {
          "ref": "48052c1e-e93f-4bd6-aa22-3626dff1d942",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ffda2dd5-62c9-4d76-8d40-85f559eea236"
        },
        "item": {
          "id": "870d5ca3-31c2-46e3-9a6a-8922a58577ff",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8e440571-2f63-4b31-a1d6-dbcee088f511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07c94dc-c9f9-432e-a118-dc4040d785c3",
        "cursor": {
          "ref": "b3c8cd22-9e0f-4efd-805f-bff328a4ca33",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "61e7ce0a-a6ca-41c4-a1c9-5e9de6724543"
        },
        "item": {
          "id": "d07c94dc-c9f9-432e-a118-dc4040d785c3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0252c5b3-fa82-402e-bd9a-86cc3cfaa5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b807b22-2c48-41e6-afa2-93031a979ec0",
        "cursor": {
          "ref": "945cc738-1bec-49a2-91b1-40508410d16b",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cad29bf2-0f08-4057-a563-c839caa9391d"
        },
        "item": {
          "id": "4b807b22-2c48-41e6-afa2-93031a979ec0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1e78eafc-39a7-4a75-990b-310afd088f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2358e0b9-2cf4-4e64-aef3-e09617d1ac6b",
        "cursor": {
          "ref": "0d233346-2963-4df1-b132-d8c08e0c15b7",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a905cd89-55e2-4566-90f3-a131021deb45"
        },
        "item": {
          "id": "2358e0b9-2cf4-4e64-aef3-e09617d1ac6b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "73c31b8b-c8d6-40ac-a1a5-9c663bea8dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e38b76-91b2-46a1-a354-1613053ef8bc",
        "cursor": {
          "ref": "bd402f76-b4a8-4b4d-b2aa-c14b73b052cb",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "267c3327-bd6e-415e-8bf3-85b6a44ce445"
        },
        "item": {
          "id": "c9e38b76-91b2-46a1-a354-1613053ef8bc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5ed775c6-f0a5-43e3-b240-7a2a26fb2470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a741b68-d737-4583-b712-46c280fcb4ac",
        "cursor": {
          "ref": "9b5966b4-8e0d-420f-ba6e-9e237f5123f0",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "73fe8ee0-4353-4484-a23c-0436d0cbae26"
        },
        "item": {
          "id": "3a741b68-d737-4583-b712-46c280fcb4ac",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "33a06a9c-10fd-400f-b5bd-4b38adc95cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351633f6-5965-4a77-9ecb-fb60b4232916",
        "cursor": {
          "ref": "49c83093-2ad2-47f2-b048-e9324fe6fd1b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8d21ea69-dbca-4d36-b0ee-d35618b27adf"
        },
        "item": {
          "id": "351633f6-5965-4a77-9ecb-fb60b4232916",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "77ef2263-0ac5-4c97-9a63-ab24b8ad19ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8257a19e-028d-461b-ae35-a0927bc3ebb9",
        "cursor": {
          "ref": "414bb46b-316a-4c0d-b5c7-5baf46a5db32",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "347c2b35-c6dc-4fd2-a392-84dff87859df"
        },
        "item": {
          "id": "8257a19e-028d-461b-ae35-a0927bc3ebb9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6ac65232-0b85-4365-8dca-d498944e118d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c86122d4-fbb9-4fb5-9787-bff4f8a5a23e",
        "cursor": {
          "ref": "5b913e40-1337-4853-8918-fef770a4cd07",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "510117dd-1253-4574-a0b6-ac174439a6b8"
        },
        "item": {
          "id": "c86122d4-fbb9-4fb5-9787-bff4f8a5a23e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c133b33f-b79a-4974-ba19-a5a588229fd3",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74f81a7-4f7b-4ed3-b166-18abed703a36",
        "cursor": {
          "ref": "9e69a518-dfa1-4064-83c9-c50e9651e855",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "255f2eef-8534-4f84-b6cd-d3e6610d2f8b"
        },
        "item": {
          "id": "a74f81a7-4f7b-4ed3-b166-18abed703a36",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b636fbaf-4e93-47d8-b648-a977105fc475",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f046124-bf4f-435c-bb46-9ddc3aa070eb",
        "cursor": {
          "ref": "e70b953b-089c-4955-90db-d9203bbe9af0",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "400a9063-1ce6-41ee-9e98-ceee952b764f"
        },
        "item": {
          "id": "5f046124-bf4f-435c-bb46-9ddc3aa070eb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "36c0a3a9-ceb5-49dc-adcf-df327ffe4550",
          "status": "Created",
          "code": 201,
          "responseTime": 452,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbe8434-ef17-4bcb-ab45-e60d8c6b21b5",
        "cursor": {
          "ref": "3249d7ca-9e3f-471e-90af-80095e5f43a9",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "079bf796-3823-403f-a2ed-c51e0ecc2af8"
        },
        "item": {
          "id": "cbbe8434-ef17-4bcb-ab45-e60d8c6b21b5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "81246ae4-5335-4866-8b83-e8bd63cc352c",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "256cb514-d2f1-4a9b-94e2-99970a087be4",
        "cursor": {
          "ref": "3d086e5b-47fd-4d9e-be11-db9cb28cd700",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "06111d0b-28c9-4dc1-b612-5a6276209e6b"
        },
        "item": {
          "id": "256cb514-d2f1-4a9b-94e2-99970a087be4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5087b3d3-5618-4539-bab2-e5b1c1a3c062",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-10T00:33:02.962Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-10T00:33:02.962Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2df5b3ab-181a-4cd4-bfaf-49fb749672e3",
        "cursor": {
          "ref": "c8257ffc-ef9b-4af1-89a3-5be64d90851d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "32de40b4-2983-46cd-8507-bb2ed48ebb59"
        },
        "item": {
          "id": "2df5b3ab-181a-4cd4-bfaf-49fb749672e3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "626849aa-36d7-4c89-bab3-85a4c7df946f",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e79b1b0-8143-4f24-acd1-65c676cb9afb",
        "cursor": {
          "ref": "16023c56-a97a-47ff-a09a-52a628e481c7",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fc48eb03-cfb8-4341-932d-4cdee1010be3"
        },
        "item": {
          "id": "2e79b1b0-8143-4f24-acd1-65c676cb9afb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "353fcb8d-8087-4f5b-9fb3-5b801f8ce4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee8074c-3ffd-45dd-aa60-0c73a2bf20b7",
        "cursor": {
          "ref": "3b7352be-cfc9-452c-8d6b-d05005bb5c2b",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "00e2117f-61d7-4d3b-9fc3-d7d51bfa6461"
        },
        "item": {
          "id": "cee8074c-3ffd-45dd-aa60-0c73a2bf20b7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "90b456cc-a277-4ef8-ac87-0ae7c21fe29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da6ff2e-c64d-409d-875c-7be79d0f1066",
        "cursor": {
          "ref": "426d6db9-0d62-4d0b-b66d-e855f4bead2a",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9906416b-2872-4a1a-bf66-92e6aaf7c721"
        },
        "item": {
          "id": "2da6ff2e-c64d-409d-875c-7be79d0f1066",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "28c102a1-ca5d-4875-82f9-7a6a5bda4882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06af4e9f-a0f9-4c5f-8c66-f4194fbde819",
        "cursor": {
          "ref": "a9044e97-81af-4b9e-90f1-60872a6afefb",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "08b7af00-40d6-4366-9396-f2924db05ea4"
        },
        "item": {
          "id": "06af4e9f-a0f9-4c5f-8c66-f4194fbde819",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "245fc6ec-192d-484a-9fd9-c852bfe4b5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cb41fa-577e-4e8b-9780-94ec605a6751",
        "cursor": {
          "ref": "061a9a30-fba7-423e-8f81-50ccbc6419ae",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fb403048-9344-4df7-85e4-8ea3210851da"
        },
        "item": {
          "id": "d6cb41fa-577e-4e8b-9780-94ec605a6751",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9d54cb24-b583-4cd3-99fd-d339765fb9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d16b4b9-d79c-4aed-a30c-d1e6248fb925",
        "cursor": {
          "ref": "ea8f5ab8-07ca-4fa4-acac-8e93953fd93a",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a906e2c5-b469-467e-ac4e-2581f9174b11"
        },
        "item": {
          "id": "3d16b4b9-d79c-4aed-a30c-d1e6248fb925",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a10515ae-d714-40d5-ba4d-c7641cc8d71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662b0d9b-aba7-46c6-a27a-580f4e684ae5",
        "cursor": {
          "ref": "b9517328-606c-4900-a296-53dbf192f4c4",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b2543c95-d576-4526-9419-ec28791cba6c"
        },
        "item": {
          "id": "662b0d9b-aba7-46c6-a27a-580f4e684ae5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "95b4c1bd-fbcb-475f-b2be-db0ceac5afd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d840f6c-e960-4984-8b1c-e58fcc127553",
        "cursor": {
          "ref": "b5b462cb-f016-4f48-82e7-d875927355a1",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "14551dfd-073e-4668-80a7-6b43e283afb5"
        },
        "item": {
          "id": "1d840f6c-e960-4984-8b1c-e58fcc127553",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "074c4848-540c-4c0d-a570-176ab43a4201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f7bd84-0f84-415f-8919-871ac635759e",
        "cursor": {
          "ref": "9c20a3e0-ecce-4b24-96fa-d8271d6abe7a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f9da5544-c01c-4671-a243-ac2de5d98b05"
        },
        "item": {
          "id": "03f7bd84-0f84-415f-8919-871ac635759e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8ea95558-4f2e-452e-9f43-ce9083f712ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498bfd3d-6d29-4f98-ae1c-b6f0eb483c43",
        "cursor": {
          "ref": "68e3ec96-2225-4ee8-aebb-62c4c67d2618",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bd96d892-935c-4bb9-a31e-18f2bd1c0e98"
        },
        "item": {
          "id": "498bfd3d-6d29-4f98-ae1c-b6f0eb483c43",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5f829e3b-4ca5-474a-bc30-9fcb73081a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77436e63-5248-4c30-b506-f340d2a5ed31",
        "cursor": {
          "ref": "fb9a5abc-7909-4408-a420-13f4fa95211b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b2a7ca25-017e-4eb6-b6a5-c585ea5cb173"
        },
        "item": {
          "id": "77436e63-5248-4c30-b506-f340d2a5ed31",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4ac2030b-c0b8-4d27-947e-9acd101a4b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97b1419-a90e-446e-b6aa-f494b6d60305",
        "cursor": {
          "ref": "cbf2f049-417f-4dbb-ab02-b0bf7d14d633",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7d5e743c-7ae0-4f0d-871e-7b7d057827b4"
        },
        "item": {
          "id": "b97b1419-a90e-446e-b6aa-f494b6d60305",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bdff73d7-e034-4dd6-be99-f00fa35f556c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d8507e-e55b-48f4-a8cb-a80876d6aebf",
        "cursor": {
          "ref": "9faf1442-72c0-4848-a8d6-3c0f525a00e1",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f941e9ea-0b03-4aa8-bf41-bef2b01a8cd1"
        },
        "item": {
          "id": "78d8507e-e55b-48f4-a8cb-a80876d6aebf",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e8c40afb-4875-4911-9fb6-725cc4afe987",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "17ace92d-a9c4-45e5-bc99-741645eceb16",
        "cursor": {
          "ref": "e3d6b545-cafa-47fb-9b3a-f9040f34ef51",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "762c76fd-f1a5-4827-8c77-0770f42b6d41"
        },
        "item": {
          "id": "17ace92d-a9c4-45e5-bc99-741645eceb16",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "680e4b21-fc7c-4285-b075-ddc7c991efe9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4398215f-914a-4f82-aa60-990cf1a7763b",
        "cursor": {
          "ref": "36db453b-d773-4740-bbae-b71d9774e497",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e6442080-41a5-4955-9243-ab80a9aa3ecb"
        },
        "item": {
          "id": "4398215f-914a-4f82-aa60-990cf1a7763b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "29d4e097-9ab8-4aed-b4c6-23f9ac611d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084d3281-5ac3-41e9-a142-32b62670d86e",
        "cursor": {
          "ref": "fb3d1262-ade5-4b97-a3da-dfe2d2643152",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c494f473-6fc6-4228-abb1-d7cd70b724e8"
        },
        "item": {
          "id": "084d3281-5ac3-41e9-a142-32b62670d86e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4632d409-138a-4f59-9129-5fcf1622e605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbe8b4b-1645-48bb-b028-a418bfd89625",
        "cursor": {
          "ref": "df5dc269-80d2-41af-9732-829ffca3c937",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f4dda379-2da9-46c2-b75e-83503680cb3b"
        },
        "item": {
          "id": "3dbe8b4b-1645-48bb-b028-a418bfd89625",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "228c2899-dbf6-437e-9a0b-693db9a6fbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b937bae-f96e-4014-9bf8-552126a452df",
        "cursor": {
          "ref": "6cc74bd7-d6e0-4890-8ce8-982a96b0a62b",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ccdca61a-b8da-4e42-978e-5bc78889c3bd"
        },
        "item": {
          "id": "2b937bae-f96e-4014-9bf8-552126a452df",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8af4584e-4435-49ef-be9e-267b007afda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d85c0c-32cf-4dbe-be51-a26ca5f10291",
        "cursor": {
          "ref": "6d90caf7-8c70-4f64-979e-00aa213abe71",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4c635220-4fcd-42f9-8083-eed19dd1658e"
        },
        "item": {
          "id": "a2d85c0c-32cf-4dbe-be51-a26ca5f10291",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ad84e1e9-5002-4543-8b64-0aede9337c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b3fa2f-4dd8-4ce7-a17f-096e431d0fa7",
        "cursor": {
          "ref": "131503d7-fe0a-4338-b370-57511f55f100",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "88b81d34-fd2b-4723-9ca8-999ea8586049"
        },
        "item": {
          "id": "b2b3fa2f-4dd8-4ce7-a17f-096e431d0fa7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e4f098ae-bb29-4fba-ac81-99e55a4a7c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187f7bea-b1d8-4569-bf9c-0ea35c32c861",
        "cursor": {
          "ref": "387fc1e7-bd0b-4a3d-9b72-53b5c318faa3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "859118d5-c60e-4d25-a59a-72c414593491"
        },
        "item": {
          "id": "187f7bea-b1d8-4569-bf9c-0ea35c32c861",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "53498a96-882b-4fc0-8adc-58c15ec0bbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e271a3c7-c575-4014-bcbe-f2a7d5f2ab02",
        "cursor": {
          "ref": "bd991f80-a80a-438e-a1a6-b3f72996f10b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "859f9330-2e23-4c77-8dbd-6c0307a77223"
        },
        "item": {
          "id": "e271a3c7-c575-4014-bcbe-f2a7d5f2ab02",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "aaf277e5-b208-4130-a30c-f37bab461328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e61ca4f-df84-4a7f-8957-2e1b0777c6c9",
        "cursor": {
          "ref": "37fba6aa-0001-4a1a-bc58-bf6db7bb4730",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2cd288b8-9961-43e7-bcad-a5da824fe134"
        },
        "item": {
          "id": "6e61ca4f-df84-4a7f-8957-2e1b0777c6c9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "29aa1848-e05c-4427-81fc-d4c9631f5561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8679807c-6c4f-482a-9db0-3114bcd37a5b",
        "cursor": {
          "ref": "83667c56-6166-4b27-af0b-ae8eaaa5ef77",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "10856b37-1881-4a59-8098-e280dc6b001e"
        },
        "item": {
          "id": "8679807c-6c4f-482a-9db0-3114bcd37a5b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fb206e4d-e805-4da0-a0f1-3f21394486a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2634586a-ef74-415c-9e50-19a8f5e8a4eb",
        "cursor": {
          "ref": "733a1a03-22cf-4c29-86d5-e33686240ba2",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5153bed4-8391-4323-ac5e-eb6741449f1a"
        },
        "item": {
          "id": "2634586a-ef74-415c-9e50-19a8f5e8a4eb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5242afea-764a-4414-8d8f-5521589a1dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e5bdb3-d6c1-4de6-8476-ee001d489979",
        "cursor": {
          "ref": "49115dae-6665-4856-9b13-6d700a02ce96",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0a1cb869-e7cf-449e-b04a-692f54d6f5f6"
        },
        "item": {
          "id": "c1e5bdb3-d6c1-4de6-8476-ee001d489979",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3e94e281-b8dd-4060-bf0a-3568d92888c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c371d1-7d94-4e98-beb3-36b325eab929",
        "cursor": {
          "ref": "885844dc-cda5-4963-b57d-ed0cbde5defa",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "aa070024-5e91-448b-8091-7a0d6a22f4ee"
        },
        "item": {
          "id": "b3c371d1-7d94-4e98-beb3-36b325eab929",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d79724ca-ee5f-4efb-a378-71e18ff1c4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955d06fd-2862-4f46-807a-c6f07bab3e0b",
        "cursor": {
          "ref": "475e7a79-8de7-42e3-ac22-02649d766ed6",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "575dfb35-de76-4d5d-9a60-c97669c5b1ae"
        },
        "item": {
          "id": "955d06fd-2862-4f46-807a-c6f07bab3e0b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9d60de05-65a4-4856-a687-a62f9705cc1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89a27b3-f32b-4fcf-b6dc-438c7afa2495",
        "cursor": {
          "ref": "823f8a57-9ff8-4939-b50e-649693fc4b60",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e42603f5-62de-4cd1-97e1-f6f3bf73d257"
        },
        "item": {
          "id": "f89a27b3-f32b-4fcf-b6dc-438c7afa2495",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0ad2a5b3-0e04-4c38-bf49-b8fcec3d3fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05aaae8-0d31-49cc-a84f-98fa3198c45c",
        "cursor": {
          "ref": "b0f7fd72-e21f-4e8f-b660-686fa2c3b86d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ebb52f10-cae2-4040-a174-8d967d981425"
        },
        "item": {
          "id": "b05aaae8-0d31-49cc-a84f-98fa3198c45c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "62bc738d-3b93-48ab-91e4-60f593c14db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4145da65-2ff4-4742-8119-7fb09655bd4f",
        "cursor": {
          "ref": "aba6ea98-d910-406e-b9e8-4ba27190ea5d",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b10e9af8-0b03-44cc-864b-e7c9a491d119"
        },
        "item": {
          "id": "4145da65-2ff4-4742-8119-7fb09655bd4f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "75cb77bb-d1e2-468e-b22c-17736b6ce16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6c9e4e-8bc0-4367-aba4-4c61ffbae7cc",
        "cursor": {
          "ref": "87ae29fd-6f99-4383-a7e6-a543a52c1f15",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "370201c0-9d01-47a5-932e-3c4183b7ee38"
        },
        "item": {
          "id": "dd6c9e4e-8bc0-4367-aba4-4c61ffbae7cc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "73688ad8-7adb-4cd6-8acb-06b34916644f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1dc6594e-f113-4637-8914-a9671ba977f7",
        "cursor": {
          "ref": "f2d287f0-c717-480e-835a-4a89c822a604",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7f269c8d-8114-45dc-9f66-a200a0bbf85c"
        },
        "item": {
          "id": "1dc6594e-f113-4637-8914-a9671ba977f7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c8a5c17d-e000-42da-84f2-7b4245e13f74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6868cd5b-79a5-4141-ab17-1bebb43e460a",
        "cursor": {
          "ref": "3a350782-b415-4cac-b1eb-9020d8035cb2",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a8c2558a-0440-4110-913b-bc5a27c0534b"
        },
        "item": {
          "id": "6868cd5b-79a5-4141-ab17-1bebb43e460a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d32864bf-7983-467e-8cc6-2055126a6439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e917fd2-af0d-4fc5-971f-1005f860c874",
        "cursor": {
          "ref": "86a10450-c108-4a30-9e47-5e32db0387f0",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c2cdd723-1366-4efe-9e0d-feeca101c106"
        },
        "item": {
          "id": "0e917fd2-af0d-4fc5-971f-1005f860c874",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "361ef6f5-1c89-4037-a5c8-55de47b8d1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e920aaa-da81-4d6c-a13a-17b9b9700d27",
        "cursor": {
          "ref": "87a426d0-d051-4f4c-8f11-8a7b45b35935",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "14ab8c4f-28e2-4442-8d44-f417e244365d"
        },
        "item": {
          "id": "2e920aaa-da81-4d6c-a13a-17b9b9700d27",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "16f8b0c6-8016-492b-bb15-31e98e9bfdbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c499e7e3-dc73-4627-8b97-6d04327b4b30",
        "cursor": {
          "ref": "d66e15c8-8d6a-4a93-bf1c-a9247c439368",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2083bdf2-e008-46ca-bab0-bba23dea0e6e"
        },
        "item": {
          "id": "c499e7e3-dc73-4627-8b97-6d04327b4b30",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2e899e2a-9877-4321-8f2c-5c414c8f84ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdd50cd-8cd9-4ea0-8135-51d90a60193d",
        "cursor": {
          "ref": "3a9f6ca9-7561-4960-b537-d73d3c58800c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "24cd5f8c-5a00-4459-b135-f5c3e52b707a"
        },
        "item": {
          "id": "dfdd50cd-8cd9-4ea0-8135-51d90a60193d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "53890fea-57a1-4300-9198-226f128966f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2affb953-69b2-4035-b58c-2f6deccfaf37",
        "cursor": {
          "ref": "2212b892-1ccc-49c9-9b35-f0f3c4a16206",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6c472552-0057-4aee-9131-d4c89a41e484"
        },
        "item": {
          "id": "2affb953-69b2-4035-b58c-2f6deccfaf37",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a8ebfe32-ca78-4416-89fd-744d3ad764c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f690413-c372-4cf1-a7f2-71f7adc425bd",
        "cursor": {
          "ref": "53557394-f6c2-4afa-8d11-08336473f184",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bfdc4080-551b-4e13-84be-48ebd3715a1e"
        },
        "item": {
          "id": "2f690413-c372-4cf1-a7f2-71f7adc425bd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "56f0bf22-293f-4386-bef9-152f3607131d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a6e51a-1cbb-4758-aa18-ef7a7ac43d6d",
        "cursor": {
          "ref": "e880aed6-25c3-48ed-b96a-fe683816d1e6",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0dcbe051-57d6-4b57-85b5-2f249b0e5a66"
        },
        "item": {
          "id": "74a6e51a-1cbb-4758-aa18-ef7a7ac43d6d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c2bf1dd0-ac4c-4c01-b15b-7e50862b5ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2d81af-431c-4145-a651-0f0b9ca61686",
        "cursor": {
          "ref": "f108f90b-3a9a-4337-bcef-3e7bc631a9cd",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b1a4e6e7-e9da-40e9-9370-8681cdd151b1"
        },
        "item": {
          "id": "da2d81af-431c-4145-a651-0f0b9ca61686",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "324dc10f-79a7-4bd1-bfe9-d247e799b43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ab6cd8-b8c8-4227-9b11-ee49b3e8e396",
        "cursor": {
          "ref": "35dd9919-b11e-4c57-a14a-626eceea99aa",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4cae003f-5129-4a4b-a5a7-edacc3a538e0"
        },
        "item": {
          "id": "a6ab6cd8-b8c8-4227-9b11-ee49b3e8e396",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1548ed11-7d2f-4124-8139-7b3e8b701861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af3d072-c2cf-4b3b-bf3f-04a1ca82d2b3",
        "cursor": {
          "ref": "f7bc9720-ad30-413f-b5e6-87dd7262600b",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "74936e75-22ae-43d1-8948-96fd65464d66"
        },
        "item": {
          "id": "4af3d072-c2cf-4b3b-bf3f-04a1ca82d2b3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "edd62422-cc08-40c2-a7d6-e2211fea70bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1778bb-1175-4d53-9131-4ed1b9c0ca93",
        "cursor": {
          "ref": "e7727233-53eb-43aa-b719-5e8ca5508694",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7ee19054-c710-489d-ae48-bd083f05c176"
        },
        "item": {
          "id": "dd1778bb-1175-4d53-9131-4ed1b9c0ca93",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0bca9401-2dc1-4977-b1fb-112f6f4ba396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7ec2ff-78c4-410f-93e1-cc8d106f5521",
        "cursor": {
          "ref": "96e31cd9-5c24-4373-addb-1e66b1b493fd",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "42bc17bf-8697-4c8a-a4c9-6fbc8a6cd2d2"
        },
        "item": {
          "id": "7f7ec2ff-78c4-410f-93e1-cc8d106f5521",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "38edd98a-41e2-4285-bd86-ac44d0e19709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e64286-95d5-4e41-8eae-3329ba2518a5",
        "cursor": {
          "ref": "da2b5b80-fa63-493f-848c-769999304a24",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "10e4e154-6f00-4505-9f9c-e8e3b5d5ebd8"
        },
        "item": {
          "id": "b1e64286-95d5-4e41-8eae-3329ba2518a5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3500561a-1588-4772-9bea-ceb60cb80c42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "d9dd2abf-ec89-445d-94a6-0d083d3da56f",
        "cursor": {
          "ref": "69e62c73-4ad6-45fd-b2cc-9a46c8d60eb9",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ddd33bd5-b6d4-422d-aaea-7ae67faf695b"
        },
        "item": {
          "id": "d9dd2abf-ec89-445d-94a6-0d083d3da56f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a3694856-f9a5-40d5-939f-ec3b62656f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613851ed-7383-41e1-b408-b2630a0ee473",
        "cursor": {
          "ref": "95defa67-36f9-402c-9cd3-1e27f407003a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "75b0ce3f-6719-4004-804e-766ceba09401"
        },
        "item": {
          "id": "613851ed-7383-41e1-b408-b2630a0ee473",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "604f858a-a2ee-4098-9485-65ec00a9323c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc21735-5331-49bd-99c8-f208492bd3fb",
        "cursor": {
          "ref": "6c89bebe-0dce-4e06-907b-540b3b0662a9",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "947f99a2-5e24-43d0-a61a-ef95a7508036"
        },
        "item": {
          "id": "1fc21735-5331-49bd-99c8-f208492bd3fb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f6d3f024-7075-4da8-a2b6-532da12ce97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a248a1-b2e5-41ee-88ae-70dba6d96c1b",
        "cursor": {
          "ref": "a943b836-5798-4d4d-b564-329eb4d7219d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cdc46655-314a-4531-a16b-d1cbc8b47454"
        },
        "item": {
          "id": "75a248a1-b2e5-41ee-88ae-70dba6d96c1b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "48bc068b-f84d-4c79-b47e-be3256e9c940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59dc28cb-97f1-412a-a85f-acd5b46886c9",
        "cursor": {
          "ref": "dd4261e5-5fa6-438c-bb2a-99bc7e40ba26",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1f1e62c7-d685-42a3-b2f3-7a4c45e92ff4"
        },
        "item": {
          "id": "59dc28cb-97f1-412a-a85f-acd5b46886c9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "854d9713-495c-4a7f-9a2a-05622a835c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0796c15e-d954-4bf1-b24a-7f5403b32e3b",
        "cursor": {
          "ref": "a9917d37-d2f6-4ca4-bd63-c96f4dbbd34a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "62c2c0c9-0884-43ad-9d54-5f1584973125"
        },
        "item": {
          "id": "0796c15e-d954-4bf1-b24a-7f5403b32e3b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "868b262f-698a-461f-989d-8be81d0a83df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e23daf-747c-4cbf-82aa-bc917f8bea92",
        "cursor": {
          "ref": "36eb5bdd-c1ae-4f0c-a02f-cb3b3e2eec01",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "67b78404-8c8e-48c3-ae85-894456d61b8c"
        },
        "item": {
          "id": "c3e23daf-747c-4cbf-82aa-bc917f8bea92",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2341ce87-2e1c-463b-a942-3629849fba08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869003e1-d3d1-456c-9332-90146d6c94b2",
        "cursor": {
          "ref": "15c75394-d622-499a-ac7f-72b7f01b71c1",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2817dc45-aa3c-4f36-b878-e338f6d2c0bf"
        },
        "item": {
          "id": "869003e1-d3d1-456c-9332-90146d6c94b2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c4fbef76-b0a0-41b9-966c-1e4b7f0e30ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5430cdf-0110-402a-a761-d4d7c48a797b",
        "cursor": {
          "ref": "dfc275ab-26cf-4ccf-8da2-335a09a1c667",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "63ea46b6-5675-4730-98ed-c2e6e222bbcb"
        },
        "item": {
          "id": "f5430cdf-0110-402a-a761-d4d7c48a797b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2570d7ee-ab70-4862-81fd-86b950d05151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e25ff8d-0bb4-41f2-8335-45fdcf9c2b55",
        "cursor": {
          "ref": "683f025d-d63c-4178-9f11-e370b507c162",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d559b4b4-ec55-49f6-95a4-09d2e2163766"
        },
        "item": {
          "id": "3e25ff8d-0bb4-41f2-8335-45fdcf9c2b55",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3e07e4f2-5fa1-479e-a9ce-33f693d1f2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d8cb74-2358-4830-ae5b-492bea3b5e0b",
        "cursor": {
          "ref": "167725d1-f248-4318-b865-2331d284f86b",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "75a8ecbb-1409-4ba1-947b-2b9a56e91f74"
        },
        "item": {
          "id": "b9d8cb74-2358-4830-ae5b-492bea3b5e0b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d8a8f946-06e1-418a-9f38-6c0e4a49ed2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea039828-83dc-4947-9cbe-a0a16ed927ee",
        "cursor": {
          "ref": "bad1b319-b3e4-47fb-b108-559147e3e988",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "952235af-8fa8-496b-b682-26e9e70d1f0d"
        },
        "item": {
          "id": "ea039828-83dc-4947-9cbe-a0a16ed927ee",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3a2667e9-96e1-4e4f-badd-de99b2be3e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d815bf0a-3600-41d0-8000-41b278fd79c3",
        "cursor": {
          "ref": "9b5663a7-a2b1-4c6e-81e2-f29fe6606b4d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "948713be-86ce-4cb2-8a47-1e7782f483d9"
        },
        "item": {
          "id": "d815bf0a-3600-41d0-8000-41b278fd79c3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fe464212-9f1d-4204-8934-115bf75561dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca9e0d3-e1eb-4a3e-955c-f4fc114224dc",
        "cursor": {
          "ref": "586929cf-cf1c-4431-bbdf-2cbba7de339b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a8246793-c8d1-4ddb-90bf-8ccfd4a95e14"
        },
        "item": {
          "id": "aca9e0d3-e1eb-4a3e-955c-f4fc114224dc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "92dedf23-7bb2-4e1a-bb4f-1aaf2aee23ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b88ec9-248e-4dfc-b181-e49b53c44f81",
        "cursor": {
          "ref": "f160bdda-8aae-4af9-b0ab-7a898396c652",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b9e3f1d5-7263-4412-869f-42ea93968eda"
        },
        "item": {
          "id": "95b88ec9-248e-4dfc-b181-e49b53c44f81",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "357312f3-cf26-4993-8102-a5d837d6e770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c477b5b2-1411-4d36-a7c3-5e5600bf59ff",
        "cursor": {
          "ref": "931d41a3-38a3-43ac-8aee-51585c272e17",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0a627c98-1ec8-4052-b22a-60e3443fbc44"
        },
        "item": {
          "id": "c477b5b2-1411-4d36-a7c3-5e5600bf59ff",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7da083de-aff4-43a0-a86a-b0d6605d3c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f222ad5-d681-4002-a28b-682737d063c3",
        "cursor": {
          "ref": "2267dd7e-3a13-49f8-b919-9fdde9d9aa99",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ec32d667-1ce1-4b63-8b6d-8142944f617b"
        },
        "item": {
          "id": "8f222ad5-d681-4002-a28b-682737d063c3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "504d28c7-5098-4376-a3d3-d23acc3b1d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e956273-24a1-42ae-97d9-32cb92321a0e",
        "cursor": {
          "ref": "9fa17430-bcea-4df8-b10d-ef099a9ef88d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f51f73d0-5b40-4619-b4ee-bdf71e9b64f1"
        },
        "item": {
          "id": "2e956273-24a1-42ae-97d9-32cb92321a0e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "54ec2661-5814-464a-8e89-b254b7ab4dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457f30a7-0512-4480-ba2f-d6f31e9b4644",
        "cursor": {
          "ref": "c3766833-1371-4b6c-952a-33d55172483f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b3828e13-b06b-40dd-b786-4703175bce43"
        },
        "item": {
          "id": "457f30a7-0512-4480-ba2f-d6f31e9b4644",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9b52f4cc-81ea-4723-aa1d-04aa42b6fd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1e3ebc-2694-4e88-823d-86676811889e",
        "cursor": {
          "ref": "3a3e1f77-9965-4166-aff3-dde74e036516",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5f345abb-1b3d-466c-8ba0-4abe0280a773"
        },
        "item": {
          "id": "ab1e3ebc-2694-4e88-823d-86676811889e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9652d156-bf92-44b6-a8db-075acc1e0b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d2cda7-f4f0-47d0-bc7d-55650c5fcbea",
        "cursor": {
          "ref": "bc75ce66-508f-40a2-91e2-8e2bbb10cabf",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "72606947-a052-494a-9197-e3fb5eff8ad4"
        },
        "item": {
          "id": "e5d2cda7-f4f0-47d0-bc7d-55650c5fcbea",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "13383200-ed83-49d9-b89a-916bbf98e859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f6c40f-96c9-45d7-9455-d80cd5a5e3a8",
        "cursor": {
          "ref": "5838828e-dcef-42e1-b220-90e8b9584d3c",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5b72d393-34fc-4e33-8647-daf3d653ff9f"
        },
        "item": {
          "id": "d2f6c40f-96c9-45d7-9455-d80cd5a5e3a8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4413dbcd-aea6-430a-ad03-cae65f8469a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46bb760-491e-41f6-ad8e-89bac1fc83e8",
        "cursor": {
          "ref": "d6c1a7a4-6425-4c55-96a6-8c091910d73d",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0752ab65-b9f3-47f5-afea-da080bdf9d0a"
        },
        "item": {
          "id": "c46bb760-491e-41f6-ad8e-89bac1fc83e8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a2c0172c-90e1-45be-844b-1542d66078b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3fd2c5-3d3f-4a5b-b7b4-cb574eb728e3",
        "cursor": {
          "ref": "0e18ff39-7f77-437c-aeda-cc78ec5837b6",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "00c7fb0c-596d-421e-a4c2-2b502347556c"
        },
        "item": {
          "id": "5e3fd2c5-3d3f-4a5b-b7b4-cb574eb728e3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "893b47c1-31e8-4407-8b00-2d3f814a31f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9422e6e4-d8b1-4ac7-858a-b7f45770f796",
        "cursor": {
          "ref": "846bde05-e442-4bcc-8799-3cfdf262080d",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cb2a2bfb-529b-4fd2-a11a-0dcf48e93a81"
        },
        "item": {
          "id": "9422e6e4-d8b1-4ac7-858a-b7f45770f796",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "09d156ac-9066-42cd-9f5c-7b2bb6baaf1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7d5016-afc8-4039-9bc8-8920df7155fc",
        "cursor": {
          "ref": "abc5002c-f7af-4f56-9c93-9561e403678d",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "09f35a08-095f-4872-99f6-3ccc85e5cd43"
        },
        "item": {
          "id": "9f7d5016-afc8-4039-9bc8-8920df7155fc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "98f59f32-02cd-4810-bb95-33d15d472109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e83624b-0554-4bd0-b20f-9388f574cd32",
        "cursor": {
          "ref": "86c29587-0d19-4e91-9c08-171235b4f208",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0cd6ffd6-58fc-46b5-a247-b7e8cb214689"
        },
        "item": {
          "id": "6e83624b-0554-4bd0-b20f-9388f574cd32",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "89302d51-8d7a-421f-83f9-83da9271e4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430e5f39-03f9-4e2d-a1a0-f178c9beef7f",
        "cursor": {
          "ref": "c10e27aa-fc4b-4a8e-ad6d-4b7c4a2d4dcb",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "57cecdbf-2c59-4157-9243-28953ec0caf1"
        },
        "item": {
          "id": "430e5f39-03f9-4e2d-a1a0-f178c9beef7f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ae72153c-45a1-435f-a86d-8df6df158c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff700b8-a78d-47bc-a71f-a9c913f97e51",
        "cursor": {
          "ref": "68bba755-347d-4b8f-9455-06b219ee17b6",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "072a152a-3b13-483e-8430-cfbe9a522a7d"
        },
        "item": {
          "id": "6ff700b8-a78d-47bc-a71f-a9c913f97e51",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "632da153-9a9a-4b75-951d-cc8c8021dcaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f8c57a-6f8a-4fc4-b0ac-6cc0b0ba91ed",
        "cursor": {
          "ref": "8a4a2afe-e3c3-46ef-9302-90d7d42f33b8",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "397e0c23-7d63-4b67-9215-aabe293f798d"
        },
        "item": {
          "id": "63f8c57a-6f8a-4fc4-b0ac-6cc0b0ba91ed",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "459c2d2f-6eb6-4717-82f3-ed6a6edf0ebf",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f8ace91c-7c83-4cb2-bfa9-df6a3b92a229",
        "cursor": {
          "ref": "f8ecd389-5d46-4174-87a9-be3af49246d2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8f4b4dd3-4ac3-444b-a6c4-f21f137f2061"
        },
        "item": {
          "id": "f8ace91c-7c83-4cb2-bfa9-df6a3b92a229",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e1a17697-8b9c-431f-aee5-26a1a1388f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4266e8bc-1d0b-477e-bc18-791dedb1057b",
        "cursor": {
          "ref": "80a0b7ea-b5ff-4e20-b9eb-d436f5c667f4",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8c43d4fe-e9a0-4c0a-a517-c751f732e10b"
        },
        "item": {
          "id": "4266e8bc-1d0b-477e-bc18-791dedb1057b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4b4aec8f-9aa4-4305-93d5-6143d933a9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ab6c91-456d-4c3e-831c-c91a76ce39f2",
        "cursor": {
          "ref": "9e9e4772-50c0-46db-9532-1a97deeef68e",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d1d8ee2b-2a03-4957-97c8-ef8fe645d5f0"
        },
        "item": {
          "id": "42ab6c91-456d-4c3e-831c-c91a76ce39f2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4fb89435-fe8d-4a8d-aea4-05b3e3b91d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09861c2f-a8e4-403c-a640-334883122a01",
        "cursor": {
          "ref": "5c5ab21b-0353-4b87-80a7-42b3b61b67c0",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e88d215b-861f-4542-af61-438e30a33abc"
        },
        "item": {
          "id": "09861c2f-a8e4-403c-a640-334883122a01",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f0f9bea5-8314-4341-a890-8049925f5e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f345567b-c41c-4c1d-9c88-1daae07710e7",
        "cursor": {
          "ref": "e18021f8-ede1-4e8b-86f7-7ac99fe19692",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5e3be167-d9d8-49b2-bae6-70cbaf749469"
        },
        "item": {
          "id": "f345567b-c41c-4c1d-9c88-1daae07710e7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9fd96ad3-b29f-46ee-8d67-3d09cb21ca1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29995ec4-9939-4ef1-83b8-d530960dbf46",
        "cursor": {
          "ref": "89d68179-f47e-4d49-a356-2dc242ced48f",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bcee59c7-6271-45cb-ba1c-5433400eb986"
        },
        "item": {
          "id": "29995ec4-9939-4ef1-83b8-d530960dbf46",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a907c378-f19f-403e-9ba5-09e263a934aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f81f382-f5d9-4af8-85b5-ebea13d4c64b",
        "cursor": {
          "ref": "281b90c1-54fd-499a-acba-ed23d59c8fd1",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f5c3bf0e-7416-46ae-b343-62b7d4e5e4bc"
        },
        "item": {
          "id": "0f81f382-f5d9-4af8-85b5-ebea13d4c64b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b4fde1cd-b89a-4459-9196-bb002caa1064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8310531a-bafa-4dd7-98e4-0580d2e52bf5",
        "cursor": {
          "ref": "c9da2154-ba6b-4030-ae5b-d80f1a39f647",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "205fb8a7-956b-4801-b0a1-ec48544a9af6"
        },
        "item": {
          "id": "8310531a-bafa-4dd7-98e4-0580d2e52bf5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e2581047-2f1f-4821-9578-b7735e4ddfb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ce43e3-f4d4-42e8-84c1-d255aedaa1a0",
        "cursor": {
          "ref": "3c106152-8796-4eab-81c0-713430699164",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "03296809-958c-40a9-92e9-76ecb89afa87"
        },
        "item": {
          "id": "66ce43e3-f4d4-42e8-84c1-d255aedaa1a0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d09ddca5-9c26-4321-a707-afd9cbb437e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01aade4-510a-4ad4-b34a-e04b487784b8",
        "cursor": {
          "ref": "c8b87c63-8b8e-4ae0-8f14-64864aea80a0",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9a915657-df18-4615-bfc6-7b91bf932d91"
        },
        "item": {
          "id": "c01aade4-510a-4ad4-b34a-e04b487784b8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "56e5d5f4-06a1-4494-8ea0-28875a5b44c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67aab558-f785-4350-893d-5f0021ef82a5",
        "cursor": {
          "ref": "8562446b-05b0-4cb6-8584-77186e309b85",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e1198727-fe23-419b-8806-26646bfe5ba5"
        },
        "item": {
          "id": "67aab558-f785-4350-893d-5f0021ef82a5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e076a55f-941d-4bdf-86df-2ef0bc223e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db47ac7a-aaa2-41d8-ac54-6cab6f6ebbee",
        "cursor": {
          "ref": "29f8d604-c183-436d-9482-c35e299f3287",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d37b389b-df39-4df5-82a7-b583377c24df"
        },
        "item": {
          "id": "db47ac7a-aaa2-41d8-ac54-6cab6f6ebbee",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ce5fd4b0-c39a-4d98-9ffc-cb99fbe275b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d209d7-3268-4d35-af34-2901cda5988e",
        "cursor": {
          "ref": "d5071b6a-7381-49ec-a94e-8659b4b7e1cb",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bce4c638-719b-4d5d-89f8-1e541be75590"
        },
        "item": {
          "id": "02d209d7-3268-4d35-af34-2901cda5988e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "63349999-6739-48c8-ab7b-cfc15191affd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101e4282-ca78-46e0-a203-5dca9196e431",
        "cursor": {
          "ref": "f11fe30b-c608-4240-ab3a-0d8e8a99ab15",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1dda87ac-22a9-41b7-aa5b-a1614eff7900"
        },
        "item": {
          "id": "101e4282-ca78-46e0-a203-5dca9196e431",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f168ad4b-f4b4-4353-8446-5112fb37fd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a3b034-9d44-44c9-af60-ff1155c9e56f",
        "cursor": {
          "ref": "bd79e4c9-9589-4bd4-abd4-3116f1d363b1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5250f151-a810-4554-95cc-3ededbcde1f6"
        },
        "item": {
          "id": "55a3b034-9d44-44c9-af60-ff1155c9e56f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1d9bf247-157a-4c48-8835-47d1356f2da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2e9c18-3011-4e97-81e4-65940f6b9d1e",
        "cursor": {
          "ref": "585a0302-899a-4d89-b823-9fd71be55903",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "52269db6-1ea9-4071-9467-9afd10a63e58"
        },
        "item": {
          "id": "8f2e9c18-3011-4e97-81e4-65940f6b9d1e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1bf8e9a8-d448-475d-bd37-e5358bddfcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b681ecde-aa62-4c97-a3fc-4055ab5b7a54",
        "cursor": {
          "ref": "eafa7d35-06dc-4b7e-b5bf-4d2c2874a4e8",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "feb1ef39-d01b-4138-bfa0-f63708ee4383"
        },
        "item": {
          "id": "b681ecde-aa62-4c97-a3fc-4055ab5b7a54",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8e5fe49d-7b28-4dac-804a-24c8609d82c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa956b40-77eb-4015-aaa5-67831607862e",
        "cursor": {
          "ref": "8dd31b39-bcdf-42fe-9065-a482792917e4",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "19d05dd6-bcae-427b-95bd-9d302a4cc5c3"
        },
        "item": {
          "id": "fa956b40-77eb-4015-aaa5-67831607862e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e3c0d64a-5991-45d6-969c-d150a982a4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9556e40e-ef1d-4582-9afa-b8172e99e013",
        "cursor": {
          "ref": "803cd772-8731-4cf5-9b9f-b1d865541698",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c4ddf244-59e0-4532-96e2-c285bd94ff24"
        },
        "item": {
          "id": "9556e40e-ef1d-4582-9afa-b8172e99e013",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0ae1e60e-82f1-4439-990c-94dd85424482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e8356d-01ad-43c3-ad34-fd780ab3ae89",
        "cursor": {
          "ref": "aba3b252-1ae4-4058-9aa6-ac59b4a5fd7d",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6a5db7e4-d643-4e58-9ebe-827acb53e1d2"
        },
        "item": {
          "id": "e4e8356d-01ad-43c3-ad34-fd780ab3ae89",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ca24a8ed-01ad-4768-bc65-ce3904b939dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d8e4a9-5062-4829-8ea2-ab99d5df9837",
        "cursor": {
          "ref": "1e89d2b9-bcf3-4b22-87c3-0f5c2085a8dd",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f70d0146-613d-4671-9b2f-761871b2756a"
        },
        "item": {
          "id": "91d8e4a9-5062-4829-8ea2-ab99d5df9837",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3fe4e4b4-1258-4c5c-8fea-225f992f2176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09837ec-0626-4ef6-b749-a02d22080db8",
        "cursor": {
          "ref": "cbbd2ef5-9ae8-4ddf-8bf0-2505b0b6e168",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "009d9dc9-b3df-4f42-a6f9-130c24abcee2"
        },
        "item": {
          "id": "a09837ec-0626-4ef6-b749-a02d22080db8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "365a2ce7-8707-49a8-8176-014c8a099191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789f13f2-3394-469a-b6df-1b9605afa4fa",
        "cursor": {
          "ref": "812d39e8-01d2-47d9-b606-da06fdf85b48",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bd30ee97-63dd-4ab6-ab7d-a08c45b68579"
        },
        "item": {
          "id": "789f13f2-3394-469a-b6df-1b9605afa4fa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "72cfbc54-5e38-453a-ae86-ecb7b6551a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76831e8-5338-4206-8e24-e3193670bafb",
        "cursor": {
          "ref": "48f9495d-eec8-4197-a1b2-7d49b464ed1f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0438eda6-664a-4ed6-85e4-44597ddc44cb"
        },
        "item": {
          "id": "d76831e8-5338-4206-8e24-e3193670bafb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9a1c1f56-364c-4a9b-8e7b-9ac1ee030b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e376c7-4552-408e-969a-b590136925ce",
        "cursor": {
          "ref": "93e6b95c-d029-489b-91d2-95d3008b8564",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "687c267f-75b6-49b5-88df-f9c19095dcc3"
        },
        "item": {
          "id": "f7e376c7-4552-408e-969a-b590136925ce",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2bccc58a-4ed1-4d1b-b243-92697c3071ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b51df65-1b5b-4969-8900-2e9f354998ab",
        "cursor": {
          "ref": "697230df-b099-4237-afc8-d8545e6487ff",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7228c456-d563-434a-a627-6f487e5b39f8"
        },
        "item": {
          "id": "1b51df65-1b5b-4969-8900-2e9f354998ab",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b894a7ef-c705-4050-a879-e1fa35509976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fcaa45c-b029-4d33-99be-216d9d4dc1d7",
        "cursor": {
          "ref": "61b80007-3964-4233-acd8-499ee8ba35b2",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a5073a25-f99e-4027-ad61-6d2634d1e738"
        },
        "item": {
          "id": "7fcaa45c-b029-4d33-99be-216d9d4dc1d7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bb427427-5982-49f8-9c9b-76796f328cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7a54ae-c586-4fe9-963b-9dbcda042ed7",
        "cursor": {
          "ref": "e6390bcc-3fd0-4451-84e0-a317e3d29c9d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cdf427d2-3f9f-4c98-bc58-0862dcc78450"
        },
        "item": {
          "id": "9f7a54ae-c586-4fe9-963b-9dbcda042ed7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "416c1146-b6c5-49c7-bc5b-6f0a6b69e52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6565a15-5db6-4d7b-9f50-a6573ea47ebc",
        "cursor": {
          "ref": "552ca1fe-9e61-4444-910d-b1d900c1ab96",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "99979e74-d6b9-498a-9ab4-d6d3463ee61e"
        },
        "item": {
          "id": "c6565a15-5db6-4d7b-9f50-a6573ea47ebc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f055459c-69cc-4291-a748-f93ac3c49e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a3425a-25bd-4090-8a32-747d9ed9e1fa",
        "cursor": {
          "ref": "4f8557a6-2c90-43b6-9591-c17646e19937",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "26dedc86-6da3-499f-81ba-e05b56d70900"
        },
        "item": {
          "id": "31a3425a-25bd-4090-8a32-747d9ed9e1fa",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "70ecb548-8913-4966-b5b4-75fb07f75914",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "707918c1-b11b-42a8-b7cb-aff02555498b",
        "cursor": {
          "ref": "f822d158-274b-4922-a78f-95e061a1d2da",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "940855e7-ca35-40cd-a2a2-0aae0813ed99"
        },
        "item": {
          "id": "707918c1-b11b-42a8-b7cb-aff02555498b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "741b443e-d8cb-40b9-b62f-d02b45905c37",
          "status": "OK",
          "code": 200,
          "responseTime": 218,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e4332367-ead0-448a-a24a-2d7ca422911b",
        "cursor": {
          "ref": "34186427-0551-4eb8-a0d7-902c2debf5a3",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "200bd4b1-635c-4fbe-8800-6194b05659b5"
        },
        "item": {
          "id": "e4332367-ead0-448a-a24a-2d7ca422911b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "957be55d-9f4c-41b9-b151-f105d005f69f",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b8f47be7-65b1-4cc0-8180-0cd41a16f09f",
        "cursor": {
          "ref": "bb1f8a41-e1cf-4402-a960-302a33a38c89",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8cc6d80e-ea09-401e-b15a-e358e3449cef"
        },
        "item": {
          "id": "b8f47be7-65b1-4cc0-8180-0cd41a16f09f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8ee1c4a3-0636-4411-981d-9b50cea816b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4c9e8e-5fd9-4e21-8e13-c42d510de192",
        "cursor": {
          "ref": "52d9ab7a-c6d4-44c3-a6a7-360ab1c9db68",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a543be88-669f-4a9f-92fd-dab35b3de42d"
        },
        "item": {
          "id": "5b4c9e8e-5fd9-4e21-8e13-c42d510de192",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "032cbb54-a5cf-4e26-b784-df9594e86971",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bf1e83a0-5eb8-4b5a-b99c-e9cd673a74ca",
        "cursor": {
          "ref": "28e62981-4bb8-482a-9072-197b5aa65c2d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "36d393af-2249-41fb-8d47-542d39e2efae"
        },
        "item": {
          "id": "bf1e83a0-5eb8-4b5a-b99c-e9cd673a74ca",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f41c1d63-b83d-423b-ba32-c3b650d8fdb2",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "25cfc7df-0bfb-4b22-980b-a32203e7bdbb",
        "cursor": {
          "ref": "1cec69c2-da3c-481a-ba35-e7146db0988c",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3be65940-b25e-44b4-b3b4-747d228ff0ee"
        },
        "item": {
          "id": "25cfc7df-0bfb-4b22-980b-a32203e7bdbb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9f5f1cdc-af66-470d-8dfa-a5b9be31729b",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e952a150-5084-4353-b873-c3a47628e21a",
        "cursor": {
          "ref": "3797c435-843e-4ecc-a6ad-2f313ec3980c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f2795ce3-afe9-4d46-ad43-c82f0e8912c4"
        },
        "item": {
          "id": "e952a150-5084-4353-b873-c3a47628e21a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1ba0f22e-faef-4a9c-97dd-967c1ff3bdc8",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "da0eb7d9-14d6-4f44-9a24-e9a1be2817d6",
        "cursor": {
          "ref": "d5d48f8a-20c0-4a61-9a78-f140fe42a545",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4812e20b-89e1-4bab-a2c4-f467ad621384"
        },
        "item": {
          "id": "da0eb7d9-14d6-4f44-9a24-e9a1be2817d6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ac118c83-d418-4f9f-bc01-6427107e5322",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "be49342f-90f7-4d43-bafa-314b29200603",
        "cursor": {
          "ref": "12983556-fe66-419a-a21d-041a79206b8c",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "29a1275f-e940-4bbf-b33a-cd3b4c9e93ce"
        },
        "item": {
          "id": "be49342f-90f7-4d43-bafa-314b29200603",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8e1062f2-8ebb-4198-b3e7-3b8ef9887460",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "aed26ef3-ea5e-49c3-8929-47e985217c90",
        "cursor": {
          "ref": "d52f8010-27e5-45e0-bf54-13cbf9e4aa13",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "23c3cbda-efb1-4513-ac2d-eb5c91ef6f8f"
        },
        "item": {
          "id": "aed26ef3-ea5e-49c3-8929-47e985217c90",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9f6bb7da-7139-467f-89ab-ac2094d475b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47180b28-02a2-4753-85b9-a64f48e88b54",
        "cursor": {
          "ref": "5ab4c443-e87c-4abe-a797-3945bdf39d04",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "743b1fb6-e0fc-4077-a148-e213a0af5b52"
        },
        "item": {
          "id": "47180b28-02a2-4753-85b9-a64f48e88b54",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "08cfdcf5-e6b1-4bac-b713-42a7eac96ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50f58ac-b8d4-43ef-93a6-8da6130c431c",
        "cursor": {
          "ref": "d8fe38e9-52db-4668-8f5b-aefed9e07d4b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4fae5b96-7d89-457b-8c16-7dd029a1397d"
        },
        "item": {
          "id": "d50f58ac-b8d4-43ef-93a6-8da6130c431c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1f72ba3a-6e43-4708-be13-7bbe89f50312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bec13c2-ba2b-4564-82bd-4f5248b2db45",
        "cursor": {
          "ref": "16246b64-50bb-4e60-a06c-06e061e1dafd",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "339579da-8b64-4f67-9716-4db5b0de3686"
        },
        "item": {
          "id": "9bec13c2-ba2b-4564-82bd-4f5248b2db45",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "af10df1f-d023-4778-a32f-c1a88fbbbf8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8046864e-51a4-4cc6-9e1e-a3c78d5efd4d",
        "cursor": {
          "ref": "04c56ea3-ab90-4776-8237-67e7fbacbb1d",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "26ca8f5f-35cd-4f5a-9398-3e82af13bf39"
        },
        "item": {
          "id": "8046864e-51a4-4cc6-9e1e-a3c78d5efd4d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "28ce591f-a650-482c-ba1e-0370df5c280b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8577c31d-0675-4388-8e2a-0579a94bbe94",
        "cursor": {
          "ref": "8fabcb25-f1e5-4891-af41-3974dacecc04",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aa8d75cd-dad2-4313-b7dd-c86ed85d6517"
        },
        "item": {
          "id": "8577c31d-0675-4388-8e2a-0579a94bbe94",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "be60ab7b-0af8-4c4f-8a50-923c37d4f320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e1b5ec-1f37-4f9c-8202-aa054300ae09",
        "cursor": {
          "ref": "853f840a-077b-4628-9175-b0cb231957a4",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0679a363-4fc3-4f3f-ac8b-f16a1b24cc22"
        },
        "item": {
          "id": "09e1b5ec-1f37-4f9c-8202-aa054300ae09",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "44361ec7-678c-45a4-aea3-c88eebfb5c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c2dbfe-ae7b-400a-aaeb-1a4e49338837",
        "cursor": {
          "ref": "4586b8e8-6ae2-4025-b7ca-ac1486bcb8ba",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f71ba8ce-cda9-469e-8da2-b08315722b9c"
        },
        "item": {
          "id": "92c2dbfe-ae7b-400a-aaeb-1a4e49338837",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4daa30b2-a325-4b6a-95ab-c630441b97e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d926772-0747-40a0-bfd1-4f9310086e04",
        "cursor": {
          "ref": "411e97b3-7131-4597-886b-3fe947f088f8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "157977b0-3366-44d1-929b-2fe04e9f2daf"
        },
        "item": {
          "id": "3d926772-0747-40a0-bfd1-4f9310086e04",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1a696bc1-a6ec-4296-a71b-5c62dab17dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570ba907-5d9a-45b6-aa01-d3700624a225",
        "cursor": {
          "ref": "838bbbed-a4b7-4f3d-b86b-031228982fa1",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "886ecee9-4c0a-4dc7-934b-cbb4dcfb77b1"
        },
        "item": {
          "id": "570ba907-5d9a-45b6-aa01-d3700624a225",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dee2f1a0-9548-44ea-9d0d-d21c26cc7420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c313d29f-a67c-4e70-abdb-e559a45baf6b",
        "cursor": {
          "ref": "35611921-f7d2-41d9-bd29-4b1ca569e860",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6db04f5a-b716-41cf-b2a8-359ac48f15e2"
        },
        "item": {
          "id": "c313d29f-a67c-4e70-abdb-e559a45baf6b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9fad41f1-3f9d-46b6-9368-a5590556f415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d18782-9cbe-446f-a0dc-f36555d10f33",
        "cursor": {
          "ref": "07033074-6b02-4581-af30-abe318e506c4",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1bf27757-287b-4a29-a843-c1ef500c42c3"
        },
        "item": {
          "id": "e1d18782-9cbe-446f-a0dc-f36555d10f33",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e3171304-6eb9-4d2a-b776-1e0b995019e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63085a24-4d1e-4254-a9b9-fefd657fc107",
        "cursor": {
          "ref": "e9bc24a7-f76b-4da9-ab58-f48fc5b0403f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0cc26e54-5598-42ca-a1d0-d54af5e2a6b8"
        },
        "item": {
          "id": "63085a24-4d1e-4254-a9b9-fefd657fc107",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a27e26bc-e66f-4655-adef-82d69e3b5cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6aa00c-c2d7-4c62-9cde-226d62e98b06",
        "cursor": {
          "ref": "3d4c9ae6-6d74-4b94-97fc-0b5ca4b11ae3",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "779de956-831f-4e98-b934-c5d1e9bed6f6"
        },
        "item": {
          "id": "ae6aa00c-c2d7-4c62-9cde-226d62e98b06",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7878d979-dae6-4384-ad9a-4d7130b3b11c",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3bf15651-678f-4efd-a143-5ad5c4d12960",
        "cursor": {
          "ref": "7b4ded7c-e571-40bb-ad85-5a2fa5b1b851",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4a04b052-b78f-4777-8342-e8c676065e25"
        },
        "item": {
          "id": "3bf15651-678f-4efd-a143-5ad5c4d12960",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "99c5a5a0-f39d-4791-a754-d52b4ca6fd27",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8e96a76a-f704-4194-9057-8d799e6203e3",
        "cursor": {
          "ref": "5a5e10ba-dbdd-4720-a952-44995fcd8525",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "dff575a4-5612-41f5-90c4-f68db4d338c7"
        },
        "item": {
          "id": "8e96a76a-f704-4194-9057-8d799e6203e3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "28f3171c-696d-4ca2-a951-dcd32f6e06db",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7082bbb8-7d6d-4e85-83a5-77b9200ba99d",
        "cursor": {
          "ref": "cb5b04d2-95aa-423e-9ed2-ca0bb5184ba4",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2fa8b5fc-f119-41ed-9c0c-c8ecaca3469b"
        },
        "item": {
          "id": "7082bbb8-7d6d-4e85-83a5-77b9200ba99d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9c8cd7f9-675f-4189-bd2d-08be76f1eb8f",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6b760a52-4db9-43e6-9350-ae4b28b1c618",
        "cursor": {
          "ref": "c19691c2-3653-4f2c-9f89-75e82c9707e7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0d3ea6dd-60cb-40c2-8096-7278cf0f9a80"
        },
        "item": {
          "id": "6b760a52-4db9-43e6-9350-ae4b28b1c618",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2c8cfe19-8c7b-4e2c-ad24-cb4433ab05eb",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d3f00ec3-c347-4a87-9301-608c5ba82cee",
        "cursor": {
          "ref": "d62b210f-58b6-4012-a79d-6a7dbd9bf444",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b8dd64c8-660a-44d4-90f9-ed8bd3a2401c"
        },
        "item": {
          "id": "d3f00ec3-c347-4a87-9301-608c5ba82cee",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cfd02c86-e559-40b5-94e4-2c2d02a15b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956e4eed-e0aa-4286-8d0c-b36fef852f77",
        "cursor": {
          "ref": "75f48b44-29b6-44fb-ba19-cb6c0795c67c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e0fef7a7-c491-4fbb-9dac-a854ebf518e4"
        },
        "item": {
          "id": "956e4eed-e0aa-4286-8d0c-b36fef852f77",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8f871382-a254-4da3-88ae-0e45bffbe537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38d4aa9-7ae5-4aba-81a7-643b666de417",
        "cursor": {
          "ref": "0a3fc357-bfe2-4c16-ae56-005cd0beacb6",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "41e791ae-dc9c-4f01-8f97-83767832ab2e"
        },
        "item": {
          "id": "a38d4aa9-7ae5-4aba-81a7-643b666de417",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a24ce6d6-f35c-43f8-9ede-e27c56183fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8200e7bc-3a31-4afc-86a5-91c95e9b90a0",
        "cursor": {
          "ref": "3eba4042-1fb2-4200-bd11-b76cf5fcdfc5",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "293d5c64-cc5c-49a7-aa2c-198a530ef50b"
        },
        "item": {
          "id": "8200e7bc-3a31-4afc-86a5-91c95e9b90a0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "63c2ec09-448a-40ae-817a-2fb319874941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0e7a88-f644-4e6d-b977-70dfd4805d22",
        "cursor": {
          "ref": "f31d1428-cf0a-4471-a5b4-74d1f3ad9505",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3a620941-742a-4b0d-97c0-6ef4172f0417"
        },
        "item": {
          "id": "ce0e7a88-f644-4e6d-b977-70dfd4805d22",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7d404742-5eff-4a8c-9607-d705b1f9e7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c0996f-dedf-4675-9515-ed9e5d82bba2",
        "cursor": {
          "ref": "ebc5e1b5-f6e1-4ae3-9bb0-8f94ea5bbe65",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6ddb283c-0a5c-413b-8675-16f7021b0a8f"
        },
        "item": {
          "id": "a7c0996f-dedf-4675-9515-ed9e5d82bba2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5c33e63d-a04c-48b7-a90b-2bd3b8069d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f30405-3195-455a-b582-99ff5cb904b5",
        "cursor": {
          "ref": "32af1bc7-bd23-4ecb-b0eb-28d9495b3ecc",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "38d52c80-28c5-4191-b5fc-f804f89a0cbc"
        },
        "item": {
          "id": "45f30405-3195-455a-b582-99ff5cb904b5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "da945ef1-37fb-413c-957e-5722e0d95c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fb27df-7567-4623-b9fc-23377c87d224",
        "cursor": {
          "ref": "60a62116-19b7-44d9-8553-3f92c5c413db",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e9d7123a-c6d2-4469-b6b4-6c557fba4613"
        },
        "item": {
          "id": "b0fb27df-7567-4623-b9fc-23377c87d224",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7b776777-7e18-4605-b5fc-5f2c45a34457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce7d1b4-26bb-4e94-9651-bdf3e8dba11b",
        "cursor": {
          "ref": "b42a192c-6d4e-431d-b560-25e249e796e9",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "657d78b7-745b-43ad-86c5-85f5b0c99c83"
        },
        "item": {
          "id": "9ce7d1b4-26bb-4e94-9651-bdf3e8dba11b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "db7dc0a3-d165-40b9-925d-06abf7b32a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23fe37c-c281-4b55-bdfc-db6e1cdb5967",
        "cursor": {
          "ref": "a5418c60-a58e-4833-893e-452864b06eab",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d814d53b-591b-46bb-aa8c-10ad76cca834"
        },
        "item": {
          "id": "e23fe37c-c281-4b55-bdfc-db6e1cdb5967",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "224fe707-8c4b-4af1-a126-6360398ebfab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5170eaad-1fef-49fc-aeb3-7acd9e8fede3",
        "cursor": {
          "ref": "cbd87c32-f065-466d-a8bd-8b5b4b360c90",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ef094c9c-768a-4a02-97b1-5a5773d119c7"
        },
        "item": {
          "id": "5170eaad-1fef-49fc-aeb3-7acd9e8fede3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "387f95c8-1fab-462c-bc2e-64824f90ee9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9333bb-951c-49a5-944c-5735605ca0bf",
        "cursor": {
          "ref": "b99f6c8b-7b2d-4e06-8efd-9e170cd51903",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3e0d2414-5e50-413c-a41e-255135d1525f"
        },
        "item": {
          "id": "dd9333bb-951c-49a5-944c-5735605ca0bf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "dab113c0-f339-4d4c-8ca1-b45b0850c714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5e8cf6-3e50-4f2a-b0a7-f98bcbaf3a34",
        "cursor": {
          "ref": "9de587de-fbf1-4eb2-b739-605c593294f0",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4de0c4e8-dd96-4324-b88d-c83ba1f6a1db"
        },
        "item": {
          "id": "7c5e8cf6-3e50-4f2a-b0a7-f98bcbaf3a34",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e36b26d0-ad73-4d34-9c1f-997d25b4fe4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c257f9-853c-4d59-b5df-f8f19836565d",
        "cursor": {
          "ref": "7a64a8c3-d4ef-4d28-a0d7-ee0616f373b4",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6792d23a-6598-4969-86e3-e3486a2e33b8"
        },
        "item": {
          "id": "76c257f9-853c-4d59-b5df-f8f19836565d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "59dc59f4-26a2-49a9-9539-192057e0dfc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1833d403-7954-473e-b42d-845a054a81e3",
        "cursor": {
          "ref": "c3e365ad-6423-494a-a5bc-54670f5f11eb",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "716fd183-c692-405d-9463-8f1127b48ba4"
        },
        "item": {
          "id": "1833d403-7954-473e-b42d-845a054a81e3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "797603c9-aa8f-410f-b91b-f7f671004459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2972ad-3a56-4d08-95e7-4edb87127ee7",
        "cursor": {
          "ref": "502a7ee6-ca3f-4f05-a42f-b280bdf349a1",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2e40e64c-2335-4bfd-a973-2c58c9ac485b"
        },
        "item": {
          "id": "dd2972ad-3a56-4d08-95e7-4edb87127ee7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a9fdad0e-3e89-4ea3-b4a9-cfeb7cb76baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e1a0f9-cef0-4309-bdeb-f7c237b73d5f",
        "cursor": {
          "ref": "4d9814da-f575-429e-ba73-ea6c572b1b35",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "596d6848-46cc-4784-a579-aacaf6d464eb"
        },
        "item": {
          "id": "a0e1a0f9-cef0-4309-bdeb-f7c237b73d5f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5c6bae84-2269-4624-b3f8-e68ee84aa26e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03caee36-70cf-492e-85bb-1687c9b88c33",
        "cursor": {
          "ref": "23ca01fc-3d8e-4d25-93cf-faaa8f5c8cab",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3ae6751d-4a9e-4a78-88a9-a499d2c865e6"
        },
        "item": {
          "id": "03caee36-70cf-492e-85bb-1687c9b88c33",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "03efaf40-08ca-4876-8888-58992e532132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9046229f-0c78-4490-93e4-d23d55d54db3",
        "cursor": {
          "ref": "4cc59a66-3d33-4ab9-8753-466b90507f89",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7077f619-a25a-42a1-8efa-480d2e99bfa7"
        },
        "item": {
          "id": "9046229f-0c78-4490-93e4-d23d55d54db3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "147ef69c-d8cb-4981-9b7c-6f223b0a25ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123c00b8-4344-4604-83a0-9f978d6af029",
        "cursor": {
          "ref": "a67c29fe-2183-4ac3-b78e-54a380035cc9",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "81833fda-ad97-455e-a211-1faa73a94920"
        },
        "item": {
          "id": "123c00b8-4344-4604-83a0-9f978d6af029",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3e8cab43-c72c-40f0-b7fa-123de9f7cef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e36ef8-a40a-48f6-b5ef-08c163d68058",
        "cursor": {
          "ref": "83df496e-27cd-439f-87f6-977132c85ab8",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "0214fbe5-03ef-48e0-825c-fe277d613de3"
        },
        "item": {
          "id": "61e36ef8-a40a-48f6-b5ef-08c163d68058",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6f91b02b-8e2c-4df6-b5f0-1e5ff5e424e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00511ea4-be02-4f94-8cb9-fae6af3b956d",
        "cursor": {
          "ref": "d738b946-53e5-4f35-b5bd-a6c896ac0d1b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "09ab901c-8191-4fe1-9635-d4c622584d7c"
        },
        "item": {
          "id": "00511ea4-be02-4f94-8cb9-fae6af3b956d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4c3ad75d-482f-4560-b071-998557e02118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d099f74-8bae-4147-a425-ea2d025fc06c",
        "cursor": {
          "ref": "91b56762-8522-44da-a208-0635b0c7c710",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3e26252a-d322-495d-a52b-cdc032410c77"
        },
        "item": {
          "id": "2d099f74-8bae-4147-a425-ea2d025fc06c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5cadd361-48e9-46ed-a496-e0362907c9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d15888e-9321-4429-87b9-3b409c7f9afc",
        "cursor": {
          "ref": "778fd6fa-b12e-4ba0-a7c1-188b35e96ea9",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "367459bf-1f93-47cb-aa63-e0642f4434a2"
        },
        "item": {
          "id": "2d15888e-9321-4429-87b9-3b409c7f9afc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ff109cdc-f846-4f09-a7c1-538cf2ba1540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01599d5e-82f7-48c4-8d2a-d51ce505f6fa",
        "cursor": {
          "ref": "ce13b3ce-3d5c-444c-af42-300c9dce7626",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d9937fa7-fd53-46a8-8f7b-9b90a0132b11"
        },
        "item": {
          "id": "01599d5e-82f7-48c4-8d2a-d51ce505f6fa",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d905fa25-d4fd-476f-9071-5ca1292bb2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef76f4c-3a04-4c12-a99e-2bbc41673b8f",
        "cursor": {
          "ref": "4b99fd07-c3c9-4755-8333-bad678578b84",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "1357efe5-6d30-47b2-a3ae-7ea9b1fd3578"
        },
        "item": {
          "id": "5ef76f4c-3a04-4c12-a99e-2bbc41673b8f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8a7f9c3e-a2bb-472e-9b53-c05cde726b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d805b5a-8ee8-4902-a9b5-817cc718c66e",
        "cursor": {
          "ref": "d89511ef-cdda-4755-9d2d-4f371a242540",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4ea23406-4211-4a1b-b19f-42f1e6d44654"
        },
        "item": {
          "id": "6d805b5a-8ee8-4902-a9b5-817cc718c66e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "70f71975-49d9-4277-a659-1ff3336e7b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246faa81-fe53-4af7-b726-ea5249e5fd71",
        "cursor": {
          "ref": "6acac5b3-0686-43fc-8582-ed7303deb72f",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "62f0de19-59a4-4680-9dbe-a7789a85dee7"
        },
        "item": {
          "id": "246faa81-fe53-4af7-b726-ea5249e5fd71",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9390d006-0fb5-4a2b-a60d-9807dbd8e80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37268b7-7d6f-48e3-8775-75e1cda3b5d6",
        "cursor": {
          "ref": "6d31b254-8ec2-47f6-8f67-13edd57cc52d",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2fb07a99-8384-4dab-877b-ab927b376249"
        },
        "item": {
          "id": "e37268b7-7d6f-48e3-8775-75e1cda3b5d6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6239b199-1e98-4717-a012-2973e88e363f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdcb495-a81f-4899-bd64-7af2a84a70f8",
        "cursor": {
          "ref": "8b077c81-35fb-4bf1-9169-4f7491b51116",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2d439a79-d682-49d8-9d19-0986052e829f"
        },
        "item": {
          "id": "efdcb495-a81f-4899-bd64-7af2a84a70f8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e6aca1b6-2536-4dd4-a4aa-69a532038e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca69def-5a23-4854-88cc-6079643fd41e",
        "cursor": {
          "ref": "59493206-8142-4aaf-89e3-1466b11e8b1d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "75f1ba61-b0a5-4ad0-ac90-c355a0092a0d"
        },
        "item": {
          "id": "0ca69def-5a23-4854-88cc-6079643fd41e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "66190d5f-35ec-4abb-8002-7fb433feba0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a6e7f9-1abb-494f-ae80-87cc87c6c066",
        "cursor": {
          "ref": "59bbdd23-698b-4f39-8fcc-47e234c642ff",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1f047cd2-8b4b-4b60-be8d-0ea907f615fa"
        },
        "item": {
          "id": "e3a6e7f9-1abb-494f-ae80-87cc87c6c066",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "684565a4-31de-4ec5-a675-2fe7f70597c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9b0804-aa52-4e6f-884f-c0584c36900d",
        "cursor": {
          "ref": "0c8b22fb-5d84-4034-939c-bd30583cb879",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ec1b9468-2ba6-4cf7-ae9e-2dcf80c51607"
        },
        "item": {
          "id": "db9b0804-aa52-4e6f-884f-c0584c36900d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "70459a50-a93a-41a0-90e0-562988eead40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ac2b7a-38a4-493a-ac75-b2450f75d451",
        "cursor": {
          "ref": "a5d7fe8e-1c16-4727-99e5-cefa47b091d4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d9107825-536e-4d5f-9a43-ecf370703a53"
        },
        "item": {
          "id": "e0ac2b7a-38a4-493a-ac75-b2450f75d451",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "935916c8-d76d-406f-a331-dec14c6c3645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551e545b-6101-498b-829e-09f7f6a19b4e",
        "cursor": {
          "ref": "e929c7d3-364f-41ff-994a-7cf750335b1d",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c084cec2-3d52-4ea0-8032-ff18a2a67d13"
        },
        "item": {
          "id": "551e545b-6101-498b-829e-09f7f6a19b4e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e389b6f1-503d-44a7-87d3-5afb2e1f9d0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73847631-312c-4a9c-b3a4-c7b409c4bf43",
        "cursor": {
          "ref": "b280d82a-b245-4d1e-88d7-4fa3e617504e",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "71ed9895-5737-4103-8adc-820089f30748"
        },
        "item": {
          "id": "73847631-312c-4a9c-b3a4-c7b409c4bf43",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "003c647f-b11a-498a-9403-badfd299b4d0",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "423ff415-2feb-4675-bddf-01933f25f02f",
        "cursor": {
          "ref": "c457a4c0-bda0-47ce-abad-47cbefe69b14",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0904a055-6530-42e5-b5fe-526c592a885c"
        },
        "item": {
          "id": "423ff415-2feb-4675-bddf-01933f25f02f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9873d489-fa04-4be0-8216-0a248e3c16ee",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddacaf2-d9e2-42c1-9f0b-f828e8164979",
        "cursor": {
          "ref": "9fbe87f3-a13f-442e-8d87-1bfd2be16db0",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b4ded545-e111-456d-a297-1296c462bd76"
        },
        "item": {
          "id": "6ddacaf2-d9e2-42c1-9f0b-f828e8164979",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "42b6c2f3-2a3a-4ad8-a21c-b8f228663ce3",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e954b6da-3d7d-4912-ad23-ff02520d53e9",
        "cursor": {
          "ref": "ab6eca47-d645-43df-8bf0-968b98bee18b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "15325f70-3cba-456f-942f-70b175720ab8"
        },
        "item": {
          "id": "e954b6da-3d7d-4912-ad23-ff02520d53e9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b4cf400f-032d-4b12-830a-c5970af2ba85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e954b6da-3d7d-4912-ad23-ff02520d53e9",
        "cursor": {
          "ref": "ab6eca47-d645-43df-8bf0-968b98bee18b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "15325f70-3cba-456f-942f-70b175720ab8"
        },
        "item": {
          "id": "e954b6da-3d7d-4912-ad23-ff02520d53e9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b4cf400f-032d-4b12-830a-c5970af2ba85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bd8304-0d68-4300-bef2-f317729a1494",
        "cursor": {
          "ref": "711aa4ba-89e0-4a56-aa9c-152404ce2398",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ea67ce9d-f76e-4cce-849b-7f6e2af0442c"
        },
        "item": {
          "id": "57bd8304-0d68-4300-bef2-f317729a1494",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6ed65e8f-baff-48bc-ac02-f6467dce6357",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63963ff8-f12d-4c81-aaa7-dca256c80afa",
        "cursor": {
          "ref": "8ce91b85-a668-448c-a414-875f3d1fb09f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "2e4624b6-0ea7-4e36-8ca9-d9b8140c313d"
        },
        "item": {
          "id": "63963ff8-f12d-4c81-aaa7-dca256c80afa",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b06a5dbb-9cf4-4aab-be70-4c2690700451",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}