{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c64d7d28-5bf0-45de-a365-fae652076387",
        "name": "Clear Cache",
        "item": [
          {
            "id": "03b187c5-f7c7-41aa-abb2-e97367501c16",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07053799-a6d9-4133-92a2-b6ac95837c1d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "17c2e672-eb5b-432a-9867-ec5eea009df4"
                }
              }
            ]
          },
          {
            "id": "030164e6-be92-46e1-b06e-9d49386683e2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a79b3014-1fb7-472c-80f8-aec7969622b2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7abd7173-b8b0-4d22-a95f-e7f99d03365a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a8acb3d7-607a-4fe3-be06-34f11e30e793",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "03a62dc3-9517-4a5c-b222-605b3700e2e4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cda7bb44-39c4-4ad1-8661-c5186549252a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5295e022-3848-4ce0-9d93-815cd192ecc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8861b675-fd30-4d63-93ab-ec571e4cae4e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e36df7f-004d-4b30-a132-0e06fcb12424",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2970bae7-2b3d-4fff-b1ca-4099f3c41e6c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "29984fed-7eea-4d3a-aed4-fb16f121f85c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0345f25-0dde-4b37-9fcc-eb590ddba798"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0385f589-82a1-4233-8b4c-bdcbce98a28f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7cdf3414-fb3c-4bcc-8855-ebf1638598cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "129ee098-6556-49aa-ad58-819aca850f10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8cbe7032-c09d-4b05-b5ca-ba21414ca2af"
            }
          }
        ]
      },
      {
        "id": "3d4ca05f-4fda-4ed9-9841-87df43a3efa1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "00e64138-57b6-488e-b55b-4825e9a62e35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7f1b8b6-44b9-4baa-99e3-ee3e33ad7996",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "539a1f6d-09b7-4686-9608-6706e39fd04b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5e8754-f42a-4593-a04f-7d5212ab3e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a071e0e-ff0e-4631-9194-c05aa42e735c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80558ec-fb9d-4538-8fb7-bf146ba5b5fa",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a324ed3c-9012-4c6b-a1e6-114bdff623a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac27adb6-277e-4173-98c1-9a08ebe08bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b94862-7a6b-461c-8ac2-bd457d86d00a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a0c3d6-bff0-4bc5-b6d0-f78162b9b3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9c46cd2-cf1c-4ce8-bd05-24e019d8a066"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb23b2dd-430b-4078-901e-b806a73c062b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5eade30e-b41d-4ba4-85d7-c17074eabb8d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4d3d80-da11-4695-80a9-39662358decd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2293479b-144c-49f9-82ed-3dd7496c1b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cf479b-3b7c-4ebc-8f7f-55bea2c298e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f036e2-9ab5-4fca-89cd-0cd7563bb299"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "612d123f-0b08-4c61-8407-54e711a00c1a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "80bd391f-5ac8-4c2c-afaa-17e1e9c1795e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36dc6b98-4baf-4c7c-9e03-18d69700b75d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "55b7c40b-7757-4052-94e4-5a288cc7ed32"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c68dff9-1fb8-4f6b-b272-0cef7f5316cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5846fd34-8029-4db7-9c1a-f842e56b7859"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7feb915-2182-45ca-ab86-d0c334edfc9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8576876-9f68-4173-90fa-035670f88012"
            }
          }
        ]
      },
      {
        "id": "d4a07317-0dd2-45da-ada8-4f3ec4e583b7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0038986f-5562-4086-8ebc-25c5ba0eafbe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb924e14-bcb2-4e48-aa4e-8d1b45d32442",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "546af991-f8d6-428a-bedb-438919cab77b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290901bf-7de7-459f-903a-13fb7992ed7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18611e8-626b-4af8-a9c9-82856ebe73f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a09c70f-8679-414a-9f4a-f0f2e0f55c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02b5c26b-81b6-4b90-adb5-848315bea474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717e7bce-0763-42e4-96fc-3ddec17c17c0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a749c509-d6c5-4d55-b00b-3b5fd18a2737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0bbb8f-8d9a-42b7-876a-1a56e2f2409a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3ccd45-f1f4-4cbe-998a-9d282998ab04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c4d6b5f-a49d-4bac-a8b3-9346eb3c13b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140595c6-b921-400a-8bd7-be7d9de6b7eb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639523a6-3201-434d-9c25-9203073c65f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cda05e4-7edf-4e0d-9f17-fe414df6ba2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1790078-1874-4e0d-8ee3-e710043cf1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9f7fa7f-978f-4d16-9f19-595172c40efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393f8c11-b7de-4922-9962-453afb231aa5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7d8375-da4d-471a-ab78-3687f0b64613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ca9b42-4f08-473f-b3b1-d18a9450d6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5016b39c-d53d-45e1-a9ba-d076177bd46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e955d823-56ed-4f35-b37f-417e8b7b36c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717df8b4-b484-461d-84a8-0f18a2130b44",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4dae26-1c7f-49d5-8616-7350f9c94dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eeedba5-4b82-4cf1-b040-482efa44f59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29efc844-62f8-43f9-881d-48808cfcac44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "911e228b-1b96-46dd-b71f-13235af7c9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987307fe-f13a-4344-96b7-6f6374de7ff9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d889f1eb-82bb-47b0-ae60-24ddf0c9bca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f925ef44-d1d8-435d-b0e4-7a2c73b22663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74a4fa8-63fc-4830-b8cf-4f380f6f278b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15d40a96-ce86-4e24-adc7-41f926d3daa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5796d655-758b-48e2-892a-ede6983b64fc",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810e3b4b-299f-4af1-a098-39777b443914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019140a8-40eb-4e4c-9d6c-ca1ab178e3cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2480520-d108-4f3a-9732-abc2297158d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1f09063-efb7-44a9-b676-56d954ca848a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cdff693-4ddb-49a5-a2ea-6fffa5cb84e0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055406f1-5eea-440c-8a17-6d57e3abf3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0246a6e4-959b-4141-9dc9-ab4252613d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155738cf-8927-4bb1-b56a-e434c470f808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac8c7bb0-ac43-43ab-99e7-cd03103b38fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cf426a-4360-4eb1-9c9a-1b14c96d9560",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84d5d26-f997-4048-8682-4534a9b2b5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5b9c2b-7738-4889-b097-15bf95e85728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33657ef3-e965-4620-ae9b-327403fd555c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a84366a-6fcd-4b06-ad70-e74afc82d841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd11e14f-c606-4b01-925e-c8439dbcbb53",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86266cd-c218-4799-a61a-f3cc4bb7d36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819b8dd0-8ec2-409d-a4c5-878f5eaa3283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d681932d-2b91-4117-a2c7-781f9e05a42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a66198d8-f0f9-4d51-acce-50f6efab202a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b725459-509d-431f-9b1f-fc151df3eb63",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1805b3aa-af76-47b1-9f40-e0d0e982e01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6daf717-c788-4d22-8af6-f96a956691be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cefcf5-eb23-407d-bcff-d9486b07ef7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a1c18e5-0c01-4162-93e5-10503194fc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62efd23-fae7-4568-a7b5-6c2426cdb52f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8877ee-8d01-41f1-b574-a8ca13a37b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa21e0bf-bc04-4aaa-9dbd-42519c0c5cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed71412-cc5a-427d-9256-9afdd0e36bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83b56bad-f97d-4bb4-9ec1-74978182478b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7172591-89c5-4090-92f8-8b7c09726bb2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361bbb10-834b-40f3-b616-f22b9f0ba1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26db7d6-feb5-4722-a422-ff71cb246d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89c6b15-1a87-4324-b4c2-e7ded9004506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46bae6a6-4636-4d93-aca8-d2072849359d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6aa454-6dbc-4272-b340-aba0322b40c5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d06f4b-95bd-40cd-8665-51ae1a90f289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d302b0b-4efc-4119-b6c5-7fcc2a0658ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738ebcc5-eceb-4685-84dd-ca8666634662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "373e55d9-7db6-4586-898c-770cd2a6d4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d73c619-e5df-46f1-95c3-81a13982a2b3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d831bf-62fe-4778-8154-d0d95d1ae9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae7396d-cc72-481c-997d-3c06927cf918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f51ce8-b252-4b27-954c-c4a7a2009932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4c9272e-68d5-4767-a65e-b9a0ec1ea503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98d4d2b-f13c-4886-8f9c-c9ed48974a74",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b212c87-5704-43f7-bf59-38d4ece9470f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7108d290-c3a0-4020-985b-5d5256b7365f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4b34cd-3e7a-48b4-8208-76bc5365c8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "413fd302-7956-4170-8fa3-8884dfd4b424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a606e9d8-6d83-439a-96b3-4a2c8c8a4cd3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298f2e4b-48ef-4648-bcf1-2c8d6d3a2214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a22185-bf9a-4033-a0d1-45bad8223ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0852ca-c029-4ee6-9a16-f3bf586bba77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2daf3b2c-2548-41bd-8cc2-546c8774ffc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e942c6ad-40ea-49a5-b614-b01fcf429e1c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b1dd1f-b6b7-48a4-9a00-c4704bd077b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82f2463-8fb5-4412-97e3-826f527f6def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065c8aad-8d35-4aa8-8cdf-a0af19ca3e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0d0176-826e-4283-bb22-c306ef041480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37fe491-8f73-46b3-ab97-012f391c70c5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7b92f0-99e5-4caf-bcab-0f95dbc3764f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da085bbd-9c38-43e5-9e1b-cc17b2b16e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c438b332-3966-42f9-a0e6-8aa0a8c46228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "203cb15b-645f-4e33-b88c-f3d45529b259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5dea73-2db7-4f10-9edd-9fbbb4bd7145",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc320b3-01f9-41be-ad32-e9abbd91892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d654e21c-1b42-42b8-bad3-845ffb5bb740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2408e25e-c683-4ad9-96ff-f26a436b7383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "927b0349-57a3-4bcf-86ac-d0a95486d1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f3e47b-4b46-4079-9740-c4b12e0772ea",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676f59ec-caee-48b3-bb62-93e76ee6a583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10dc797a-280a-4f07-9af8-c379810c6539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fbd96c-fe45-471a-b77f-a6373edbad4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc87240-ff87-458e-88b7-24f573f97184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0c6a88-1d10-414f-8f22-3fdd7b0ecd85",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56743b17-125a-43c1-92ba-75808286a2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7869a5a4-dbf7-498c-bd61-b44e185636ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a1ab55-ba59-4733-be92-2c62d976e0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "34359876-192e-49b7-9836-a803071e6ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2326b11-83ae-468d-addd-526974ab157b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4f5a46-ba82-4d87-a93b-5b72c8162aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305da0b5-a82d-4f39-b439-abd65c3fe64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6921a03f-7419-4a09-ae13-48f8a795ee48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "950380a6-2be2-423f-82e4-3a8c1fa5292c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cf2d9b-9cab-466c-b644-49afa1678bb6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d243ebd5-02b8-4eee-bab3-a7126da8a1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0e2fe0-bcd2-4898-9b75-e7c886ff47d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a15b081-e324-4ed3-b923-232a068560ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ee3fa6-a272-4dda-8043-4b5769f131d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac486f5-05a5-4ced-873d-8eb3fd2f9e54",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ef9a41-ddfa-4ff7-a54d-46482a8d3230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9e2e76-136c-463a-aed7-2c419ace9b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee52d15c-6116-49f1-8853-dd9f9efdfaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7020bf-89e3-4463-90ca-a680d8cc1559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafb524d-606d-46d5-b576-e5fa0c7b388d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee0457b-3e33-449e-abea-12f06b067a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25aebf84-fd6d-4afd-8e94-44aed12a2f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64d65b2-d495-4350-910d-780c32414e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2713fd2b-fb09-4bc1-ad85-aed77d2f7514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43218dac-8b9e-4814-95bf-18ada28f2f7c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab07d8fa-9990-4449-87ec-508234842a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6039760f-747b-4341-b6e8-2f2683278a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2979a2dc-0d87-46aa-b648-fb15567267cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a8ddb9-9257-4b09-b446-76a85edf2ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b724551a-b465-4706-a5be-ca26b35c753c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c31cc7f-aecf-479d-9f9f-22aafe2ecad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70d7f88-8af3-4951-92a6-5b899e36f77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0661a848-df9a-4a5a-842b-afd61aab6b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec3896d-cea8-4219-81cc-12141e8f7727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fad4ea-07a1-4473-a24a-07f65269284f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30044d5e-f0c1-4d8b-a31a-a09a3c163494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c403e7-d96b-421b-8b06-c49e0f28631b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc6c673-1ece-438b-a109-1cc4d90bd5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af206d31-2c8c-4538-ae20-e062a8194c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f1d0a4-8b25-45d9-b8f1-127ed7780be8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a33d03-cdb5-4497-8c45-9c763902070b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75cc880e-44e5-4ff4-a5e0-b98c17dbd1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6125ed91-dab6-4512-83fa-6d1d7d4ebe9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "44a6d893-f8c7-4962-8329-99ae9ada5e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04fb596-f3eb-4cc8-bc97-1951e0a32682",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd003f3-db59-4827-b4df-4022a0d62846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d6d4a5-48e8-470c-8edf-a9e7038cdbab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1d2db9-e8bf-403e-86ca-3ef98a5f1210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc19f5f8-bed2-4aa0-b557-7f90ff018ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db977618-97e1-410e-aee7-ea2771483305",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d012a1f9-d8f7-4d59-afd0-e02b89f8494f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9861116-ea7a-4d22-b25a-df0e3d43dd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c70b376-d302-4d44-8da7-c81bc893bc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f9812c-2ba6-45b1-886b-4428b3acbfd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e453cfc-f640-42bd-bc11-8f65982ea461",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ba9408-3bbd-4e36-b8e9-b69e8de0ab6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3047b2-17da-4e93-aa2e-b37174c8a0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a27c00-19e5-4f9f-a3cd-2bd5bd5fd6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "081b19ff-3f1a-47fc-af80-cdd8640673d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e062ad-f34d-41e1-9f16-14e70d0eb76a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab8a6f3-25db-46a9-8580-931c2bfc2638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df9f20e-a82a-4791-ae09-88e7ddee5392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b6d90a-552e-47df-9b23-18715f4bcc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c64451ad-543c-44f6-9f25-2d9914ab4808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41dcc16a-312b-4b81-a4cc-9e9b0838a45c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03f5e7a-97c2-4c80-86fc-d59b3369fcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c5608a-66ce-4bfd-a64c-4ba58dd9f005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32b7d4a-d3dc-4a25-beb1-c90401f22c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2790c135-a79f-4345-9343-e6abc589587d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0589cbbe-2b41-491c-9880-1fd683598792",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d9a4a0-8c22-4110-b8da-892b2f418616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f17ff70e-9c51-4ee9-84e7-8d6e652a4295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b08387-2aed-4d86-9a70-03a2e5457a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "920769c8-5c11-47f6-8686-fd55428afc09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9417319-9ac9-40cc-923a-5e536a85ff3e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fc12a6-414e-4565-80a0-193378a8f05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804156d8-6d5c-4ab6-8948-c526c0465b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b41d45c-2067-4d62-8bba-257c37e006f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a45eee1-90a7-4c57-8fe7-311898c36301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29af7399-b63d-4307-961c-ab73f25dd06a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c3549d-5c7c-4f61-98e8-9da4f0040da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24696b0-1376-493d-9a6b-2717dc4ff14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1c361d-3528-4ba5-94be-a7f0ef91a83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "78d5f0a3-4934-4798-9cd5-6cf60d212041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3317df56-5263-4c1e-8b2a-8f189788ba14",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f04f87-ddc3-4eb6-bb47-461751c7b824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03010068-f8a6-42e3-8e3f-c9dab5df1880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749191ca-cc96-49c0-8c7f-329a271a5137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "139d5643-dd05-4dc4-b5a3-ccc0900894e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cc3156-0d4d-4e1d-b1b9-3b569d25c029",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2203835d-6645-4b4c-8c41-79c018635425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375f399d-78d1-4021-9c05-e38390cac020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70665821-50a1-4f3c-bd3e-40ee6c16b28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2235b3-e499-4210-aa54-8015425c870e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6653ec36-cfaf-42cd-ae33-9e8658c96dcc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373ce9a8-913a-4f18-8bf9-7b0abfe1d8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5c1ecd-cd1e-4c20-91e5-210d29048bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32210092-f317-4984-8ad5-014a73139551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1952b2-b85b-491f-b146-1762a5150a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd3be97-3ff9-4db7-b04a-9aff61088613",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514a2d2e-9c57-4296-a72e-3dd6cd8215c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87296949-0898-4d9d-ab24-bec1400f71a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7fe77e-b6fa-4ff0-85e8-895c8ffe8bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1db7c6e9-9f28-416e-8e5b-227c0800b94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a43857-559f-4d2a-95a4-d55308ec5d97",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31321119-ff3f-4658-8b3f-0224f705a944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f361cfb-53c2-47b5-9ef5-fd7a781bd0a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28fa4a9-a034-45b9-830b-50be97b80a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d88d7dca-16b2-4178-88ca-4975dbe1da89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee872733-fab6-4c4c-9735-81779e47ca73",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019a8648-a428-4f4d-8804-402ad8e74070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf272a18-9a43-474b-b65d-c9a43c0f8912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed764f13-1442-4246-b3ca-479837511cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fccb1774-10d9-4235-ae75-5fe9462a4ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdab4948-da12-4c00-a8cc-c97f5814ea97",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b62b749-154d-4886-a23b-468e4b94405a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b6ccdf-40bc-41f5-84cd-a5a75547b37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3625200-b1bd-4e0e-b033-7907e7511f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01b88152-9bb3-45d2-a451-8eb7a6f3ecb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3fed58-8a3f-4d09-b3ba-d51c8ea4415a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cfa7ac-e404-4a4f-833c-506b30173fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54459600-75e8-40d5-991d-97c76f048fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5a6800-a4b9-4b97-90d0-053066f06d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0475ae0d-3a8d-4193-a823-c9f60369262e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896acea3-8101-44c4-9db8-784e9b3b85be",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fdcb2d-d2d8-4bab-8692-fafcbdafbf45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd89ea2-7436-4137-bf0a-b0898ceffe34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40eb0287-896c-46d3-ab65-70f92facefe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4547b3c-dc66-4fd3-8aaf-ea50d6534bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0be0536-026a-451f-ab41-385183d594a3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6da98b5-fce2-436b-a43b-4f5f9e7e33a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e8a981-6ab4-4582-9330-2554a6f45735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62500a03-05c6-4d85-9978-7f6ba77c314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e365c1ea-9c91-450e-8441-764188a54b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c9aa5c-5f92-4a3b-b582-879693744370",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281f3f1a-9f17-4a9f-aa51-c0bf61c507bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683902a2-6919-4806-a009-0ae6db17d1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ccd8d4-3048-4aa9-9d1a-38a5d7eb38a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f366461d-8b45-4162-8bd7-59a16e8bf656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d26b2d1-45b4-4124-9f8a-75d384559f01",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53af789-4e81-4fa3-b5b8-5c04a510729f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dee715f-18ee-4081-b440-1f700b733b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14de7bcf-aa5a-4e28-8c83-a263750ee3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65bf8ee8-9207-488e-b113-18375df68e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d4c0dc-a304-4382-9143-2042eb048d60",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88863814-b41e-41d7-b6cd-fdec8e431db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78963db1-48e5-4e6e-a737-9f2a9f24a24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5b9762-86a5-4a29-b484-611af3ba0e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1312a15-fc16-432e-b1d9-5fc10fa48cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e68b90a-b12d-4af2-83a0-366937719cf8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9065c6b-4853-4fbc-893c-ff8d94c8d152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d9bae3-56e9-4eca-bbdc-cd999a93a4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76838d3d-8dd3-4cc3-88f4-fbef63c07cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d585b60-0b8f-44e4-a7d7-97ace485ef06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d8768b-e3a4-482b-a1d9-f20fbba53300",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bd3525-5b10-4a9d-88ca-9ffd4aa93208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102b62e2-fded-4d91-acca-fbce56b062fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b740121-c038-408e-b2f8-2c0272498889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b31a3388-355a-4951-a339-463627d2b296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a982ac14-e8e0-4456-906f-669a148ba7cf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb3ebc7-b133-4130-a983-ddfeb12dad15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d88a936-c268-45be-b040-b46f788dd00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccb85d6-d330-4867-a29d-3d47f642b42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c18b72-a163-456b-81cf-c8ab977d79db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe57c40-f45c-40eb-a705-b2ad28772d66",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6063de74-9249-4ed7-9ff8-0ce2371e7685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9454b068-dd00-4a25-a2b2-59ffae085167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e55810-36b5-46a3-9639-51e410594168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca5d638-8b65-4485-9e2d-dffd345022b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab6e966-43be-41c8-8335-6280a5a5dd84",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5050f5f1-2bc8-4a48-afb8-4c840eb7bf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58ee3c3-1a07-436e-adc0-0c0a5bb57ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8332c305-083b-4d01-aa46-cf92d388cfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "55275c52-3629-405b-a22c-d282dfddfadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3835ac-ef74-444b-b61f-1f442e60169a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77a1f1c-fb32-4054-9fe2-4be6917af789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74bf4852-38fc-47e5-a3c0-4725837a10b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b6a6ef-c518-4a8c-8378-3e5654d41c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee1a1c1-9ce3-4396-900b-6f16189e2227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749052fa-a42a-416e-82aa-bf07c3175d95",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6049dc-ccb4-4851-aa1a-0dbd5c133dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd87b36f-0e6c-4c31-9cf8-6f96c8da813e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2c5ee7-dcdc-47c9-a34e-1ad74bea955b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba3093af-95b0-4664-ab77-e25edf223083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b6dfb9-eccd-4402-872d-71c47e96ac04",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87412987-09a2-4fef-bdd4-a20b771ce5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a96a418-b33d-4a46-9948-33af318897bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f046ef8a-8041-47b5-b5ea-4432b996df83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcebe0d6-9562-4170-8b73-a01a2140be04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee902c3-bdec-4aa7-a7e3-1ecfea9134e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f4c508-b02c-4e03-b975-5c067c1a0314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f95d19-f83f-4bba-9aca-245162bb7a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32a2a7a-6a69-44a4-a6e7-d8a567f42ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b74a08fc-ee76-427d-a3f5-96abeb14f2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d0ffa8-cb47-40dd-9688-c7e3f013936b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319013d6-f576-4c78-9cad-6522d303c662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d45635a-43a3-46e3-976a-85a90f020225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af23b60-a380-4419-bd4b-ee5b47064c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8d160b-95c7-416f-bafe-f5bf193c8243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8372a46c-df04-4d01-b0a1-4f05b6125a55",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0f6431-6145-45fc-92f7-48aceea8dfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c484804-8e52-4fe4-ac98-74592e228d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a429559-fcf4-48ce-8b8e-39e8b8b2919f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6abea617-916a-4880-b24b-c51011db41d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff93867-add4-4797-9353-feb864128e62",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44be4b9a-3fde-4add-9d73-b750b3bccca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11949597-c126-4654-9db5-3615b3e59187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1453f487-6372-48e5-8039-ddd3891bfb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a756afb7-2b34-41a1-938e-7521623ce598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fb9c3b-d9d3-42b6-9c4f-3ddbc4ae7960",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08276bf-bd27-4267-a9af-8f076b1ef241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c231e004-2ce4-47f6-9aa4-53e9a078980f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d21dddb-3fdd-48d6-b50d-3abe5e33c335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e68e87-00c5-4cb9-afd0-f2d32dcfaa51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f38328-4b78-4d73-9701-8d411ff6a5bc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ac0779-ba4e-4282-a7e3-d0b1d5127bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2454025a-9386-4766-9ab1-7ab5c0f4cfbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292e1a6c-ef19-4259-82c0-6701705bdf47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab36ae34-2234-4a65-926a-03f4be25e5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5313ec13-c6cc-4d64-b0da-53618a82a027",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d643ea1-bea4-48ee-a16d-2efb3f1d505f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57aeee74-f065-4479-953e-78206bc4062a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39271ae0-94aa-41dd-a0c0-1a66a49c3726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e629acb-11b8-4505-add6-9ae9e518f603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83cb229-b59e-4194-ab02-09f5b6c4e8df",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b207c3-9390-4261-938f-acf97b8dd9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c09591-294e-44be-a8f3-e0e97a224b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d63c3b-4dac-43ce-9a5a-0c9ba0e3af8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71005c2b-3b52-4e4b-b42c-e29959a658f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cbbbc0-e0a6-4d77-9480-c10091e0f9d3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761a878e-86e2-487a-b80e-077ec948f1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee54b386-1c03-45d9-a01e-6fb7706344be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51164ae8-3cbf-46d9-896e-1b26cc253672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "817ffb83-28f2-47f5-a051-e8be1f4c72f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7332fab-5ce3-42ad-901d-40a342094e0f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69909a4-12cc-4d3f-b2c5-c0d36543ea9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5e6cc7-f191-4aa0-85a6-d390c2c85e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff11519-e2e3-47ef-bad2-1e23fa9bbe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29e4ed62-fed2-4ea5-824f-da56c7687a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912f1192-4adc-4b3a-a2da-3b4292650f52",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4325d13-de31-4fbc-813c-67448b3f3037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad1b715-82fb-4563-8711-63b2df5d6bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac56f5e-f654-4132-ae98-190978bdd434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06c5625b-a81d-4321-abf6-50e70880313a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d694c4-e7e6-41f1-9c28-36786150b51f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb28617-cb36-4902-9afa-23f6afd16a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c0ff69-54b5-4f3c-8204-ef1cae0b40ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d56aca9-7847-46cd-999f-2d4e6399ed57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e367704e-b326-412f-9b78-0ae3672f4576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e446233b-cc70-4576-a5e5-f097794a0edd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fd6fda-33cb-4ef0-a818-5a863aea3615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05e3a5e-bb19-4022-9edb-e4a8b1001de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74b25ec-a9bf-460f-bc0b-025b69dc671d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a39a6ba-9b06-48cd-a38e-b1cdcb6e051c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f755fa-fe2c-4b6e-8030-534b9cf61521",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a59bfcb-211f-43d3-abfc-177f771a9a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c8ba84-2979-4937-b00a-9be5145e5be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a4f57c-9b5a-41bb-b5e1-c057c1d1df9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a20bbca-6bb3-45ef-b0bc-9ae89adf8c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6ed8f5-dc1f-4855-b4e8-988b0fc1b7a7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145193c2-c88b-465c-8ab6-4577cc04b639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd220ef1-46a0-438b-8702-43e0a4efaea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972245b5-8f30-43d1-89e4-ac3eff6adac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5186e953-e13c-45a1-b88c-49beef254041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf361709-2404-4665-a85c-37111e13e5ec",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d7615f-6036-4abf-8ca6-1b1223eed36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd421af-86ee-47f1-906b-a41b05db1679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed657188-defa-42af-86ce-58c949ea39d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec2d96c6-0245-4654-a82a-7c5a75bfb176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1df571d-e442-42c1-97a3-28da9aeb8454",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254020a3-7527-4865-98f0-4e5f2add8aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eee7635-0685-453b-8b02-f53dbd6b624e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62163d63-df3e-4ada-8ee0-776cf77b678a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "282cb9a9-8229-4279-8e3a-76ec3ff1fbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721a1c90-4fc4-443e-bc54-902e8e67c476",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95efb318-c441-43a3-b014-da4919930bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1330386f-f2b7-4e23-90f3-658304112ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938b6214-ec91-401e-957a-026e2950bb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22b4e384-bd7b-4187-b9cf-225f970827ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3533b863-c0dc-48e2-9423-c33ff1c5d928",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c25331d-3bd3-416d-b619-9919be4cb720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695e12d9-142e-4ec1-915c-5f6fbcb4e7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92d3465-674e-4072-89bb-9eccb1bd3c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae844002-c325-45e4-95bf-9c0d4059a17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0525b5-ae61-41bc-8cfe-0fa08c2d8321",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4eee752-4024-4319-a9ad-a74b5b64ffee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad129da8-5678-4258-b31f-f015733fe4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c024a8d2-8cad-4218-933a-09669f5cfbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d450178-795f-46d5-8af2-b9f1681321ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbeb628-a2e4-4fc0-ae61-196b32f47371",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e818faa-a3e2-4171-8810-4db4b1349019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17655ec-086f-4718-8156-6a12d95318ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338a54da-4eed-4cb7-b8ea-bb459b198903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "315daa7d-6f47-45dd-97eb-b0d1c9429603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f5e337-ab8b-45b2-ada1-b1f47a0ef7df",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bf6909-5d0d-4745-b336-cae182544c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a361555-8c12-4da5-ad9a-f0255fb7042b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5b5324-39eb-4eda-b787-dbac2d4482d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d63075f-0c90-4653-abc9-fc3b40da0171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007b4896-1a81-4f02-8e57-979f52a29861",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f558c0-8cd9-426f-b391-7b750270b583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11da8026-b91e-4b3d-aaae-a66bf37434da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc35a9c6-6651-4b11-b17e-3d8da8c545a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ec81dd-79f7-4f25-9e72-e85a122228a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db620cca-1352-4909-b2c2-3da2d255f5cc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a647ec25-d09c-44da-b47e-55e5f45bd6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbaa372-10f5-4adc-9c8e-4ec62e4503e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7fd923-2c72-4958-882d-bc2e44caa219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4473fd-4906-4ddc-a706-efc0def84d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074512bc-ecbd-43a6-8229-91c858fcf60b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f255f5c-4573-4f4b-af2e-a8b40a5a8ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0c9859-80f5-4f07-81cf-0c0ec09eb419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3273287-a27c-4213-b00e-f13b8fe38480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7888902-df4f-477c-9f22-7187eee1992a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dc437f-c82e-4788-9eca-ceb8b7919529",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e504d8b9-ee9b-4db9-b665-9e5756b9adda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c61129-49fa-44f6-8aae-4146c3fb66ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16de8f9d-5f6b-4026-bfeb-7620e03925dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6615677-3b9b-406c-ad3f-09a0f04a0689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9572dd38-0b9a-47d3-a872-018918845e1e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4a89b4-3b09-42f0-afa3-15cb3739f2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7287e8b-f9f6-4376-9767-2d56afbd9556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb586a66-b4fa-42fd-901b-699fbee9c6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc33f27-182f-484e-b49f-e8bfad1f1055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0499949-5824-46bc-84fc-6b5be7b752d8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b95361e-90c0-40a1-87b1-ef4690fd96fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b411318-9954-48ed-9682-0413b7f64f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a373faa-fb92-40f1-aa46-ba3bff0ca498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5eab3a39-bbba-4e1d-86d0-01907283c879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4faa34-676e-4063-ac37-86dfb7ef97f5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b6b6c8-bdf1-4577-84a1-8c7d5a894f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a60747-6bee-4004-8048-136fcc499999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451280c2-c6e3-474b-85a8-4f9f0db5790b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3dd36d-e66f-4803-9038-8351279f5605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a250c3-b958-4007-b280-310844fe313b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5155b919-2696-4e48-9fcd-d23696f5c4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63cda859-5584-464b-aa7b-100fff1c3802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e19910d-c8c8-4fa7-b250-e4d2e86d7268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a305042-838a-4158-8dbf-24dab54860d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547f803c-aeac-46c5-85e3-251c403d8615",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc94105-25ff-4a3b-9fdc-6f5653b32400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439ca9c7-b03d-40f0-b5d4-c79ea0bdd896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c45208-4b68-4289-9deb-86a62d5dab14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "80be804b-13a2-4e3e-9c0a-8f0693f7afd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16023df2-a8ac-46e0-88ba-7772087c4ba7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027c7f75-f9f4-4452-aa6c-172b8b01efa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b646221f-90eb-4f96-b4e0-ef9e297c4194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245844be-8c97-417e-bdfe-883b59fbae9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c303772e-4fcc-40b9-b4e3-0485df5cbf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40113f6f-0927-41f9-88d4-3ca737abcd53",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5225fa8-a12f-436f-8edf-729feceb7d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4dbaff26-d061-4833-98f4-09871f1b9b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652e1528-baf5-45f2-8515-591af3a722e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5523e8-1284-4aaf-b5f9-16d197d6cbf0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4b55ed10-495b-4df1-ab77-985d258f15e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc67e19b-9d25-4b96-b881-c944bc56414e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a46b88-b9d9-4974-855d-e7d0959c7f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5a611de-f6e7-46b1-aa50-2581ae2f0d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b72489-356f-445b-8a5b-63615ba2f70c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02a1698c-c80f-446f-be6b-aefde67f8a5c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9160b649-d446-4608-b63f-d8cc1b7939e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5853ca60-4404-4a20-8751-7027ed0afcd9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "586a0d1b-bcc0-47b4-b038-b700f8e650fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7215b9e9-82ee-4c1f-baa5-60d0fde64a67"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3fa0f6d8-0bd1-481d-a298-bb67cbefd99c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66b3f49d-a575-4b6c-b2db-1de84aba82fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f73f78b9-6379-4642-ada9-3435ce926f8b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b68e81ee-95ab-488e-95d4-a1b7f85fe3b0"
                }
              }
            ]
          },
          {
            "id": "644803cf-ff89-42b1-84b1-c677cf3ff011",
            "name": "Positive Testing",
            "item": [
              {
                "id": "42b84d96-efd4-4f55-99e1-782bac4d638a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "48dc1a48-dd2a-4195-bc9b-6b95c1c125e0",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac69a4b-3f00-430e-ac21-7f56ec741c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fbfdebfc-712d-4100-8692-c173b02c18e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f00400-7b53-4428-8a69-d9089b85bb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbeb7287-d1b5-4963-b928-88ff25b33ede"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58baf205-b721-47ed-8d0f-c4ed76ac71ef",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b95b7b6-6696-4c29-a240-df63ee748f36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "750b09f6-39df-492a-8ffe-5247078eb33d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c004e01-638b-4b15-85b9-2da835ee8327",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f913b3e4-e9f1-48b2-82b4-2d551e502ec4"
                    }
                  }
                ]
              },
              {
                "id": "c5364533-61c7-41b7-8ebe-383e1fc5c0df",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d85d6460-ee11-43d7-aa8c-025f0deba79d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bae93cb-8a66-4eb1-8daa-d74a5e6d8124"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "909fb16a-1305-447b-8ca2-3a98449d42a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b87e0c94-b9ff-45eb-8060-56675e1e0de5"
                    }
                  }
                ]
              },
              {
                "id": "7271e8fd-6284-4546-87f7-f080880796f1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3c434fc-4483-4bef-8770-8424699fe7c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d76c0117-0fb3-4dd9-88af-5cb341e3b292"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c38846fb-17ce-450f-8a7f-5303ff8350a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "51194b3b-9299-44ec-9acb-e5248b7633f5"
                    }
                  }
                ]
              },
              {
                "id": "ab0124a1-d4ea-42c5-bd8f-5c4994cf493f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49fb94ff-f50f-4a56-94f3-e8855a67a06a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d232a20b-1f7d-4917-a5a9-e74b871db246"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "029e4b67-02ce-4db8-9538-b5592032f5cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9f7896d7-5f8d-4557-ba46-1bcdfc00bb0a"
                    }
                  }
                ]
              },
              {
                "id": "8f4e785c-27aa-4eb4-95a3-4637854f2246",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1aa2b92d-d954-4a5c-8748-a74a01e24448",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b42a095-94ef-447b-b60d-1e77ccf7c982"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b78cd7a0-f064-4338-b375-67f097554aeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ae1d018f-ba7b-441d-ae64-a316d0a12cd2"
                    }
                  }
                ]
              },
              {
                "id": "1d02ea6a-28b0-4294-8c3e-a641a4a07b54",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c676108e-d8b8-4187-bbe4-5fbd0bca2ab6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e52bcd11-5330-49aa-9dae-51a91e4053bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e95b997-f78c-44d6-9d2b-9a1de28f4e64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fee3ce0b-33c8-4ac2-bc07-fe9616264c22"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95e84132-2fb7-4f8b-a2b4-6a7c28bbf4ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c068789-8788-412d-9225-fe66b2714aeb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "84f27259-55ff-4c69-9bcd-51152776fcfe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "843c2382-8a3f-4d74-ab7b-d15f33bc6dd9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20f7dd52-22c3-4b10-ae7e-7e28ee0d992f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ddb76057-ebfe-4649-aa52-9e08da84ef0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dbf2181-f64c-4991-96a6-d3c24a778500",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "398c6c6b-e1d2-49b3-8d95-a8aa8f333be8"
            }
          }
        ]
      },
      {
        "id": "41f80f0c-3bb4-496b-9dfd-b90a9931407c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "10df0dc1-aa02-4435-937f-3c3aaa54f295",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78c49ecf-13d2-4d05-9b6c-c3e7953371c7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "50c706b0-ddf6-4513-89bc-86650f9a666f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c76bb1d-4664-468b-a10e-72e9937637a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad823be-93de-48f6-b0ee-1b828e305eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d757bb62-9d7a-464b-a1b2-74a7d99d76c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a29410ed-1d73-4ad8-899c-a820eeb9558a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eab502b-f177-48cc-9c19-80efc9b0c2ff",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b99a57-1779-4c3a-ac24-411f7a51823c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8407e7-6c33-42f3-a80e-75dcc3d92a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc11495-436e-473e-aae5-635bd53d18ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ebe9e8-ee28-4d96-b43e-1ec392d030f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6c748f-79b3-464b-99cc-49a396c9f64e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a097866f-724c-45cb-b15c-ff7ee544be09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25d0a70-7b7e-41f4-ac76-90cd8f217ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9a3fa3-0d47-4550-8ccd-f833a1df1e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5211847f-2c6b-4a68-9420-ca23b3db5c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0312d8-e9b0-45bb-91d9-104b3e658db7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac66a1f-15d3-4c65-a2d3-cdbf46e35500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9978f275-e540-4eaf-aeb8-1d15183ecbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8684ac49-91d2-4eb6-92b2-bf4bf4f57eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f378bacd-fdbd-4cca-a2db-5682caba4440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc64924-b572-458f-b99d-dc0cdcd01922",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d146d0ec-2027-490d-8d4e-d0fb9ec5310e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3edb66-af47-47cc-a307-e8919925d360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a9eefb-4f83-438d-a217-5ff206a3e5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c21a0a4f-4f1b-4166-b493-df59c46955e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81044d53-18f0-4741-9491-fa82951071e6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a4ab28-0bc5-42bb-8290-eb5c5d6e1fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b23ce9b-b8e7-4ad7-aeb9-8e54ff3816f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200ee224-30c4-43b6-86b2-99805b8640f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4546a9e6-1554-43d1-a0a9-c25352fa20a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23439a5e-1657-4aa0-9a2f-2b5a083bfa52",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e19007d-ec7a-4f58-9d7f-43cee07b6e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995ad952-15c0-44c1-b358-85f78aebdd9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62ef07f-61f5-4326-ba59-bec9afe209f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c50a5df-4998-4dd9-a7ee-1221482a24ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f9c4c6-4e3e-4247-8f86-3716f2a7e1b2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62720a4-d72e-4ed3-bb3c-c9a5e9fc0f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87ff3ee-1bb7-42a4-ac39-fb5cfc9169a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468ce8a7-008e-4fa7-9bcb-56170b57f3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fcd8661-6e38-42a2-af14-a075d9caa275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3532269d-c297-42e6-89d9-10a126321f86",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7dbc63-8bbd-47dd-acb7-7e6af4012465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5754d182-25b7-4b1a-b76d-c6839e617fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c420f4-651d-48d7-a6c6-22b3697997b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d63edf4-4a2e-496d-a449-bf92a81a2cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0cc45d-bd2a-44f5-907b-2e9e1935ccb0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec4efbc-7a73-4a20-8370-9508acfbbbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a0e2a8-2306-4f72-9f1e-412719e72d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38856b1-e753-4b13-9db5-e29ddcbc512e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9947d2d6-c091-4b35-ad20-e7e7db4b8cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8633e0ca-ff15-43b6-ae2b-56694d45d8fc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ece6dda-f1b3-44da-93f4-d74408cc4d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75dd703c-0b01-42f2-9bb6-bd7213b59c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70254169-676e-4c1e-aab8-88efba5b7807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb1ca1b-59e5-41b0-982e-ebcfb03bfafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1e687c-69db-4a3d-90c9-64250a49462f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33856402-43a9-464e-ab0b-d2e308807171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330af8e4-8792-425b-9a40-274b0ed294e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d81f4bc-2db1-49cb-9ba9-76cc683cc081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f50634-c72a-4f41-b6a6-92ba0bd09aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f007a6-fa25-473d-8049-841adcd53e57",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb41bcc7-1def-4188-bfec-33f0fc831296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5309e31c-3c14-4c87-bcac-1622d12b951d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31639f8-2630-4adf-9c83-45c5d9d253b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1721e7cb-7173-45f7-8144-0dc3d575ca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037781a8-6444-4859-94ff-e73c42c2e264",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca10337e-45cc-43e1-b6c5-be5c0eb50c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b0218d-fbc2-45b7-b142-c7162a5c2494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af382135-f686-443a-95de-1bf09ccbf609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "21493561-5fb6-43ab-b908-1ff46899e278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91abd5d0-8726-4d1c-ba93-79b76fce36ff",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c0a57d-d381-482f-bf63-d486643e55cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12191538-75cf-4226-82b3-d6bb0aa5f3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477bbcee-acc9-49db-a51e-78432fc41f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "23be135f-1955-48b8-90ff-8e71da3b4020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71f3d2c-dc89-4533-b618-3e59c9083888",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f866af-f232-4c67-a71e-cfd8b4ed2e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c678f8-1502-45c8-8a56-cac0a4e48a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4044c301-8a2e-46e8-a110-1106262369e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "361c1b15-c3c8-47c1-b970-152ee33d02e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bf1236-58da-4906-9448-404069c70a54",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198d2729-5bb4-438c-917e-612252095b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739a7250-7511-473c-95e4-d67b4792c999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3059397-107a-45d2-a0ef-cc91cf5fc867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b09e1dd-6ced-4725-b0d1-e728f56447db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4593748a-0dc1-45eb-b2db-fc1450e245c9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29d446b-a608-4c8a-9b07-99e0700b746b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9932d5e4-666a-4a58-a65e-cf9662b6ed22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6248cc24-f6f2-44fd-92b3-5e012bc808b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1187c3-225b-4017-bd82-d21e44821318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b1aac9-8c99-4677-8b1f-a22e99830f33",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c9c354-45ab-42f4-b4a7-1bb79929cc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f25d37-8906-4889-b817-3d04f40e4dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93835625-3e24-4bd3-8541-2d8fd19bf357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88104ce5-d776-4e40-bc0c-441be063f9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15af9707-63fb-4a02-8b67-7e81dd13c293",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67002a97-a94c-49a3-8bfc-63af63318139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38be0567-934c-4ee1-bbfb-dc05cd127aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fca6634-cb5a-43da-b6c6-a68cb48b3688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b64db8-fe9f-4799-be22-9c64e5137f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9261d66f-78d7-4849-b3c1-3f7692eb5aa6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe2598d-7723-4f1e-a9e3-39c4f822f4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77694ce-5981-4aa3-93ef-f192849b8bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ec5c2a-c1c8-40d8-a356-d937b542df78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac14cd8b-9a53-49e1-b837-23c3f7de509a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caee753a-9bca-4ac0-8f76-293a926af49e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3832a580-348b-4390-900a-a4e48afa0b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a27ce3ca-074e-468e-a5f0-1cec9801342a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67056649-1f47-42fb-a9cc-69c67b1fa973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49f9ece3-cda5-4431-afaa-21f0175b25d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e202db06-fb41-49bb-9683-a5c4d5b90b12",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14761cab-6d06-4206-8bc0-30b2d819a686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0010e90-0241-4ecd-8a4c-dc00ba46a9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd5b790-fc20-4967-8aa9-a421bbe8d4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baa55936-8373-4a0d-9133-df820bd56fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb71481a-523b-416d-8dc5-163897a9677c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c591ca65-fdc8-42e1-aa16-b532711c4455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2bfc30-43c6-49d0-8214-bf67d61f709a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e70d554-f9ce-460b-b1b5-ea6d2aafc56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93bc006-764b-4aee-87b6-76d1f85afb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939e9982-1292-4dcb-ae2a-fa18e4a69980",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb6171b-f630-41f6-9530-31e78e6eabd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25771dc-da4a-4e42-968d-31389b9f146b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29729282-b881-4dc5-b9bb-2e81cf163e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abd4fc15-5ba4-46be-b775-6d09e7bfb629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561a7b29-4d23-40fb-9bdd-a819418daec6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72abc798-7d48-4ecd-b159-a6daa0094179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13078b3-eb36-4ad3-a146-f6c6f121fad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1b4a4d-6397-4baa-844e-9357d1f23202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f35d06-1716-4e03-8146-04d83ab6e636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8127cf6-680f-4e2c-bc24-e7e9b8686892",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189431de-93c8-4904-958f-5ac471b8438a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e613673-cab6-4209-bcca-14f4aa7b0495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23b0130-e83d-456a-9c5d-8c00e510c481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa566302-88d2-4c9c-95b6-7a2036ae359e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c07a3d-31d6-41de-8422-7c05708e723f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2090ddbd-5e94-42da-a53b-aa0390e4a1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8b9121-813b-44b8-8d56-0e599e52d7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79525f66-c26e-4088-a016-5568e88a4a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb899d19-e2f8-4a0b-b698-17da090aaed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e70bce0-496d-49de-97b7-82c3327122cf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f91f74-7315-43d3-bc8b-204e22850f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0e5626-afa6-4cb0-8a29-85c10e409463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830cf138-d360-41f5-a687-a99024dc377f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "577db318-94ea-4106-9c7b-f72ba509d95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d961346-7f89-4151-89fd-1adec2478ffb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de12a7ba-eee2-43bc-81ed-d8b341407789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7fcbf7-b983-46b6-8701-9689ed82ef8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7603fbc6-8531-4282-883a-3c1bb65538b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60c7288a-2717-4799-b011-901cadfe82bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293c3cee-ddc7-414f-84c9-b9af6d51b09a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60551f9-5577-4475-8137-292ef6d22d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8bd6a12-fdc5-4c35-a263-9bf6365c200c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943e5c7f-e27f-412a-b449-44e3270084bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93b61915-71cd-4f18-b3d9-2509896078ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e658156-30dc-47bd-843f-102186e6bccb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3307a25f-1adc-447d-b760-bd0ac7563f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd557f2c-3187-4b0f-acff-e6fe63410208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f95a57-9d2e-4d9a-a5df-15b96435a926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f941085-83b1-43d9-8be4-f848c1dd1477"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c77f44e6-150f-495f-ad5d-d84bd21ddda5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5af060d1-8a68-438a-a88d-4cf0f9e9b637",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27277eb-9832-4e69-83b7-bbbc54cd0af6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "376a9187-7e81-4b43-b7f6-2e6edcca4f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85e4343-c589-41ec-97b9-94256ff6d00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "687ea1e0-02aa-4f0d-b3cd-03b3376ed5c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b8f4f7b-afc8-4133-bf7e-c9539b813f9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cb308a5-9658-4878-a694-ae3b68ce2aec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff25dbe9-f038-4aba-b3cd-5bc33ad76ac8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb1669a6-91fc-4619-b5ba-46b8014a766c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c7b205a-a5ea-4854-b828-96c2a07aae9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bc30f5fb-8931-4af9-8757-c762451a3e91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3aa12f14-12ce-4cef-907f-a723e967f40b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb6d76ad-04b0-4ea0-8928-e768e4bee17f"
            }
          }
        ]
      },
      {
        "id": "ec769d46-e0cc-4cdf-b41a-bade2ae5d7ae",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "7a035e9e-e98f-4b51-9a23-7052cc2c6a11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5afef71-e839-4226-b48d-0c89166f4974",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8871ef70-f52d-4b58-9bf3-8d11ec14ae6d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e709813-b8f0-4720-b305-ec992c4ca3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766dda8b-43e9-45a1-a05f-80c2090c8c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158d82bb-ad39-40e0-81f5-11c446ebdaba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "767c1412-9ea7-4a0e-8b1d-a695b5d1ae9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a721610-04e3-4372-a449-c80c68408a42",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cbf91f-273e-4036-beeb-4f695de1b46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f213e709-a3cf-4ceb-bbce-65122737ac5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d350dd70-9272-44ee-a591-58a1c04c1419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7229731b-016e-4f7a-a764-d701b3208602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a31c34-2905-4988-8dbd-64e67e0970f2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f0d396-e63b-4c5b-b5e5-f22eefef2c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244b1c05-66d0-46cd-bc8e-16606b3da09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4907b5-42b7-4ff7-b6aa-65591136ce54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bae36f37-92b4-43e7-aeaf-222b71a444ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229824bd-21a5-43f6-8917-68564863a391",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f41fc2-7a5d-486a-985e-e575341ba666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2039093b-60d3-47c5-9087-abb4ed78010f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f851d9-70ad-4a7b-9869-11d07f40ad04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f590940e-b137-4007-87d6-ef24723727cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c262aa-bb41-48a4-bbb2-cfedd0d4bd18",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba003ee-bd2b-4214-b596-f3e0274967c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f477ff-2503-4f08-b132-1edccfdae08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bf393c-045b-4922-ae41-be014e2713f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d880163f-bbfb-4c2b-aaef-ecdb3f392de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b3b9c8-3552-4dd4-b51b-8a567bb4a5ab",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aff2415-ab46-4bdb-a2fc-f6dadc7d19db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac7d8d2-9e58-418b-8c82-9e90740950fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0383b897-05a4-47fa-9515-21a3a8610937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b27eb4-3ff3-4ccf-aa01-09055b469af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8dbe77-d51e-4fff-89cc-e3fd76f9d860",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088f9309-c176-4808-9d39-65a58f48a886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a3fd2e-f0fc-466f-bcde-a8fa9c81c05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b67ddb8-797f-4173-8c1f-e533e696325a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6343563-6437-495d-983a-d40892a3f868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5167a894-aa22-40de-81f2-9d931e9f6036",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746e7343-2045-4420-ac92-55cce9aad384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff99200-3310-489f-91f8-51eb7712116a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c14bdb7-cc04-4c16-a0f8-239f9186bed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee84b1d-aabb-4e71-b79a-90b5ba230d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a76f50-9728-45c3-b0da-02e2fb676f1b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c868b1-9ff5-4f97-95ee-0c699594d51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db00656-9861-432f-b385-ff757fc0d90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e768a8-ecf9-45b5-88a6-f797854dea71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf92e8f-c46b-4b98-a0fa-e1e6d0660138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed872d33-b516-485f-b98e-da290f4cc46f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27521eda-ebfe-4216-99fb-e01e8349bc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97abf764-9ef0-48f1-a90a-3ffdf7d934a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b97e957-407d-4cfc-8993-cbb8f6768e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd504c6f-b73f-4d55-93a8-93728226091a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e109da-8efc-4397-9805-392454cc81fb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c3191e-9bf7-4ffd-8918-3da5943f477e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36c739a-1f71-4419-b04d-2ddcdf21b0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f550c88-cc62-4fbd-930d-e2209f158392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a035812f-d5de-490f-a81c-c14b2c0200e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbe468f-f4c7-4f80-a468-48ce8ef4eceb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792e32a2-9f01-4a7c-8181-a9b41bfd6e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e91eb8c5-0915-4a79-bee1-6c18d50e0e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0949dab-e267-477d-9d6e-6ff553605d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a726850c-4aae-4c70-8396-f6a38d45d96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9931c8-e1fb-4685-aa8b-c85635aae2fc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90df1d72-cd68-4cff-acf4-12eae3b28209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45731af8-da78-4025-9c40-88f648cb4b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b428e428-aef0-4942-9807-69f937d4fa3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1273fbd0-67fe-418a-8f14-b85a6fc03205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3ec0d8-960c-4142-9396-43503ce5d39d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747d9b59-494a-42ba-a119-a31a7b83adf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a18b38-983f-4879-bfb3-b01ab85e8c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c792ac4c-27a1-4948-b26d-3fe542289ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf7f071-b8be-4ea2-a630-4e5e32cfe49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28757f58-105c-4be5-bc5b-3f65612672dc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032a1fb1-8146-4cf9-bf11-e91352e857b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e755c1-b482-4443-bc9c-a6f98987ae70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6ef32a-ee11-4e8f-b9bc-157f315996d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7255753-6e6e-4838-8ae6-cdce40b8c3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d105c69-5afc-4cb1-adde-20a8111abed7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b3a1b1-4746-4d1f-bd45-4243bb68c768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be982c7d-6903-49ba-88b4-c7b368761624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac910c3-623e-4a24-a3c3-ad93479a3a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "25ee93d1-60eb-4bb5-8c02-b902866f40ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc9ca10-e769-41ad-84e5-4689f4f507e6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee65663-3ed2-47c2-9b29-77bda4a273c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fb4080-f02d-40cf-ba89-d1252fd8148e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bce4c21-f82f-4141-85fb-4920e443268f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4166cdba-8343-4c43-9572-6a42c0928376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd42047-e306-477a-bb52-6f4fae11cb78",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d388f4c-92dc-44e1-ad26-83d1b7004cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06d533f-d380-4318-a664-0c3848228410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0992b4c-d5bc-44db-8096-352c7659e335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "99993312-817c-440b-9e98-7a281ef679f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d97faf2-f3ea-4d76-b79e-804e322a66c8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a8b58d-64f7-4a77-a3da-8991d28e2078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5ac40e-99c2-4bf0-ae2b-bd8935214d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb130ac7-c7bd-4a9b-a405-c1b756236616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb9bac5-5113-49ce-bbe9-498cb9b6412d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed1ef85-afe5-47cb-9963-64a3bf1dd91a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12838289-74aa-4d4f-b4ba-a30848f6756d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c7714f-59ae-461f-a2d7-a20b5e6b265e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786fa478-7990-4a29-8a3b-bfbdb1d2f3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48c8589b-1572-453b-99cb-2f17064dc46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a247e1-cd5d-46a6-a181-b2b1ebbf507f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c1fc83-6feb-428c-bc1b-1b73fa4505c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cdffc4-d514-4dc6-b88d-e0ffbaf55b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99eb7c1-b2d5-4d07-9e9a-b16eecb66cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca68d9e-7a81-4033-be69-6bac5d778971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9997219-691d-4718-912f-884e18dc3b70",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166f7314-a573-4185-b9ec-e18b257cfebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20556c7b-b702-409c-b814-ce0b4cec7d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114a5f07-c026-42b6-973b-74c2eb7ec2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c17a928-a84c-4d62-abc3-afd0623a53c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35e910f-c704-4ae9-abfe-881207a633ca",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3537b88b-e4fb-4b75-adf2-f7d8d2a512ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3922e0a0-1c33-4656-a60e-ba888bb8c626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2793d7-f11d-4108-a24d-b52bb1a6a80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9badf2-773a-4524-a3d5-0e5f35ddf645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8549da9f-5dfa-4518-8db3-81ac943bec2d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1738984-2078-4cc5-b979-c584e0e56b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90f1354-2137-4bad-b485-d91ddacaf640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbede1c-e3a8-4601-af12-850eb32b5b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fec47fc-a014-4048-889b-725c44bbc5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49447212-349f-4807-959a-e6696e7fc5d2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700a2178-f425-40c2-a680-618c188417b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c6a2db-61a0-495e-88ae-04db2b6ef158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ceb248-4f38-4b5e-ab09-96c86b416f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f18c92c2-d2e0-48e1-b878-5228da649eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a047f2-068b-4103-8d26-33299831cf25",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c382c6fa-eaf9-40e7-8ba6-bd2b334e735a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a64879-a46d-459b-9ea6-d1d9d2f20138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f9d16f-2a61-44be-ae56-4c598db07160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eabf4d8-143d-494b-9571-6a55d21da7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14148e6f-df67-4c5e-b75e-d66a79c23bfa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02037aaf-d8fb-4a68-a83e-3e395ff9afb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcce5b7a-5d86-4c3e-972b-7f6fc7ef570d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69805cc3-a90b-4cce-b002-f5aa32dc6ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d79e4a5d-ea85-4bfc-845f-b5b43c72f0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33876e1-b46e-4852-b655-d6f105dce394",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ff3412-bc48-4e3e-8d46-70cc9d832374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96fa4412-ec07-4635-8109-b2e851eb8806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9100b603-bf37-4a1c-a1fb-90c86c6b66bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af21fe8b-56bc-4f3a-9e45-4d2bfd90eeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef5aff4-d9c8-48cf-b422-dbf3e4da9d79",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c857a25d-3428-49b9-b79b-ee76a0d95462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6a5947-2959-4f97-8468-c4d29e2fc2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27dd57d-ce43-4b5b-9279-d50102e37bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85dc1bb4-6f3e-4681-9670-2dcaf79ea7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17185212-b2f7-4c39-af3a-d6fe11e059ac",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e70cafc-7ff8-4baa-84aa-a90cb9cad85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6fbc9d-e981-4b1c-a784-a0ed4eb46e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc48020-58ef-4ba8-ac78-e8008db48d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2acdca6c-9a2e-42e3-a3d3-88fcf8c46cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66c11e6-9c7b-46fa-b342-2b94fb57cec2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be549d54-dd02-48d8-bc5c-20f6be118c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96007fe6-9a11-4bee-a22e-69d69acc9d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9643b67-7c72-4a28-bda0-92c4910c8753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e062595-09ea-428a-b43f-347a9a3419ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfb23fa-b9cd-4f22-af3e-9943173b06ce",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafaf477-a81f-43b3-9873-30f9afa78358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2f40a9-073d-4b5a-b35d-d579c989f6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda72076-5d25-43cf-9903-7dd52b66b8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfae07d-76c9-4853-8183-4cff55f7c650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2ca26a-34bd-446d-9420-6cde096fddf4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4cafde-9019-441e-9f4e-4f7ec070ca1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d293975e-1e4b-42b4-be42-333d8fcadca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934a6b9a-2fbc-4c10-85e4-5983d0464533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f661c9d1-d648-404d-9be4-4596d5a9de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cc1a92-ef11-4856-a170-cc660e1f9c4d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b858085-ae44-47e6-a23c-150954eb0d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d530ea2-5eaf-474d-97d9-1b22cfb6b97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a34341-c0bb-45b8-833b-515c7c76ba55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2d6e91-dc78-4ff1-87b2-0de456610415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a937a7-eaea-4286-a86e-a0eddfe312a9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd19d392-64e1-4a43-886a-b5c7596230f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5249dbc2-f65a-4722-87e7-6053c95f93ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0a38db-14ee-40e0-a79e-467c9d281bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4437a364-9c18-4309-bc2c-0cb9c02a4199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5868b8f5-7cb0-41d7-b70a-1d6b8f8fa0d8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeac7c78-9a80-45d7-9a94-c63b72b91094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32300e33-122b-487b-9d78-14b50fe91e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6da2c4a-400e-4d4b-9e5c-0a85c50fae59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b71c2b6f-afe0-424b-97aa-9ed473509054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf7a187-2f94-4cb6-8b5b-a3730f318f2f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e40d60-b1ae-4bcd-9307-bc0ae6da6c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda8e49a-47a1-4202-a457-fed5fec3b695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b337ac-e77e-4c84-8270-f399d632bb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1528731-7538-4031-a474-2e3d2cea909f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a429152a-efa2-424b-b12b-b5c6871911a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5600705c-4dba-40e7-878c-cea016114739",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7ac822-c8df-4369-ab55-66780296a9ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "57271b38-6304-4ef4-a613-da4c9eaf0589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32589615-1d6d-49e8-a565-ba56bc51e674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e0ea63f-43b7-4ee5-a694-76256b600dfa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edb2b207-e378-4681-b463-f9202cb84e06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5479782d-320a-4803-ae34-49ebb58ae5b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e7152ed-159b-4df4-9100-97f3fe3a01fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2605c07d-4e00-4a0f-908e-04d052d2d8d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "501c5b3a-9084-49f5-8b46-659891b75a6f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "26be59d0-43f3-4449-b6a1-2675b83adafe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddf29a6e-4966-41cf-b2cb-86d2d11660de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8c50f1c-5ba9-4c2e-b620-2b6d323f5297"
            }
          }
        ]
      },
      {
        "id": "daf8f034-a44c-44f1-8958-041c60ff6d50",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4a032e61-826c-41ef-b7da-56dd0ee6a4e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a95c10e8-7045-4ba0-a9ad-66faeadb8fb3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d053ea1-b931-4bb9-a091-41c232a7a3d1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030230e6-b8cf-4b01-bc56-4ed8035742b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e617d3-b5e3-4c24-a1f4-1588c891b825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa65adf1-df49-4d4e-931a-5c9481760840",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46920ce0-f309-49e0-86da-bd4cbe6cc307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ee26cb-d12c-4517-8fed-12fdcb2393e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f40027e-f5d8-4746-803b-9dbc19635547",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad93ab1-6f37-44ee-857b-5069bfce64cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b731298d-9795-4938-87ab-7118f7073d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a119012a-0470-41cc-816a-27e748f86b19",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fba696-9ae7-4cee-9800-ca021f5cfa59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a52c19-098c-488b-a79c-a075c0ee18c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e52d24-ad37-44e9-b037-a35e327e8af6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149813c4-effc-4b0e-ab5e-19b4cb2e6855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9feb32e-1a43-450d-bd28-68d25ccb0e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058d86ea-9c97-4f55-b0da-f1a5b4d110ca",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d096d52-6522-4ee8-be3d-c78a7c5bbf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024340dd-c937-499d-98cf-d1afe03e756d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a37dca5-8bec-494a-af59-8f95b77a3433",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c604dc2-878b-4033-a2a9-fb5f49b492c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af09f0bb-929e-429d-919a-66699402dba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead8e956-aca5-4ab2-89dd-cbdfed76aff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1cdcd7-7cdc-4910-a642-8783fde68b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a6caf8-a9ee-46c3-9a94-4f9d42350dbf",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32fac69-82ab-4063-a4bd-b0765f616d71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc787ffb-ba62-457c-9019-c2bc8f6df5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a22c7b-ba50-4ecc-827e-1aa5ce1e4ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c33da6fd-ccb1-4aa1-95c2-e96814050ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc95759-0e00-4b4b-a7d9-02d80c06aef6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b01f2a-72ca-405f-aaaf-87fe351034e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9725e7ae-2e88-44cd-9a81-e50ffcff328a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b9752f-65bd-4d8c-8d59-9aa75d859432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e262f85-c19b-4c02-8e53-e9be1fa67794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce6ee85-871b-43c8-952c-bcc899c777c6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc21fbe-46fe-4524-8319-3c9dfe9ec6e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136600b3-7ab4-4287-8784-60b78ceece59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d1a84e-5790-487a-9384-efade11addd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a955e397-1663-4266-83a0-316020f50faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086812c1-558b-4a0e-9ce9-5fff6faa2a8d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693ad111-e437-4a5b-bfce-a8f0f095c2ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b624da7-c14e-4f65-9aab-35d1107ea9ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e12534-d37e-4117-98d0-f7545b751dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8aecd9-fd12-4509-8894-304e8205cd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c4a65d-d6eb-48cc-8a36-d4dc7476fdcf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f01138-b2fa-4377-99df-684b2141b6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb07cdd-1d00-4e8c-a3e5-118e159e3b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606ccea1-2464-4ddd-be6c-037f4e533f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f2b0c6-ca28-40a3-9eb8-9b930cd8ffb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4d5e06-5e03-44cb-9166-e2f37096a03b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47834a2d-ab81-40b6-8b15-13ef06acf7b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a24363a-ff45-430d-9b60-13f6848dcacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e883c9-2572-4089-b5e9-e1b54d965efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2bbbcd-57d4-4ff7-9ea6-6a316aed1a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b47d46-a8d3-4ba0-bba1-7197ea598661",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9d80ea-ddff-444c-875a-6e567c7bfe0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5dc8452-93a1-4805-920c-17b813b0bbc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09476f4d-636e-471a-aea0-804dd9f2af0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3005e3-1c6e-4112-88c8-7879c9a8c7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c21eeda-962b-4422-b299-1f6953426623",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e4a648-86e7-4f01-b456-112078462aee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c95c3eb-fe50-42a9-b768-05fc1e247394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a657d2-a389-4e2a-b4d3-57a75cf9834e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4411c9af-60d4-4583-adc7-c32cdb807076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3eb270-b3be-4a1a-823d-c291b0903fcb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba28f69-ba04-4d10-a5bd-3ebdb358b12f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4710c09-ab6b-4789-9d58-eae1dd13dbd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdc9a73-9f3b-4580-b02f-74a4c6a166e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c4bdda-d5cd-40ff-aa91-e2466e23ea86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16340c42-26f1-43e7-8af3-bad8aa220599",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63c5def-6747-4b6e-a373-38a88136fdc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae253380-b0d5-4726-aadf-ecca90590704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c5ce19-0aea-4302-8284-99c7fe87a5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d504537-d514-4d6d-abdc-913b0513da67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b133576-9f44-4230-8782-cdcae7c900d7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889d3201-93ba-4891-b8ae-2fd84a267355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d85de84-1535-400c-a442-52abe28b9a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8f5e5a-07d4-490f-825e-e8e4714f890a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63a0c7f-fe34-4e3f-ac27-c02e2666591e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e5683b-3eee-4a12-8155-5970ff71f570",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ab3b7c-2c16-446f-9d3e-4bb2f3a1181f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad720f46-28c1-4700-8bb8-55dbae5472f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a93813-496a-424c-99e3-e5de814bd7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a5da93-cb04-4a31-8395-485fcf9cb437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ec0306-6c13-407e-8fdb-4d84dcecf5c2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc96f8b-572a-491c-8629-f158894c8218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d95a11-acdf-4df6-a55b-c208b5d35214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3231a565-351e-4225-af3e-49605662492a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59f7b98-84eb-4518-bfef-ae16bea8603e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ffae0b-4e6b-4d60-9e35-434c581f50a0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8e2709-c0c7-413e-b003-7fccd9def38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b708f46d-de0d-4dce-a484-e29d609057d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0fd9dc-b722-49da-b0a2-e2de3b1c2458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb91d114-9b45-4d53-9081-ec33ba80e906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ca78e8-9d19-47e7-8999-738c7dfdc784",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc37808-04b4-444d-9d45-00fef7e4a5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1be4347-ab7c-4c21-b5d3-2e85e940c48a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bbc34d-ceaf-4140-8f9b-408894d816ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168f3a42-d524-4363-9a7d-f3763c13c8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448b6af8-2833-4e6e-a36f-fab1ce34caaa",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f3345a-ca38-4f10-b6d3-5e309ee689e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d67e12f-59f7-4cd3-a4f9-aa7420e9bf5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a65e4a-8df0-45b2-aae7-0222140993be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd975ab-a85b-49bc-9f40-d672ff07f568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19204833-1985-4895-8b9a-fa3d7e31bbe4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d84fb9-42b9-4d28-b141-46d25e0c2c52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ecd9324-00a6-4eab-bf89-d37185bddd1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdfda84-3ff1-4799-8718-0065261e463f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba7696e-b774-46f1-b8ae-622ad825a5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29049ba6-c61a-4611-86c6-5fd92b48dbae",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440b93cc-ab0a-454a-9933-ff736e969cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6234869-2eea-4463-a364-339651245a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a954f2a-9a1d-4217-900a-92beda095d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b4855e1-5ec4-46c7-a43e-bc19cbeca1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3940e2-2818-4aff-be98-ab2ec2b7297e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31b5919-6e49-49fb-800a-ff1b66dea20f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70f2c9d7-4b37-4881-9e40-9f2e413120b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be96be52-566b-440d-88d5-e0f3810e1160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3205027-688a-49b4-b38e-b6838485a93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880f297a-3701-4ac5-86b6-c80e590831a1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c139d58-2cde-4cf5-b335-dbb62d15d325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f634310-51c0-4ad8-8776-99af018a4c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2650e6b2-55b4-4f2c-8bfc-e517b095dc2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96afa381-313a-44a4-94b7-737ab04c3cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94082fe-3b9f-4cc8-beec-aa4adcfc7c0a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4736f58b-6d88-47f6-abda-7b2c52b8cba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b471fe08-3a9e-4684-b5a2-9d3e481b1695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe10d10-1f57-4565-b43d-f258b2c3fb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b115957-126d-4dbd-9116-62aed98ea797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec2e068-c4d4-4b79-b6d4-f14fff3de231",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f583a8f4-14ae-4811-a138-4bd342218f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3e7563a-0e0d-4cae-ab7a-7426d040a94c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "728ff08d-3322-41ed-8a1f-6c49c149df0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18b8935-64ba-46a7-9d72-77efe421ec21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241b56ad-bdcc-4320-879a-01cc2bbf7b67",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23f1867-b937-4a03-b7ef-0aa590838dd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a146c2a-c320-43e2-98a8-d350c6cc0849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47101aa-be33-4a2d-84dc-89d5d8ebd6ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e93ee78a-6d5a-4e2e-9b8a-102d9ec112af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973ce81b-2a38-449d-8263-f869318b1b31",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c30fa55-ccbc-47dc-8bbf-a659b79e92ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3be98fd-87d5-4c9b-aa29-7a3c0acdd56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bec53f-ac96-4ef9-a53b-2833bcb7292e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55aeddb-abb6-4e05-a611-872a9df9418f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288d31e7-f0e0-435c-9643-fcd218cac897",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3ff7b6-306d-43c7-a1cc-cd8d3356565b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a355dae-b621-4eb6-80ff-712e0341ddf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b430a27-0ef0-414c-b074-7c46e0b18e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ec958f-8cd1-453a-b038-d805cf580701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145f1220-4ad1-4cba-a0fb-7e850b071093",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7590694-94fe-451c-9003-73cfd746ae77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b443b56d-3c32-43ff-9d98-837527791f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357feb92-711a-4fb2-8447-acba6e997964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80f36c1-fd63-4a4c-9d03-152e17a3b010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f1593f-1e23-4ec9-8539-1df782d52175",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857e09c2-37cf-46c9-9f1a-669ad622b5eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790e807e-9e7f-4db1-a0aa-b43e0c191f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa96273-6f85-41f6-812b-72063dbde8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9af562-c0c6-4967-ac9b-a5880183b9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fbeb263-00e0-4bce-8293-f65495c77335",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4416e9be-a21a-48d2-9f63-eb2ddb03cead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5620515-0af8-4cff-8d23-4088802d839b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac584830-5882-4212-83ed-d7a38278a934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba4bb7c-9ea2-4fc7-8ac4-44edefe40011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180c8be2-712c-4b80-82a9-af694471d707",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260cfe56-c3d8-49dd-a6b2-aab3a878e417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028d4e53-e3f3-4e38-94c7-9693e1ebcb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc149c01-6a43-4885-8ef1-e82b976f6a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab64982b-5fb0-4b63-9b38-8207310f7ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f890af0f-65cb-4885-a579-14c180ae4cb3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b26f4c-6542-4822-8ed9-057a858bee6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3f3e02-39e2-48c8-805f-b7235ab64eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8f0e46-e2d9-42e7-872a-0ea9ab17f6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f714888e-1a76-4045-bd7f-8eb29601d172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc36d648-689c-423f-a2f8-ba93ef7386b8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6d5e3e-45a5-47b3-9780-e130af5611bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df31066e-c033-4c04-8c17-db938eb92397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e733b6-e0ee-459c-b418-4cab3a7be77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91349cc-8517-4ddc-b3aa-6cd78a74059c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02dde043-4949-477a-8e3b-9262b6782307",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8427656-d860-41bf-aec1-ad4cc7133b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c895e3c8-4676-420f-a4e4-d0412af7cdbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ace4a28-1205-4fb1-8fc0-0ce963976199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58de5be4-72bc-431c-b356-7d23177f45d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069c20e1-4e75-4f01-9dbd-ccc9eda66589",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08052247-31c7-422c-afea-938e20799cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3872e4-b5c1-411b-ac19-0d64100e26ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e11e959-498c-4dff-af97-19176f444626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6a59a6-8aba-42d1-8b9d-104aeb6b0052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94edab0a-be96-4d05-96ea-0aa12573c7d3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348e6612-5d3c-4bf8-99e5-6e386527ec41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4954bb4-b38c-433b-8f16-f9e51773a1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa162621-50ee-4fca-ab40-dfaaa0a70f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e47d3dda-c69a-4a87-b550-886c56e4ff29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffa2448-729b-49fc-a9d1-77d995c1aada",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c26f19-b6d6-4c13-b1ec-de8af42d942d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b8af70-a228-4a76-947f-ef7d4eb06c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e81efc-6126-47ec-98ea-b2e6e1656620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab14404-0ef8-4639-8d1c-3561fb44eea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78f903c-554a-4031-85de-4dbf7bae61c1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3335aadd-e950-4084-a258-5fe3f241477a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292b226f-396d-40eb-9d09-4005beeaa1f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626e000b-ca5d-4d6a-881d-e39baa6ffd79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3e8d59-fa36-4e16-bc53-accf0ff785bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcab246-4734-4f10-a9bf-9001c81f985b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a829000e-8edb-43e5-89fa-3c480473d3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d2588a-3438-40be-8b51-82bf094bf3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca7113d-6bbf-42e8-8bc3-6c843feca543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17576c9c-7f77-492e-9507-ab9262d0b148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebf6171-0b16-46c6-8666-8a7d10df88eb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b95c5af-6ba4-4c0e-bf7d-398aaa06f407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9eebb37-fcfc-436b-a74d-6c1397933808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcb95a5-c476-4c5c-9405-0675d5b64d3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a823db28-846a-4ce1-8636-9bacca502422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfbccda-d907-4cd1-930d-397ff9ed67db",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ab9d64-9811-44de-83a6-5b679b6d9b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380ffe59-fdad-45d9-9292-6c499557d585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28cf84b-d83c-494f-9218-c6699da9fd53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d02480-018d-4330-85d7-82376ee7f8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32205fad-95b0-43c6-aebd-cc5f7eb20496",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb36e480-b341-4a9e-9089-3b59f5ca39f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091ff9e1-d161-49c5-9417-7dfb3d96a3cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2c20cc-d003-43f0-bd58-1f11e9653893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7287baf-8095-4b35-830b-213e87eb4200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668e99f9-e14a-4e79-983c-f6bedd2170b3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b465d9-8ea8-4419-b88c-e718211ce8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc6b39a-a5f8-43b4-94c2-3cd8825c0196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae060887-1c46-41bd-b346-c89660495368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554c1fb9-6615-4bec-9296-98ceca2ce26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b5c2f8-dfb9-4522-861e-d3732bf58155",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8ceb9c-ffb3-480e-b9cb-e0b93d2a6840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad15997-cab7-4035-ae33-024c76e5eb73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5996d28d-06ef-4d64-99c5-124fd9451b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da6e4e0-831f-470a-9fc9-608933e1bf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d445fbdb-fa41-4e4d-916a-ef384b5aad09",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daeddc8-b0b1-4903-aa2e-c5c7d409280b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1de767e-297d-40ab-8cbd-2594c37f2813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab607366-f653-4deb-a851-9ed66e737b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f3a597-d2c5-45bd-b4d8-cad7ef5334e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7ac301-fb6c-4393-baf9-15a23d84d385",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8467db2d-3957-4206-9f97-1c4f6504de59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4919110c-d20a-4d58-8fe2-b170f56a285c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d276af7-5792-4048-b62f-22147bd7f6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254fcd58-cd27-4336-85cf-16ee093cc967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d65eb54-b28c-4a9e-8acb-199c3eba20f9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c22116d-738f-4173-b631-d32e258cf082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0d2773-28b9-43e4-9b42-a6f2c8c5055b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c78bb1-303b-46e0-91e7-7c195a4a0522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcec422f-6580-4425-a50d-0dded517efba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabcaef0-dced-4233-96d9-d552f8309ec9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffbcc9f-7a17-466b-8fcf-cc0f99bf9159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb5b0f3-2f17-4e64-91aa-60aa6c1bd712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a5abdb-dbec-4e85-bf64-82601430e871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915d8424-7898-4e2c-8ea1-804dbe882dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02862e89-3496-400c-b13f-ef403b004a0c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee74ee1a-ac82-4126-8671-b5014cfbc463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0f61c1-c410-4272-ad69-61bbd6d91a07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7c364b-21ee-4b40-bebc-85447f51a280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c1f0c3-c2cd-4b24-96e0-c435131b0c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf09ba68-620a-4f62-be5b-2d430cacf26e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9415b6ec-94ce-4021-91df-9586f0819d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0fd735-ee67-4fc8-bad2-0c30b443fd06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e187017-c38a-4392-a175-87e952081286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba07156d-d5ad-41ff-a9a2-ad3e528e929c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d55300-8275-47f7-b4a5-d49b25c542a7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bd9baa-3705-4b2a-84bf-2e39da172fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03125e2b-bba9-4f43-b886-e8c0b573fe23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a94a90-8c34-45c2-8b15-cdf648900769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc2b94e-e65c-4829-a3a1-7bb5ffb1ceed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0daf0cb-5b99-4be0-a702-5cd125292ec3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993b7e53-f40c-452d-b9cb-a8bef6a5ebbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a325a89f-808b-4a67-9394-6948f69a26af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ecc6f93-a02a-440a-b683-3c8eb3ebbf07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0bc69b-b7ee-4bd2-8e6f-73de1dabaad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c999a98a-bd57-4277-8d75-13d0b1d17a13",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5593c79-337a-41d2-8ef9-03e9a3d35116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b07d7e1-1140-4438-abdb-f52424d6c86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24fecc4-a502-45fe-894d-5e5a8f37bcfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec7057f-a255-47cf-8e76-6533565b82bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6784aa-34cc-410b-9e90-3c970a268d10",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbe6e52-222d-429d-a27c-86c8e61c7bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aaf26e1-43c4-4f78-aca9-e621caba0e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7880812a-8508-483c-969d-74bc91c087d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f8859f-33ac-4098-aedf-d52b3eed32f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a1ba0d-0d20-4d72-8580-a54db3effe46",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf1f554-968e-420e-85b5-11c52a2bd79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87ecfd7-92f7-4770-a78d-3cacd0369cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2081251a-f50e-4aa0-bbca-5b5795a16c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4581cdc0-d540-4a4f-b7d2-d38c685049ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8802955a-9274-46b8-a009-d73782eeb917",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243e8fae-3865-436b-807e-d9e7655f7164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077999a1-68c7-41fe-8857-2bc7d3d5e20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cdb3eb-759f-4982-bf94-0fc76bb8a558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ddbb77-af64-4731-8706-3fd145d53be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c22a6a-5393-4320-b50e-237b83208bdc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64e15b9-9125-4b7d-b435-f01cd2d55fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700b06ab-6e5d-4f2f-a154-9200ece1ecab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b732a82-00c6-4291-b2be-9524878e046c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f93f57b-0584-48e9-ab59-346d5474ecee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0268fb74-1188-42ed-9535-24fd1916c9a4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8711634b-690b-4301-84c3-69e9a7595b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "843c9adb-70ae-4698-b4e0-c08313f5d185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f664fc0b-0998-4be7-88b2-4a1ff12fc77e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4502c2-3850-4e32-b719-c497b23579a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f2dad2-6dd6-40e3-a02c-6b59351cc520",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3361cacb-daa4-44fa-92b5-bae1ec2166a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f89a2ebc-3f05-4be0-8aa3-937b4d9f3677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fa79df-af72-4f8b-9bfb-40bd69e3db3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2301ca-925b-42bf-9d99-f40839ae5b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ed58b4-db3c-4bf9-b7ba-9699f153f525",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436f34c8-9e96-4342-bafa-ee8cb7bfd9f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0190deb2-2455-4a0b-8c12-eb122b4d66fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ec0fc6-e055-4474-82de-91b50841f694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97a8de7-4adc-4a55-b198-66dcb432662b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c239df13-6573-4664-b018-7ade80342e58",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e88905c-5fe5-4ed4-aa8f-dc7e3ac944e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5064978-7216-490f-94b7-b9bcdef5456d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2133e43a-57e2-4447-9571-d292dcd54470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00dfa057-f5b9-4325-b8f9-e7ca9618d60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3086df-ad3e-497e-80d9-1c22b3bc2926",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acd6bc9-52fb-493b-bf15-ce53c2d18ed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8f290c1-9e83-486a-ad13-e8e0d90f644b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0ebe50-5843-487c-9b7d-55b5d9180172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f24349-3f89-41b9-8d73-c56de7f09391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef8f750-5b82-431d-b5ca-71cd26d5201d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ebd54b-0831-4c85-a0d4-478d1c1daee8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f965a02-7a03-4799-9d3c-6a4e1d519596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cc2ba3-2adf-4c94-9723-a040c665a6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb67c762-94f1-4162-9648-66ea395d5350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff293fc-e421-4755-b370-12a3ea67d564",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2703142-72c4-4803-8ba2-4a2f2588558c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6e99789-6a5a-408c-944d-c99847580515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6799a73-2f63-438a-bf30-bea77dff8ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f8e919-6f5c-40ee-9e1a-356e277cfca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ca9f85-34d0-4c51-9d84-ac4ab7587cde",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03b1c69-e12f-4d39-8b43-d462db8ac911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e18a56b-ae10-405e-b3cb-3a1c6b46d4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9538af-a8c9-4f8b-8b74-7fb20b0834d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3aba66-6498-49f4-a14f-142c4b834702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f91a951-8662-498b-809b-6c2e179f742f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123320fa-a982-4eb4-be35-857df2cb3b89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eb8bbc9-128e-4747-92e8-9f1b11589eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac120f9b-7c21-4e57-a69d-7d270edd405b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049a0f5f-4ad3-4801-b1e2-a91cd0723452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40b0d53-2948-4ba0-98ee-ca6e84e104c7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7066d7b-64ab-4bbd-bc79-b4f16350c7a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c80c921d-0d2d-43a0-b190-5f06416a7090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5245095-344d-4f7a-9142-65533421b7c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d725b66-8642-4c66-a10c-19b5e25c862f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850313c5-354a-471c-9a48-44d3d69121c4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f85fbeb-f854-4144-b0c7-31f6b5b37543",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ac7f616-395a-443c-bf5e-bc1d9d364d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cf1ca1-e86d-4ef7-9962-6237dbb0f0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9017f28-070c-48e8-8e48-d9733a5932a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8cd8f9-e8ba-4291-a60f-15e0ceb845c0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bee0ff-8ad8-43b9-917d-0bf37a9ea850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c95ae981-d3c7-4b67-9b7e-8410f9740ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2e6995-9a2d-4251-9111-a96e85a024da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7448b5dc-eaca-4191-992b-b68682faaaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa38d7bc-57e0-4907-9681-ddbb9a72c975",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b734dd55-b738-49ca-8220-cc6492bce58a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8539fe61-6c7a-4df5-847d-ef97f977cf47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674b5de9-b9b1-4666-96ae-bf9627bad997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "041f77de-611a-424a-8306-28ce683c6a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a32833-7624-4473-ac42-885b415e0d8b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4b681c-3d1e-4068-aed7-1623ec77079f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6fcc15f-0ac3-4f28-b903-20fc2e6539ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fe5fe0-f3c4-46fc-a962-de6acfc9d94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97b2ea5-9579-4cf4-9501-db95d0957065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60abb90-40a9-430f-8b4c-fa54e31459a7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53821f15-e0a8-4507-9935-4cdc6181b23c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19f69934-eab6-4e09-a3ec-008c7bade7d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03eb0014-dbec-40be-a2b1-bb2110dd2d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b900f5f-f52e-4d9b-a6e3-ae8a68f69a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b946c1-118b-414f-9a58-593d374b3022",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff610353-fea8-403f-889a-8ddd0de6cb3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab6660fa-d4aa-41ec-a207-e2d9c685c2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9e76a0-9493-4ca3-8c8a-923f50e64544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac144f31-a992-4693-8a8e-399f5a29033a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b53845-d760-468d-88cc-273ae3d2f25e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e499d7-e051-4899-9bc1-925666dd5d46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76226c96-aefe-4a4b-b3b7-b534d69183ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35876444-3ec7-4971-8b0c-47810a556b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5bc6672-9b0b-48b6-9930-e4de71806c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10514ab-026b-4521-acbe-feb0f15717bc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4ee696-e50c-4dea-976d-fd229f639fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b45a452b-edbb-4a9a-85a8-baf0a22654f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2a3d64-549f-47c1-9d06-34bb2d909373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb3b6f2-e986-4eab-8e51-664bf076a0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7f0dba-c85f-4710-84bc-9eb0748543ac",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a41c9a-921a-4fc3-a321-395966bed555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cbfc963-032e-42cf-bb0c-f22f6745f0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a54d0db-23ce-4290-bd65-036565be7a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55fbeba2-c3a1-4e00-b97e-c506e0dfb95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c7f7e2-e10f-44ff-94e3-c290313b9ebf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46cf82a-991a-472f-852f-d6807996e94a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24021882-7154-4476-8a89-4f0dd0b528a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1992f4-da0b-457f-88db-f055238bbed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181dc8d6-e277-48f6-9f4b-f4726adc63e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b231d6-57fa-43ff-8a0e-eec36398b1fd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478751cb-8b78-4e16-b04c-6db2abe5aff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99a67e99-e266-4213-9ea6-e9da4c979269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2989d3-1912-4888-8e99-c7c1ccdd5843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df05a576-b256-4630-b55d-3320cd307b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321d270c-049d-4da0-886f-ccba4021da5b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befee777-f653-48d8-836f-cb31b05bf596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1615032-e3cd-491d-8125-4f3fcf3cb738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89708da-7812-4240-ba3d-ea38ec41ffe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e40922-9168-4ff6-8546-f6a9d7d4a7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36872d77-38e6-4772-a502-25f901d5c6be",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875523cc-6001-4cc8-a7a5-94064a6e1593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4dd5b05-0e32-4fbd-8ff2-aa63acd0d418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0b0a48-8076-401b-b8f4-b6e5a2783a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01843d96-0912-48a2-813a-d035a33982a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed39fc5-dea8-4aeb-8404-aa574ae461a3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2c37cc-cd9d-44ef-bce1-dc7aa519b5d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d9d1e61-a9a8-47d5-b351-1f4b407578de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e773b37-e884-497a-a99d-cdfe030745b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b1b1eb-6467-4e32-af87-a8d7bde57c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365a3175-e50c-4d04-8ba4-12f0ab3f97aa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942eefe1-3508-434d-a36a-11cb5b1d2641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ef885b-0c09-4d46-8ac6-75609c1929d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac59885-8134-436e-8523-be2b666cef19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f719c3d-c198-4173-95c3-94da8cee72a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddcb0f3-6ec2-4096-ac3d-d83d16cf8bdd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d40083-b469-47a1-9f49-2ff443711d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c714ce4-6a79-42a1-9532-f1962e87d4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b707f7-4e54-4383-bdeb-6e6d9e29ba58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1522f4-e177-4e0e-92ad-5ba5fbe6537e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01221e73-633d-48b0-8df9-39ff11f2bbaf",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24d29e4-f8f2-467d-ab92-4d3cb60ce41e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42c2f3c1-81ad-4320-8ad0-7b8746204992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b7b976-c841-468a-b4e6-4515169ca9bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04967d3-9f5a-473e-aff3-4ec5e47b073a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21abf196-a554-4fe7-9403-4b216f87a41e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b82ad3-2a50-4810-a202-18f21e576e27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8ff481e-dc6f-4b7c-8999-3088f315e09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6816f9-eba6-4ad5-ae7e-8cbd1b1a0a6b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b901fe-083b-4e34-888c-bba07b6a0b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fb38f0-0b75-474a-a82a-02a8e5243538",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad071317-a7c4-4ab2-a832-fa18dcf04687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28ba31df-2a55-42d1-af4e-72cf0115c35c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7186644-74e6-48c8-9049-88dcb5f50de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0a4a69-a515-47ec-bc2b-7240ad8cf2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2019161-d576-4aac-9a9f-edd16c885d76",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43475661-c09f-455a-876e-116ce2e674fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee6e90e-c099-40e1-8c53-887d9de3d838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa9cdd9-5b3c-406c-8d1d-023e1af1261d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fd2459-4d9a-4a95-86de-15eeb2384bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b33fdd8-493e-4a94-a234-c4acbffc08bc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb39190c-4c5e-427a-af32-81b673fad5ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf60e545-bbc0-45b4-a905-fe29c4c15085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e06bf1-89aa-4966-ac65-ef1a35847322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b9b3df-2e83-4346-b647-8260a90d36c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8caaa085-3d8b-4982-aba8-7d470fba77a3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02328946-c876-45fc-854b-1e942ad2c0de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e6f6b5b-b5a6-47f4-946f-9063e795e184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12a3110-4657-4e04-9278-7fd8a1fc80a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddea5015-89f9-4df2-973d-8cb4a0ba1bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b2427b-6ab9-4355-b72e-d299dc457d26",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c99f97-b306-46cc-9d48-ce5b9360b820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad15f023-88fd-4b6f-8647-efe4e2e32254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9131cc62-496f-4fbf-8b4c-f124e53605d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24659600-4665-4cf0-bab0-ddf639864ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22b8aed-4f01-4724-bb0d-e2b9c4b37f93",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d792f3-7aa2-4373-a742-107821dd6531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e621245d-8866-4521-82c8-363f7a26b487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ee3cc0-2920-46f9-80cc-dc5eed520bd7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263f00db-ead9-46fc-9239-77dfc89acd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9e728d-2599-438e-97c8-2fcc499c70e2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d5b2c0-252a-4ec5-a47a-12032e0cc9cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92292f8f-2170-4cb1-8dd6-96c569afeb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c5821d-911a-48fe-ae02-80b49686368f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d882f1-d4aa-40e2-b797-7a6fbf7cda7d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fe63599-07e0-4889-a1f7-47f6e0c9d888",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a16cb4e-9504-4399-952d-a51f5fc92ba7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69167847-afe0-4131-89b8-37d0871072d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b769b3b2-e420-47d7-8d60-15c8c13f1120"
                    }
                  }
                ]
              },
              {
                "id": "065d9e98-c76d-4a66-a157-77efb1c263ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fec3e71-bbac-4bf6-9379-1d86582a43b5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306d1fff-bb2e-4c00-9bc3-2fd369f1adea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "074b76e2-ced9-4545-87f4-cae20d66fae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df81e0ae-630b-4258-8ef4-eefb68b34193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b30820e8-269a-47aa-acc1-b44c41c8ae7c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31cafc61-32e5-4208-991b-35ec413d8b3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51bf5579-9d8c-4c09-9ace-1bb25562972c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b741996-e9dd-42a1-8d91-bcc0c35028ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "033a785e-7457-409f-9d8e-2e4c87a1c12d"
                    }
                  }
                ]
              },
              {
                "id": "6b66cf41-ab2d-442a-8285-cc43239b0f96",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "76887e82-a94d-4a41-b063-c8b4be27df6c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b223fb-1a1b-4c30-86af-16f18d83d996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dea3bc34-9529-4bf8-b1a8-862c469b94f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd322e5f-cae9-4266-a413-8f7edb92c96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74899c0e-5708-4514-809d-1a1bec754095"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c43687a8-1320-40c4-9113-ad49ade0cb22",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8aa03105-8e67-4f49-b045-d9a512469c73",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7df281a5-3ae1-428d-af85-7b59909528f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fb88fff2-6216-4dec-87ab-968c6f0413c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd952dc5-c7df-41a3-8ab0-6708eb2afeba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1e940a3-6fcc-4670-a383-d37bbf713105"
                    }
                  }
                ]
              },
              {
                "id": "f1a9804f-f935-4154-bfa0-dedfa961fc1d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bb226e3-e048-4627-9f33-4f84f5738512",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "952c5867-c74b-477d-910a-f6bfa57fab6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "546c25f5-ef55-441e-abe0-9b4c1a85a0dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a842db6a-67ae-4ee6-b3f0-d202d8518485"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af6a4663-30c2-490e-a4c0-9cb518c64b16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "51762cee-07b5-4463-93ec-97f60a5f9467"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9d11601-b1b3-4e1d-b71c-b8657e17aeaf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a73e2b2e-94fd-47c1-a155-605456d9a797"
            }
          }
        ]
      },
      {
        "id": "c9f786db-9530-49e2-b5c4-e06e5ab4a449",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a7ba3a7b-e677-4e0a-b6a6-89511fdfb16d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f92be96-a3ec-48c3-bcba-945d10c35a17",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f1ef342-2b4c-4a57-8783-1cbf38fa41ac",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7250e59-ec88-475d-a76d-6fe7e5a0b610",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0482e2d7-6bbf-4e45-a4d6-0505998c2aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbf9587-8d55-4908-802d-0f8d7eded3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c276cd2c-2754-4ea0-9fb1-49f5138252b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8e3e490-9e7b-482f-8566-e742d2929595",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4967025-22d1-408b-8796-4d3d87854437"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7d5956d-054e-42b1-af04-253e70cf23f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bdb1344-6976-40ab-9c3a-42b838ed7eed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4b24ec9-b1bd-4b40-9e42-cc06464480ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b8620bcd-90bd-4b58-b5bb-9646f139c779"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c29a1d39-936f-4211-afd0-f397fc4b887d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "268897d8-95d7-43b4-9430-f211b9974f5d"
            }
          }
        ]
      },
      {
        "id": "f397f50f-af98-4fb8-a1dc-d766eead2011",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c3891ee0-c5f8-4fb9-a63f-f57e1d092cf2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a85f4576-ae7b-4a05-af16-a340b3fb43bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9e0564f-158a-4502-8c2c-8c4720b4afa7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9061b38-a47a-4555-ad4c-4e11ce2efea3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5356e345-dd75-4b3d-90a9-0bb69bf4a5c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc364fa-1642-4ed0-9288-3335a674a1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5edc513-baa3-470f-a0d5-9ae08d747407"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee3b40f4-9d78-48b5-8ac2-57afeef9c69a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca10d593-8fc0-41d0-ba1c-5589c62c21df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "961c52f9-dbee-4559-8643-dd91a0305890",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3bf459b-6bb9-458f-8919-b79de5623f91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36bd8242-8d31-4bac-ba4a-26264cac3336",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0f1a0af7-b00d-4f6f-966f-ee0de11ceb4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a2c85e5-8771-4b2e-8e67-6ef55a270822",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce6a4335-25b0-42f5-a20c-632387daaf2c"
            }
          }
        ]
      },
      {
        "id": "0f3282e6-3123-41b6-84a7-869926466f72",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7361208e-f0da-4e6d-a54e-76a2157cb5af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e69db8e9-a20b-41ba-abf8-6a0ea2aee997",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f925a388-115d-4d87-afe2-de1e986531bf",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec6d701-d870-4bd0-a6c7-dcdc1788ade3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "027994c1-17bf-4e4e-9275-6a311a84bdde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297d3048-5129-464c-bb3d-0211ffa376bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11a8dd1e-3439-40d4-a659-bfa5aa8b3311"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05537a78-b710-4ab8-bb03-40a07a094f64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fe73fff-fc8d-4790-accb-7fec00ae41da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91d4d379-a706-4ee9-9547-bd00cb122304",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de2f5ce8-8a3b-4020-bb53-1483e42f0a05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "456ed4d5-8c64-4020-8f79-e2dbd24ee7e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4c3a8a2e-b32b-4d14-b692-3290a912a4c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66163eae-96d1-43bc-b2f1-c9f6ac7b2dbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6f52c61-5a8c-41dc-83d2-af4ba52310a1"
            }
          }
        ]
      },
      {
        "id": "f3fb5ee0-5125-4e2c-b13e-c3895b9bc767",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2727d7f2-1e73-4a13-81b8-8043f0922c7d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba529550-9e0e-4392-a0e9-c2adf80837a1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8181009d-4c43-4241-9e23-1951271dc6a9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18b909a2-2856-40b0-a379-760e21193fc5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb4e2799-2a15-49b4-bed5-24695bed78bb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 120.48771929824557,
      "responseMin": 6,
      "responseMax": 659,
      "responseSd": 75.6957253194689,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703723660062,
      "completed": 1703723704066
    },
    "executions": [
      {
        "id": "03b187c5-f7c7-41aa-abb2-e97367501c16",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f146a540-f27a-4be8-9a0b-4cc12c527e8f",
          "httpRequestId": "8bf9cd1d-e3ce-49c0-9cf6-8766079f44bb"
        },
        "item": {
          "id": "03b187c5-f7c7-41aa-abb2-e97367501c16",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4967bb18-09b4-4db4-98ea-ead3cf6bd7d7",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "030164e6-be92-46e1-b06e-9d49386683e2",
        "cursor": {
          "ref": "3bcf01b4-8a46-4ab9-bade-9ea6682ec71d",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7e688fcd-bec5-4dfe-9ea8-8cc6d83c832a"
        },
        "item": {
          "id": "030164e6-be92-46e1-b06e-9d49386683e2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0821e85e-917f-4adf-b8a1-990732631bb5",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "cda7bb44-39c4-4ad1-8661-c5186549252a",
        "cursor": {
          "ref": "248940da-28b1-4596-985b-23d3f8462f64",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f5210c18-1778-4a4e-bf85-122f462ea97d"
        },
        "item": {
          "id": "cda7bb44-39c4-4ad1-8661-c5186549252a",
          "name": "did_json"
        },
        "response": {
          "id": "93c9956b-1a92-4bc2-b0d2-260973d7f549",
          "status": "OK",
          "code": 200,
          "responseTime": 404,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539a1f6d-09b7-4686-9608-6706e39fd04b",
        "cursor": {
          "ref": "912e4d88-21d9-4a59-9a5a-654d19805f43",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c55a39a-dd19-440b-a541-95f03803bd7c"
        },
        "item": {
          "id": "539a1f6d-09b7-4686-9608-6706e39fd04b",
          "name": "did:invalid"
        },
        "response": {
          "id": "4d918600-6402-4b47-b8c9-14215161ac0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539a1f6d-09b7-4686-9608-6706e39fd04b",
        "cursor": {
          "ref": "912e4d88-21d9-4a59-9a5a-654d19805f43",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c55a39a-dd19-440b-a541-95f03803bd7c"
        },
        "item": {
          "id": "539a1f6d-09b7-4686-9608-6706e39fd04b",
          "name": "did:invalid"
        },
        "response": {
          "id": "4d918600-6402-4b47-b8c9-14215161ac0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80558ec-fb9d-4538-8fb7-bf146ba5b5fa",
        "cursor": {
          "ref": "d0513115-e757-4786-8889-24b88c41c0f7",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "238d8b2c-fd96-4f32-a222-2853961fab4e"
        },
        "item": {
          "id": "e80558ec-fb9d-4538-8fb7-bf146ba5b5fa",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "78345fc9-4546-40bf-8c2e-812716d447e4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 153,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b94862-7a6b-461c-8ac2-bd457d86d00a",
        "cursor": {
          "ref": "6d987135-45a1-4e90-874f-322010bde67d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "513198a1-1032-4d5e-928e-27642574dc50"
        },
        "item": {
          "id": "a7b94862-7a6b-461c-8ac2-bd457d86d00a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "68da33b6-a5ce-4824-8453-0f628c44a255",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eade30e-b41d-4ba4-85d7-c17074eabb8d",
        "cursor": {
          "ref": "7ee73566-37ec-46b5-89f2-67daf725ef71",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d1af203c-4f6f-4f91-8d44-8fbc260da081"
        },
        "item": {
          "id": "5eade30e-b41d-4ba4-85d7-c17074eabb8d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "28bd49a2-7b30-40ea-8c21-fb1af4b38001",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bd391f-5ac8-4c2c-afaa-17e1e9c1795e",
        "cursor": {
          "ref": "e956b291-55f4-4821-b14a-e3c4434527fc",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bed2caf4-28ea-4040-a785-e2b7e36cdbfa"
        },
        "item": {
          "id": "80bd391f-5ac8-4c2c-afaa-17e1e9c1795e",
          "name": "identifiers"
        },
        "response": {
          "id": "8e259d24-5322-45d4-a768-5277a3712a78",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546af991-f8d6-428a-bedb-438919cab77b",
        "cursor": {
          "ref": "28f933a5-c64e-4091-bf16-8ef196322e20",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c4a03ef5-439b-4066-8065-d8304e4a8fb8"
        },
        "item": {
          "id": "546af991-f8d6-428a-bedb-438919cab77b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "86fa95c7-b4ff-413c-936a-c24baaeaf1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717e7bce-0763-42e4-96fc-3ddec17c17c0",
        "cursor": {
          "ref": "93f05069-ed96-414e-85ab-75c0b24bcb4b",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5304fb2c-1929-4c07-971f-3b8cbf6f9d25"
        },
        "item": {
          "id": "717e7bce-0763-42e4-96fc-3ddec17c17c0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "095e1d18-edc1-4ca4-92b0-c4778b4cfa19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140595c6-b921-400a-8bd7-be7d9de6b7eb",
        "cursor": {
          "ref": "e8940c00-b9c5-4081-a55a-8209565fda5e",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5b565840-9d6e-40fd-abe4-821ba1be720a"
        },
        "item": {
          "id": "140595c6-b921-400a-8bd7-be7d9de6b7eb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7ec22ee0-ed38-4f20-98b4-0565c0f5322d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393f8c11-b7de-4922-9962-453afb231aa5",
        "cursor": {
          "ref": "f516cb93-1079-440d-a907-88732d7d6875",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3146f266-fcab-4c1c-b53a-b317fe27c97b"
        },
        "item": {
          "id": "393f8c11-b7de-4922-9962-453afb231aa5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7ad8c07f-44f1-47eb-b1a1-08d4c63d37a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717df8b4-b484-461d-84a8-0f18a2130b44",
        "cursor": {
          "ref": "d8d3ba07-dad5-4e10-b56c-0240730386f1",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6286643b-8a3d-4dc6-b4bc-ea7d0998a71b"
        },
        "item": {
          "id": "717df8b4-b484-461d-84a8-0f18a2130b44",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "59264953-8722-41d8-91fe-c0b3dccc4695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987307fe-f13a-4344-96b7-6f6374de7ff9",
        "cursor": {
          "ref": "8ce3df38-ca41-4cee-afa2-3e5ee24b3efe",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "37208cb8-72ea-4450-a07b-8c989c6f2441"
        },
        "item": {
          "id": "987307fe-f13a-4344-96b7-6f6374de7ff9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "278b3475-a615-4d96-9fcc-221e4610eadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5796d655-758b-48e2-892a-ede6983b64fc",
        "cursor": {
          "ref": "425b1304-2265-4b1b-8523-e8142946dfd9",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da8c8cf8-ecb3-4e9b-9384-a2ea8708d028"
        },
        "item": {
          "id": "5796d655-758b-48e2-892a-ede6983b64fc",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4888de7d-217e-4c8a-a938-2a5984540088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cdff693-4ddb-49a5-a2ea-6fffa5cb84e0",
        "cursor": {
          "ref": "61d9cf34-ac53-4a97-976d-b11432a29f59",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9cd291d5-4206-4532-8987-34c33a4f5dfa"
        },
        "item": {
          "id": "4cdff693-4ddb-49a5-a2ea-6fffa5cb84e0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "928f99ee-b076-4355-a3fb-f186965e02c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cf426a-4360-4eb1-9c9a-1b14c96d9560",
        "cursor": {
          "ref": "0f9d9e73-d2eb-4e46-a32c-06465ce73d00",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "041a00d2-cc1b-45a8-ad7d-b8b5a7e71998"
        },
        "item": {
          "id": "36cf426a-4360-4eb1-9c9a-1b14c96d9560",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "42d5bc9b-22cd-4b43-9704-5dcaea17be75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd11e14f-c606-4b01-925e-c8439dbcbb53",
        "cursor": {
          "ref": "c0e667df-3520-4392-be08-add2de90a734",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "938a7a0d-8bdd-4f8f-8458-0721303e94a4"
        },
        "item": {
          "id": "dd11e14f-c606-4b01-925e-c8439dbcbb53",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "80dc2dcc-5478-4455-bd83-49f7197de476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b725459-509d-431f-9b1f-fc151df3eb63",
        "cursor": {
          "ref": "001196bd-933a-41d5-ab10-62d85ac79427",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9df18e1a-f91e-4a1f-a6f6-fb4bb74ce539"
        },
        "item": {
          "id": "5b725459-509d-431f-9b1f-fc151df3eb63",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dd37f199-a43e-4c61-b3b6-15c0b2c44cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62efd23-fae7-4568-a7b5-6c2426cdb52f",
        "cursor": {
          "ref": "ee0e6cdc-4748-479e-b4e2-d5687981c2d7",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "89ce96bc-b876-4576-926d-b8fd63c36243"
        },
        "item": {
          "id": "f62efd23-fae7-4568-a7b5-6c2426cdb52f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a52d19cc-1500-476f-8e3a-e6cf921f0031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7172591-89c5-4090-92f8-8b7c09726bb2",
        "cursor": {
          "ref": "04b6b08e-680a-494f-b022-19b51637f16f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "955f0ea3-16d9-435b-9433-129b4429bffe"
        },
        "item": {
          "id": "f7172591-89c5-4090-92f8-8b7c09726bb2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "21bc75bc-b69f-46fd-8917-4a6d7a96482f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6aa454-6dbc-4272-b340-aba0322b40c5",
        "cursor": {
          "ref": "f2ac9d3e-6e54-490f-b2f1-dd1f96b0746a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "174ec9ec-d45e-4296-9b74-484cfddc3b06"
        },
        "item": {
          "id": "8d6aa454-6dbc-4272-b340-aba0322b40c5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d2b96131-2166-4ae2-8b48-9248469faac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d73c619-e5df-46f1-95c3-81a13982a2b3",
        "cursor": {
          "ref": "716193aa-a63e-4ce1-b282-297ee1ff6967",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c11e51a1-088c-4565-93c7-8689518c777f"
        },
        "item": {
          "id": "1d73c619-e5df-46f1-95c3-81a13982a2b3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "83ae2125-d152-4156-9d66-b36b6ae927ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98d4d2b-f13c-4886-8f9c-c9ed48974a74",
        "cursor": {
          "ref": "a9399117-8a30-41a9-a9ff-109f959c5ac0",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b37b61c9-882b-4acf-9b06-5cde3095bf95"
        },
        "item": {
          "id": "d98d4d2b-f13c-4886-8f9c-c9ed48974a74",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d335466b-d65c-428f-9f24-d4b96e8701d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a606e9d8-6d83-439a-96b3-4a2c8c8a4cd3",
        "cursor": {
          "ref": "4a348639-6d39-422d-8d54-4735a9342ee7",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b56d588a-a0fb-41b4-8669-cdf8f0673be0"
        },
        "item": {
          "id": "a606e9d8-6d83-439a-96b3-4a2c8c8a4cd3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cc968cd1-4a0f-406b-a822-886b8fa3c4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e942c6ad-40ea-49a5-b614-b01fcf429e1c",
        "cursor": {
          "ref": "d9e9e69a-d481-4c81-ae15-aa4f1b9c8f31",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f77b4d33-8597-4796-9596-521020bb858f"
        },
        "item": {
          "id": "e942c6ad-40ea-49a5-b614-b01fcf429e1c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5bcb9349-c9f5-4ce0-b827-a2cd07f32d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37fe491-8f73-46b3-ab97-012f391c70c5",
        "cursor": {
          "ref": "b18b793c-7678-4e1b-bf0c-b2f9b6246ad4",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "99a2a0a3-a2d3-4720-ac32-6b3fd6c24bd9"
        },
        "item": {
          "id": "e37fe491-8f73-46b3-ab97-012f391c70c5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "abdd59f7-3534-4fe1-983e-63dd50f07f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5dea73-2db7-4f10-9edd-9fbbb4bd7145",
        "cursor": {
          "ref": "49f6a633-5bc9-4ee5-896b-3d9884175c02",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7a85e9d0-0921-441d-8390-bddd958dae23"
        },
        "item": {
          "id": "ba5dea73-2db7-4f10-9edd-9fbbb4bd7145",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b633a428-a59e-45f3-b0f9-ba59d3891d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f3e47b-4b46-4079-9740-c4b12e0772ea",
        "cursor": {
          "ref": "8b5b0972-70ba-4f0f-9778-f5a13336b314",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f3f6042d-8d0e-41bc-90e0-194a9133f06a"
        },
        "item": {
          "id": "88f3e47b-4b46-4079-9740-c4b12e0772ea",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f4c4908f-8046-470c-9c60-83df78530281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0c6a88-1d10-414f-8f22-3fdd7b0ecd85",
        "cursor": {
          "ref": "43bd1288-a091-4964-b461-2397071f84c0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "412a8722-61e4-408b-9c1c-b35188a5876d"
        },
        "item": {
          "id": "3d0c6a88-1d10-414f-8f22-3fdd7b0ecd85",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7068d1b0-e469-4b4a-b5e8-34aa76eef0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2326b11-83ae-468d-addd-526974ab157b",
        "cursor": {
          "ref": "c96cf48d-8254-4824-a4b9-122a124097e7",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0a1ce746-b73e-4d20-8e88-3ed812a03df2"
        },
        "item": {
          "id": "b2326b11-83ae-468d-addd-526974ab157b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4a8638cb-196c-49b5-baf8-161f6acbaa13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cf2d9b-9cab-466c-b644-49afa1678bb6",
        "cursor": {
          "ref": "4abb3639-8b60-48bc-b343-00bf6ef43be5",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9155452a-4cb6-4164-bffb-870c4bf89c06"
        },
        "item": {
          "id": "25cf2d9b-9cab-466c-b644-49afa1678bb6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e0aba9c0-2e60-4794-b2d2-3f1fb59e13da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac486f5-05a5-4ced-873d-8eb3fd2f9e54",
        "cursor": {
          "ref": "15488b4d-db46-45cb-977b-82cc7fd5923b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "89b376bd-1227-4174-9c57-ff1e858456fe"
        },
        "item": {
          "id": "4ac486f5-05a5-4ced-873d-8eb3fd2f9e54",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c348fb32-474b-4d08-80a3-0d7cf1dcd54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafb524d-606d-46d5-b576-e5fa0c7b388d",
        "cursor": {
          "ref": "ec6f3fd5-0a12-4b00-be2d-af25f4610aac",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1f66a1cb-9004-4f53-8b87-06d7e728231e"
        },
        "item": {
          "id": "eafb524d-606d-46d5-b576-e5fa0c7b388d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fc92cf7c-1aa8-4844-b6af-bcb3a768b0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43218dac-8b9e-4814-95bf-18ada28f2f7c",
        "cursor": {
          "ref": "5e0ef2a5-86fa-4863-927a-a4f403ffa511",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "eb84ee14-c70a-40aa-b952-edcaa2a3a550"
        },
        "item": {
          "id": "43218dac-8b9e-4814-95bf-18ada28f2f7c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c2549cc7-5593-42a0-b4d2-7fe618192098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b724551a-b465-4706-a5be-ca26b35c753c",
        "cursor": {
          "ref": "b5c6b9cf-3174-4201-aebb-876fda81f72d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "517d57e8-c5a8-4548-95be-6e6e54450d5e"
        },
        "item": {
          "id": "b724551a-b465-4706-a5be-ca26b35c753c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3b3b3ddd-4876-4a4c-8fc6-552e5a88c770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fad4ea-07a1-4473-a24a-07f65269284f",
        "cursor": {
          "ref": "a1ae763d-9654-45aa-a0b3-966d42e7bb03",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b5876064-9465-4f47-af71-c8c0bbb68673"
        },
        "item": {
          "id": "75fad4ea-07a1-4473-a24a-07f65269284f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "12461121-1b71-4f9e-a537-006469ad0a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f1d0a4-8b25-45d9-b8f1-127ed7780be8",
        "cursor": {
          "ref": "57f7b7ed-c2a8-4180-ab18-df03a1c89107",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6ece9bbd-5ffb-4849-a6ea-dcb57aea9570"
        },
        "item": {
          "id": "72f1d0a4-8b25-45d9-b8f1-127ed7780be8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "933277c5-cc07-41fb-9a83-a4b4224c11f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04fb596-f3eb-4cc8-bc97-1951e0a32682",
        "cursor": {
          "ref": "e7b5c680-4e9a-4e8c-9fbd-9e021b3cba3a",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b034ee0d-eb85-410b-943e-f5f2493494de"
        },
        "item": {
          "id": "e04fb596-f3eb-4cc8-bc97-1951e0a32682",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cbde770c-25ba-4d01-970f-f23ec245a5f0",
          "status": "Created",
          "code": 201,
          "responseTime": 659,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "db977618-97e1-410e-aee7-ea2771483305",
        "cursor": {
          "ref": "95159d80-c838-4fb8-a0e7-0cc9f7f57a3c",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "46df681c-8c7b-49bb-8e27-f23b8dd2009f"
        },
        "item": {
          "id": "db977618-97e1-410e-aee7-ea2771483305",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "249464ad-45de-4d38-aa50-5dd59b6dbd40",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3e453cfc-f640-42bd-bc11-8f65982ea461",
        "cursor": {
          "ref": "9d7bbf90-2dd7-418f-88bf-28d616b89fba",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "50b86848-fec5-4177-81ca-6ef42728f310"
        },
        "item": {
          "id": "3e453cfc-f640-42bd-bc11-8f65982ea461",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "13d67d7b-2551-49c8-864e-e73a5346a3d2",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "63e062ad-f34d-41e1-9f16-14e70d0eb76a",
        "cursor": {
          "ref": "7c45ce79-f262-46db-958b-2cb4de74bc28",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "adda30ab-26a2-4c91-9f71-77fe32aec08a"
        },
        "item": {
          "id": "63e062ad-f34d-41e1-9f16-14e70d0eb76a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "91b4ffb1-fbc1-421f-9145-897c16959872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41dcc16a-312b-4b81-a4cc-9e9b0838a45c",
        "cursor": {
          "ref": "b5864d9c-5cae-47bb-8689-29c3109e97af",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9c30fd07-96c2-4983-97c2-1892df6a8ebd"
        },
        "item": {
          "id": "41dcc16a-312b-4b81-a4cc-9e9b0838a45c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "822d5ff4-1fd1-4c1c-bc19-acf32dda841c",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0589cbbe-2b41-491c-9880-1fd683598792",
        "cursor": {
          "ref": "a042f258-23d9-419c-87b8-1d81862fd612",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ea2a03ea-b7fa-4bae-af6e-94189a49b32f"
        },
        "item": {
          "id": "0589cbbe-2b41-491c-9880-1fd683598792",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6e5de9d7-9cd0-4bd8-8658-6742b6394374",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d9417319-9ac9-40cc-923a-5e536a85ff3e",
        "cursor": {
          "ref": "af14c0e3-11f9-4bd4-96d9-cd405e6eb908",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "136e8f3a-218e-40a4-981a-c9febe40d34c"
        },
        "item": {
          "id": "d9417319-9ac9-40cc-923a-5e536a85ff3e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "164ccefc-7b00-471a-a23c-e8b7cbb88be2",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "29af7399-b63d-4307-961c-ab73f25dd06a",
        "cursor": {
          "ref": "46979cd5-f3e1-4bad-b97b-c67df784a97f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0e4ce225-5c28-4fe2-a26f-0eb203d893e1"
        },
        "item": {
          "id": "29af7399-b63d-4307-961c-ab73f25dd06a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4ed901a1-9ad3-4602-baeb-3710017f95b7",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3317df56-5263-4c1e-8b2a-8f189788ba14",
        "cursor": {
          "ref": "06aa9686-ac83-43de-8b63-b463f0277ebb",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9ca7260c-cbb9-4f05-ae63-3cc3933a37ca"
        },
        "item": {
          "id": "3317df56-5263-4c1e-8b2a-8f189788ba14",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "23ad0119-b2ff-4d05-9194-9e6ecec8d0e8",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "27cc3156-0d4d-4e1d-b1b9-3b569d25c029",
        "cursor": {
          "ref": "779dc18a-6fd2-445a-897d-2b9460f3d2dd",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "af4c72c4-a64c-49ea-bf80-69a260cc110c"
        },
        "item": {
          "id": "27cc3156-0d4d-4e1d-b1b9-3b569d25c029",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dccaac40-cc0d-4bbd-bbd9-c796d83bf041",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6653ec36-cfaf-42cd-ae33-9e8658c96dcc",
        "cursor": {
          "ref": "10794968-0643-4c09-a43a-1ec3ed8d9738",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ecc4b07a-c5a1-48f4-9080-61e17b2dec34"
        },
        "item": {
          "id": "6653ec36-cfaf-42cd-ae33-9e8658c96dcc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fa6c24e8-9787-49a3-acee-b3ec45ea2d2a",
          "status": "Created",
          "code": 201,
          "responseTime": 391,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9fd3be97-3ff9-4db7-b04a-9aff61088613",
        "cursor": {
          "ref": "fada20f7-6265-4ca9-9e90-9171d2bf99e5",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3faf204b-9d53-46dd-97f1-afcadc454a6f"
        },
        "item": {
          "id": "9fd3be97-3ff9-4db7-b04a-9aff61088613",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5d2b0565-549a-4dd0-8b54-10103fca0673",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "50a43857-559f-4d2a-95a4-d55308ec5d97",
        "cursor": {
          "ref": "f8ffe167-2385-4570-8ff0-1d3e2409e8d0",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "594ba78c-dbf7-470f-8373-123bb2e1dc1f"
        },
        "item": {
          "id": "50a43857-559f-4d2a-95a4-d55308ec5d97",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bb7fdd55-eb8c-492e-851d-9498338bdbfc",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ee872733-fab6-4c4c-9735-81779e47ca73",
        "cursor": {
          "ref": "032ee244-caaa-4f66-8eb7-0c96190e79b4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "18405943-6c5c-4b79-968d-eb0a022ba8bd"
        },
        "item": {
          "id": "ee872733-fab6-4c4c-9735-81779e47ca73",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "27190a3a-c58c-4b84-aff8-ec2124f36d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdab4948-da12-4c00-a8cc-c97f5814ea97",
        "cursor": {
          "ref": "9aafaaf9-2250-4de1-808c-b50f224a87df",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6dab2cd5-9d49-4e47-9a74-2679c0f77a9c"
        },
        "item": {
          "id": "bdab4948-da12-4c00-a8cc-c97f5814ea97",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b3efdbb5-f2ba-4c66-a21d-2b67f088f803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3fed58-8a3f-4d09-b3ba-d51c8ea4415a",
        "cursor": {
          "ref": "35c8d2c6-7ce7-4d99-9f90-a64f03548e58",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3c462b04-dbe3-4435-9bdf-e4f0eddf3812"
        },
        "item": {
          "id": "9a3fed58-8a3f-4d09-b3ba-d51c8ea4415a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d5d20ca1-4572-421b-91d0-cdb3c2b513f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896acea3-8101-44c4-9db8-784e9b3b85be",
        "cursor": {
          "ref": "a3836228-d29b-455d-8157-e0877f081b90",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "34813a32-b20b-4616-9a11-5d4231e2f7fe"
        },
        "item": {
          "id": "896acea3-8101-44c4-9db8-784e9b3b85be",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a81c8c0a-f3e3-4a53-a669-6332e7e707ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0be0536-026a-451f-ab41-385183d594a3",
        "cursor": {
          "ref": "65109cd8-ca5e-4cb6-a783-0576dc2a6894",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4ecfa0d0-edd3-4321-abe3-716c84924c6c"
        },
        "item": {
          "id": "e0be0536-026a-451f-ab41-385183d594a3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "af3adc0a-d87c-4249-88c7-1e917f287059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c9aa5c-5f92-4a3b-b582-879693744370",
        "cursor": {
          "ref": "b01e713e-38f3-42c5-996e-07e5f2f00e77",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "10e40115-a952-41a8-b483-2d357143bebe"
        },
        "item": {
          "id": "d9c9aa5c-5f92-4a3b-b582-879693744370",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b3a050b8-41a3-40fa-9428-05dc72c3641f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d26b2d1-45b4-4124-9f8a-75d384559f01",
        "cursor": {
          "ref": "2ba38e9a-2fc6-40fb-8c6a-96ab70c01ea0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0ed147ec-3020-48e6-8f3e-74bfe5f8db18"
        },
        "item": {
          "id": "5d26b2d1-45b4-4124-9f8a-75d384559f01",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6bde911a-5875-41d7-bc21-ad2f6818fa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d4c0dc-a304-4382-9143-2042eb048d60",
        "cursor": {
          "ref": "eaffb5ae-863f-45a4-a870-9212c5c67ea3",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e2e5de80-d889-4d58-8b0d-c1ddd5bf46ee"
        },
        "item": {
          "id": "d5d4c0dc-a304-4382-9143-2042eb048d60",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b36c1221-b9c2-457e-bd2a-96369483f331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e68b90a-b12d-4af2-83a0-366937719cf8",
        "cursor": {
          "ref": "e393a38e-689d-4da3-aeab-52a943af49c8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6fc9a410-dc95-42ac-b9f7-15855603b1e5"
        },
        "item": {
          "id": "3e68b90a-b12d-4af2-83a0-366937719cf8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cd8ba7af-799f-423b-9de6-3c3cba5f716c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d8768b-e3a4-482b-a1d9-f20fbba53300",
        "cursor": {
          "ref": "465c465c-d647-49f7-a841-9f06f1fbbfc8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9c7f151b-62b4-4413-94ea-1908f16fd60f"
        },
        "item": {
          "id": "04d8768b-e3a4-482b-a1d9-f20fbba53300",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e5c2ea39-5b76-44e4-88fe-39e9bdc4d2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a982ac14-e8e0-4456-906f-669a148ba7cf",
        "cursor": {
          "ref": "bdd31db4-812e-4047-be7a-fcbb82898a49",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b436bad3-962f-466a-a47b-c0517f79b878"
        },
        "item": {
          "id": "a982ac14-e8e0-4456-906f-669a148ba7cf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d0fdb4aa-b994-4157-bff8-2ad40f1ccf18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe57c40-f45c-40eb-a705-b2ad28772d66",
        "cursor": {
          "ref": "70cb0127-ecde-4735-8a5b-c130393b0a05",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5540133f-e7cb-4fcc-b381-1d70bff0b28d"
        },
        "item": {
          "id": "3fe57c40-f45c-40eb-a705-b2ad28772d66",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6d324a76-12b9-4955-ac2e-22093d565990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab6e966-43be-41c8-8335-6280a5a5dd84",
        "cursor": {
          "ref": "0caa08d5-e756-4cc3-a35a-6ac548d0bff0",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9e3eafbe-9e16-4042-8332-1c2efa7b03e8"
        },
        "item": {
          "id": "dab6e966-43be-41c8-8335-6280a5a5dd84",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0018e77f-e411-4feb-aafe-d2359ff4fb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3835ac-ef74-444b-b61f-1f442e60169a",
        "cursor": {
          "ref": "583441b2-7984-445c-b12d-c4faf7102e33",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e2339318-e19a-4b91-9c0a-4932560ca973"
        },
        "item": {
          "id": "7a3835ac-ef74-444b-b61f-1f442e60169a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a625ba98-0935-45b7-aa31-fadd60909814",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "749052fa-a42a-416e-82aa-bf07c3175d95",
        "cursor": {
          "ref": "a5bd196d-b1e0-493a-980a-3f44dca559dd",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5a1107d3-e7b1-4475-991f-f67854bd5d64"
        },
        "item": {
          "id": "749052fa-a42a-416e-82aa-bf07c3175d95",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0b8adfbf-e365-4d09-9964-b87ea61bdb59",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f3b6dfb9-eccd-4402-872d-71c47e96ac04",
        "cursor": {
          "ref": "f4c3b6a1-8c36-4aa6-af3f-863585b5d257",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "684c0529-0f8b-4d9b-8871-4c6d347694c3"
        },
        "item": {
          "id": "f3b6dfb9-eccd-4402-872d-71c47e96ac04",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cf182260-9a84-45af-8fde-808f41f38a71",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1ee902c3-bdec-4aa7-a7e3-1ecfea9134e2",
        "cursor": {
          "ref": "5f838646-fcbc-4648-933c-4636cf243b8a",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "efdb1669-544c-446c-ab7a-9110ba830809"
        },
        "item": {
          "id": "1ee902c3-bdec-4aa7-a7e3-1ecfea9134e2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b1acd871-656b-44f6-86ac-202dfe8996ee",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f4d0ffa8-cb47-40dd-9688-c7e3f013936b",
        "cursor": {
          "ref": "b45b684d-2b59-41b7-975d-55c64c91d89f",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bc42db09-0d1d-4274-803e-208b30eb217a"
        },
        "item": {
          "id": "f4d0ffa8-cb47-40dd-9688-c7e3f013936b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c61e32ea-b40a-4aec-9f60-e6ddfd150dcf",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8372a46c-df04-4d01-b0a1-4f05b6125a55",
        "cursor": {
          "ref": "2ead6e07-a31a-48b9-9e42-45e3ae23a95c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1aebafb1-c69c-4746-88a5-06e6bec4531b"
        },
        "item": {
          "id": "8372a46c-df04-4d01-b0a1-4f05b6125a55",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2c1454e4-6ab3-47ef-a065-e1e0a39cdd5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff93867-add4-4797-9353-feb864128e62",
        "cursor": {
          "ref": "0119ee4b-e732-4033-969a-a3c1510d355d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d5bce5ed-85b8-42f5-91fc-dbe3635ac3a4"
        },
        "item": {
          "id": "0ff93867-add4-4797-9353-feb864128e62",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "666649a3-7341-45bb-8630-c9aee1282737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fb9c3b-d9d3-42b6-9c4f-3ddbc4ae7960",
        "cursor": {
          "ref": "c7b70530-7f82-4714-99d4-43867799606d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "33fd30bd-761f-4b37-bf52-ed6122e84331"
        },
        "item": {
          "id": "32fb9c3b-d9d3-42b6-9c4f-3ddbc4ae7960",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7b9557d2-7f80-4a43-831c-8d093d7f7bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f38328-4b78-4d73-9701-8d411ff6a5bc",
        "cursor": {
          "ref": "78fbb907-baad-45a7-8b47-383d4afe2965",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "070d945d-2111-487e-bc1c-e2ab540bc9b9"
        },
        "item": {
          "id": "a9f38328-4b78-4d73-9701-8d411ff6a5bc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "971c2d21-0bed-4ddc-ae35-921eaf1051ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5313ec13-c6cc-4d64-b0da-53618a82a027",
        "cursor": {
          "ref": "b2cf5663-f0c2-4563-8ce6-85f2f88c4a00",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "772b5e26-bf5d-4486-9ec6-f4a570177f62"
        },
        "item": {
          "id": "5313ec13-c6cc-4d64-b0da-53618a82a027",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cbe25dff-ad69-465e-9c14-b1a677d1ff5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83cb229-b59e-4194-ab02-09f5b6c4e8df",
        "cursor": {
          "ref": "8267d6c4-720c-40a2-8bc6-f15c15fe801e",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1782a756-195b-41ac-9919-52a3b3260322"
        },
        "item": {
          "id": "b83cb229-b59e-4194-ab02-09f5b6c4e8df",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "512e8052-fc77-4ab5-9db7-06c9d8f9b742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cbbbc0-e0a6-4d77-9480-c10091e0f9d3",
        "cursor": {
          "ref": "625fa4f8-50c7-4fcb-ae93-2015242a8970",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "006ae8b3-5679-4d57-8f07-3d1a58386321"
        },
        "item": {
          "id": "e6cbbbc0-e0a6-4d77-9480-c10091e0f9d3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2f2939e1-aa3f-4687-afda-3491f51eb6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7332fab-5ce3-42ad-901d-40a342094e0f",
        "cursor": {
          "ref": "fd28afc3-de7a-4aec-aaec-36ef92fa3b5d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2ec30c4f-3617-48ff-ace2-78560b6f4577"
        },
        "item": {
          "id": "f7332fab-5ce3-42ad-901d-40a342094e0f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6c657d4d-67c1-4576-b212-0cdea8fa2bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912f1192-4adc-4b3a-a2da-3b4292650f52",
        "cursor": {
          "ref": "73b29cbf-76fd-443c-8135-fb9cb162f235",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "021687ba-57ad-437b-94dc-25596446428b"
        },
        "item": {
          "id": "912f1192-4adc-4b3a-a2da-3b4292650f52",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d4fafd13-e122-461f-8813-d2492e804f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d694c4-e7e6-41f1-9c28-36786150b51f",
        "cursor": {
          "ref": "7ee4394a-0523-467f-84df-44997523999f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "59b2bb54-4029-4c9a-87b9-a3f08597d8a8"
        },
        "item": {
          "id": "37d694c4-e7e6-41f1-9c28-36786150b51f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "592d8fb1-71e6-4242-aac5-18c1fb6f9798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e446233b-cc70-4576-a5e5-f097794a0edd",
        "cursor": {
          "ref": "2102048b-4fa9-4513-a302-9bede8af0046",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "382301fa-03f8-49af-b6f3-f288554dbe60"
        },
        "item": {
          "id": "e446233b-cc70-4576-a5e5-f097794a0edd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9ace5489-ab22-45bf-b4a5-357ac6d108a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f755fa-fe2c-4b6e-8030-534b9cf61521",
        "cursor": {
          "ref": "7e3e21bd-2f06-496c-b1d9-b2cb4ec88c27",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "477005b1-1572-433d-a3fb-2c107e64f4cb"
        },
        "item": {
          "id": "56f755fa-fe2c-4b6e-8030-534b9cf61521",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4f8958cb-eae7-4548-a07d-6b5c079ea02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6ed8f5-dc1f-4855-b4e8-988b0fc1b7a7",
        "cursor": {
          "ref": "77f6a8e5-7224-44b1-b4a7-537d6bc6e016",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a1ed87f9-717d-479f-8d0a-42d3cb03584e"
        },
        "item": {
          "id": "9a6ed8f5-dc1f-4855-b4e8-988b0fc1b7a7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dfb109a0-9eba-4a62-9283-0b57a65f9fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf361709-2404-4665-a85c-37111e13e5ec",
        "cursor": {
          "ref": "5871b732-d056-4794-a9d7-65b01d09e18e",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d1c69f53-f179-405a-b9f0-5839079daeec"
        },
        "item": {
          "id": "bf361709-2404-4665-a85c-37111e13e5ec",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "18665a92-f8cb-4d68-9431-7a4172859f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1df571d-e442-42c1-97a3-28da9aeb8454",
        "cursor": {
          "ref": "1aa85748-d242-4036-ab77-837c7d5c2dcd",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3039cdd9-e1b1-43af-a995-0ffdff5b1eb9"
        },
        "item": {
          "id": "e1df571d-e442-42c1-97a3-28da9aeb8454",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "35e69c1d-4bdc-4075-a347-48b71efdb793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721a1c90-4fc4-443e-bc54-902e8e67c476",
        "cursor": {
          "ref": "de865fba-4b89-48c3-8dc6-d69d354a6afc",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ffdfd9c9-c73d-4216-9325-eadef0f84e71"
        },
        "item": {
          "id": "721a1c90-4fc4-443e-bc54-902e8e67c476",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "865127b4-dbe8-4016-ace9-071dbcd746b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3533b863-c0dc-48e2-9423-c33ff1c5d928",
        "cursor": {
          "ref": "2973b344-fd8f-42c3-9254-ecfe4a5dd494",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c9347c40-b029-4a1d-8490-e838e8972cf7"
        },
        "item": {
          "id": "3533b863-c0dc-48e2-9423-c33ff1c5d928",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b7a8f177-59c8-40a8-ae8f-921b3e533f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0525b5-ae61-41bc-8cfe-0fa08c2d8321",
        "cursor": {
          "ref": "777fc2c8-4520-4c09-a6d1-a487a88695cc",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9a38edc9-49ad-4308-8fbf-1f53ce1b58dc"
        },
        "item": {
          "id": "6d0525b5-ae61-41bc-8cfe-0fa08c2d8321",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cc5a9f47-525d-4e7f-8454-d43ef7b24cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbeb628-a2e4-4fc0-ae61-196b32f47371",
        "cursor": {
          "ref": "d515859b-978c-47b4-986e-a6f4d859b7ec",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "da713cc5-bfa7-4ca6-a0aa-a644bf4f7aee"
        },
        "item": {
          "id": "5dbeb628-a2e4-4fc0-ae61-196b32f47371",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e10e1ffb-cd57-4acf-8eed-02630fbd9b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f5e337-ab8b-45b2-ada1-b1f47a0ef7df",
        "cursor": {
          "ref": "b0fd7f9f-f53a-4ac4-99fa-a03064655802",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "58de1a77-450f-4080-97bd-535e749f7ce4"
        },
        "item": {
          "id": "53f5e337-ab8b-45b2-ada1-b1f47a0ef7df",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b38d1faf-6a05-4d32-b26d-3a6b36619c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007b4896-1a81-4f02-8e57-979f52a29861",
        "cursor": {
          "ref": "131e6494-3ffc-4d2e-8de1-c156708f6468",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5d0fa14b-a9e0-4273-90f5-4b11dc2e178f"
        },
        "item": {
          "id": "007b4896-1a81-4f02-8e57-979f52a29861",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5c531eb6-5dbd-4812-913d-6389a2fe9287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db620cca-1352-4909-b2c2-3da2d255f5cc",
        "cursor": {
          "ref": "b9751897-d54b-4201-90ea-28551eead4cf",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bb72dd59-b796-4720-bb62-f877fa305357"
        },
        "item": {
          "id": "db620cca-1352-4909-b2c2-3da2d255f5cc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "76a75ac4-2e01-44e3-9376-38506a5cdfc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074512bc-ecbd-43a6-8229-91c858fcf60b",
        "cursor": {
          "ref": "00dcb6a9-41bd-4e0b-ba3a-bc91456f5d12",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b934e2d5-5b03-4094-b519-026df3677391"
        },
        "item": {
          "id": "074512bc-ecbd-43a6-8229-91c858fcf60b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "42d88871-8fa7-460d-a9c2-c3f3320c2ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dc437f-c82e-4788-9eca-ceb8b7919529",
        "cursor": {
          "ref": "1648c2b4-68b7-4726-80a5-c590616bdb96",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "029cf3b4-7d70-417b-88cb-f71d0c971b3d"
        },
        "item": {
          "id": "b5dc437f-c82e-4788-9eca-ceb8b7919529",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d16c67ba-72fc-40d2-802c-e6a2a32e3a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9572dd38-0b9a-47d3-a872-018918845e1e",
        "cursor": {
          "ref": "2dc92e1b-7276-4af0-862f-286363877ed9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "858918ab-1055-490c-8e81-ac41e42b04c7"
        },
        "item": {
          "id": "9572dd38-0b9a-47d3-a872-018918845e1e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9b4bdcff-1198-4058-89f8-e3eacd821696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0499949-5824-46bc-84fc-6b5be7b752d8",
        "cursor": {
          "ref": "bb8fb1fd-4dc6-41b7-b759-15bcaf2f9743",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d80ec752-4532-4607-8a11-0c25eb08d177"
        },
        "item": {
          "id": "b0499949-5824-46bc-84fc-6b5be7b752d8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0be45944-92c3-4fa6-be79-1c78e1b3310a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4faa34-676e-4063-ac37-86dfb7ef97f5",
        "cursor": {
          "ref": "2518bf5b-a9f1-433c-bc6e-5434ad85ccab",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3d9b76b4-7752-454d-8678-44ebd6a6ff48"
        },
        "item": {
          "id": "ed4faa34-676e-4063-ac37-86dfb7ef97f5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4e1968c2-2b0b-4ed7-96e2-1d979990db78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a250c3-b958-4007-b280-310844fe313b",
        "cursor": {
          "ref": "3e0cffb6-37ce-4eee-89aa-ad1b9a5539fc",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2f4ce2b7-d8e1-4773-ab8a-e20fa6fcfece"
        },
        "item": {
          "id": "48a250c3-b958-4007-b280-310844fe313b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3f758dd1-a216-4ad8-a3eb-625713061783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547f803c-aeac-46c5-85e3-251c403d8615",
        "cursor": {
          "ref": "fff03e1d-a756-4d99-a3a9-b2da8733c429",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "52d9f963-95db-4b35-89c2-45b505178ea6"
        },
        "item": {
          "id": "547f803c-aeac-46c5-85e3-251c403d8615",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f751abb2-d3bd-4f88-b209-0ca502107620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16023df2-a8ac-46e0-88ba-7772087c4ba7",
        "cursor": {
          "ref": "19d0ca95-a2c4-4eac-9217-969f53b7fc40",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7e871911-9d86-423e-a52e-49bdd9d79393"
        },
        "item": {
          "id": "16023df2-a8ac-46e0-88ba-7772087c4ba7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "90ef3654-9a46-4654-9064-2b5f0157f8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40113f6f-0927-41f9-88d4-3ca737abcd53",
        "cursor": {
          "ref": "444024f3-6516-48bb-a174-5ddbc0a56378",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "27aa27b9-7cea-4078-9358-c51c3fc2f187"
        },
        "item": {
          "id": "40113f6f-0927-41f9-88d4-3ca737abcd53",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "29135e21-533e-4299-bd58-7eb26f21f1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc67e19b-9d25-4b96-b881-c944bc56414e",
        "cursor": {
          "ref": "c1eb33ec-79aa-4986-8763-297e18a37c6e",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c534c9e6-fe08-41e5-87f3-b50070c1f20c"
        },
        "item": {
          "id": "cc67e19b-9d25-4b96-b881-c944bc56414e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6e96ca3d-9041-4277-bb47-43e52b186ed6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dc1a48-dd2a-4195-bc9b-6b95c1c125e0",
        "cursor": {
          "ref": "4e92eeba-4230-4806-8abf-2651df9ccdf4",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fb51d168-2e2b-4b22-b019-a686c7b23e2c"
        },
        "item": {
          "id": "48dc1a48-dd2a-4195-bc9b-6b95c1c125e0",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4adcfcdd-59f4-413b-be18-defee71e8e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "58baf205-b721-47ed-8d0f-c4ed76ac71ef",
        "cursor": {
          "ref": "1ce5d3cd-9565-4c1c-811a-623ae8ca21f7",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "022e3c78-8533-4a45-91cc-ccfebb0bdafd"
        },
        "item": {
          "id": "58baf205-b721-47ed-8d0f-c4ed76ac71ef",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b4609db5-3c7d-4a50-a867-7e76f1023407",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5364533-61c7-41b7-8ebe-383e1fc5c0df",
        "cursor": {
          "ref": "69bc5e4c-2c40-4971-ab23-fc5a8deed795",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "eb3a15e6-4634-482c-889a-37740023088d"
        },
        "item": {
          "id": "c5364533-61c7-41b7-8ebe-383e1fc5c0df",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "25e896ff-4408-4d46-a94d-6194e87ad9fe",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7271e8fd-6284-4546-87f7-f080880796f1",
        "cursor": {
          "ref": "868c8c18-4514-43a9-91d5-0b4aaef07f69",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "680749fa-93e1-40a0-a529-abc1b6c49fa3"
        },
        "item": {
          "id": "7271e8fd-6284-4546-87f7-f080880796f1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2229902b-5563-4852-9f68-f595bfa94269",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0124a1-d4ea-42c5-bd8f-5c4994cf493f",
        "cursor": {
          "ref": "34094262-09c7-4579-b7e1-5b1fb35de563",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8403d9af-8540-47c9-9e05-880245703266"
        },
        "item": {
          "id": "ab0124a1-d4ea-42c5-bd8f-5c4994cf493f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d1ee7039-b3cf-4387-8b7c-dbf2843d724f",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4e785c-27aa-4eb4-95a3-4637854f2246",
        "cursor": {
          "ref": "a3f0b20e-fac9-4328-b2a5-1782c21e9f8f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "84f43f6a-f4d6-4c48-a3b3-bf41c0c7e7d3"
        },
        "item": {
          "id": "8f4e785c-27aa-4eb4-95a3-4637854f2246",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ae6b7467-417d-47e4-af52-70bc4a7e46d0",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-28T00:34:39.838Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-28T00:34:39.838Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1d02ea6a-28b0-4294-8c3e-a641a4a07b54",
        "cursor": {
          "ref": "8fd3eb0a-9d12-4281-9c84-78cc3f3e8e9a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "110c3732-af98-447d-9c46-72cd8331dfce"
        },
        "item": {
          "id": "1d02ea6a-28b0-4294-8c3e-a641a4a07b54",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bf27f6a4-9703-4cea-9ee2-0803625b0afa",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c706b0-ddf6-4513-89bc-86650f9a666f",
        "cursor": {
          "ref": "833d5392-f5ac-4445-ac16-cc24f531e9f3",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7a156d06-fd16-4d09-a685-b6a8cacda598"
        },
        "item": {
          "id": "50c706b0-ddf6-4513-89bc-86650f9a666f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ecbdaff2-21f8-4184-bfe6-d8f4598a0575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eab502b-f177-48cc-9c19-80efc9b0c2ff",
        "cursor": {
          "ref": "2db88eab-a3d8-4084-b03d-c02b5106f234",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "246de920-f92f-4858-aed9-a12c28950aa4"
        },
        "item": {
          "id": "6eab502b-f177-48cc-9c19-80efc9b0c2ff",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c08545cb-20a0-4e35-bc84-4da19c78aa5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6c748f-79b3-464b-99cc-49a396c9f64e",
        "cursor": {
          "ref": "c9de47fc-5210-4d3d-a43c-f0166c5de07d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a6660d8d-8870-43c8-84f9-62d58aa2c96a"
        },
        "item": {
          "id": "ea6c748f-79b3-464b-99cc-49a396c9f64e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dbee8e56-3186-41eb-bae0-9e2ef35cf116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0312d8-e9b0-45bb-91d9-104b3e658db7",
        "cursor": {
          "ref": "90f6159e-d36a-48c5-bf19-2cf135664bbc",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "12003b3a-437e-496d-ae77-97296a1da957"
        },
        "item": {
          "id": "6d0312d8-e9b0-45bb-91d9-104b3e658db7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c001854f-dc67-46d2-b763-9289d3524747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc64924-b572-458f-b99d-dc0cdcd01922",
        "cursor": {
          "ref": "eed835c8-dad9-48e5-ba1f-dd3b80c25ccd",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d686eca7-67f5-48fa-938e-202bd0324130"
        },
        "item": {
          "id": "7cc64924-b572-458f-b99d-dc0cdcd01922",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7f763b29-c844-48b3-8896-897733cd574f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81044d53-18f0-4741-9491-fa82951071e6",
        "cursor": {
          "ref": "19ce36ee-baab-480a-a93a-50fa451376c9",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "eb8916de-cb56-409b-9082-297b06b453dd"
        },
        "item": {
          "id": "81044d53-18f0-4741-9491-fa82951071e6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a8e548ad-5cb5-4038-9e6a-4b55e03b0f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23439a5e-1657-4aa0-9a2f-2b5a083bfa52",
        "cursor": {
          "ref": "73c32689-56b6-4fcb-ae3e-84b831886ac3",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "19828c70-1729-4fcf-bd21-6e04627dc1b7"
        },
        "item": {
          "id": "23439a5e-1657-4aa0-9a2f-2b5a083bfa52",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b81954a9-6b6b-4fdd-890b-ec41cb7ceb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f9c4c6-4e3e-4247-8f86-3716f2a7e1b2",
        "cursor": {
          "ref": "318a1da4-be82-47e2-b7bc-123038f2c917",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0c888adf-60c0-46d2-abc2-6145eacb2bf6"
        },
        "item": {
          "id": "a6f9c4c6-4e3e-4247-8f86-3716f2a7e1b2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a7c41c50-c156-4e20-9efc-bdbdf11dc7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3532269d-c297-42e6-89d9-10a126321f86",
        "cursor": {
          "ref": "d5b6de04-0199-4e8b-b996-743b078d97b0",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ce3b0281-3fb1-45ec-8f53-566fcdbae4e3"
        },
        "item": {
          "id": "3532269d-c297-42e6-89d9-10a126321f86",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ac5750ed-9b63-4741-9cbe-fe8f8ecd4604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0cc45d-bd2a-44f5-907b-2e9e1935ccb0",
        "cursor": {
          "ref": "1a294e82-d571-4c76-a045-8f8739dd8041",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "808ac33c-738a-4f39-9a9b-3d7428d65650"
        },
        "item": {
          "id": "bb0cc45d-bd2a-44f5-907b-2e9e1935ccb0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "000afdac-f361-4e7d-b28f-46fc98090e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8633e0ca-ff15-43b6-ae2b-56694d45d8fc",
        "cursor": {
          "ref": "ab10ff9c-134b-45a6-9c21-f1f87792902a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b374bcae-1d05-4958-9ad7-89cb0a89edbb"
        },
        "item": {
          "id": "8633e0ca-ff15-43b6-ae2b-56694d45d8fc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2b06a966-180b-4e42-9ad9-efc7f6624dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1e687c-69db-4a3d-90c9-64250a49462f",
        "cursor": {
          "ref": "619d5688-2552-4a50-ab7e-c829e077f668",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "28bc60f2-254f-4bfc-a68c-344482f806b8"
        },
        "item": {
          "id": "cd1e687c-69db-4a3d-90c9-64250a49462f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "557ed7a6-9c1d-4c8d-885a-8ce96f5778eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f007a6-fa25-473d-8049-841adcd53e57",
        "cursor": {
          "ref": "be36cb9f-8516-4595-a073-41bec74ccba7",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8851524b-4ef6-4e72-a9d5-7c2f454e0636"
        },
        "item": {
          "id": "99f007a6-fa25-473d-8049-841adcd53e57",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b6bad8d7-931b-4a5d-951f-839d62849cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037781a8-6444-4859-94ff-e73c42c2e264",
        "cursor": {
          "ref": "f07f6d2c-d1b8-44fb-8be6-90a42c448caa",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5217e78a-8db2-4392-a51d-6f21e5a241e0"
        },
        "item": {
          "id": "037781a8-6444-4859-94ff-e73c42c2e264",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9b07e7ad-92c4-4ec3-83a4-83c6ec2f5c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91abd5d0-8726-4d1c-ba93-79b76fce36ff",
        "cursor": {
          "ref": "af661cdc-77e8-48b5-b401-543880273cf0",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "18abbe9e-a1ca-47e1-8028-59c630fa25f2"
        },
        "item": {
          "id": "91abd5d0-8726-4d1c-ba93-79b76fce36ff",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bf4d3299-9390-41b8-8710-c9ec516db8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71f3d2c-dc89-4533-b618-3e59c9083888",
        "cursor": {
          "ref": "fc34e43d-76df-4618-b1d6-862b1daeac95",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e9e6040d-568c-4728-b3bb-2184db6a7790"
        },
        "item": {
          "id": "b71f3d2c-dc89-4533-b618-3e59c9083888",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "da09bd3b-f9ac-4b3b-81d4-a7ccc725c48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bf1236-58da-4906-9448-404069c70a54",
        "cursor": {
          "ref": "c817bd4d-7c52-4c56-901a-e1d1dae881a1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "63722b69-b278-4382-84c4-b5b175a8a6e6"
        },
        "item": {
          "id": "03bf1236-58da-4906-9448-404069c70a54",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "62313807-4e46-45cc-9531-551d8532245c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4593748a-0dc1-45eb-b2db-fc1450e245c9",
        "cursor": {
          "ref": "e3ae5e42-fab5-4d76-8a60-b288500cb3a0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f41f50ea-57e5-41ee-8c69-ead9fe49ff7d"
        },
        "item": {
          "id": "4593748a-0dc1-45eb-b2db-fc1450e245c9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3342a1fc-94d3-4010-b8f7-d29f4fa1082f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b1aac9-8c99-4677-8b1f-a22e99830f33",
        "cursor": {
          "ref": "c1ca4d9c-72df-4295-be6e-7bb4daff2a41",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6980b282-d71f-4f4a-811f-6245b4e47732"
        },
        "item": {
          "id": "f9b1aac9-8c99-4677-8b1f-a22e99830f33",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b41554e0-d8a9-4b50-84b6-a9b4b89536df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15af9707-63fb-4a02-8b67-7e81dd13c293",
        "cursor": {
          "ref": "bee8674c-b6ee-4b7c-a342-20b379b92de1",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "970bad73-aecd-4198-9d05-f1756e007f8c"
        },
        "item": {
          "id": "15af9707-63fb-4a02-8b67-7e81dd13c293",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "349ec83c-7dab-4168-80cb-7d1f65cbab00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9261d66f-78d7-4849-b3c1-3f7692eb5aa6",
        "cursor": {
          "ref": "eefd9b9f-ad2a-45c1-84bc-c91459e2017c",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ea89f284-1d16-4f5a-a91d-73181c1fc5cc"
        },
        "item": {
          "id": "9261d66f-78d7-4849-b3c1-3f7692eb5aa6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe7a33dc-cba0-4e3b-b2d8-dffcdbeffb61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caee753a-9bca-4ac0-8f76-293a926af49e",
        "cursor": {
          "ref": "36793e38-a70f-4d0e-88cd-7758a8f38013",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0d57eaaa-28fa-4006-a7e1-99ee123e812c"
        },
        "item": {
          "id": "caee753a-9bca-4ac0-8f76-293a926af49e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9ee8395a-6768-4970-9351-641261c175b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e202db06-fb41-49bb-9683-a5c4d5b90b12",
        "cursor": {
          "ref": "6344d84c-01c0-4230-b3bc-1794049c82b7",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b616c94b-3693-44b5-8692-abf6b47d19b0"
        },
        "item": {
          "id": "e202db06-fb41-49bb-9683-a5c4d5b90b12",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "24545469-c736-47bc-a65a-4e67991dae58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb71481a-523b-416d-8dc5-163897a9677c",
        "cursor": {
          "ref": "974419b0-e7dc-48af-981d-9082362ea0e6",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4e0e2a41-9518-4741-a956-30ac8329ae81"
        },
        "item": {
          "id": "fb71481a-523b-416d-8dc5-163897a9677c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "259ea58d-86de-4205-b5ee-e0dbeb7d30dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939e9982-1292-4dcb-ae2a-fa18e4a69980",
        "cursor": {
          "ref": "56982400-e0a1-4e49-a76b-bd1883a0852b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ba27e141-197c-400f-884e-50a13641f95b"
        },
        "item": {
          "id": "939e9982-1292-4dcb-ae2a-fa18e4a69980",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ff4fcf69-b3c6-4f51-bf59-41219048d7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561a7b29-4d23-40fb-9bdd-a819418daec6",
        "cursor": {
          "ref": "fbbc26ae-0a58-4075-ba2d-9fe055827945",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9ed5eb4a-ea6d-4aaf-aa8e-0904edb7b329"
        },
        "item": {
          "id": "561a7b29-4d23-40fb-9bdd-a819418daec6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "57a3ce11-25d9-4fef-a493-946d8ff80e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8127cf6-680f-4e2c-bc24-e7e9b8686892",
        "cursor": {
          "ref": "35fb1039-1899-4bf7-a8fa-debf673582a3",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "aa257540-2e6d-4f25-ab60-15caacd20931"
        },
        "item": {
          "id": "a8127cf6-680f-4e2c-bc24-e7e9b8686892",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b1b12a6a-2ffb-46f2-bec2-5b3d5260a982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c07a3d-31d6-41de-8422-7c05708e723f",
        "cursor": {
          "ref": "460103e5-3779-48c6-be64-fe4585e15ce3",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5062efaf-9713-4063-b9d7-792b6b91e41d"
        },
        "item": {
          "id": "54c07a3d-31d6-41de-8422-7c05708e723f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "60eafe72-5df5-46cd-bbf0-e658a06d43cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e70bce0-496d-49de-97b7-82c3327122cf",
        "cursor": {
          "ref": "e36e352f-9a48-4b53-af4a-d0e1b1125ce8",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c45b31b7-8702-498d-82bc-b3d815fa3eac"
        },
        "item": {
          "id": "7e70bce0-496d-49de-97b7-82c3327122cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5a66fd61-2bc2-4f5b-886a-e2c7658cd209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d961346-7f89-4151-89fd-1adec2478ffb",
        "cursor": {
          "ref": "ed8c079d-3415-4965-82ed-9c3e756512ad",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e73bd84a-f94f-45b8-a2ec-e8424fe3e35e"
        },
        "item": {
          "id": "4d961346-7f89-4151-89fd-1adec2478ffb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e6b2ef9a-c0f9-4a87-9268-44bc55ec9006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293c3cee-ddc7-414f-84c9-b9af6d51b09a",
        "cursor": {
          "ref": "8b20a776-ac95-4bb3-b06e-6bcb99940981",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "169176fe-4392-47d8-baae-bcbe0ca75075"
        },
        "item": {
          "id": "293c3cee-ddc7-414f-84c9-b9af6d51b09a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4d6b04ac-68a9-4b22-a10a-3a27de4b0fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e658156-30dc-47bd-843f-102186e6bccb",
        "cursor": {
          "ref": "2a2bf707-77d1-47b3-b4f8-85b7390a0787",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1c8808ae-5072-4254-adb2-5d3c4b1c80a5"
        },
        "item": {
          "id": "0e658156-30dc-47bd-843f-102186e6bccb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1bc1e1cc-ba9f-4f84-a9da-9b6fd14711d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af060d1-8a68-438a-a88d-4cf0f9e9b637",
        "cursor": {
          "ref": "3ee41394-3e9f-497b-8609-ea1e0e2ca955",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a40c89e2-70a3-4972-b471-c492568ab9ea"
        },
        "item": {
          "id": "5af060d1-8a68-438a-a88d-4cf0f9e9b637",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "be9ce888-03b4-42de-87ff-5733f7bc0081",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8871ef70-f52d-4b58-9bf3-8d11ec14ae6d",
        "cursor": {
          "ref": "6b5c56d2-d2b5-475e-89f5-a67fccda503b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3a2d61e1-237a-4cd8-978f-af5b608e80ec"
        },
        "item": {
          "id": "8871ef70-f52d-4b58-9bf3-8d11ec14ae6d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0fb87cc0-8580-4af3-83d3-e254823a26db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a721610-04e3-4372-a449-c80c68408a42",
        "cursor": {
          "ref": "2107b79f-b3e3-4c0d-b703-13b207ee1791",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2533d80a-a96e-4fc6-afa9-bb38107931f2"
        },
        "item": {
          "id": "7a721610-04e3-4372-a449-c80c68408a42",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "85ebc4dc-1928-48a6-85c3-44df1e31e6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a31c34-2905-4988-8dbd-64e67e0970f2",
        "cursor": {
          "ref": "585fcf6e-78c9-4764-b080-32ac055e24a5",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e369fc84-0047-4121-a290-c3b9e2409724"
        },
        "item": {
          "id": "55a31c34-2905-4988-8dbd-64e67e0970f2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0a73cd84-5f67-44d1-a6d7-e4e7d5d48090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229824bd-21a5-43f6-8917-68564863a391",
        "cursor": {
          "ref": "d32d55bc-d538-4675-bda2-1c3a7fda4a86",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5469e18d-65a4-4193-9125-ee457db30b6d"
        },
        "item": {
          "id": "229824bd-21a5-43f6-8917-68564863a391",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e436fe61-3d37-4350-81a9-135406860281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c262aa-bb41-48a4-bbb2-cfedd0d4bd18",
        "cursor": {
          "ref": "8f62c4c6-244e-451f-a80c-5a80684326d7",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "63887415-ab95-4cb7-8bc5-a7de811941f4"
        },
        "item": {
          "id": "40c262aa-bb41-48a4-bbb2-cfedd0d4bd18",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0ed782d4-a1b7-4ca5-bc0d-f389a22438b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b3b9c8-3552-4dd4-b51b-8a567bb4a5ab",
        "cursor": {
          "ref": "d377d623-b8b0-425a-928a-356f34c7cdf8",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1114c95f-6b4e-401d-bda5-86c9daedb823"
        },
        "item": {
          "id": "48b3b9c8-3552-4dd4-b51b-8a567bb4a5ab",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bde55c05-ff7e-4398-8013-88511a7aadd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8dbe77-d51e-4fff-89cc-e3fd76f9d860",
        "cursor": {
          "ref": "77b3c37a-4552-4abd-a1c2-4a1a77803729",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "50bb0cf2-f47c-4775-9dab-69e775858b56"
        },
        "item": {
          "id": "5a8dbe77-d51e-4fff-89cc-e3fd76f9d860",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "42dd69da-245a-41dc-bf0d-0fcc947fc1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5167a894-aa22-40de-81f2-9d931e9f6036",
        "cursor": {
          "ref": "a312e6bb-f7fb-4625-9771-7544067b70b0",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "73157278-1a9c-46d8-b7c1-37cb93aa5b00"
        },
        "item": {
          "id": "5167a894-aa22-40de-81f2-9d931e9f6036",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "93df94b7-a656-49e9-9e69-ec3bc324f510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a76f50-9728-45c3-b0da-02e2fb676f1b",
        "cursor": {
          "ref": "9746504c-71dd-4c57-854f-c28919a55438",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0eae23f0-7cba-43d6-a66a-a0ec42f10a14"
        },
        "item": {
          "id": "03a76f50-9728-45c3-b0da-02e2fb676f1b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8e4e3923-9133-4a93-971b-ff98d0a8e59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed872d33-b516-485f-b98e-da290f4cc46f",
        "cursor": {
          "ref": "a1fffa19-3813-4718-ab37-f6ab9f4f8df7",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "05efa6a6-013c-49ba-952d-872821a1dd8e"
        },
        "item": {
          "id": "ed872d33-b516-485f-b98e-da290f4cc46f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2ecde01d-f1fd-46ca-bfd6-d93a51c3da3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e109da-8efc-4397-9805-392454cc81fb",
        "cursor": {
          "ref": "938a3154-f9a7-4f0c-a859-439fb5569498",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "83f32045-ccd0-4c6c-8330-f3d984614de1"
        },
        "item": {
          "id": "48e109da-8efc-4397-9805-392454cc81fb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1c7e4033-6fb4-42e5-9376-4b2fc0cee886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbe468f-f4c7-4f80-a468-48ce8ef4eceb",
        "cursor": {
          "ref": "7c73d4c9-836d-45fa-af71-725a32b0d39e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e99e240e-9bef-4e7c-9cec-6ea6175daeaa"
        },
        "item": {
          "id": "efbe468f-f4c7-4f80-a468-48ce8ef4eceb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "12e0b018-b174-410b-b741-7a1de069ce3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9931c8-e1fb-4685-aa8b-c85635aae2fc",
        "cursor": {
          "ref": "29f68b8e-b2db-46b6-a969-335dcbcf34c4",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a6eb83ac-3a60-4bb6-8016-85a89560b9d9"
        },
        "item": {
          "id": "6e9931c8-e1fb-4685-aa8b-c85635aae2fc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5a07d3c4-3cca-43b6-ae5e-c482e77eb44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3ec0d8-960c-4142-9396-43503ce5d39d",
        "cursor": {
          "ref": "da2a61bf-2342-410b-9a72-f61b9d61a0cb",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c7dc0ad4-956e-4e8f-bd02-01384ea91a38"
        },
        "item": {
          "id": "ab3ec0d8-960c-4142-9396-43503ce5d39d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "980edcbe-5e56-49d5-8448-b0b0e0b8dbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28757f58-105c-4be5-bc5b-3f65612672dc",
        "cursor": {
          "ref": "86de023b-656f-4837-9ad9-67057ebdac42",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b41d9d70-5426-4c8f-a421-74c0435d6fa2"
        },
        "item": {
          "id": "28757f58-105c-4be5-bc5b-3f65612672dc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f36ca598-8074-40f1-aaf4-edc79a231256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d105c69-5afc-4cb1-adde-20a8111abed7",
        "cursor": {
          "ref": "8167aaf2-2f7e-4793-8301-9d73368187bb",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "622d3078-06e6-4dbd-a80c-4c1cb5b4d3ab"
        },
        "item": {
          "id": "7d105c69-5afc-4cb1-adde-20a8111abed7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "22942ecf-6092-4181-b11b-6d7d750eab28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc9ca10-e769-41ad-84e5-4689f4f507e6",
        "cursor": {
          "ref": "2afd026f-7e50-4297-846a-f3b78254a7ad",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b9d5a646-73d0-47db-a76f-838ed9fcffc5"
        },
        "item": {
          "id": "abc9ca10-e769-41ad-84e5-4689f4f507e6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "89364369-0df0-4286-8b0a-7617b780f19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd42047-e306-477a-bb52-6f4fae11cb78",
        "cursor": {
          "ref": "0e94b60d-29f6-410a-877e-112b31c96c64",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "435d68a1-0cd7-464d-8d0c-2b6d4064340d"
        },
        "item": {
          "id": "bcd42047-e306-477a-bb52-6f4fae11cb78",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d8c20650-23bb-4f2d-85ee-231ea8191d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d97faf2-f3ea-4d76-b79e-804e322a66c8",
        "cursor": {
          "ref": "16212153-d85c-4a67-9a91-0901d65e3ba4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ae38b62f-12cc-4152-88ed-a95839ba6ab4"
        },
        "item": {
          "id": "6d97faf2-f3ea-4d76-b79e-804e322a66c8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "01fa46c3-f931-4fce-b7c7-c86209798f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed1ef85-afe5-47cb-9963-64a3bf1dd91a",
        "cursor": {
          "ref": "2cf599b7-7a4e-46fa-b045-881a919b0fc1",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "40afc19c-b918-4ec0-b2ea-b54af0a1011e"
        },
        "item": {
          "id": "4ed1ef85-afe5-47cb-9963-64a3bf1dd91a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c522b5cd-1ecf-4eaf-98d4-caee94665fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a247e1-cd5d-46a6-a181-b2b1ebbf507f",
        "cursor": {
          "ref": "bf69f9f6-f319-4669-9e9a-e683e380b253",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e043c2f1-6b94-480a-9a5b-fccfd115a815"
        },
        "item": {
          "id": "71a247e1-cd5d-46a6-a181-b2b1ebbf507f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e3e31413-000a-40c3-b94d-3c302c1878db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9997219-691d-4718-912f-884e18dc3b70",
        "cursor": {
          "ref": "17d35390-6453-4e1c-a383-dd07ffb4a92e",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "aa17fced-95b3-44c1-92c5-a491c5bbf751"
        },
        "item": {
          "id": "b9997219-691d-4718-912f-884e18dc3b70",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2c46133a-ba1a-49a8-ae9a-7a01aa0030fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35e910f-c704-4ae9-abfe-881207a633ca",
        "cursor": {
          "ref": "20d27c09-b02d-46c7-b17b-c3e4bf065635",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ba00a05d-ee84-49fd-857d-ce007c9943a5"
        },
        "item": {
          "id": "b35e910f-c704-4ae9-abfe-881207a633ca",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "59ba297e-c8f9-4916-a0e1-bfe204b1b237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8549da9f-5dfa-4518-8db3-81ac943bec2d",
        "cursor": {
          "ref": "23a28a56-10ce-4ca2-8fb4-c0914a6601e4",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ba849775-81a8-49f1-bdf7-f76022cce1dc"
        },
        "item": {
          "id": "8549da9f-5dfa-4518-8db3-81ac943bec2d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0cefff22-6838-48bd-85ec-27e1a687c5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49447212-349f-4807-959a-e6696e7fc5d2",
        "cursor": {
          "ref": "34a9ce5c-a4fa-4888-93ab-cf1cf66916cf",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0dba0af0-2f5f-45fe-be62-b318182ea7e4"
        },
        "item": {
          "id": "49447212-349f-4807-959a-e6696e7fc5d2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c43c36ad-4f53-4e30-b563-4d2040c3d704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a047f2-068b-4103-8d26-33299831cf25",
        "cursor": {
          "ref": "11b77802-811a-49ba-8836-0390f670b983",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "729e80ab-f5d3-45dd-b811-6d462ca95919"
        },
        "item": {
          "id": "f6a047f2-068b-4103-8d26-33299831cf25",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2bf40567-4f39-4145-9442-103382c7a583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14148e6f-df67-4c5e-b75e-d66a79c23bfa",
        "cursor": {
          "ref": "8ad754dc-1f49-4477-99a7-df9eb15ad6df",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "510efffd-2f30-4e03-a7d8-9b2b9fb24fa1"
        },
        "item": {
          "id": "14148e6f-df67-4c5e-b75e-d66a79c23bfa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3884ebbb-f192-428a-8f0b-5451451b6e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33876e1-b46e-4852-b655-d6f105dce394",
        "cursor": {
          "ref": "8e79b122-dcf4-4245-93d9-ee3e5b6b0c07",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6373e7a7-a082-4170-8ddd-241201b5d6d9"
        },
        "item": {
          "id": "a33876e1-b46e-4852-b655-d6f105dce394",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d42435e3-0b68-4905-abb4-0fb076475d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef5aff4-d9c8-48cf-b422-dbf3e4da9d79",
        "cursor": {
          "ref": "1b5c45a3-223c-44ff-abc0-0a94795bc45a",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cffb21ed-9a0e-4d9d-85d3-b23d0d344a38"
        },
        "item": {
          "id": "1ef5aff4-d9c8-48cf-b422-dbf3e4da9d79",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "abfa8b50-0079-48c9-b402-64099ae08e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17185212-b2f7-4c39-af3a-d6fe11e059ac",
        "cursor": {
          "ref": "5e283198-094c-4fdb-bb6a-51854fa79cda",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "01dd0dd9-9e55-436e-a3f2-0a39e6a6b5dc"
        },
        "item": {
          "id": "17185212-b2f7-4c39-af3a-d6fe11e059ac",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5a0439af-9d8e-405a-bd96-105bc0092460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66c11e6-9c7b-46fa-b342-2b94fb57cec2",
        "cursor": {
          "ref": "d3a6313c-83a1-4900-8b1d-67f833272228",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f52058d5-5340-435e-a47f-067b6d8dc735"
        },
        "item": {
          "id": "b66c11e6-9c7b-46fa-b342-2b94fb57cec2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d426368b-deb3-4e24-85f3-7e73e22735f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdfb23fa-b9cd-4f22-af3e-9943173b06ce",
        "cursor": {
          "ref": "5f6a2f75-a4f4-4761-b541-36729dc1ea9a",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3e6f1470-9f22-472b-9dec-c4eb96f21d17"
        },
        "item": {
          "id": "bdfb23fa-b9cd-4f22-af3e-9943173b06ce",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1b7aac04-5eb9-4ae6-9a32-eea8420e21a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2ca26a-34bd-446d-9420-6cde096fddf4",
        "cursor": {
          "ref": "4802314a-aeeb-48e6-a1c1-f2e7a1060725",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "24a7b264-d7e3-497a-8cd2-a778249589ff"
        },
        "item": {
          "id": "4b2ca26a-34bd-446d-9420-6cde096fddf4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "73fd0557-1476-4ad8-bd9e-9d9b4a7a8a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cc1a92-ef11-4856-a170-cc660e1f9c4d",
        "cursor": {
          "ref": "22ffe3af-855c-4d49-8ea2-caa1e827c26c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2446d55c-955e-4edc-b29c-4ece54465767"
        },
        "item": {
          "id": "29cc1a92-ef11-4856-a170-cc660e1f9c4d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "eec19e58-df9e-4fff-851a-7dffeccd2ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a937a7-eaea-4286-a86e-a0eddfe312a9",
        "cursor": {
          "ref": "315279f3-6666-4d3c-9f5a-5d1b98770453",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0e42fc9f-2ecb-4c48-8b62-19fcee9df460"
        },
        "item": {
          "id": "05a937a7-eaea-4286-a86e-a0eddfe312a9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6c30db14-121d-4a49-909f-8ccd2b20121a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5868b8f5-7cb0-41d7-b70a-1d6b8f8fa0d8",
        "cursor": {
          "ref": "d3e98793-cc45-460f-89f0-f0945c103016",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c37b6cf9-14fb-4c19-9b20-8fd353df8603"
        },
        "item": {
          "id": "5868b8f5-7cb0-41d7-b70a-1d6b8f8fa0d8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c97e1b9a-3b1f-48f4-b092-52f9883b4de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf7a187-2f94-4cb6-8b5b-a3730f318f2f",
        "cursor": {
          "ref": "a84a2d47-2620-4048-94ca-8715b1bd453a",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a2a7e01c-d851-425f-b11a-3765f39b01c2"
        },
        "item": {
          "id": "abf7a187-2f94-4cb6-8b5b-a3730f318f2f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ada9cb3e-7dc7-4dff-9193-07d5fe925b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5600705c-4dba-40e7-878c-cea016114739",
        "cursor": {
          "ref": "da57cd12-ea8e-44bd-85e2-995073d4ef90",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1359d7bd-14cc-4a38-9250-18f172ce79f4"
        },
        "item": {
          "id": "5600705c-4dba-40e7-878c-cea016114739",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3502badb-ce2e-440e-ab73-fd15f38b0773",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d053ea1-b931-4bb9-a091-41c232a7a3d1",
        "cursor": {
          "ref": "4be6208a-b3f7-4f3f-9e2a-1d9a3231577a",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fb6c8f5a-5988-4f30-b783-13f89c3fe78a"
        },
        "item": {
          "id": "7d053ea1-b931-4bb9-a091-41c232a7a3d1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cdb6222f-720c-4e84-9cb1-95633493acf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa65adf1-df49-4d4e-931a-5c9481760840",
        "cursor": {
          "ref": "424048dc-8df1-4554-a545-f6d6264eaae9",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "facf1ea1-b36a-409b-80f8-5ba5bbf1532c"
        },
        "item": {
          "id": "aa65adf1-df49-4d4e-931a-5c9481760840",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "249bd630-bd31-49fc-ba91-b3d88a5494f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f40027e-f5d8-4746-803b-9dbc19635547",
        "cursor": {
          "ref": "8d74de62-5257-464c-bc83-9aa86904bd90",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b45ae930-0a46-4ece-8a73-2d57e6245131"
        },
        "item": {
          "id": "4f40027e-f5d8-4746-803b-9dbc19635547",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e0076852-2d81-4db9-a10a-530cd8fe394e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a119012a-0470-41cc-816a-27e748f86b19",
        "cursor": {
          "ref": "62d05085-4a0a-433d-8d68-12efdf1c42b8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d1f5a738-148a-4c9c-9484-bfdcdadf4f4f"
        },
        "item": {
          "id": "a119012a-0470-41cc-816a-27e748f86b19",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8bd0a17d-8cf8-48da-b063-e2a1bbaafddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e52d24-ad37-44e9-b037-a35e327e8af6",
        "cursor": {
          "ref": "2e7357c7-d0f1-4b20-971a-f9606173ae41",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "251d12ca-1d53-4527-9fd4-296b31854755"
        },
        "item": {
          "id": "20e52d24-ad37-44e9-b037-a35e327e8af6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "07862114-f4d4-4aed-91bb-ee3a6ad95cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058d86ea-9c97-4f55-b0da-f1a5b4d110ca",
        "cursor": {
          "ref": "634db189-09ff-4d73-b6e5-db947597f2a5",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "78d5d73e-0b41-4079-bb31-3037da9e1f19"
        },
        "item": {
          "id": "058d86ea-9c97-4f55-b0da-f1a5b4d110ca",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "216d4f81-063a-4f19-9875-a33623c9170c",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "3a37dca5-8bec-494a-af59-8f95b77a3433",
        "cursor": {
          "ref": "dc2a66e3-3ff9-4e0a-8952-3ea591ce5c6f",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f4cf8957-8b53-435b-9948-8e517eaa4cad"
        },
        "item": {
          "id": "3a37dca5-8bec-494a-af59-8f95b77a3433",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7ec8295a-9af8-416d-9301-b67eefe0f061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a6caf8-a9ee-46c3-9a94-4f9d42350dbf",
        "cursor": {
          "ref": "a8c3a929-fc30-442f-a20b-fe18bd26b51d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "65c69380-a7e8-4356-9228-1845c503c3fc"
        },
        "item": {
          "id": "a7a6caf8-a9ee-46c3-9a94-4f9d42350dbf",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "59f939c9-ab06-4fa8-bbdf-f35f32aaa39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc95759-0e00-4b4b-a7d9-02d80c06aef6",
        "cursor": {
          "ref": "defaceec-5fc4-4a4b-9c98-7b648034f5d5",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "01f651ee-df9b-4dcd-9e62-58e4b162f829"
        },
        "item": {
          "id": "8fc95759-0e00-4b4b-a7d9-02d80c06aef6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "aea1b6e9-43b9-4a49-9e12-355620df5b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce6ee85-871b-43c8-952c-bcc899c777c6",
        "cursor": {
          "ref": "a6c72470-14c8-4e97-a984-6f1c455a2a7d",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0afd3da2-d929-4804-9bca-0b057a393b09"
        },
        "item": {
          "id": "bce6ee85-871b-43c8-952c-bcc899c777c6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "84b16f23-a122-41a0-8195-fc50e47ddbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086812c1-558b-4a0e-9ce9-5fff6faa2a8d",
        "cursor": {
          "ref": "92453db4-1f34-48c5-b2d7-ab1b299c7d31",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "785ca71c-3401-42b8-8482-7e24692f4ed1"
        },
        "item": {
          "id": "086812c1-558b-4a0e-9ce9-5fff6faa2a8d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "723d64b4-7000-4a17-8023-835da52ea984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c4a65d-d6eb-48cc-8a36-d4dc7476fdcf",
        "cursor": {
          "ref": "da95a073-4148-44be-99f9-663843f22092",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7c02d601-42cd-4d7c-b5b1-0d4c6c5b02d8"
        },
        "item": {
          "id": "80c4a65d-d6eb-48cc-8a36-d4dc7476fdcf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5a452ffd-7cf9-4e8d-9dfa-3f60aba919b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4d5e06-5e03-44cb-9166-e2f37096a03b",
        "cursor": {
          "ref": "88b68878-cac9-409a-accd-3b48c97967fb",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5f532ebd-8b06-4f36-a5bc-1661de64b5b8"
        },
        "item": {
          "id": "bd4d5e06-5e03-44cb-9166-e2f37096a03b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6cb14c72-fd2a-45a5-b10d-29e1dffbd09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b47d46-a8d3-4ba0-bba1-7197ea598661",
        "cursor": {
          "ref": "81038ff8-b2de-4913-8747-8d7360e9944e",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "10e3e514-8544-4da6-9e68-521dbc17ba6d"
        },
        "item": {
          "id": "f8b47d46-a8d3-4ba0-bba1-7197ea598661",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "61c15b20-532c-427b-a68c-bef0a94f77f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c21eeda-962b-4422-b299-1f6953426623",
        "cursor": {
          "ref": "e618e699-1894-4201-bb74-12c69aaf32e3",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9946b5b2-34ea-4bd0-a474-f15c9e863fe3"
        },
        "item": {
          "id": "2c21eeda-962b-4422-b299-1f6953426623",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "45d03c32-299c-46be-957a-79a13654ee70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3eb270-b3be-4a1a-823d-c291b0903fcb",
        "cursor": {
          "ref": "6c271d0b-40de-47a5-b9e6-94f92dbdb765",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "85f0d7da-0cd4-4320-af0c-fe969a1b1ebb"
        },
        "item": {
          "id": "5a3eb270-b3be-4a1a-823d-c291b0903fcb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b48e0672-22b9-4986-a619-a5eaaf0db898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16340c42-26f1-43e7-8af3-bad8aa220599",
        "cursor": {
          "ref": "a9c3ffa0-fd4f-4302-b240-9dbdb11e5baf",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a8768453-0ee9-4589-beba-3c251dfc86af"
        },
        "item": {
          "id": "16340c42-26f1-43e7-8af3-bad8aa220599",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "49308d6e-914a-4f56-a73e-ab2ead29d34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b133576-9f44-4230-8782-cdcae7c900d7",
        "cursor": {
          "ref": "150319ab-9287-4483-9ed0-3c09be4d5296",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "51a3160f-0ab9-4a85-9b49-1744ff9dde5e"
        },
        "item": {
          "id": "5b133576-9f44-4230-8782-cdcae7c900d7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9de2e7b3-8e71-4d98-9d4b-a260882b8ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e5683b-3eee-4a12-8155-5970ff71f570",
        "cursor": {
          "ref": "9cca6458-1410-41ae-a24d-1f0c22760e51",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b681f942-e4b2-45a8-8541-2e17d1cde05b"
        },
        "item": {
          "id": "54e5683b-3eee-4a12-8155-5970ff71f570",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7ed4f0d1-064f-43d9-b22b-d38826996ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ec0306-6c13-407e-8fdb-4d84dcecf5c2",
        "cursor": {
          "ref": "ea7705dc-431d-4be4-990e-be5e083b9969",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f3fd819c-7bbe-4dfe-ab8e-fae572f420b2"
        },
        "item": {
          "id": "38ec0306-6c13-407e-8fdb-4d84dcecf5c2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0afc7515-d348-4451-a697-0545b5993ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ffae0b-4e6b-4d60-9e35-434c581f50a0",
        "cursor": {
          "ref": "c8a8ce76-e7b1-4eb0-8108-d9774abe3b9d",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "60c727f0-2810-4822-9878-c8c778253e67"
        },
        "item": {
          "id": "93ffae0b-4e6b-4d60-9e35-434c581f50a0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8a0ac3cd-3059-42ed-9463-5c5e3a309f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ca78e8-9d19-47e7-8999-738c7dfdc784",
        "cursor": {
          "ref": "3b7af05f-bcd5-4a3b-820e-a5f8898b1515",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a03bafeb-baba-4309-ab13-2974c2ac6303"
        },
        "item": {
          "id": "e6ca78e8-9d19-47e7-8999-738c7dfdc784",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8ac783c8-d1a1-4e8b-8672-687c4bea086d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448b6af8-2833-4e6e-a36f-fab1ce34caaa",
        "cursor": {
          "ref": "5848e47c-3224-4911-9414-5b8bf0740f54",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "88018dd4-e66f-46b8-9605-4c52633e40e4"
        },
        "item": {
          "id": "448b6af8-2833-4e6e-a36f-fab1ce34caaa",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f0fc705c-ef50-4358-a50b-a2a479379b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19204833-1985-4895-8b9a-fa3d7e31bbe4",
        "cursor": {
          "ref": "69909514-b1e2-4401-8f59-6bbdef2a8148",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "12c566ec-8cd0-4151-8c3c-01612eeb56ad"
        },
        "item": {
          "id": "19204833-1985-4895-8b9a-fa3d7e31bbe4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7573f6e0-d3b7-4b3b-af5f-fa96cb03a2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29049ba6-c61a-4611-86c6-5fd92b48dbae",
        "cursor": {
          "ref": "b0e4a5c7-6287-4dc1-9676-3422191f3b42",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7e944b47-8d68-4d07-99a0-c0589bd3de95"
        },
        "item": {
          "id": "29049ba6-c61a-4611-86c6-5fd92b48dbae",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c7d79983-7d91-43fa-a744-a2631c3170cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3940e2-2818-4aff-be98-ab2ec2b7297e",
        "cursor": {
          "ref": "9a9466d0-fc0c-4bfe-b48c-5099088494d0",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ec13757f-fab3-4842-8655-b61c06b37fd1"
        },
        "item": {
          "id": "ff3940e2-2818-4aff-be98-ab2ec2b7297e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4a5c70f2-b5f7-4472-b14c-ba16da74c655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880f297a-3701-4ac5-86b6-c80e590831a1",
        "cursor": {
          "ref": "0b9bac54-9fa6-4236-9cc5-7550ccb7b369",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7f1bda77-3714-4696-ac48-623f9f1ce650"
        },
        "item": {
          "id": "880f297a-3701-4ac5-86b6-c80e590831a1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "97abc608-d6a8-45bd-9342-c8983fe0439b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94082fe-3b9f-4cc8-beec-aa4adcfc7c0a",
        "cursor": {
          "ref": "6339ed24-db88-4c00-82ee-ce7d82eae913",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5532d199-af40-407e-8d9b-f779cde558dc"
        },
        "item": {
          "id": "e94082fe-3b9f-4cc8-beec-aa4adcfc7c0a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "84c64362-6843-4eaa-b5b3-2942c65788a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec2e068-c4d4-4b79-b6d4-f14fff3de231",
        "cursor": {
          "ref": "7209a598-f1fd-48fc-aba2-9adf21b65421",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "77ab2c2c-2282-45a0-93c8-9d97256a1def"
        },
        "item": {
          "id": "4ec2e068-c4d4-4b79-b6d4-f14fff3de231",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "59326ec2-74bc-421f-8e23-34c029c149a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241b56ad-bdcc-4320-879a-01cc2bbf7b67",
        "cursor": {
          "ref": "08154d4b-0376-4f6f-bf33-557d3e098931",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ce7e3ff3-ee55-41ce-ae36-02b3daec23c8"
        },
        "item": {
          "id": "241b56ad-bdcc-4320-879a-01cc2bbf7b67",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ccbedf6f-7b87-4088-ac8c-d1f63fa8f745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973ce81b-2a38-449d-8263-f869318b1b31",
        "cursor": {
          "ref": "52bce557-f1e3-49f7-92f9-29cc44e361d4",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5f5769c3-9dc4-4b91-8399-1c9ee29df587"
        },
        "item": {
          "id": "973ce81b-2a38-449d-8263-f869318b1b31",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "08a18885-a9ea-406c-bd6a-3f2784f0306c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288d31e7-f0e0-435c-9643-fcd218cac897",
        "cursor": {
          "ref": "988039e2-693f-4e64-91a7-3b4abdce27e1",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "aa38a220-966c-440e-b64f-ac7a62015cc6"
        },
        "item": {
          "id": "288d31e7-f0e0-435c-9643-fcd218cac897",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2f2d7adf-a7e4-4370-940d-3c0ebb3fcc82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145f1220-4ad1-4cba-a0fb-7e850b071093",
        "cursor": {
          "ref": "3c68ffee-eca0-4b19-939a-c3f0f9a1b52e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "db8ce5a3-a64a-4da9-92e7-27a498740713"
        },
        "item": {
          "id": "145f1220-4ad1-4cba-a0fb-7e850b071093",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "414179dd-5095-4a69-b3b1-faf226edf532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f1593f-1e23-4ec9-8539-1df782d52175",
        "cursor": {
          "ref": "7985e314-410c-4334-81c4-a045a400ed1e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "92f48fb5-b165-4dd2-afdd-ac86319ec198"
        },
        "item": {
          "id": "c1f1593f-1e23-4ec9-8539-1df782d52175",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a1a3c6d4-5d7d-42b3-96a1-3416a376ad3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbeb263-00e0-4bce-8293-f65495c77335",
        "cursor": {
          "ref": "96bc0fa6-158b-4e13-9ae8-46e4906d8902",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "046b6043-08bb-4c91-bcf7-676ad589fd7b"
        },
        "item": {
          "id": "8fbeb263-00e0-4bce-8293-f65495c77335",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e5a5eb94-1682-4748-8ec1-b03dc3d2043c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180c8be2-712c-4b80-82a9-af694471d707",
        "cursor": {
          "ref": "d691971e-ac69-4dcd-a4ba-de44ca423539",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "63be75f1-5e32-4182-80e8-3bbde59cc2d3"
        },
        "item": {
          "id": "180c8be2-712c-4b80-82a9-af694471d707",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7dc2af4f-3893-4db0-b1ac-3a68a8082787",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f890af0f-65cb-4885-a579-14c180ae4cb3",
        "cursor": {
          "ref": "3a35987d-6b65-4397-a800-aefeb36bd4ad",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "699a5099-1d49-4eb7-bffe-ef2d639fc663"
        },
        "item": {
          "id": "f890af0f-65cb-4885-a579-14c180ae4cb3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c6cd4a73-b100-422e-ae0e-ec0e14de14ee",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "fc36d648-689c-423f-a2f8-ba93ef7386b8",
        "cursor": {
          "ref": "69a135ec-cffd-4c8b-a7ba-aaa0b0218a82",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "54cb1c3e-6fb6-4c55-a2d4-f52bdbbfb705"
        },
        "item": {
          "id": "fc36d648-689c-423f-a2f8-ba93ef7386b8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f1c935d0-7995-4d52-a4bc-7fa291085d4d",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "02dde043-4949-477a-8e3b-9262b6782307",
        "cursor": {
          "ref": "c04f712f-f583-4428-9ab4-0fa531a678e7",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1b1255cf-e87e-42c7-90d0-dcc1ac44e9ec"
        },
        "item": {
          "id": "02dde043-4949-477a-8e3b-9262b6782307",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5d641ff2-2015-4e9c-8cc1-a40b6f90ebef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069c20e1-4e75-4f01-9dbd-ccc9eda66589",
        "cursor": {
          "ref": "e8dd08e4-86ed-4710-8cf4-185cab53b6ba",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0e6b8a17-9df1-4268-b6d9-32db029180a0"
        },
        "item": {
          "id": "069c20e1-4e75-4f01-9dbd-ccc9eda66589",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "147c1fec-a08f-4de6-9aa2-c12468972998",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "94edab0a-be96-4d05-96ea-0aa12573c7d3",
        "cursor": {
          "ref": "673a1712-d04b-4b40-a885-1e01c53b1990",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fe2904b0-7694-4e1c-a1db-3f8767f1bbfb"
        },
        "item": {
          "id": "94edab0a-be96-4d05-96ea-0aa12573c7d3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b24a70f8-c7c6-431d-b9bc-bbe92c96d31b",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5ffa2448-729b-49fc-a9d1-77d995c1aada",
        "cursor": {
          "ref": "bd3a2ee4-fc6f-480b-a9d2-63a53ca3a7f5",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "811d1399-8f82-4d4e-a286-64dbea4d5ad5"
        },
        "item": {
          "id": "5ffa2448-729b-49fc-a9d1-77d995c1aada",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "626217a5-541f-4d04-87a9-46c6a82cfa56",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f78f903c-554a-4031-85de-4dbf7bae61c1",
        "cursor": {
          "ref": "98da74e5-a738-4b71-990c-4dd731ad0714",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d8277950-130f-46d6-9277-2bf4ddfdbcc0"
        },
        "item": {
          "id": "f78f903c-554a-4031-85de-4dbf7bae61c1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c7473ea5-76fe-42f3-b941-46e1306bbd75",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6fcab246-4734-4f10-a9bf-9001c81f985b",
        "cursor": {
          "ref": "f1e9e6ae-3d2a-4643-855d-660067fd0c00",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a2dc6c00-b233-4a40-b8f2-591d4cfa2aed"
        },
        "item": {
          "id": "6fcab246-4734-4f10-a9bf-9001c81f985b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "22116a11-c881-4ff8-94f0-2e5110c016ca",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0ebf6171-0b16-46c6-8666-8a7d10df88eb",
        "cursor": {
          "ref": "72c419a4-bd04-4c0e-8f03-f03d46b65d27",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "19b884e6-81f9-4a7c-9525-4949cae25e3a"
        },
        "item": {
          "id": "0ebf6171-0b16-46c6-8666-8a7d10df88eb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "39fff559-4ae3-48c4-9e4d-27e0361c1bb8",
          "status": "OK",
          "code": 200,
          "responseTime": 311,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "4cfbccda-d907-4cd1-930d-397ff9ed67db",
        "cursor": {
          "ref": "e9fb49fd-9caf-4505-928d-00654376599c",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "40887c59-3ac4-4396-8bc1-82c38fb4814f"
        },
        "item": {
          "id": "4cfbccda-d907-4cd1-930d-397ff9ed67db",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "221cba35-a7b9-419d-a286-31a75708b659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32205fad-95b0-43c6-aebd-cc5f7eb20496",
        "cursor": {
          "ref": "156c5595-2039-491d-8ba6-f404e1d16bd5",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "333dac5b-70b0-4be2-882f-7b6fd31d54f8"
        },
        "item": {
          "id": "32205fad-95b0-43c6-aebd-cc5f7eb20496",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "36ce332c-f8eb-4228-a298-41b1e10c8681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668e99f9-e14a-4e79-983c-f6bedd2170b3",
        "cursor": {
          "ref": "fa544fea-f5b5-44f7-a753-12b6588e5d13",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6d476dae-4892-4cc4-b4dc-40e29985b755"
        },
        "item": {
          "id": "668e99f9-e14a-4e79-983c-f6bedd2170b3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3bed96ea-c0e2-46e1-9b89-fe0a76b9b79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b5c2f8-dfb9-4522-861e-d3732bf58155",
        "cursor": {
          "ref": "47ca3736-484e-4859-bcd2-1567fad2d3a5",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2adabe9a-cb80-441a-b324-3c9c5891ae82"
        },
        "item": {
          "id": "09b5c2f8-dfb9-4522-861e-d3732bf58155",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8fc341d3-2e2a-41b4-8d18-e38a40aabff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d445fbdb-fa41-4e4d-916a-ef384b5aad09",
        "cursor": {
          "ref": "675855c2-91dc-4090-917d-a4e6804e76ed",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7b8db7a2-ea2e-41bc-96b3-5eb33466ef72"
        },
        "item": {
          "id": "d445fbdb-fa41-4e4d-916a-ef384b5aad09",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5e5a7ad5-ec1a-43d3-82ad-cfadd8afbff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7ac301-fb6c-4393-baf9-15a23d84d385",
        "cursor": {
          "ref": "ab0d2cf3-6b5d-4766-a5f1-21312d556531",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3053247f-f604-428a-9d37-cfcf92a87401"
        },
        "item": {
          "id": "6b7ac301-fb6c-4393-baf9-15a23d84d385",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b7adb70d-5eb7-42f5-be1a-7c4d39004f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d65eb54-b28c-4a9e-8acb-199c3eba20f9",
        "cursor": {
          "ref": "82f5059a-4873-4ba3-adce-8f9c190c7ddf",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ae93a888-cf78-432e-ab92-0d22e9f40f60"
        },
        "item": {
          "id": "1d65eb54-b28c-4a9e-8acb-199c3eba20f9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8bbd269f-21e4-449f-aef2-796425a60654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabcaef0-dced-4233-96d9-d552f8309ec9",
        "cursor": {
          "ref": "c87f1acb-0819-47ad-b9e6-c05e13683e3a",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a53f6a2f-1933-4018-bf06-5bc032e44b85"
        },
        "item": {
          "id": "eabcaef0-dced-4233-96d9-d552f8309ec9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b24371a7-424f-42e7-94ab-5ae52cec6525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02862e89-3496-400c-b13f-ef403b004a0c",
        "cursor": {
          "ref": "742a5713-3bd8-4a65-8b5b-c192c6c03919",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6b8aea5a-da67-4cfb-a729-33df49ae1560"
        },
        "item": {
          "id": "02862e89-3496-400c-b13f-ef403b004a0c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "51d33061-2d6d-4704-809b-86cf9140f646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf09ba68-620a-4f62-be5b-2d430cacf26e",
        "cursor": {
          "ref": "81981fda-899a-4900-9168-ac8c178b926a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "15c4b416-96ea-4255-9ef1-44fa35f4e741"
        },
        "item": {
          "id": "bf09ba68-620a-4f62-be5b-2d430cacf26e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8c1af907-d187-4cc9-90fa-08f0b8bace6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d55300-8275-47f7-b4a5-d49b25c542a7",
        "cursor": {
          "ref": "58dfeefd-ec95-4cad-8567-b5e50ec252d7",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "57d48fb3-f78c-47fd-a989-72a3fb7e5d7b"
        },
        "item": {
          "id": "97d55300-8275-47f7-b4a5-d49b25c542a7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ff3d5a37-b914-4313-b8ef-2677778391ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0daf0cb-5b99-4be0-a702-5cd125292ec3",
        "cursor": {
          "ref": "67860536-7ddf-49c6-8655-9f9f05102c72",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ae9cf070-6630-4155-9854-f4b5ddb148f5"
        },
        "item": {
          "id": "f0daf0cb-5b99-4be0-a702-5cd125292ec3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f0026fe8-3cc2-4abc-a377-5a431e70f0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c999a98a-bd57-4277-8d75-13d0b1d17a13",
        "cursor": {
          "ref": "092a014d-3084-4673-9ee6-8aa2ecf19862",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "df4cbb64-470d-44ba-894e-409d2b70ed31"
        },
        "item": {
          "id": "c999a98a-bd57-4277-8d75-13d0b1d17a13",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "69ca080e-3ef2-4e4f-8024-9073aaea4078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6784aa-34cc-410b-9e90-3c970a268d10",
        "cursor": {
          "ref": "c535febf-bf26-4c4f-bc50-9320e1e7cc42",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0c093d75-07a3-4265-b5dc-d79a0cd9357d"
        },
        "item": {
          "id": "bf6784aa-34cc-410b-9e90-3c970a268d10",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "83d3e3c2-edba-4402-a438-18e3301dcb1e",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "22a1ba0d-0d20-4d72-8580-a54db3effe46",
        "cursor": {
          "ref": "b6758f0a-c0d7-4fb1-a81e-0081ed62d34c",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7513d52c-ced0-471a-9596-c38025394b0a"
        },
        "item": {
          "id": "22a1ba0d-0d20-4d72-8580-a54db3effe46",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2826973d-4c2b-45cf-8d84-5ee600e96be1",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8802955a-9274-46b8-a009-d73782eeb917",
        "cursor": {
          "ref": "e0960574-a88c-4f08-b1b6-10b831eb79a1",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1328fe06-fd58-40e6-8ae1-aeccdb1495a8"
        },
        "item": {
          "id": "8802955a-9274-46b8-a009-d73782eeb917",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "79d24ebf-6685-4a56-aca6-1723f68536d1",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "11c22a6a-5393-4320-b50e-237b83208bdc",
        "cursor": {
          "ref": "b5db9f91-fff6-48d9-b7ca-f4cb8b5b5421",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d03e67a0-751b-4c6e-821b-b3a7fcc75eeb"
        },
        "item": {
          "id": "11c22a6a-5393-4320-b50e-237b83208bdc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8f73f020-0417-4589-8f32-7eeb80a1ee15",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0268fb74-1188-42ed-9535-24fd1916c9a4",
        "cursor": {
          "ref": "6131a564-7120-41d9-bac2-f110483eecd8",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "746745f1-ce48-45b0-bcf9-f87f1433a68d"
        },
        "item": {
          "id": "0268fb74-1188-42ed-9535-24fd1916c9a4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "712b4e1d-0fd4-4f0e-99c1-5ce7804cebef",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "38f2dad2-6dd6-40e3-a02c-6b59351cc520",
        "cursor": {
          "ref": "7ffd5703-af66-4f5c-9ff4-2e64fe0af045",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bafcd8fd-7888-44df-b9dc-089d8ff7e907"
        },
        "item": {
          "id": "38f2dad2-6dd6-40e3-a02c-6b59351cc520",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dcc8b8d7-74cd-46ec-8f89-d3f90c854efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ed58b4-db3c-4bf9-b7ba-9699f153f525",
        "cursor": {
          "ref": "06d9e353-a5f8-4cfb-b12f-0f66d4cee495",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "49db1011-150d-451e-9d8a-b2aeece16ec8"
        },
        "item": {
          "id": "e9ed58b4-db3c-4bf9-b7ba-9699f153f525",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "058b147e-6a41-46fb-96c2-dac01cc6ea3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c239df13-6573-4664-b018-7ade80342e58",
        "cursor": {
          "ref": "1b436bb0-dc82-496f-94da-d819c742ba73",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cc82836a-c760-40f8-8aec-78246341e604"
        },
        "item": {
          "id": "c239df13-6573-4664-b018-7ade80342e58",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "efbdaa6a-b768-4639-91c5-bee4a3139407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3086df-ad3e-497e-80d9-1c22b3bc2926",
        "cursor": {
          "ref": "27f56299-6aad-4768-aa1d-5a4808bdcb5a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "528b92f9-9990-4d10-941c-77c46d422c88"
        },
        "item": {
          "id": "3f3086df-ad3e-497e-80d9-1c22b3bc2926",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9e99e3b4-4b18-40db-b3a9-65f7cd41f692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef8f750-5b82-431d-b5ca-71cd26d5201d",
        "cursor": {
          "ref": "e7865bb8-3d05-4f6e-be74-11ce287103d9",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "da05866e-8fd8-497f-9bcb-c153b31f4549"
        },
        "item": {
          "id": "9ef8f750-5b82-431d-b5ca-71cd26d5201d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6f9513d0-d924-449f-8c0d-6070acc286f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff293fc-e421-4755-b370-12a3ea67d564",
        "cursor": {
          "ref": "e7e16c2c-a27f-4b8e-9411-ef203782054e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "76e862e8-af20-4535-b9e6-2e1cf8a9d96b"
        },
        "item": {
          "id": "7ff293fc-e421-4755-b370-12a3ea67d564",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0bd91f48-a962-469b-b8ce-f891a37727a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ca9f85-34d0-4c51-9d84-ac4ab7587cde",
        "cursor": {
          "ref": "410ac1fa-4933-471d-bd0f-0e42319f21b5",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "08181e43-9def-4bbe-88db-1923e3a301ea"
        },
        "item": {
          "id": "f4ca9f85-34d0-4c51-9d84-ac4ab7587cde",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7180866b-0ba7-4513-a036-475fc755c749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f91a951-8662-498b-809b-6c2e179f742f",
        "cursor": {
          "ref": "a0edf2d0-f729-4c88-b04a-c865b36632cc",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "22237ed9-be69-47f7-9009-2d989ebfc53e"
        },
        "item": {
          "id": "2f91a951-8662-498b-809b-6c2e179f742f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "139f15c8-eb7d-4da8-8f40-ea020f7c5eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40b0d53-2948-4ba0-98ee-ca6e84e104c7",
        "cursor": {
          "ref": "8ecb6e71-b7de-493c-b361-2e05ef9b0314",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a73a5bcc-c8cd-4bf9-a7b5-f20e87427c39"
        },
        "item": {
          "id": "d40b0d53-2948-4ba0-98ee-ca6e84e104c7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9ea05100-e645-4743-8ce9-c004528c99ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850313c5-354a-471c-9a48-44d3d69121c4",
        "cursor": {
          "ref": "6717eeb2-2cba-4bf8-b89b-546ba6903770",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e1f0164b-5424-4db8-8267-81bb3d49f106"
        },
        "item": {
          "id": "850313c5-354a-471c-9a48-44d3d69121c4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ffec1a15-7339-4a0b-ae0b-8e22e532824b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8cd8f9-e8ba-4291-a60f-15e0ceb845c0",
        "cursor": {
          "ref": "b21170dd-ca47-423c-857c-ac902bb6c071",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "abc49b11-c4bd-40e5-bf3b-74ee637af61f"
        },
        "item": {
          "id": "7e8cd8f9-e8ba-4291-a60f-15e0ceb845c0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4819bc92-34ba-4177-aad8-c3d9469dcd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa38d7bc-57e0-4907-9681-ddbb9a72c975",
        "cursor": {
          "ref": "3754a891-2d40-4aa4-b077-2c328cd4f501",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "48a318c2-2a7f-45f9-9ef5-26595ca7e979"
        },
        "item": {
          "id": "aa38d7bc-57e0-4907-9681-ddbb9a72c975",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e9cc5b3c-4168-48f8-b3b2-bfcdc48686f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a32833-7624-4473-ac42-885b415e0d8b",
        "cursor": {
          "ref": "4f4540df-88c4-42d1-8fb5-94e3acf8b75d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "71a8d616-477b-44fb-ae95-6d9a5bf6d098"
        },
        "item": {
          "id": "20a32833-7624-4473-ac42-885b415e0d8b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cb0c82a2-11c1-497b-90e9-ae08821bb03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60abb90-40a9-430f-8b4c-fa54e31459a7",
        "cursor": {
          "ref": "d3d2c6c8-5c03-4273-8ec9-52225885672d",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "fc862e72-7a40-4153-a835-6711883ec9a2"
        },
        "item": {
          "id": "f60abb90-40a9-430f-8b4c-fa54e31459a7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fce632fe-c4c2-41be-84d5-b5b5dcd92982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b946c1-118b-414f-9a58-593d374b3022",
        "cursor": {
          "ref": "321d09e8-f69a-467c-b9bd-07cce360d7ae",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "628d8941-51ea-44b0-949f-882e691fe9ac"
        },
        "item": {
          "id": "91b946c1-118b-414f-9a58-593d374b3022",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "db00805e-fb6e-40ab-89d9-0b5256d3c3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b53845-d760-468d-88cc-273ae3d2f25e",
        "cursor": {
          "ref": "51d32256-c250-4193-9152-a77f277bb158",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1d12575d-fa76-486e-801f-fb2d7bc4c86d"
        },
        "item": {
          "id": "a2b53845-d760-468d-88cc-273ae3d2f25e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f22abaeb-14fd-4b1c-99b7-70452f60d8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10514ab-026b-4521-acbe-feb0f15717bc",
        "cursor": {
          "ref": "20062c0d-4a54-4762-a26e-135037ff0c97",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "727870d1-0528-4a17-a830-5283f08e5f6e"
        },
        "item": {
          "id": "e10514ab-026b-4521-acbe-feb0f15717bc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bcf6293c-766b-4b35-9337-81491c289f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7f0dba-c85f-4710-84bc-9eb0748543ac",
        "cursor": {
          "ref": "38fc3a1c-d14f-4bf1-a194-d49a6d9f87f4",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c1b1266c-83b9-4c13-8c28-3837c3eb239e"
        },
        "item": {
          "id": "5f7f0dba-c85f-4710-84bc-9eb0748543ac",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "64fc000d-7080-407a-95e9-501e1e63d2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c7f7e2-e10f-44ff-94e3-c290313b9ebf",
        "cursor": {
          "ref": "e2e02f98-d705-4d56-aa66-b11428e25b6c",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b3bcbfca-ecb2-429d-8bb7-1ce0e2075a7e"
        },
        "item": {
          "id": "43c7f7e2-e10f-44ff-94e3-c290313b9ebf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "eb7de6d9-f75d-4568-a9f1-40ba8885aa9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b231d6-57fa-43ff-8a0e-eec36398b1fd",
        "cursor": {
          "ref": "17f3efe3-5c6c-4ccd-872d-b123c5fee14b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d5f00c09-57b7-4ac8-8fb7-3d4abbe30512"
        },
        "item": {
          "id": "80b231d6-57fa-43ff-8a0e-eec36398b1fd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f404f203-7bd8-46d6-a527-ba11cdf00ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321d270c-049d-4da0-886f-ccba4021da5b",
        "cursor": {
          "ref": "6757d30b-0cb5-4487-ac2f-75d2eccbc45a",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "caa67aa8-24fb-4b84-a46e-d5dc3a72ccfd"
        },
        "item": {
          "id": "321d270c-049d-4da0-886f-ccba4021da5b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "59d1485f-a69d-4abc-a8b4-0d83704204ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36872d77-38e6-4772-a502-25f901d5c6be",
        "cursor": {
          "ref": "9aa5597f-9b76-4b98-93d6-bdba8e9aab7c",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "70b79b6d-b02a-4cd4-ae84-206eccd51f2d"
        },
        "item": {
          "id": "36872d77-38e6-4772-a502-25f901d5c6be",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "81342bd0-aae4-4147-b30e-e16aeff192a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed39fc5-dea8-4aeb-8404-aa574ae461a3",
        "cursor": {
          "ref": "45520116-a114-4172-9d1c-4e18fa256802",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "58a39053-294c-47ef-a10c-ba37fe66c815"
        },
        "item": {
          "id": "2ed39fc5-dea8-4aeb-8404-aa574ae461a3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6de30d0e-f849-400c-a319-db80a5728714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365a3175-e50c-4d04-8ba4-12f0ab3f97aa",
        "cursor": {
          "ref": "3b650421-4532-40d1-b464-9ae2979f06fb",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "caa2b313-4685-4c0e-b1db-a6d929faafa9"
        },
        "item": {
          "id": "365a3175-e50c-4d04-8ba4-12f0ab3f97aa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "246c5e9c-d65c-4e39-a183-bde3b5c2f154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddcb0f3-6ec2-4096-ac3d-d83d16cf8bdd",
        "cursor": {
          "ref": "23af33f4-9efe-4a56-9d65-151253ae4f1b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2f9ea8fa-d0c1-4cdc-922d-1f48e67e1068"
        },
        "item": {
          "id": "cddcb0f3-6ec2-4096-ac3d-d83d16cf8bdd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "14c1f349-f7d1-4750-9729-d644c49b7294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01221e73-633d-48b0-8df9-39ff11f2bbaf",
        "cursor": {
          "ref": "f183a94f-e4ab-4b17-8e78-97c04c654ebd",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c86059b1-a6ca-4252-af83-73247bfc0007"
        },
        "item": {
          "id": "01221e73-633d-48b0-8df9-39ff11f2bbaf",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6146f283-e349-4e9b-90a6-f1443fcb19c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21abf196-a554-4fe7-9403-4b216f87a41e",
        "cursor": {
          "ref": "efba174e-bfdc-4317-90e0-db7ac5aa0ea7",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "160b8788-c00b-4927-8012-00230ec94a9b"
        },
        "item": {
          "id": "21abf196-a554-4fe7-9403-4b216f87a41e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9b94cc02-a0e2-43b7-8bea-6a40b222d37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fb38f0-0b75-474a-a82a-02a8e5243538",
        "cursor": {
          "ref": "3b855d70-a2f7-4a74-9381-82c3aa7cc225",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "217fee82-a11a-46ca-ae1e-83cbc63946dd"
        },
        "item": {
          "id": "56fb38f0-0b75-474a-a82a-02a8e5243538",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ea1d663e-c1ba-479b-824b-65101164dca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2019161-d576-4aac-9a9f-edd16c885d76",
        "cursor": {
          "ref": "f70c67d9-e488-4cbd-890f-190db9765423",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "14fd5ad7-9756-47e6-9e9b-3a2600cd91ca"
        },
        "item": {
          "id": "d2019161-d576-4aac-9a9f-edd16c885d76",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c6b9f901-7d84-4c22-a288-dad04e871e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b33fdd8-493e-4a94-a234-c4acbffc08bc",
        "cursor": {
          "ref": "9959a5ab-67e0-452d-9219-f0b0dadcbb91",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "86dba5d8-63bb-47ba-82b8-d51883070b1b"
        },
        "item": {
          "id": "0b33fdd8-493e-4a94-a234-c4acbffc08bc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c0780040-d498-4fa6-b7a7-1379466f3454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8caaa085-3d8b-4982-aba8-7d470fba77a3",
        "cursor": {
          "ref": "16229778-56b7-437a-b109-ce29a959327d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "db9b8f0d-a01e-490c-a9c1-ec1c5813c6be"
        },
        "item": {
          "id": "8caaa085-3d8b-4982-aba8-7d470fba77a3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "097e97ce-79c8-4c83-9149-5c2c60371b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b2427b-6ab9-4355-b72e-d299dc457d26",
        "cursor": {
          "ref": "2308ce7d-13a5-4042-9306-daa7c37a8871",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "05d31246-e02a-40c1-af75-e06b8db0f102"
        },
        "item": {
          "id": "63b2427b-6ab9-4355-b72e-d299dc457d26",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e1234e88-e54e-46d6-86a9-a1626794bdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22b8aed-4f01-4724-bb0d-e2b9c4b37f93",
        "cursor": {
          "ref": "c90ac496-2d73-4cea-8282-fe7117a80acd",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "957f45f9-36a2-4930-a635-52f98fdc2960"
        },
        "item": {
          "id": "c22b8aed-4f01-4724-bb0d-e2b9c4b37f93",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "90168396-207a-4795-adb0-8dc25ed1f5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9e728d-2599-438e-97c8-2fcc499c70e2",
        "cursor": {
          "ref": "1982cb11-02fb-43a1-89b2-3232df0e2f28",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "fd84fd25-1da3-4c04-add0-5d3abbeb56e7"
        },
        "item": {
          "id": "3a9e728d-2599-438e-97c8-2fcc499c70e2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0fad7c37-7599-4907-ba69-7626b9786263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fec3e71-bbac-4bf6-9379-1d86582a43b5",
        "cursor": {
          "ref": "1f1ce2f3-da38-457a-ac8d-80c87327d4b2",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "e919128b-353d-4839-bd34-e1e3af6404c3"
        },
        "item": {
          "id": "6fec3e71-bbac-4bf6-9379-1d86582a43b5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0bab4726-837f-4b29-81d6-2406d9f89628",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76887e82-a94d-4a41-b063-c8b4be27df6c",
        "cursor": {
          "ref": "9f68a46f-6ba0-456b-b90f-1e5971b95b25",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3d9c7111-8f5f-4500-a078-af93c4ed09f9"
        },
        "item": {
          "id": "76887e82-a94d-4a41-b063-c8b4be27df6c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e74311e8-be20-4cb0-a5f9-d73a68766577",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "8aa03105-8e67-4f49-b045-d9a512469c73",
        "cursor": {
          "ref": "d5c98280-18f7-4c9f-8640-78c3afeb1cfd",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e9d46330-165e-4526-a87c-23658749177a"
        },
        "item": {
          "id": "8aa03105-8e67-4f49-b045-d9a512469c73",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c12a9948-c540-40f3-a206-d06344e27903",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a9804f-f935-4154-bfa0-dedfa961fc1d",
        "cursor": {
          "ref": "786e7745-c4d0-4bc1-bd1d-a56018e85f07",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "7136189d-3f7a-4631-86db-92e37ad7beb3"
        },
        "item": {
          "id": "f1a9804f-f935-4154-bfa0-dedfa961fc1d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "07a8ebd2-0baa-4650-9732-7d354986c8e0",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1ef342-2b4c-4a57-8783-1cbf38fa41ac",
        "cursor": {
          "ref": "67d52a1b-45c8-44e3-87be-5f4599eef996",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "34c006e4-1402-4930-b7bc-a9a3a6764b55"
        },
        "item": {
          "id": "4f1ef342-2b4c-4a57-8783-1cbf38fa41ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b814f4b4-b05d-48a0-8e5b-cb5c45982a60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1ef342-2b4c-4a57-8783-1cbf38fa41ac",
        "cursor": {
          "ref": "67d52a1b-45c8-44e3-87be-5f4599eef996",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "34c006e4-1402-4930-b7bc-a9a3a6764b55"
        },
        "item": {
          "id": "4f1ef342-2b4c-4a57-8783-1cbf38fa41ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b814f4b4-b05d-48a0-8e5b-cb5c45982a60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e0564f-158a-4502-8c2c-8c4720b4afa7",
        "cursor": {
          "ref": "3522ff29-ecc8-430a-b3ec-517efc6716c7",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3741bbd2-3536-4e92-bd02-b173f0b0449c"
        },
        "item": {
          "id": "b9e0564f-158a-4502-8c2c-8c4720b4afa7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b86f19d5-2245-48f4-b7da-f10642953cb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f925a388-115d-4d87-afe2-de1e986531bf",
        "cursor": {
          "ref": "84a2a059-596a-4740-8427-a9baa93ea98f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "917a4428-0b7b-44de-a5f5-944f909f143b"
        },
        "item": {
          "id": "f925a388-115d-4d87-afe2-de1e986531bf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f305a165-5e12-4ee3-9b9b-b528eaca3dd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}