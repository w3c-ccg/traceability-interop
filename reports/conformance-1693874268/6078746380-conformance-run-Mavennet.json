{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "90f9d959-7fd5-4087-bb42-124308cbc994",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ce01594d-752c-45a9-9c02-7c692837cd61",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "df959565-fa4c-482c-ab27-3e537db10d99",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "debae60e-eaf1-4e53-99cd-7eecd4dc180e"
                }
              }
            ]
          },
          {
            "id": "96b8a288-d04f-4da9-9579-ccf8d3baff92",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a2f5672-6974-4af0-a7cb-5665be944e17",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b2d0c616-f49d-41d6-b892-6e3cedc78303"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fb029010-fd38-4b31-9417-e5563099ab2c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "67bcf84f-3b12-47f6-ab34-9600908ca767",
            "name": "Positive Testing",
            "item": [
              {
                "id": "267fcd93-7cef-49dc-bcfa-fe1c4ce2ed5f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bf4fa7f-69be-447b-b957-2d2721c86b27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41ea7f65-c1dd-49c6-b274-c46f9a01b379"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2887f952-fda5-4fa6-98cb-40866ec7eebf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a71fe70a-b92b-44e2-af5d-7a0cfa6ce3b6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7daed340-2f3c-4a3b-8c1d-08da0badb939",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08e72582-502f-4a2b-ae6d-049a05903431"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9965bff5-a538-4488-b618-0d9b22834bcd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6f65d475-fe26-49c8-88ad-457776dfcd05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4622dcbb-7a40-4965-8468-c83179fa2125",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "428b4091-026c-44f3-bacc-1448c713801d"
            }
          }
        ]
      },
      {
        "id": "1aca4b25-ed13-4ebd-8138-a52f79de9a73",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "528ad1d4-37bc-47d3-ab66-9f0c82680f34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27d5a801-ca69-42a7-84ab-535a9dec5810",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e3bd330-95af-457d-99a2-e2cabebc8d27",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1671f8ad-df5b-4471-aeee-b2f84f260ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c54fead-62b7-4bcc-aa89-654081a26d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249f5a79-a707-4885-b8d1-78cc43a28dc6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4879f4-c4d3-48c2-b079-26152266680f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9be1ffd0-20b0-4501-a101-f89506385184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a89366d-5bf1-48b7-b0f4-983a60cd8623",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c187370-f8be-4705-a295-f0bee7a005c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1125661f-93c7-47df-93af-e6ebbad02784"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dcaaa168-1d20-450a-9338-11c28900a417",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f752852-595a-460b-bb91-06643f71afda",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07bd536-0ec4-4635-ad09-9f741c1513a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70cb7e79-3dfb-45a9-8591-2a396183cdc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7705b0ef-2f23-4d40-9c04-4544cda2ea19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af10045e-0106-4066-9b1d-b1817d8831ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "14a0076b-f239-4992-8222-5440a8c41949",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f565ff3-3bb9-4670-a697-95b1d1d031ab",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c5ac3a6-1752-4f02-b52e-c1f9f9e071a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f201a059-dda1-445a-8a0d-17e0a32585ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75f12a26-13b1-42da-b8a1-a7ada517577f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1e555f75-f92c-43b2-85af-c4ffa09c6b6f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a44885d-6a36-4d77-ac73-6f58f5987a66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1ecff8c-e08c-442e-9907-835758d3e6c1"
            }
          }
        ]
      },
      {
        "id": "8803e13d-9b49-4fd3-ad42-c0b6ff617649",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "506d0a1e-dcf4-4533-a737-9be5f32cc046",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6bfa89d-7900-4661-b8d7-8f13572c0b36",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d979e7ae-cc69-4f98-a1c7-1d9230da4c88",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09059477-2be8-4bb7-9695-1e267e4d4dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9728ceb7-280b-4476-835d-60125bbf1315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf6a1ed-da16-4d69-9917-53e8669de17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afb8be7a-43e5-4f45-90b8-6ebb5758485e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d9db54-711f-4d99-a1a8-95d01b1bea45",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcf106c-64ed-4c8b-88ab-1f32b36a3969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18dbba09-3489-483d-a7b7-f252ed3403a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6001d7-56bc-4890-b610-1457735f8d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f20a10c4-44a3-4c2d-9436-9452be67c070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53510992-e74c-4b0f-bce9-77fbf054ca5e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0d5afd-b6c8-4358-92e3-6b5cbcd5845f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d72da7f-215a-46f2-be17-0425de6330e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba471502-65f4-478d-a4eb-fbc4afbc45b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "249c07ed-de4b-408d-ad53-495ac17f82e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0171ddc2-0184-479e-ae9e-b7b6d75f8c35",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc0d3aa-7c24-494c-a8ef-2260d65b0797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563662f3-d370-4878-8a59-3feab9bd2c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abc33be-caaa-4c33-843f-e49a606da923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3373b59-98fe-43bc-9042-d69b3a2c95e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e10718b-877c-49f5-a57a-156e7c591b43",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad26eb57-0826-44c2-adf9-39c1cde0783c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4340b9b-29b9-45bb-91e0-f45b2b1aea70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de6a0d4-9515-40af-8fd4-8c47b6bc14b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8add505-32b3-4ea3-ac60-20ddabf33bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746b07e4-693e-46c0-9fe6-d5f76e2742dc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c5a8eb-754f-41f8-8bb7-21360f13160a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d3e501-16ed-4119-8dd1-13648e6aba98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9be8704-5876-47b9-94e8-a14d14092a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "290edc3a-e3ed-48e7-8786-3fd9e7b33dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4dce9c6-7692-44f3-a4a8-55dbf027b508",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "132ecd46-a44f-4b0c-a063-93e70bed08f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664e7010-3f12-4f69-bad3-9fc1a7fc6537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7abcf64-b136-4d9c-ab4d-b72f6b9077db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "922b7136-9c1a-46d1-a309-2023de2fe340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5016bcc-5251-4933-96d1-1705fd453ba3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720c788d-d667-4fac-a45c-5eb6266bcc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce83e61-d615-4674-83f9-dc357975964a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580e5ef6-035c-4e03-88b9-64556ef5edf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13dfe9a9-b33a-4741-989d-6ecd32f95180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a8cbe9-01ba-494b-9728-a13b5fcd1f0b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34cdca58-4361-42b5-b9a6-a138fbc998fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe39724-3d0a-484e-a2a2-ef14909bf101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e80c1a4-e67e-41c0-925b-ed2e0df14804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48f89c76-e0ee-4d2d-a0d4-6cdaee7fb82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d50db2-87bb-47ed-b327-80e179a010d8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee9666d-ccb0-4204-90f2-5f610952de7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1e376d-e709-4176-94ac-40b8a8b5a02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807d8efa-e5bd-4a07-81ef-bade5b6c061f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a0b1ec8-838a-4c7b-b371-f030793610e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f141b4f4-ef70-455d-a6ff-84f83db2cc4e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b3086f-cccd-4363-a917-e9bbee386adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf02647-3058-4ce9-a73a-8f938635915e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290c1e03-7883-41f1-a54a-3b484202a535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16a49656-f57b-4a66-ac2e-bd3632018081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4969d61-c297-4de3-b101-1c9d061acebf",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676ff02a-f0f5-4b44-8b84-f9b71410b640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3137f014-da51-4eb9-8939-d78066874063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37c598c-79b0-4c6f-8303-8dc0074f6972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a5798b1-a297-48f5-b78f-0fbe4010ed28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a62d10f-15b5-4b09-8ef9-61060dd17e20",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e561b7f-8845-4ce0-bf03-e6a3d811ec23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcdc4c36-69d4-4d9e-ac48-6f4d5b9f8d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5877614f-7ea5-4f89-a85d-d33873310bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b00218b5-f60b-4f7a-ac8f-a60d58cc05cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77277b65-150f-42d5-bc06-e4d5032f6164",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d529c399-9f93-4e2b-b8e0-9a873f9bd79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17e6307-87c0-48aa-8e59-42f4a7e3fe6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3039997e-3c98-4533-9d00-c2190b3d56f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86c6135d-91e5-4f71-8801-e59a3cc140cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a34d8cf-33b7-4586-a2a5-61e243c8c93e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ead422c-70c8-4cc3-a873-c88bfb31e7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a73bb6-e954-415e-944c-dd977a34a28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713df485-290e-4d52-8f75-487b44b9e204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "242eaa3b-c43a-4fd4-84cb-4a6f022f3599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a30df5e-d584-4e70-9771-e1b74e97b9bd",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bb2c5b-e127-4364-bcbc-efa60150ba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d81de9a-d7b3-4699-b45a-dafd1478b257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99701083-934a-421d-a9b8-9b490d2c185e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80202b6c-6202-4409-bd5b-3671b13f7e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b60ccd-3788-4ddb-a677-de3bb94c424f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b16153-6b1b-44ab-952e-6cb7da82c83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14eb504d-f922-41a8-9c63-c80a5920a47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0f693b-a619-40af-810e-86bc9d5ad707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c69c798a-f1fc-40e6-ba73-ae71176194b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d78c89-e3e3-47e8-9c4f-be1b2f2d1deb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead4a17f-dc1c-4773-8756-52d8bc1c0caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463d6d3e-4a16-4ff1-a98e-aa73f2286168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743b2551-f52e-4f1c-89ac-7e0e3fa2a276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6abf0a1-7a89-4d85-b57f-baa3ba83d3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947ac15e-8554-48b9-a988-64447013ec66",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbf9131-d09a-4fa2-a4c2-5cc9491d94b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d741856b-b666-469a-9018-69ed4a7ae6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6f1d68-6723-4ecf-a5b2-ba6537c4d045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60b56ae1-281a-496b-9935-412f8fc4dc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434d08cc-6c86-49ab-ac17-df930bad615e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87070dd3-b1fb-465d-a768-c7e02b810d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec99aa8b-d49f-4093-88b0-206bfab96a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa5776d-3116-4f63-bb78-2966ea4f3ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86eab7ad-f884-4ace-b0ba-6f7f883a59b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c4e277-5ba4-4359-996b-621ff0335e7e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3228749-b600-4ed1-8d06-59c3f3dc3546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148af70b-855b-4764-b419-c6af3afa19c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a363f6d-c7e4-4bf2-9947-9409a3764394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "359748d8-82b8-4f65-98e4-31999a0eb41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfd79a2-8959-4a15-9cd0-f0e11e2f4745",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f856b5-75c2-465a-b710-08907c8982c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed552e6c-b503-4597-903f-abcb6920802e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401a6253-0874-43a3-9c6e-0aea562362d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4560c68f-d1cf-4ac8-a21a-a038744d6576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0337423a-5b68-4b09-a867-274f2a1740aa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca09e70-9f13-4e18-b1dd-d79ae8e99f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8c0f0f-0ebc-4cb3-a28c-9a2ece43ac8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ddb5e9-53eb-4b4c-9440-e3345ab90053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f72a63b9-bad8-4b52-bce3-aa77e8e27a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e0b08f-4e14-4b34-a223-11773757c793",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9180bd-a639-41c9-aed2-fb365aa37477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9b626e-b312-415b-86aa-3b482f987251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e281b936-9e2c-4116-aeba-cd0bfd75e0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f69ed241-a22d-4ae2-9bb7-c71230b16dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f7f202-ec88-4044-9365-522b693b73ea",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c803bb-e48b-49e5-8699-2bf850a10590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dee952a-9d58-452c-876b-7c349f7f8cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8f3c9c-f3c0-46ed-a2c6-b80353d7e0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1ccd70-c539-41e9-aac6-547ae2bdedfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e056e3b1-9121-4ee2-ad3b-38b39a7ad3e9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e075df-02a8-4f51-b90e-1f2344adb42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fc4a85-94d9-4b7e-a6f8-f905e81d3d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56f04b2-0770-4981-99e4-8558b5d59c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b603b06-f286-4bf6-8705-24b0a121c9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665663d2-a6ca-4e94-b028-55af273a3b20",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d715cf60-5055-469b-ac72-a7faf729f28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b883d96a-6267-4706-bb7b-1fb74226a6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e6af91-6f17-42ff-ac52-9573dcf62bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d34bfa-f7ff-4ed2-b29c-d5364d021504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4393dd6e-af44-4db6-b1f1-4636da698525",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7d2d94-8428-4a1f-ac7d-eb0e8ccfafdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe82ee0f-9e73-46fe-92e8-e31af0598bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948ddce7-0f73-4ec6-b1ef-40092971f996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2979eb-6792-4efd-9405-00436bd4fe25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25aa214e-350c-451f-bbda-fb89a57e4bdc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "785b9f88-df3b-4525-b3c4-773fedb40d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad4bbed0-0f71-4dc4-ba03-69a6c2581709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077350e7-2ac8-45ae-b299-c01249b90247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "52d24bc1-6674-46ff-8bb3-504f0bd0d7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e58fba-897d-4587-ab26-07a32d717fc0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b4ca2f-5a86-4a36-84c5-7e600da5d272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be5d7df-e165-46dd-935f-9eb8b15b4c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd95386-17bd-49ac-b72d-011cf6e0c7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "49606696-1977-49dc-900e-9970a5fec175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc7fa20-d7fc-44c7-bdc8-86251efb1b1d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31ebb9b-cd4d-4cce-9a72-9c48da7e49ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e45d03-e4f5-45ed-8025-7eda820b162e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defc4243-0327-45cd-82ad-d8225e4e73f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74e1145f-b169-46a6-ae08-0449dd944cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0b5b42-c398-44ea-8e6a-bbd4d09049ee",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec9ef6b-6a6e-48de-a958-d4663220ca93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f1dbae-5baa-46f8-a4c5-d8d6a359ae60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5b0c89-e72a-4256-bb37-82c7729ba42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6a699c-72f6-4b15-9fcb-5035ca5d9685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e419f596-3b38-4172-9609-21a3c170ca18",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb42912c-e7fe-48f4-8f66-792d1aa8558b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ccfaa0-46a3-4352-a172-eca6fadeaa59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c9d827-32f0-4cda-b1ba-1b0c5d38d88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3a72f1-99a3-49e2-acba-bb0cec567974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2550fa0-88ed-4508-b2fa-57b84ee5cb46",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb6ca1b-4ec3-47a3-9c31-7ba85298853f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3129b217-5efe-40cd-afa4-e0a307c3d1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4949005-0901-44e2-95c8-4cedc6b0f1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30f87863-1210-48fc-81e8-872baaa25f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951e818b-39ac-4380-942d-a9f8a4e7538f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e5f25f-7684-48f6-babc-f9caa4f603a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44180942-a052-4e6a-a0eb-1135a7aa4814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc968a43-ddcf-454b-9f83-873da6feac26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "07da56fa-fdbe-46d8-9d73-da31d031b64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90529377-a99d-42d8-8f91-6cd7ebedc90f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb31733-d22e-4551-8073-62938bb8aad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6692b33f-065f-4fd6-8f59-cbe1cbb38fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48ef1f4-d9d7-4316-9695-e169ab534d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7110df74-e0c2-4e41-819b-a71b56fd937a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e414551-b567-49a7-a1a9-c5d4d4fd8cc9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393a373f-a663-4f79-a6db-f48d5867acc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294f3e74-0250-406c-a81e-3bf6eec431db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ea773f-781e-4ea7-8cd9-3566c328280c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd53d69-1df1-49e4-b5fb-be26e440e54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9d71e4-2879-49c8-bf9e-0dc079656c77",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ccf5024-d0f6-408a-b7bb-bbbc3c4aad7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab08c62-cad8-49bb-bd62-2cd025d3cecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba6e0ab-9100-4c99-8932-c3dde205cd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c79dea81-10a3-4cdd-948b-0a98e9c7c2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0e1d1a-3003-4a93-9bc9-098f67e872ab",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76712b92-19da-4b04-92ba-74243f9199d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ba28a0-2225-40ef-ab44-850336bfd0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3272d7-383d-4c96-a8f6-18614505a856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d20244-e745-4ac0-9fec-1157e4eb4e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c5609d-040c-435b-b2b8-810233c965af",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708ef62b-3c85-4053-ba01-9963bf7622f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba988360-fba5-4d74-ae41-4043da227140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80aaf569-a28c-4642-a418-a50abc4f24e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29073175-bf8f-4d0f-9be4-f62ec9150eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8807c2d0-d24f-4e18-a00b-706f6f84c4be",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f79fd8a-5ceb-435b-b87f-88545cd7beef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7994471f-c1bb-4f2e-986e-f1b426041a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b60fcb4-9272-4a77-9704-733b14c9ad5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2dec4da-9be5-4301-8744-97cd20bad965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed359f25-8fc3-445d-bcb7-9d604c7718bc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b54f83-fa79-4b98-9393-cbeaffb5a601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcef1ec-618c-45d9-a433-2ca5952a7412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d61aef6-e348-4878-8a76-5c5380991380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f6bdf376-de9a-45cc-b70c-ba9837ac191e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d467078a-1644-4436-913e-736f560ea3c6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e9d807-bc9b-47e7-a323-6060e4cf539f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fb710e-5e29-4396-9c7e-273b7b5045d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ad1640-7e79-4f59-8d5f-1f51fcf2887b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6e5b50-43cd-457f-b4ae-04dcfdad7b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765b0225-1189-45a4-b4a4-f4b85d182f2a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad73cfa0-6c29-493d-8a8c-2813c6e42ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4582266f-9d1b-4488-8d93-1a00d7caf3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e3b682-ee1f-4cb2-bac3-5bea9111fe41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "51f17717-6d90-4b86-9ff8-b131bef25c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdffb33b-cf3c-41dc-8bfc-d4a5100a2dc2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd0b315-f517-451c-8a88-0feb3d715244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d540f474-f5a7-410c-be82-34d0399f0274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f1f9fc-5fcb-4b1b-9a19-cca9c3ce4cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b27a4857-9e90-499d-b72e-00ec069c3b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455d7edf-7cc1-4c53-bc59-8595826f97fe",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254f8e50-cc70-4dff-9f3c-2788ed65078e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8a2851-69d8-431e-9a3c-33e188558423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d99d3e1-64ac-45c2-8ee4-3a576884822d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "badd4daa-a559-425e-851b-df7fa9110146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd444e8a-54f2-4e8b-bb89-b0bf2c1f73cc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1197624-c3f2-4d99-bdc6-0a4395c33eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1f9dc1-6bbc-4954-adc1-1007bac17a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f39ebc1-72e4-4cb1-8514-ec71a75b42ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5a6b31-7e0f-4ead-9cdb-564d775f3623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c9532c-bf2f-46d8-a690-3c34940fd95d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbca7c8-39ec-4801-809c-eff2b7fde308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251afe79-68fc-4b5d-bc59-eafd91a8a4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc55729-1089-4eeb-a661-75776446fb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b44349c7-86b1-4018-bad4-ad01a427845b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0660d37-0216-4edc-9efb-e3134e82f0a9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004f35cd-53b7-4ef5-8066-3d712dfec71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd546622-e488-4529-8d53-d789d3a939ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd0f4fa-0068-4ca6-86f1-0eaabe96bcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "019e3690-249e-488a-b9be-b49ec7021eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac8608c-c5a1-40b9-b7dd-4412d6f33089",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd061a2-5a0c-4704-92c3-61078615a33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a313806d-7644-408a-8e52-c829a894a9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba922e7-6e17-4ea5-91b0-f73afd450aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1855ef1e-15bd-46e5-9625-1154a5aa93fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1a9353-0d17-4dc4-800d-2b73c8d6f094",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f09988d-f6ab-478f-afca-9a81f2ebb313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9267bd6-afb9-4ddc-874e-7fc403eb8698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef0a06c-bedb-49a1-ae27-916e81018e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a317da0f-cdf3-4683-ad77-20c96beaf12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893728e8-129c-4903-b9f5-fbc4d24a5c94",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdcad40-1d41-4eb6-a34e-72d3a81e2467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0796ce0-b7f8-4ac6-8475-2ce4657e9499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4fedca-576a-474a-b24e-a008dd3bb4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad33299-5bc6-4125-9fe5-53c499759e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55440972-e0f9-4499-98a2-80dc5504f967",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe0ba28-9bbd-442f-bf6a-fe8f26ed105d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40101581-d246-474d-b786-4d1b88e7d46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c725bed3-1cee-4dfa-991a-4adde1c5ce82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2731e7fd-9372-4135-a552-c7862fc16b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279577b3-faeb-4947-9380-5e3f74be3b65",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82f80fd-91b8-46fb-869c-82de3cdf8780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334087da-e255-4f72-ac46-498a93c304e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe7e306-e666-40d5-95c2-008bade941df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19f61886-006c-412e-a1d4-39b5d35cba65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb28735-a1be-4dad-a21f-ed4f3baa7e3c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110e989b-740f-41da-9fcd-3e6978f99fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f1af33-c138-4920-a4b1-432e6dfc8edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4926e2a2-f70e-42b9-95e4-0f4893ffdd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a23ea49-c4e6-493b-9517-8db60d11ed85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5960554-0e51-4f51-814a-70efbc044f74",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f289130-df93-45cb-a41a-a41594621054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a16013c-bf6f-48ed-b4e1-4ce2fc899098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09420d78-6a97-4bea-8e39-17067d7593f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e4be215a-95c1-442e-9e60-93c3e4d46cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a49eba3-7d9b-40af-aa9b-a8a9978d6ed9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea538015-b9e9-4c25-b2ba-f3ff1849baaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695ec1b8-5db2-4a88-b060-a0246131ad73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ad84a2-93ea-464b-8895-4322eada168c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9a75c6-db65-4035-86a2-5fdb18123448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d411c67a-bb55-42fe-bc91-bd34f7ea09b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10f2bbb-81ee-437e-a54d-d2cd4155b97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6a6db1-4d10-4ae6-bab2-68ae24280a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718039ee-9cc1-482f-8435-f06e202ee43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98fb19a0-dc14-4c6a-81b8-4096b29616a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156277c9-3a06-4ccd-bbf0-69c0bfcc9751",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a45a4c7-9460-4249-ade8-8255b70c120a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb424fd5-bcf4-4326-9ed2-4babfbf0c47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726664b2-c8a2-42e3-b11f-0ab9bcc0a3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "59701b00-8c3e-4381-a45b-03d2f78140fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cfc593-a61b-45d9-8434-e504718bd8ae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23ce263-a1ee-4e8e-9b97-a3b248cfe18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c48b608-409b-4356-a10c-9f8792fed86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfc4ac6-f776-4ae5-9bb6-9b9e3be422f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb6093e-02fb-46c4-8aaf-a624a55fad9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43729404-deef-4182-8c07-3eed2bde34a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bea5d6f-9471-451d-8304-6f6335d9cdf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bcdf979-b46e-4e22-ab2d-a5f4d9f1d32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725762d8-4b3e-41c8-8a3a-40acd49073b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a592faf-861c-4757-afae-33fefd9f9956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0577c5-6db1-4bbf-ab26-72a1be1760b2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5107b73-6e14-4adc-82db-eb9fd927f136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0c3256-57c6-4841-9c01-3d676a538fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917df4ea-6cc0-40a3-9880-4eca7bad153f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f38b4a70-2fc3-49f5-88c5-7ea7997926ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c859232-baec-4222-97cf-5365427e75f7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141fb836-917f-4faf-a91a-d1e25657d1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd6fe11-e216-4d78-850c-e947ed8e4599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fa7a5a-f505-4d58-b789-b08b8a35452d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3f49b14-c482-4ce6-a597-f0a7a8850b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c230217-53d6-4b63-b69e-73d92382cb3b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7baf512-21a9-4053-b7b3-78e381d65bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12cd8299-16ff-488f-a41b-ec7d002350ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a17f9c-d648-47ba-8d66-42004bf5eecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9de07c0-3105-4933-8546-e1555fa6672d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1564de-0551-46df-8809-f18b0440cec3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32a8786-87ea-4343-8659-fb800ff37fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caea568e-7291-4104-bd50-2abe3a703de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981a62e9-307c-4f1f-9860-eb3ea2303c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97b0d57f-93cb-46e1-98c7-41ba376b3daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fdfea0-2dbf-4585-898f-166c8e8ab03e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77079ea9-c263-45a1-86e4-f4b4c1fc17d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7f0178-6f3f-4f1b-98a2-431a9dffa30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8692d4c-788d-43d4-a95e-32fd4dbcccf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1e0bc3-a01e-4884-8766-588c0a9a7ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9800bb-06e7-4ced-9917-3cf8b10efc88",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5926ddd5-566d-408f-97a7-544983be622c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6435de67-86a7-4529-bc33-50ae81a8ead2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8594cbb4-25bd-472a-851b-4cfc1118c5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d186d55f-a836-483a-ae67-3644066d5136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9499c32a-57b7-4375-92c8-50c78be33e61",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f87ce34-5a63-40e7-b270-071ec5fc6818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600bd25c-01fb-4177-b208-e76d679c45f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2709280b-86d5-4f2c-bc28-d561d0cb0dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b41a82-51c9-45ad-8562-688e98b13748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7209b03-5247-4bc5-a471-e7305478efd9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae01978-1117-41f5-8f91-bc604eef96e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14369e0e-12a3-4ea0-8b84-df8fd4b5920c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b93f83-31aa-4337-abbe-5f6d68a82b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "01726f98-8ac0-4ba6-9297-1e7522beb56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39196037-248f-4d00-bd45-571a928550c5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a722fb7e-0ea7-47de-847e-8ffec3343a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfeebbcf-9ca5-423d-ad12-71d029406cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de12c11f-25d4-4794-8276-277b4c4998fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b58e6c3-9b17-47a5-a4dd-c8f7bc58a0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14080657-27df-4bc3-920b-5bef9c597b47",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4638246-aaed-408a-9158-a5863e1b315c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a10aab-8af9-4ea2-a421-04cfc2bace91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dfa67d-f7e6-426f-869a-bec80d46a4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb263fe-9f86-4cec-877b-45aecfac4ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39eb3836-3890-4df0-93ec-7a4aa6222115",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bf733d-fdf7-4935-affa-16af842151f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ec1f90-2249-49f7-a5d7-04423d7ceebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9311281-a33e-47d5-a1b5-5ed10ccac8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34a4dd5-157d-4592-9763-06b77776aaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb02922-3081-4306-805c-5c7d0279b9b1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584ee95c-ec9a-495b-b325-54f1b967563a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d4fdb5-74a2-4024-9869-cf0b883fb99d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7df18ee-5af3-4c01-8322-921ea8985a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb4c9d0-c32c-4233-b37a-cbe967d734d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503a2384-0462-40be-b8d3-353ed022bef6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fca595-6fb9-4665-8b74-00f65aa590eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e994f1ac-a342-4edc-9d1a-636cba45a5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841ea331-330c-4c91-b4d6-9c696aae2610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ecd362-085f-4a28-8627-fe514fc0bf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affa3f19-c4da-4f29-8101-2f8234b8252b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bb4271-abe1-4e1c-81bd-7e3a7131a68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45826a54-0dbb-4cb0-8d82-7f53fcb380ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320c7c8b-b76d-43cc-b0d0-85791ce4c25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c8615b3-354a-405a-80b6-bc34801d3699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c76270e-5e2e-4640-9ea0-47e65c07c779",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2564dc-c81a-4374-bacc-e01b2b12f012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4333354c-abf5-4a82-9744-c958c8aad558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91981f1-a40a-40bf-aa87-164ba0c29892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81118de9-653d-4319-b34e-e3fc1f24e312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555c3f51-3feb-445a-b54a-2d96cc161cd3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd1c823-3c77-47e1-a7ba-97e16e308cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb5f9c7-776a-4f35-b0db-7aa46c406f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f221e5a9-4dca-41cc-a569-65bad92edcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a22aee18-c719-4e9e-8f1b-43a120bb075b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ae3515-f2ad-4303-9e4a-e92eb0399489",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e983d13-8271-40bc-8a8e-9caf74723216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22938f93-3f3b-410a-af1b-f5607f35bc35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47effa7a-a93f-473e-bcd7-baf8df970a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c21c3c7-3c9d-4712-95cf-f6f44c3699fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f943a36-bd42-4655-8f03-45a42398a73f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7db57c7-4ec8-4429-ab3d-4967eb7ee453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5314b08d-06f1-4056-b169-f9fa8a7c3d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a5cc89-6737-44ba-850b-c8c771445c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ce0401-98f4-43cc-b6fb-21eba16f3d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647ea0ef-c394-463c-9537-70ce042c67df",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6736583-85ec-4ffd-b517-ae4a5e2eee7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d3f09a-2f92-40d5-af47-72feeca35b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df27f664-1ee8-4302-86de-d607af566122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d50851aa-e93b-4d23-b3e2-4c1f466a9669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fc54c1-7237-4b82-b7d0-e9ac09b13124",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c5a9a6-1ba3-4c69-928f-092c08cadf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c67fdf-5df6-4caf-88a7-029fcac12f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb85b6a-0a5e-40f1-a3b5-88a53b14a8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f63f65d-f55c-42b8-8fcc-dcb650e8c889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3de44e-7b6d-4a59-b0a3-c6b0583c1ff9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2452b811-9ba2-4440-ac00-81ec658c327b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df43c75-a8a1-4cb0-874d-3233a2f4d122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3504de87-a9bc-444d-9ab6-30dbbfaa543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "086bd11b-23e4-4ea1-8797-11ca5c98e0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1510086-25c5-4c63-9832-8e0cdcd59572",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5656554-8fab-4cb0-b1ab-5d64663512ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896e7074-9e70-4b4f-b596-efd482def25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2ef198-bf93-4a00-ac65-2911e92824b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f41cf7-39e0-4526-8aac-15376935ec07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702d6fec-c6a2-4312-ab5e-76015be79b68",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6246ec81-4b33-4e2d-87b2-bb57d6bc9bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b123bd7e-d821-4041-9136-f1bd609156e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766e71aa-31f7-424f-bd6d-63ba6772e535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e50b94-b112-4bad-9e7e-bb26e254bddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e875d522-d064-4823-97ca-7aabbbabaef9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4931bf5b-cb7f-494e-9cba-10605653f105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261d3c27-a79b-4155-ad40-d1c72563f1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0869dfde-c77e-42a2-bda8-e6e624d30279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98028751-00b5-4083-a16a-8b899757058a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4407a96c-0ac3-458e-9e35-ffd1e2915533",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978dafaf-eecf-44c5-b985-de3c83498051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335d2c3a-3c1e-400f-892e-b25fc1d77b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c226d7-93bc-4323-97e8-4bd3ee657b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebaaf44-23bc-43e3-98c1-23394d9216af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a453397f-0d39-4083-af64-653fcaa881a4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65ded2d-86e9-4653-be67-5664ea501521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea93e29-78f4-4573-af4a-b65ef619eadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44b28d9-8e77-497b-a968-58bb25ae9120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad5cfc3-d2e6-410c-ad14-752e2f6502f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bab933-a027-43fd-9d56-7d593921bd51",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605e51c1-94aa-438a-ab6b-f4b54014b432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4e6fef-088f-41cd-b2cd-210b229337f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdb00d1-819b-468a-ad7b-75336b12f474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ec553e-6280-49bb-bc1c-07fcf6526079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d53538-35cc-424a-8d68-56654cd91ac2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77cb3ff-18c6-48b9-94f8-ed9da709a379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e35d19-7028-4e31-a034-b6fac2bc5e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9854660e-d1ad-451d-9242-f52e48c61db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ffd4ca-167e-4496-a73f-710d20277f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7eca369-2a32-4b79-84ed-904187e1f0af",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0615d7e-d12c-4171-8189-e3c6ce718d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa37627d-6cd7-4c7d-a8dd-92dfa090c92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d3d700-2094-486d-a51b-1bfe40fc6009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c303869f-a671-4f3c-a46a-2810bcff6acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7a1ba8-7799-4848-bd8a-e5fc0779acc9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92b9e69-b49d-4790-9f65-f1182e64f1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ed7a93-781b-455f-b863-378116970afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efa3b23-e85f-4fb7-9bf0-ffe98c4e183e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2718ced0-a3fd-45bf-bcb8-badcfedb23b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e53c9d-22d8-4937-9be2-e754bb46fba5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a41f36-42d8-4664-b86f-fd75c60a1fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "50058525-48c4-4656-8b96-7aa39dc059eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7a5451-8c2f-48e6-8c50-edcb7b50f30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "738214a6-9dbc-4bf0-a622-cd8cbfed28e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "971aebb9-5c36-412d-b1f7-b9e7556219f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d37f884c-9a36-4113-93df-41fbc03d244c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c109b55-1ef5-424e-89b6-e08463e09005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d720866-c70d-491c-9629-2f627e1493e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7650eb-1cce-4032-95fa-89b5a8faba56",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d13c7b3-ded3-461e-8541-77c07c5e3818"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce109886-fda4-413d-ba87-2d4818c792a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03ff731a-5a68-4609-9d39-d41ad3f0dbf1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2dfd368-8a42-45f4-bbe8-0ca3f32864b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c19f5fe-a27e-45fb-9880-4b69e183c5e1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "de796273-0dd6-45b1-8ab1-9b97affe3d57",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc061db5-9e64-4e46-834e-9f179db2a377"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f4e3c736-5bc8-4bc3-883e-3f39912e0873",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e395fb4b-0c93-4e2e-99df-47f6e46c8bd4"
                }
              }
            ]
          },
          {
            "id": "fab8fda7-b658-4cd2-9a9f-08818858f346",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c21b53f-a5cf-4641-9128-49f939ee975d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1aa29ed3-2fde-4b9c-95be-06f194f927c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0c0697c-ad63-4fe6-8b76-b9d1a6fb86a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5cc49e3-4b45-47ba-9871-926d3fda0adf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11db7506-de3e-4845-905a-05eeb78f8d6b"
                    }
                  }
                ]
              },
              {
                "id": "9dbe1a39-9e2a-4e51-9bd2-02648a80ca38",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c776827-63e9-41fd-bd34-ec01858e6750",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50ba078b-da89-4cad-85a4-8ae5743e037b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3815d34b-0699-47a4-802a-0946b343e3ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "62c17576-5634-4d88-8009-88cefe2cf31f"
                    }
                  }
                ]
              },
              {
                "id": "cc0209b6-9362-427c-b4a4-c1c844237f81",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90df2403-d4bd-46b9-be7e-5ff8f7f72ef0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b36f15c9-d09c-4ea1-8b6b-d20a796a01c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c11e852e-7d0a-4354-b323-099806bf30b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd7c757a-5257-4635-86f2-8e31f1d132dc"
                    }
                  }
                ]
              },
              {
                "id": "bb5ecd4f-e8f6-4b25-98b2-357294ab64f6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b787e2e-626d-4939-8695-08861d210ecf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8fc43ac4-ef37-4a18-8631-f8d27a256491"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbd5d685-1642-4804-a1ef-e3a097a5c996",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2bd89b95-c92c-4644-837e-11c647fcab42"
                    }
                  }
                ]
              },
              {
                "id": "5bfa28b6-976f-4add-ae7d-56daf9ea63a0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "094e813e-639e-4480-96c2-6370891c1187",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c049f9f-9a13-4410-a647-8779758728d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef8502b9-1753-4673-9ce8-0077e2afd507",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1da4c843-bf4f-420f-b18e-db9226af117e"
                    }
                  }
                ]
              },
              {
                "id": "73636896-279f-4247-93c6-afa580630214",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7df6b4a-646b-4d88-bada-952b7059e766",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36d85174-030e-48df-9bfb-3bbb6c59d6d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ee11e3c-ce57-41f9-bd54-c98db3ba8a3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a47f3d57-a255-48f4-915d-fda9c91b9a5a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "06334209-2af7-40d4-923b-9def8ae55498",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16e09049-9c39-43d0-82c0-c51648090060"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "de4c8c1b-5b60-462e-acaf-1b5b0714d953",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b912f11-2263-4673-9a6e-0866c475932e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "455df74f-ee69-4500-aa43-5dcd4cd564be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "22dd327b-b41e-4180-b2c8-7bba8c671f05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "929f25e4-57f0-4ad7-ac20-60dcbf7ff6ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a120a2a0-ef2f-46b8-a646-a35e7835ea0e"
            }
          }
        ]
      },
      {
        "id": "e5797529-448b-4f1c-beac-a67a3397f4ba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "02b86b9a-e570-4355-a634-51d2fc8b00a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "585a53cc-1bfa-493f-84a9-18915a69d2cd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c0b8a1d-e517-4e9c-89fc-94bfa4f640d4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cfaf80-93a3-45e0-9011-b4f56e606d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be5b46e-e36d-47c4-98a6-d42a9eac98cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149c3644-36d6-41b3-a57f-b7daac069090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f13ef68-cb42-4ffe-8f82-420129b86daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa67d0b4-dce2-4951-b22d-5c4dbaced5b1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb420b1-b590-4919-bafd-ea3708e08cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2e14f0-24d8-4579-9263-5c9c7c661579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72896029-55e0-4175-9999-10210a243ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a41a958-c41d-4c32-a93b-95dcd49b0812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7d53d0-83db-4429-874f-8f6f8bcaefee",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea29fa0c-036f-4e8f-97db-2d0a44593264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9834ad-9e0f-41d5-bbc9-fbbe84ffedcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954c7688-a6dc-4e83-98ed-79a6f0f8c2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f3fae4-38f8-4562-83d6-c09f6f21eb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7946c237-2261-4e75-bd71-8ef8a905cb38",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79ee39e-827c-4b11-b9f2-26e2fff12528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f610e5-2315-4dec-ab48-294719a83cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65eeacd-d098-4f56-8558-f875ed6f708f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cff5e228-9390-47a1-b94f-52a754a8653a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03078b77-b82f-49f7-a186-3eacb87e910d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94250e0-526f-49e3-9638-fc3e29d9c778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4046a34b-dec9-48af-a114-799078e5131d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9169ab-980d-4902-b0be-ca7328f5ef36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2f41ee-badf-4048-ba29-86bb6e875f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4aceaec-3aaa-4acf-ac29-33f644210392",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501b9f7a-c105-4214-9985-b3755b078a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea1c4cd-fbb1-4dec-8644-f18c390b4626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b4cd28-9152-43bd-b78a-64bfe45f0eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27b37e1b-0cb5-46f5-ac79-d16257f53e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1820325-a439-458f-a0d9-bdb50592f000",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b9ba4a-1134-47df-9f3f-10578abc2d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f105007-32ff-4fef-a229-bcb93500978d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b04f36-87de-489b-96ad-31aba2dfd916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2687e334-fad9-4d59-ac7c-daa1defe7a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddc4192-a5e6-4fee-a93c-e912a4d84888",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730baa8d-a6d8-4fbb-8bc7-0a7f735ef833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb2ef77-4bab-4053-8190-ecac57090b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538700c1-9ecc-4612-ab64-5d0d8ed445da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed20310-ab59-4858-a002-2b207d0ed554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81de988f-a68d-448a-bf4a-986a4465683a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf1c8bd-8ec0-45a0-8554-daefcd8af565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "232509a7-4bd2-4025-9d70-74f0dc330eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0902b7e-efaf-4704-94b4-c2e3e4827a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f896d0ba-25a9-48e3-8c24-1530f56a0f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e7fcc1-8261-4100-8eee-ab3bf9599e44",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64238ec8-ba22-47dc-91c8-d2ae64dad17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e6b9c4-5206-402d-a201-4b71570d85c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e80371-8a2b-447b-be15-ab8d5858236b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd412925-4cc4-4963-944a-f11f1631e6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf00a3b-47d3-4a7b-87c0-95edac76d8fc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea10226-c68b-473b-a894-4e06b70d4127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d566c7e-472b-43a5-b337-a66b3400470e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f29b6b0-1c28-4d6b-ae8b-3dfa28d4ba7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8026bc-8c2d-4286-876e-f61551219954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b060b91-0f30-4495-bb44-f4d3c905f58e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d025c354-5ed4-4fa9-b997-443615e88f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73e06f5-3014-4161-be18-ecb114f71625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1ae55d-fa44-49e0-9308-b16c3ec101d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a18ffb3-0081-481a-9160-56cfd319fc8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61f8f77-2547-408a-b980-3d29c96c869e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc92c8c9-b9ab-4416-8008-0b61f4e285a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d611095e-a89c-4c0a-a6a8-8ca1df96bfce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d13683-fd8f-4e91-a891-d28419a7cfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12418239-3714-4693-a8a9-79dedda96744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9378c5a-526d-4164-bbca-f06a3dc69ef4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b041f36-4c49-40a0-9d5f-fc5328f504da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d07430-5197-4226-aaad-bea6b247e290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c73697f-34d0-4d6c-8bc5-520df120f646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "30869609-e671-4efe-8caf-271513bdcc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05284336-ac79-4061-b35f-b073ba211d76",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b5eda5-7be0-4717-9781-7b507b6e0c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdee8279-ae3e-42c2-83cf-098c51a3a651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ed6dac-43a2-4244-9204-5c285b07aa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef21d7b4-b78b-441a-8596-0c404c3113ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7254195-9e76-46ec-8f10-82a5e9dd7e7c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d154493a-92ff-47c4-b0e1-4e194f46cdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa1b929a-72fb-4cce-90d2-718d29190328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebaa8c09-d83f-43b5-9244-4d6a1f7d30d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "39218044-860c-40a4-b2f0-08c870e8e200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1434afb7-b5b1-48af-8c7f-5b83dfb55b4d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6929d966-c05c-4643-912c-c9c141142b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c40784-3ad0-4347-af3a-46c9ac56fff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a93c86-42fe-4316-8bdf-12dae2dc2161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3dc539-8325-464e-adc8-d04420c5b87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c309d3-6319-4cba-a63b-972a3a3f8286",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077e662f-527e-430a-a8a0-1f0ffc14466a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5489fcb3-d0e7-403a-a4df-dd058907abe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5a655d-f621-493a-82a8-2ba25fa537f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd229b0-5b5a-4f3e-8f9b-c7bb4b5a8105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4d0267-4a55-4062-885a-c4260ce02892",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811e38c8-6bea-4937-a5c8-08316bd42383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff11b227-1b1d-41a8-a9a1-359e1f4475bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e65cc1a-fea3-4fe9-9332-d8c9b620dbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e3e521-7391-4147-97c4-8ea6183c1207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca33ff85-c2d5-4000-b3de-71b038de7cac",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b948ab99-f7ce-4c9a-99c0-2f998bbaf26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b68f8f9-328d-4626-8261-b1824b5ee5e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57629121-ecfc-441c-9d4f-d9b827bc445c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c103ab1d-22cc-4aa8-bf59-9f2dd04a222a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad51dd80-342e-492e-947a-fef97899a251",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db01d10-05fb-46be-ac7d-a12db6a7a489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d22c44-983a-435f-9c05-b0d608048c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64acceab-38fc-42cc-ba85-e7ddc0dd99db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c3a423-b962-4ffe-b83e-ff8db00d55c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d789ee-3572-44c0-ad6b-7c443c0d872b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c98f95-06db-4923-b32f-3815a97a0cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efbc995d-3f31-4f5c-986b-d2f234fde20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c361fefa-acd4-456a-8188-978a2418aa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7ef554-3f01-4af2-b787-37956917fcda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549dc75f-ae2c-49ca-82c8-082196c88130",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b68293-7fd8-4fa2-8e11-ac06e9d8fcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431f95e1-2cc1-4477-8eb4-2eec0725e017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba11cff4-640f-4ad9-ab04-b883f562e0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "194bb4ee-7b9b-48c1-83ce-8450a05b5922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7160ea4f-16b2-4a9a-a0e8-1aa9611db3ec",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1974bbbb-5639-41d4-afbf-ca7fe5c5e28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a346e7e-f5e0-42a2-bee6-bc1324fc1ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fb1bb6-9459-4bf1-afc0-9cd686ac300c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "020b121d-7a1b-4130-8fe4-e54204177e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c67d961-2491-43af-acd8-0bfb9a62f322",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890c9d25-1049-4329-a011-04f06ac9a822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229c2e72-db8d-4348-ba89-f9f83ad66dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ef47c6-0267-4aa2-9d77-9cfd2ba0a9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53ebc464-e384-471d-905e-9910c2b0990a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83806e99-e372-464a-a7a5-aab25255b4a5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b346c4-cfbb-4d21-8d5f-1de01b1eb6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122c1f8e-c3d7-4406-a244-c862dc0fdd3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f0dc2a-7d77-42b8-8b63-3d700fd0b986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fde3354d-5ac9-4f1a-aac0-f46633b9e64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b44e4a3-6c08-4ced-830c-8c700fde36ce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653b4030-f86c-4c35-929a-8ef5fd0f9136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9dd4ce-8703-4aae-8498-e9c3adbc2435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abcb7a2-1cea-4ac7-bdab-e41313edfb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "341bb7e7-f630-42ce-869d-dde439c8bd78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae510800-b394-4e8a-9ab7-a0155308bb05",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4705ef9e-c420-41e1-8829-ea7c6332e7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149de1ce-ee36-410a-969c-7796fc04bbb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a016bfd-6d26-4b79-985c-90986bcb84d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b69dc6-1df4-45e2-bc23-098dced39db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db81292-903c-48e4-bf19-a1e842810121",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ff7c14-8bf8-4072-9335-5c066f4b2e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84cd542-e97d-41b3-834a-9de7006cf7ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e91cf73-4553-4c99-8558-c2530ba577f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f22b9c-e1de-482c-843e-d7a48bd15fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e6314b-c2f8-401e-bda6-8e626ad679d4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db918c6f-42b4-4b36-8027-078d335a226e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c3a8c5-edb6-4f80-ae1b-f24fac8fa879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be4ccfa-6a06-4ff3-8d8b-fec028f59fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e058df0-dffb-4e9f-b84b-94731906c08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa526a2f-3ee2-4d16-b326-18e186baa9d7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a58aa90-6f54-4aea-acb8-5b26220242b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c228b17-43b0-40ac-ac68-2347f31952c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2a6d49-a7cf-4c2d-a2b2-aae321029a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c64fea8-140d-4070-b973-4e3c79e6a16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764959b7-e510-4dd7-960a-3c0e6910834d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512c821a-b424-4f7a-8dab-9d542420bd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930dc6f0-34e5-44ed-b1c9-026a38f8d117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30821bd-92b6-40e1-9d24-f81e61c665ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14b3d701-c4f7-49f5-969b-91d9b635055f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8caf0ecb-14fb-4bc9-8769-487bb5ed8a98",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30eeab5b-9434-4668-92be-54f41d7e4317",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615397ec-1b8f-4ff9-8e59-4f34aff3efa9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0268e66b-918e-4e46-806e-738a6bba0adb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01911c8f-d541-4de5-8f36-95d97dee85b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe8829b2-1005-414c-9010-19e40e779ac6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef37b45d-e69e-4205-9772-5c7f0030d88e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca394054-576c-44f1-aa34-f4883521682f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a75d161d-9855-4d19-999e-11063af56d3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cb9052a-ea1d-415d-9ec3-a27cd40d5420"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef8e6e2f-b3da-473c-b065-a9fd1242c554",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e1f543d7-0d7c-4406-8e37-f501b88612ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b46f7a95-a43c-4512-9b71-c20c2de17895",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "108da1cf-6a5f-4084-a8c6-196d99a63645"
            }
          }
        ]
      },
      {
        "id": "6f6d39ac-837b-4048-a9d8-23816584f500",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5853f725-0f96-486c-93c5-9ef5f0b7a21f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23ee01ae-6da1-4e1c-abcb-f47e46656b07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "94d11fa1-87bc-4898-8f40-0670551e3950",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d20df0-cff5-4364-9880-df0cc5e73753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a8985cc-25d7-4cc4-91f3-d73c9d583fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1aff716-c319-43ec-a8c2-b7450839e3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1db4298-4400-4620-a291-619077432710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3508154-0ee2-4a36-b49f-f2f1ca0ff4a9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b486aad0-9674-4501-9e07-8f2c867c0449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bba61b0-ad1a-4b59-9a16-523814d185b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1843978-dba7-4742-a40f-bde8245b689b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e03181fa-e0ba-4981-bc5d-420817d8acda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d7cadf-3a0e-4810-9713-5d009090ccfa",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb2fd7f-7be5-409d-8243-c81043e5ab35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7856ae99-0a69-436a-b856-5944972d8426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a85bbb-ec76-4754-93b4-77cc7dd4c5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d66c836-4ddc-4e3c-864d-e64eea5a262b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6febada-a8b7-4855-8eea-6d9fd2f5c24a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76c1d41-fbf0-45e8-b2ef-3501e8b4fcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01bb0f4-be4b-49c9-a719-4565bc45ee05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63f7178-bfe5-4bc5-9d7e-0c13b9348f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7ef9dc-2561-4793-8805-4d7adfffe511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53e061b-a20a-475c-98d2-1cd02f28924c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3695f126-eb7b-4bb2-bd7c-4549f9320c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11224895-7863-40d4-bb6d-53973e98a5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11342208-9964-4738-b432-af6bfade3e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba7f3440-ff9e-4b6e-b0e3-264a5180ee25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cebfae-52a8-4642-a196-d91008c9730f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257b941e-4909-42b7-9b61-0a6cd32646e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0f0b90-769c-4bca-8278-12bdda9f69eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a442b268-44b3-449b-86f7-017a65e43f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "45e5dd1f-29cf-4dcb-a84c-13df77f1e812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805199ce-65d8-4e69-ad2c-b5c9ce5796cf",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6daee3-7ef1-495d-8466-96e56976ec1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6402ea42-f5f3-44db-aa93-206dbfcdf7a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0331c1-2955-4f5c-aad3-a461b073483e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5775d965-eaac-4139-9069-7c07c0a2429f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9309fa-0463-4525-b0c6-b96e31257d9a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a93a8b-f13e-45f8-b181-255e578accf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f056d8-05b0-48c9-81d9-567e026188a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b1f36f-403b-4900-8365-6c8a88967eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52ba6928-81bd-428c-9b49-06d0f1fef3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41593183-939f-452d-b21a-fbe7b8e4b302",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a180037-b488-44fe-a265-c73a64dc9f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d91177-8a8c-4e9c-8539-3894439e66e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7617595c-adf7-4935-a733-7926f84e5255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7cdf9a-5ac6-4127-85fd-1ebd911850df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1124d98d-8c55-4045-81e2-09a962f29d3b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76228092-34cd-4a17-9ddd-8887e7273bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c030f32c-b243-4138-80ce-c0461672b071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1655ce5-a278-47a1-8374-d2ef89332312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a25ea0b4-98b2-4e04-9171-8c1f8e04bf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd240db-f627-4505-8ad0-c038943a30af",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3baca2cd-3c23-4d8b-8fd6-9807e4d6fcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6fb36e-c433-4172-b49e-5f56021de613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ff63db-68cc-43c8-af1b-5d6bc42d07ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "58a72782-c48d-484d-aac9-bdc48f6c6346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f442a547-5936-4f06-bd39-bcb56c8fc477",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885174d8-92c7-4fe2-96a7-988fce13e9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b8bf5f-aa65-4b11-a68f-c95bbbaf6d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb247c24-2174-42ec-ac13-ccba07561f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92f36532-c272-477c-8d87-d95bb13a8da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2624d82d-bfeb-434c-8aa1-3a147ed2d6e1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be8ccb1-75f5-49a9-a52e-31fbbb40ef8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1afb3a-c12b-4af3-8896-1fcc50b70403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ee265b-46b7-4add-b8f7-02c272615396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db4de1ad-c649-4df4-8a55-8e0042d13cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a870b19-e465-4250-8535-1f12b3db30c5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3aa1f8-aade-4e4e-b737-92a928a5dd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de6b1d2-3a26-4b81-821c-a267f3501796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e72a49f-fddc-454a-9ca7-eac3e0b2cbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1133cfdc-2409-4127-82e4-422439c1edee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683da812-323a-4f10-bb16-d815b3c1ec39",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1288671c-d64e-46ab-b001-889eeaea7c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d794e9aa-63d8-4352-ba58-c6fad310a08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63ddc0c-6be6-4282-91fe-9413bf77ffc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "52d19d27-7f7d-4d20-a23f-1c29e1578310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a279f0ca-96d8-4db0-8a09-e008e0af9914",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da61c9a-13b2-48ca-87d2-373a1c9a48cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b76590-c2f1-434e-86ef-2c2514403054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e22ebb4-eaca-4fad-b879-d7f5734d26bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f929f91-a92c-4d10-a6ac-d10dcf1fe807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2758e42-c7fd-4623-99e7-ec387038fcb0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553d72f6-a1e0-4ab8-965e-98d1035c7fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574266a6-1cc5-4b5a-87f0-dd1aa526ab94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add97088-e490-4f40-b783-d64b1c94a87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a68589a-a197-4fdb-9f9d-830b81022447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ea3a33-6e47-449e-ab18-f340ac8919c9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ff9d21-c6b9-40b0-9ace-5d443fb34634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856a35b4-0b48-4d66-8197-82e045f34c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31e7614-9886-4ebe-8416-53f6e6c1a7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "491a66e7-8325-4780-8469-7228cda1a8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37193c47-d442-478a-9271-d0a3d0e928eb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fbe779-9ab2-4ddb-9530-957bb723c20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd47c17-f796-44ea-b066-4d6745295cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce2c312-3903-4f5f-b0a9-3ae408d60412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7be6a1a3-6a8f-4e13-b2b4-9f196e89e5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef36ae4-332e-445d-801e-09ad457646c3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab22d2f3-e4df-4b1d-93e2-4e8ccd1a79ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb63079-7f22-4b08-9095-bc496dcce044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a61413-5a7e-4e56-ae42-c66d1896303e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47e2fef8-68b7-489d-81e6-f76832ed347a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc274ef-1333-4537-b192-c7dcfb81d27c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95445812-49d1-44c0-a676-59bdf70b86e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e572f2c8-4aa4-4683-b04c-7e9afabe2f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fac1b7-fe25-438b-ae8e-a9d1d77cbf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7f78db-df66-4b93-8932-dbc7a2cd6c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec43a62-c5bf-49a9-9d33-2332dd0adbc7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668c2ac0-acc4-444a-9d9c-11870d7f9546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15551102-2491-4910-be7b-213b6ded854e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d522098d-eed5-47fc-a98e-ca5a489cb28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0444ce3-ef67-46a7-9935-268d07ffd9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ff2ae3-b9e1-4785-a0f7-8bc765291f9d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37481ba-3572-4a7b-8550-89f3ab05f793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38247d2c-02ac-48b9-9497-52624f946a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f83796a-8ea0-4ef1-b0f1-9dda1c38bbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da0bb7ee-265b-4179-81eb-82ee4f909494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9c216a-9738-4a18-9e7a-162c2f7fed2b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7191d9-e290-4959-b22c-ab8322cb9de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f161d1c6-e5c9-41c8-86ed-cc772c827176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950f65be-a22c-47bd-a357-05f33c1fc709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a416f448-c63f-4d09-b543-08e1230e3afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9d40eb-042b-4cae-8795-e156c645aaf9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa89a1f-a352-4d36-b178-fefe4930943f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82911c17-a90e-40ad-90a2-957c82c31aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6c04ae-03c3-4ec3-80bb-c3f4c21ca05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "193593e6-4f41-457c-bc5b-50da2d2df699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cbe2af-a133-4ce5-956c-713d4acc644c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816cfb37-9a93-40f1-af75-f76a73590c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed930cd-fa1f-4018-a65e-0b9ee18bce17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c193b2d8-7778-4e2a-8329-271d60517bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67917cea-2be4-4bf5-9fa1-a5826c3d0658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc2e77d-6d6d-4c69-ab87-740a9f5dd55a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bbd19f-9bdb-484d-b56d-a19c1d824e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7896acef-569b-4097-8dd8-299f491ce116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49146f01-bf4d-42b4-8a4a-b3eac52d6f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1980127c-f00f-4df1-ad59-5ea86c45bd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81c9e6a-206f-450e-bfef-4577e361866a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87327d9-e56e-422e-bdf5-5aa9f3c91399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6671c785-2993-4c2c-a657-5015c71eb693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbbb1bc-e9a3-48a0-aa31-80e3514b415c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "984ffbac-5ddd-4d93-8f1a-a9733fb17fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1570698-0bdd-415c-988f-c3d246a3f766",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d68ea91-55f1-47c4-bfd9-00043edf7775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241652da-6e1d-490a-bb25-78e9d2e552e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b39c58-5743-44f3-92fb-169655c66e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f75129-f27f-4641-9299-643bc885acdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e55167-2b81-49d6-9b07-0e45c3abe528",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5565ddc4-800e-425d-9bd7-c8269564e5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cf5725-cfee-44f6-937c-45fcbc64a69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def07b99-6427-42ad-bfc5-41bfe5e4f2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e73273-10a4-4f90-bb30-a86a103c1d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebb6318-8fa0-4328-8a9f-2439a5c9551b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d589cc6c-ecec-4337-aa2a-1485701b296a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21c0c8a-4a48-4af6-a43d-8a8633293040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d887783f-d21e-4885-abc9-792d9e73d873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e536fc60-20fb-4a79-a311-08dfb7f8f16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148d9e55-490d-4090-ba23-c2fd55435797",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b7bd9e-5702-4428-860c-8218d3cb2316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7e5759-92d7-4378-b5a5-baa023f882bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1ce81d-9a21-4b59-a1d9-0688a9e20cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e618edb-cf81-46dc-a303-9c37916adc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d908afcc-bb8a-4da5-b1d3-4386988dec85",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f484cae-a171-4581-bfbf-c4f0e923dc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ffc3415-6b2f-4ef4-b252-136c65fc6b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14c0f6f-86ac-4fc7-a50d-7948d58f26e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99d84b75-ae9c-4c3b-9555-36d5e6b56773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e37214d-b85b-49b9-a907-94a4be27ee3e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90c5e5a-17f2-4cb5-810e-9712b64a8c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45cccfc4-5767-4529-806d-4ef0780d558a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0103f097-fc37-4e8f-b261-759a023f50ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3ccba2-7bd6-42dd-b588-3e1f69143808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899a28f2-8934-480e-9204-37c503b32952",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eff98d0-ad86-4f9b-b26e-4bd9e3e0738c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417710c7-309b-4db7-ba66-544d89294dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c8884a-8d7e-403b-90d9-812937e1c250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae9c26f-0856-4ea2-aaa3-06561da7740b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d110110-f6cd-494d-a344-5e92e72e2f22",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead05845-f43d-4f9e-982c-c5891352cfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f172d11b-7d6e-44eb-b6f2-e2c1073ab9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db30177e-269d-4cf2-8ad0-29981ee98961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a640c3a9-9af8-4caf-ba4e-b7b8bd2950a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d79b00-ef12-4cc4-82f4-1f6c48deeee8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19d1ead-bf19-42e1-9048-955a18d5db76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2a6630-e50a-4349-b8fb-54d0007706d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2543018b-2f7f-407a-b52c-7d45fc3e9402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e44fb745-6ae6-47f6-9233-450715abd881"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9988d66-c83e-4573-a924-1db1ecf1ce7e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0ccbcf2-abaa-455b-848a-4a1dcfcc2f0a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c7e752-a4ab-44a8-b3e6-c2e32194e8eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ab41dd49-5f6d-40c0-971e-4869ffcd37a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d6bc47-83e6-4936-87dc-8f680de2a222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7ec3690-115e-465b-930a-3b1fec8514cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15ff9a4d-3c7c-4d29-9ff5-de3ff1ead593",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01ab6a1a-8c7c-410c-9943-ff92e24d4f06"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dc431f5-7c4b-4f78-9a8b-8860aa386003",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a5f766a-e8da-42d8-9351-e29d5da1d27a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e12a3bb-8476-490c-a564-8ecb1b374219",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dd6658db-638b-4a96-9c98-6d0811b1883b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cfdc8c3c-3cc6-451f-adfb-4038829e0372",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb7ac51a-6196-403b-b2fd-9294fb0053c6"
            }
          }
        ]
      },
      {
        "id": "45b5a854-ce4a-402f-9c4d-41363215bee1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "106476c8-7e16-4309-a69b-1351f8f522c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5003c88f-d0dc-43d6-8ec4-95afb7bb71a3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0e3804ed-2024-497e-b01c-386804222169",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5a3f0f-2097-4117-a77e-842ed9cb693f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d728c77a-a168-4d4b-b498-bfc1560d27ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1583a53a-0c45-4141-8413-be31a39ebc8f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d5a896-3166-495a-8b02-45728755293d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50d51d7-3fff-4278-a232-b3cb1ebfd5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30469dd9-6f5a-4e51-92a1-b170a8f0e753",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692f3bf6-ba2e-42c9-9aa5-a4c6fa1873b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d10dfd-d310-4b71-a7ad-0745a600419b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e182cfab-12e8-4ab2-80d1-e93593bf3fe9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a472c6-d8c5-49dd-a16d-d4a562629f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76726ee8-723d-44d8-8917-a61b72b1923c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cdc387-cb34-40f4-88d1-449e1ecf7275",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22853e4b-8d26-4719-ad81-f213e19ac1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac65f5e9-9ee4-4f69-9df7-697ff560f935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce54dc7-055c-468c-97a9-72a3b69fb09e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed75b4a-4fe5-46d8-99b3-30c21d7bc4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e151232-45bb-4871-af9e-e32a3dff16a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69718125-9c29-47d7-8493-5839760e298b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bbfef5-bc09-4f95-9910-2ccefdc044fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292b46e4-e88d-48bb-a28a-1b688bdc870f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9405d9-5c39-4340-9297-420e5d02a9b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d69300-8abd-40dc-a294-f35fb212f272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac0089b-02ae-4521-bada-7b979a5206b0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97974a7c-1f40-4d88-8de7-b6c92b4b5a95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f604f308-b282-4e83-85d8-025c2994e643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8725e84b-f42b-4f6e-8e6d-17464c0a7e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c57723d-ccb1-462a-bf48-c1f1ead6d3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722bfcfe-d0bb-43f5-b9da-cc7cb676b511",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaff5a5-bf5f-45c4-ae27-9498cf185660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96d4ceed-7db5-496e-9a42-356992ff2e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a113a0e5-28d2-4a7d-a141-c322fc816d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e47e11e-e173-4d8c-a5ee-8e07b3d1511b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7735eaa2-551c-4a05-aec6-b5c7a83ebc49",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abadc762-393f-4f8e-96bb-3727a3867601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7f2a025-a277-48ef-9a92-8c8857bbf706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "638178c6-d020-47da-8b4a-1db860863de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6966ec7-a431-4562-8921-82a7d631d442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8b568f-250a-49e5-805a-dc8e51db687e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a7d6fd-3f45-43bc-8b51-50cdec5ed202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6423b0-e05b-4376-ade7-467d2b2a2616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc53092-012d-4458-bd7e-d47f5867924a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c6ce64-bfca-4d39-b3b7-b9b2d54fa6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e16aff5-bc5e-49be-ae44-592e879c399f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1a54cd-5835-46af-98ff-cde32f8291a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c09b43-55be-4dab-90a2-b364bb936a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5881a06-180d-41b0-925c-927e8c51e91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d617e058-a59b-44b0-bc22-b8d1ba2a066c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d6259e-4c55-4cfc-b6e8-d71580dc7679",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b952fd-38d0-4a1e-8fb8-0300c3471058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0485af34-7717-4da2-a146-9ba570c44ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad831f31-859f-415f-8f79-0a406f9ee104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a909dd3b-746e-4e76-88bf-aca3a58f0bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bbe84a-11c2-4e30-ae3a-e89c98592ef1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8ebae8-40f1-4174-9810-94ae7a7e69ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24d3e719-e3a1-4147-abed-23fb0b39d1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e251c1-97b7-46ef-8afb-57e9e704d8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d561b59-55d4-4ea1-83e9-4e4586ad33db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de4d5d0-62d4-4ed5-b8c1-e1497b3cd183",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1696941f-656c-4fe6-97a5-1b7fa90be2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a760ab61-0b98-4695-8687-7de43fef988a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce66942-24a9-4342-b803-971578afd481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c6bc71-bc97-4a68-ae24-961073d59e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf815cf1-dd45-4cb6-9b3f-d84433798dbf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4752314f-359e-4efa-be64-b35f1fc77ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe871fae-b408-4e62-8a8f-8a346266b7e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c28bfb-7d8b-4be4-84e1-282efa53b3a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83da3c1e-1197-461c-9f39-632efe774a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2315b456-e851-45b3-9260-143895ce0057",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df40ffa5-7f57-40f2-8394-18d7ab93d21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2a44f7-3467-4dbc-b926-ca0a442aa0e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d5ef41-4d78-49c7-af65-0e7b6dfa15a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e5f678-aaca-4e8f-a3ee-77a8b0317587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d376b5d-8bee-4cf3-a5e2-40064c2a855d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6aade4-dfed-4f57-9458-7e3d91a43a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe3dcb0-48a7-446e-a154-05fa769f12d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38327c08-32c8-44d7-8443-1db91f949ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7385d24-4978-4643-bc2f-c4a17d619cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644dd70f-65f1-45ed-b563-92094396212b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446fd3e0-5232-41d6-b197-bc479c9912b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbe50a2-d288-494c-9e29-5e93c156b611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3a3933-fd8f-4bda-a12b-e890e9369539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c13d32d-dbe0-4eb2-b6a9-15eba45ffa52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9569af69-2d3b-46c1-81b5-53a57355cf4b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5455b5a-dfad-4297-bf5e-dbbfc568e6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd64e70c-a08d-4626-a1b3-9ec883783502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd4e58a-2a73-4abe-8de5-5e08074769f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d63ced-7090-4d31-9ea2-50d0d2454b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8067c59-5d85-485f-bd4c-eb3be9f5c3ed",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19c2afd-929f-461c-b5a3-fc79c0fdca43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c74b71f-b9aa-4a02-8a74-1e8f15357a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b00fb2-9bf5-45db-8e3b-90e4972bfc93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693bf0c2-2538-47d0-b1f7-ce009dd5fdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68ba34c-1ae8-4d74-82c8-7bbd6781dc61",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350f45b0-065b-4b6a-b00a-12ea8ba843b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb93fbd0-b0a5-4730-ad54-4ab3e10bd66f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c20114d-9f45-4494-8577-d536705dea04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd75506-2c5c-47fb-b2a7-f46ee1080574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f5f546-90a1-41de-ae11-23d3bb15cfac",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5011fda-3b98-432c-a0ce-10fe36428410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96829381-0324-4a58-87a9-bc9203cd09d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39789578-8860-4c50-aabc-7d01ad8faf3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc2d665-82f9-49d6-88ce-c0c519077b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e01d3a3-5d88-4a90-974d-d6724262b113",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed38628a-2a13-4bcd-813d-26ef0bc3d2ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e410cf-cc92-4a6e-829d-249d0ebb661e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9ba7e5-3330-4a29-9fa6-8299f2c6aa89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc650385-3123-4b19-bc70-8903902c467d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6d9841-240f-4413-8f04-a89b508291ca",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95429a5e-7cb0-46e7-88ff-414af12bdf5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f19f8ea4-4c76-487c-8da4-d3003aa15564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1342655-c07e-4b55-966c-3860079c768e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f053e2-9fdd-417f-a84e-ba010df92b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b30c1dc-9853-4d28-bb7b-04127d1b2f95",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c903530-2da4-43fe-8c7a-de99ff8bb964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7694b67-aae5-4a0e-98bd-5773723dd437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf3e448-4f04-495e-9af5-7d31e817b286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a37329-0f1a-4c1f-8681-89afb180327b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d2547a-fe80-47df-a875-30e3295b58fe",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5554d669-0667-4325-a475-769eeccb2051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41830298-f600-486c-ae3c-822833032055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600882dd-88b6-4223-927c-5feda7c41e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e95e29-1ec7-498a-ad5b-100e7dbde7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63c0469-8d41-460a-9988-bc718e4fdc89",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82305e3b-9e1b-40eb-a32a-08fb22aa1988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab7ad1c-091a-404e-94b4-5226bccd8ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8572c1b9-6ece-4bbe-9151-45815c7051cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18dd7c07-9741-44c0-b899-67970c989fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246b50cf-fdb3-402e-b474-214fd40c96ab",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c6f68e-fa2d-4d96-8c50-82acdb800011",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b41140a8-44c5-412e-9d5f-a7ccef359740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46ce068-87e4-429e-86e1-e621a6881880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69207b44-f8e3-4f2f-a180-bb980501d73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b70ec56-c605-41a9-ba2b-e5d9587874fe",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6907f1-a709-48b9-a4a7-fb24b3d0749e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c361631-3161-4402-ba33-faccfae8e1cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcddbbe-d403-4b37-af55-4f59031edbaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4b4568-677d-4ea5-be6d-a5a206ece3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb13739-82ea-4e31-b827-a3cb4190cb4b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1343d2ad-a2a1-49d9-b735-cd2c29fc3aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "653a45f2-58aa-40e1-93db-84610ce2f0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23c40c7-5949-4b89-9b56-7139d3a15e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72936f8-5989-4830-add8-16b30ce87702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566ed5be-3362-466a-a242-c5751642257c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aea34dc-9c1f-40a4-a3b5-7ef6ff66a44b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "491be3c2-fa6e-4f29-acde-7f0edc3ad3de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df595faa-ce6c-4214-aa5d-2c7d3744db6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608ba94a-a412-4ad7-8fe4-b3ea38515dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad78a257-0218-4c44-9cec-ce94ff27da45",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549cdbfe-fdbc-4cb7-be77-be8c1150d6a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4044685-0ec8-4f3d-84fd-02b50f71d579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda95ca7-f0fe-499d-9481-acb9184c7caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4924b7c6-cb7f-4d3c-9240-daaef2e5ece0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227463e8-6a44-4d37-bcef-f40f4d97c0a9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03005458-cbd8-4294-8d6d-ec820edda056",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f760045-0c38-429f-a082-e697ed7e46fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66619bcc-1507-4cde-b466-5efd99990110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fda8a9-e717-4db8-89d3-f787e6b95947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e340fffe-4744-4463-be66-e8e41b88c40c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71b8f77-508f-452c-b988-64e6391e0283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ffb784-9898-410f-bc9e-2bd10f1c60bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80076145-f120-459f-87e8-3a50768dc678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4470a422-61d3-427e-ab3a-219e6beb4437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621b2c3a-14e5-4af8-854f-7b122304841c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc73fdd-b18a-4847-8a9d-bb607bcdab7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe9f768-cfaf-412b-a359-ffe30f04b44f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23085b2-34bd-4d33-b8e6-64926a28b501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc280b88-5cf9-4c4f-8315-96d03a7d6b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2fb853-cef9-4940-9cf2-ad1ec79cea20",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9100259-5404-483c-a98f-ae66a87c2033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5e4f81-6801-45f0-8c88-0422f072230d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3cbebb-7f95-4d53-87ec-6db0e518f17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4bae2f-6691-484f-a2d8-62ad38bcebfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a96335-165e-42d3-aa4d-ec6df0bbd7ef",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a968aee-7bc7-4e8e-bba4-c682ae60ae0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ae13c2-75dd-4976-8d37-4b8b11563a4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da53dcf-c54a-4c50-802f-7bf20d7c796e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2615a8af-a34e-4394-a61f-d17b532b4164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32802d92-a6fb-40cc-b284-e4d36d1f3e1d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecc21f7-acce-4e82-bb5a-a22035fbec5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87dc877-fee4-46ec-b7fe-10d698155344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15da4a29-6006-4a17-98b0-46c25f9bbcf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05330a8-d621-4932-a9f1-af08a345d963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e34183e-7162-4443-89f2-fb7acd5b2919",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee688fe8-b7fc-417e-bc33-854da00f4593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65551b9f-8668-4057-b179-8e93667ae28a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4260116-dbcd-45dd-9f4d-cdaf35adbe00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8b78a1-d0b3-4135-8d9c-be8bf8712023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06804fce-a736-455f-b098-ffe921db0ef6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c016d12e-23a9-470f-99ba-e6435918f680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5718976-026a-4b13-aa77-3d706f5f6ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "340c642f-335c-45c3-82c9-24be01de130c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c1198c-2178-43b1-9493-a9617567f7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c610c27-e277-4cf9-9ab1-c4c37a5c2075",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fd8792-5b63-46ee-8729-3df1e860aa99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6bf55da-23b6-4f09-98ae-32e947b18c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298934f4-e0b1-4c96-9c9e-ef6518ffb5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889018b1-b3b0-4246-b814-8e32257bfe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4564dced-03b1-434b-9b41-b7dfd076fc9d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681a4606-9f30-4b02-97f3-d65ecdbebfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e807055c-5b19-4c31-bc35-da393bea676b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4b9b2a-1c38-4ff4-8dad-345a666f3173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944b3e24-b185-4400-90dd-3238036d37b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ab4500-8c33-429d-bd11-49715da07209",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20205d9d-e5b1-4c6a-831d-9e2bb9d5fdeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6dec4cd-03e4-43fe-9f9a-d179d076ef16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89b330b-9fea-4823-96b7-5c6c6f7be4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0e4348-dc5f-48b7-9d5c-882ae329e0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c6fabf-b4f4-4fa8-9670-95af0c293a73",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf0123e-9a5b-4dd5-a9be-c7800b8678ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f0d34e-30f9-4048-b64a-3c0d0dfc8910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefd8545-ab49-4f0d-9402-61ea1f6b32eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a8ce13-f24a-4f74-aa23-36324a7bcc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c32d76-c104-4699-805c-23c319b1ede2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4ed518-3895-4ff2-bd09-3cf5a9671c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c872d6c-cb10-4380-9cd5-5eec251ec05c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3061543c-7ee4-4398-98c9-22ee7eed20fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1336c4c0-ea10-4c5a-bb1a-2f6332f976b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760efd7d-6da0-42cb-a62e-018f81a38fc1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7f7d92-6632-4d3e-a455-c7d1484f916c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d7009e-8b4b-43ad-9be9-bcd0da1d5f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7b59f3-944d-4ab5-9cb0-6b8cdc20ad87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b8a781-f438-4745-ad49-38e49281e72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958d29d7-73d3-4a24-9cf8-f20ef5536c93",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e45da3-24a8-4e12-aa76-94442cb9c537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b25099-bcb5-45d1-8c59-7d9e60049dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4754b69-8003-4efb-a766-6a7d3b2ef7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46338816-099e-4366-b0c0-e4e41bc56cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629b7f1b-416e-4faa-8328-305b18d3705b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09c0f7c-fca3-43ae-b6b8-0a5650db01be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88530834-5537-40e7-a610-778db250f714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c019d865-90fd-46e2-8628-6886c4bbb8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e96b881-b126-4ab7-aadd-43d7c2dca12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6424f81-e7df-4e97-b395-f21cd87b39cd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfbf857-66ff-4814-81de-3aa32dc54300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e9daf0-e7cd-476b-b78e-aeeebdd362eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0530d094-3571-4eb6-916a-21a8f0f23b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bbbd9c-7f2e-4b5b-8e66-f07e8b980fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252381a9-b449-4ca4-a2cf-b03d68e58174",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e03867-528a-4f58-9b8a-a4e46dc88d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb1da78-1df0-4e15-bdc9-137408e8535f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "319a2e02-7a1c-44cd-85e7-05d265d4c444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c6ffec-c512-4533-bca8-d1c42e60a0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3330e8f-83d1-4b32-bbaf-0b38aa7ffb8f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afafd2b-985c-433a-8532-9cb553783703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd5c9e7-a474-4439-b551-3e4cec952a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abea006-7b68-448f-92cd-726a137065fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2d829e-5493-4bf4-ae55-a8d2474c0f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d946a7a-8659-4711-83a1-92d01597783a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc219a61-4ad9-44c7-9142-08b9af2fa769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a480041-5ff5-493f-8b57-2db9a247dd4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0e3812-fd63-479c-b230-dd11282c1cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a201e92-ba21-421b-8e5b-e3492973b1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75656e04-2aa5-4f05-8d37-48cecda69289",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060a3125-0464-43ac-883d-17ec12d27d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6308c85e-f79d-4ab0-a7cc-48b3c3d7901c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91442f28-757a-439d-9a94-82ecaf76f47e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3eb3c5-eb2b-4170-9a09-7347b5bb2f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f5a8f1-db28-4610-8c56-550dd02d9f94",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759e855c-5ac0-40fc-ab68-3cab61f76161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ae50fc-39fe-4175-a311-1fd6b82b0827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4b6e92-c666-4669-abb9-fd0264795aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabfbbec-199b-45d7-bec8-5c55f99822b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2073f854-ac81-4d58-bb04-d33d2c0ffae1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e5ffd2-7b26-4348-a1db-234dfb7a0e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f2b6366-caf3-4389-add2-81c9314f8b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cb9ae6-efdf-43f3-9709-8e24ae3cd8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091ced69-096b-4342-9dc5-4d874738bfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437e9cdd-8e35-4ac7-8660-5f9745f566f8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a5a731-bc29-452e-889b-e6684e75f42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5b0410-997c-4d2d-abf4-95e65df2dd50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779ef711-fb41-4470-8186-4edd4f0ba7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7eec2a6-a37d-4570-be97-b949ff5a5a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7d3e3e-13ac-44e7-a3f3-c18274c9b81f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b436bf-2160-4405-adeb-773d0642420e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48119916-44fb-4367-9e64-37488c04ae15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0920ef-e6db-4afe-8b35-95ece188c0d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1325442b-403c-4ce3-bea8-079e86bb5ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b5a9fd-912c-4b6b-8115-4a2ef6198b28",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9ae169-d79a-443d-b5d3-2e206ffe9770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd6591a-add2-4854-8982-61f7e250a47c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaa1a8d-35bb-42f9-81ae-f661a084f8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538a19b4-3299-4b66-9e82-6aa70c8c4be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcaad83-5928-4136-893a-04d4459eef46",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13261a2b-ccab-4004-a777-9d74183ac7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bbdbb5-4e49-4e14-8260-622bcf0de721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c4b21c-6579-4535-99fe-4d3f7dc5101b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e656a98-52eb-4d86-8710-c3e714f76ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf46dfa-ce56-4795-a86a-1376c9343acc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712b18bc-fcb7-47b3-84e2-fa398d0fd630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a15985-7db4-4663-b0a1-952b9730c040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10a47ef-47c4-4eb5-b408-b391143752dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63adb2b7-8d44-4efd-a30f-8afb3a988033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfaba05-ca09-45f8-a984-a7745f201efb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74af814d-1e3c-4137-a0f0-e262fccb2c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6b9ffe-3a8c-4b1f-9cfb-76ea5dc36d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5f0c69-f8ba-4b4c-9f50-08929e2f0bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff0db5a-3c11-433d-9c8f-16cf63d44f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f923be-3811-4221-b1a6-000e1850636b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fc216d-a111-4c98-a345-c8c4bb2a1e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce832504-7a0b-498c-8ee1-38580bd0eec5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9524f81-c6d0-40a2-9b45-5a3ee130de4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597c0a58-6713-4960-99e3-87a58de557ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96124f0-ab8e-44ec-b7c4-8e998f78b51a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d28e61-ba4a-4fd7-9f41-f8a252416770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4530f4e-4b1f-44a0-ac03-2ab3bcf13b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544e9076-687c-4714-8c14-e6f7841a4406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596ce4bf-11ed-46e6-aa05-033d60b079d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0602190-afeb-49d5-b9f5-ad23a716b277",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6dddff-2877-40ec-96ef-976ee30a48de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f687af-8ee2-4b0f-b945-fe1dab0d15dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc67593-9c76-4370-a1fa-7a1b25ff6865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c3801b-77eb-4378-aa9e-080c16895b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91159a03-d0a2-459d-a95d-a6f491687e8e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6835ad36-675a-43dc-a547-42ca92f66018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b421559-413d-497d-bb1b-6134a0967f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff12d6c-8e3f-41a5-82cc-e5d325d678ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3dfaa87-887e-482a-9a3d-a225f60ee668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0320c9-c5b8-40ba-aeb4-e20e64457b21",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3c98d4-5ca1-44bd-b408-80242dfcb95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0098f9b3-0872-4a61-8256-08448f685bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406f3f40-32d0-4120-bd96-bcea967ab58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3f3999-85c1-4b96-9247-1f8a91d3265f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6199244-85ed-4c21-87e2-cc88237acac7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b003cf-2810-423c-aa8b-e08803d994f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da6c193f-bffc-47f8-9007-7c8495c16787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce95cc83-8fe2-405c-8546-70c3677e4a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938aa336-5998-4ca0-a656-a44655c6857d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b775e14-f94c-406a-a2dc-bf1df1773652",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086f7533-2600-48d2-99f0-fd148ea7c2df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ffa9de-16b8-4511-9eb7-5b95fdf2f599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0cb8c2-944b-4b46-9adb-fe347eb018c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af764a79-dbc7-40f1-8622-20b1f907ce48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd657eb8-be5e-4b4b-9e18-4374df7ec558",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2176d5-4a5e-40af-97a7-7bf28e4338ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d38e2bc8-388a-4379-83aa-1a86052ff4b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40cd0d1-491c-47ca-b0ee-3caad99e5445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf7beba-1293-4ab2-9a54-ff309ee16de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b81ab95-a1b8-47f6-9816-c1a6fab0126a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40273e96-51fe-4b03-b6d0-967b3f8e45fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0fb1850-184e-4170-bfdf-67c904019226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6663397e-19a3-4b72-b188-21c6058397a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bdcb6f-cb99-470e-ab85-b2b5284e41f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85aeaf26-8c9d-4777-9b5b-582757e7316d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a3cd92-c5c2-4ede-bfaf-3594a969db0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5588f602-ea1a-4e04-8da4-2152434b37dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f74a4a5-48e4-4762-80aa-7393c9e1451d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03179a7-2eb3-4db8-8991-db27d95f8f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9450a699-0382-41c5-874c-a19d2e4e693d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e80bbc-c782-4fd6-8c82-f2d4d939535d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd040df6-82a0-47af-a5cc-eb0831ea5194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6bce7b-e5c5-44f7-b75b-0f67de6806aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0cf9105-d479-40b4-935d-9a87b35e07b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4db0cc-657f-488c-bf7b-3ce254d15123",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a181817-1536-4cf0-bd85-1897ea61d018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5665c750-b672-4ccc-905d-9a5f368707ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168305c5-1d82-491d-b8fc-0a05f29dadff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a35f2fea-c4fd-4fd1-9a9e-331773d951fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fc9ba4-3832-4dcd-a608-37c22f79f807",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47c246b-3e89-4d00-a3e7-1dc775083096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "558deb8d-4e1f-416b-9e22-408370c3f08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35e0d20-94d5-42e3-a0bc-ec4df7edabac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bfed1c2-9757-4e4b-b925-0ad88cccdb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ea0eec-d389-44ed-aad5-2b30d4f53888",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b056c3-2cc4-493b-8cd4-0b02406ead57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac3ba2f2-2c05-419a-8fa5-f92379ee8d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c9785f-9de4-43b1-beb1-26d8daa07e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3628371-9dd9-41c5-87e8-371ec6f8d22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69eaada-b178-4778-a4fa-05db22dd6af6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec244d1-a5ce-4126-a2fc-1a46706babe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cefcacba-14fa-4c8d-b6b5-37bcd41a9a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce407b65-726b-4291-b3e3-99c62c0cc443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef06f52f-9108-49ec-88e2-33a26421c97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a571fe-4da0-49b6-9515-93c3a16528eb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6de93a-947f-44f7-b3e9-aef133daba82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33885a90-45bd-4e55-b7ad-8918ae86fd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb998e48-de79-447e-8a61-47afcdc62a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc5406a-3632-498c-b27e-ff9416ff28ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b78be4-70f4-449a-820c-531a4e9a4ee4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7728324f-a708-4b3e-83f6-9f3d6cd50127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fa18696-dc83-4596-b8bd-b7c6189023a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956682df-42d8-4225-8f84-b236ba023ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64a30b6-e920-41bf-b817-3ca6af18e8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03baa33-44ee-4115-9f6b-ed66105b2570",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61b6698-877c-4ca3-89a0-058227f6eee6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "379f49b0-f1b7-414f-95cc-6865795d5579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b81a1c-6943-49a5-be49-d1e0ebef40dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628e6d6a-647e-44e4-839c-b7b0ebd94662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b85ea13-fe41-46ab-9fa2-41876fa2cabb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29c011f-1f4f-4cb5-8b45-6d7e235cbb9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0f5139c-09dd-4e9b-b4a5-5d47f1323a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1c60ff-929b-45e7-9882-2dbe9230499d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5085e1d1-ff12-44a8-9891-05ad420b2f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50a4929-ab1f-482c-9ebd-f90126986ecc",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa5dcfc-a621-4c21-a8cd-43f503efd345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b45a1ac7-47df-4f1f-877a-bacb91e1b691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a5134e-77b0-445b-bbf0-940e60855628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7025199-8673-4cd7-baef-5f980659a4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcc9aa4-afe3-40c8-ad78-5f74f0b19e76",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97520826-72ba-4889-8aa8-adf219b19699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f280a76-19b2-448c-924d-dd4a6be96d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b3cf94-6864-4a9a-9d22-8cca69416e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48d2e45-ea17-4ea8-a2b9-735fc87b3a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2512852d-5bfd-444c-a87d-165c29d2d41d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aca5e07-ba70-4a44-bea6-6b7028201ebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82675813-e5d3-47dc-9865-a22cc8f652ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a1a3e6-7c60-4e15-883f-cc0ee9465e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8fcaa1-156d-4ef1-ba6d-3bc8e6622e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f175b4c0-79df-407b-802b-7e0fae5962c0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c9725a-7fa4-4be4-ac46-f6ee993cdb48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "456f869c-8b11-4683-9835-90805c0aec66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8054b136-2692-4436-bd58-9cd20c72dcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e889c9-5c5f-40d6-b7ad-7766a60d535e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f245238e-5b27-40d7-bf00-ca5b36898724",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8dadec8-afe0-4c64-9fa8-753b6bc37f83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "145bc538-aea4-4937-84f1-563c4ff873da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1490dad-6ae3-4df8-86d2-1088db327916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fe6614-5d7d-4ade-950c-b0ba62a906b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50af6fe9-c542-44d5-8aa9-2de29c50138a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8430b52c-a45b-48a6-a2b1-941251c077c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64c2d818-b226-4550-81dd-080aefabddb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd076ae-fc07-41ff-a426-f8afbe289dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa267e6-407d-4663-b3e2-ddbdc96a7966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dae376a-4bc5-4d31-8a65-976004f9f1b2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0030a6-6de7-4c5f-9db5-abc16690c627",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fd8b48b-9830-4230-8598-54199eb166e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8501c149-95bf-4be7-86eb-5a33e8e72cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898ab525-ed23-47c1-8a85-bb8cbbb6f3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb6aaa8-0db2-49dd-a6f0-3aa26ec28951",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0429c31-2f27-430e-adc0-62351b6011ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73fbb0ed-9325-4201-ae0b-9c33fcbe1431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ed99d1-38b1-4ace-852a-fb45916ac88c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a38543-5286-4b09-a1d9-5df7a13c058a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928e3e09-662c-4fd4-9d5e-6864f23dc00e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7069ff-7676-48c6-ac71-27ec5496af97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14192023-358f-4934-bbe1-722336349841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed0982a-d0c8-4aba-94c4-885b921addbf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf79ca69-aebf-46fd-8a98-7e5e99065a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae0a1da-fd33-4fec-a7b3-eea8bde677e1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cd5313-ba39-4e09-bf06-9606341f6b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48b83178-ef22-4a92-9ad2-a9be0c2a7d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522257d0-f08c-4136-896b-5f18a1eb42c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68dd49a2-a908-49e1-b34a-a167ff84d141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0bbe12-d34b-4dfe-ae82-82716c525a09",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f289042-ddeb-487b-b2d6-d996b391f28f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7f24bbe-3ace-43c1-94d6-b45901d1b3b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a785ff-d339-48db-ac79-7f74ae5619d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004fa8a4-b62c-4faf-965d-55bd716c6672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e19ca43-dadd-479b-b2e9-ae2d304c5463",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4be355-f59e-408d-bd7d-f88ce6c7f133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ff0ebb-6f76-4983-831d-1deb63c5d4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fde0ba-345f-40d7-bd91-5dddbfcd327a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f4cb99-9737-4d89-a8d6-eab6ac7f2d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7febae-56e1-48ab-93fd-42d63699514a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbeda07-d9fe-4c09-bebc-6ddb741b809c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db180405-f0b4-48ca-a382-c60747a6fad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65eb5c0b-8d66-4093-9744-2b9c2e96b043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc02ad5d-536c-433f-8808-fd0545fe4d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685104de-28c3-426d-8708-10ae90bac01c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5887f1ee-71fb-4983-9e34-97e508f578c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b2b90e7-5bbb-4a78-9337-5ce45a05dba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c444e876-1b83-4cac-9c9a-9fdbecd8d530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57142061-3301-40dc-a595-1bbfc0ea48f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68682ff5-1789-4300-9cf0-eeeb33c0b215",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38511342-d0cd-4cf4-ad73-3a43fc634398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69f0c74b-dcef-41c5-b0c0-93566210a9a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1ad55f-57fd-4a3b-85c8-9b2fd3537032",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bde071e-3198-47a5-be70-6896072e6132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf5b25c-2d88-412e-b01c-de47877a55e2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdb35d1-1d0b-43fd-8453-3a864937ae9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2192130-54be-4933-a32c-5b64e7a6c537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd194003-7170-4e4f-92b1-6eb314a5e6ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e84e24-1d00-49d9-84e5-5981b819eb92"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be03a4a8-63c8-4334-a7f1-1aada068a918",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d8703cf-8d6b-44d5-b36c-1d74d8f981c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa4c7808-0dbe-4ff4-bc23-327f7d94da2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00f00102-1365-43d5-ae45-d3a9a63d4ba1"
                    }
                  }
                ]
              },
              {
                "id": "336bf45d-a367-49cc-ba2b-23b90c0fdea5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fd3fd93-901b-41df-a05f-79a9150d203b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1849bfd6-f107-4468-8f4a-7077233b44c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "65ceac1d-999f-4213-b0a1-4dcc5ae8b627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "585834b9-9506-454b-8c53-25f9de2656db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e12d8776-fa46-452d-956d-a1b34afe9ab8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e9a0106-71d9-4843-911f-0cf6158ab568",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5bc3f16-627e-4fc4-ba3c-3bf913b9ae83"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c36b740e-f132-4847-8204-668c7941bc6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e8917ea-e790-4cee-892f-b70c92d0c605"
                    }
                  }
                ]
              },
              {
                "id": "b00a3022-dd15-4145-a4ca-e114998e1e45",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "739e0544-dafc-45d5-8dde-b806a667feb2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "625b4955-4d25-4855-a99d-8b3e5c385e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d74e0ad8-8887-424f-af32-1c7d1240a388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3b3dbf-d7cd-476e-aac6-b69acb7b726e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ae8c43-3308-467c-bd0e-e50782c2e72e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3b3b544f-43ff-420c-852a-817a3d56091a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d7fa450f-dd1e-44e0-a68c-75559844df74",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c1813a0-0bef-44db-b438-fd8ee2ba58dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a4d63105-961c-4c13-8461-f7876e6ff960"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95f7ff94-bc04-4f44-92d0-775e771c2f54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd548853-9b1a-45a6-bbf1-11d77c0f45e4"
                    }
                  }
                ]
              },
              {
                "id": "58356ba9-2524-4ec2-80f2-63468fd85c03",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc62d877-4d30-4f8f-a015-aadbfcafd01d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f8d9e739-3cd4-4605-a893-9684a5d6f9ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45a3f7bf-a15b-415d-b4e6-9f91a24d2e73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd48ea29-e0e9-42ee-a888-d4339cf1ba9c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0d60e80-1140-42db-9f4f-42997da58078",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5574e0e7-8048-484d-bb8e-14c7f344ed15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31200580-395a-4d35-bbbd-b27294a0cdcf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5917c6d8-ee88-43e4-b12b-70d575d57bd2"
            }
          }
        ]
      },
      {
        "id": "5035a6dc-36b3-4dc7-a015-d15d502dcf2d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "380c69e3-3389-40f1-829b-66acfd37e608",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc0f2601-5d75-414f-ad54-9d9ea6285f7e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "731f0b5a-310b-4d02-9376-208d857ac8c0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84003b5b-1911-4650-9549-d9b2560a4be7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8aacf13e-3e3f-4186-a00b-2b63638314c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1812faea-08d2-4a49-a5f2-ff8f97c2b527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9ee5bb2-25b4-408d-9fcb-c92b3dd2e1eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5067cc8-8f22-4a39-aab2-fa1edfc54f5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c01f40e-44a9-487a-aab9-94e8127dce8e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e3f7518-d497-4026-bdb5-6066784b7be8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44595de0-a0da-435f-9505-295fa78850a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0e339d3-e7d3-4b00-99f4-1a4815d1104a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d1a2fb43-8535-4227-b62e-1efbea359ab9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bdf9105-4981-45e1-a2e0-d33ebe34be47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68a852c2-568b-4b93-9793-6c1c8ae3c5c5"
            }
          }
        ]
      },
      {
        "id": "7d6f1b43-190f-4a0f-8b99-8bff344baf39",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f88c7acd-726a-475d-98dd-bcd9b510d2d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e350e7f9-c465-4c8b-805b-2d2944b50492",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcf4fb16-a96f-475a-88dd-1f4b65ec6a4d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d579d68c-7118-4e81-9edb-c1b874cfde19",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e56948f3-b585-4a37-8096-354e666a03db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7344e2c8-e327-4a83-be60-d900e0a2185c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdedf16b-204a-47dd-9472-82a7b49fa61f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d056b5a-0953-4c6e-8680-71534be93f9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca456a4d-c10b-4497-9046-08ebdd334da8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8063b843-5d10-4fff-b16c-ef5edcf72e3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53773e73-1948-4a16-a363-700ed82aeb5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "029af168-447c-4760-9b32-a0de4949d466",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78cb5c99-737e-4d25-95b6-af4ff3fdae46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "450d971c-7aca-4e8b-a42a-a6a896d60ef2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f41f4b8e-1e76-4167-8ee1-c0e77bc45052"
            }
          }
        ]
      },
      {
        "id": "d3cc3e95-6665-41e7-98ea-120180ccf687",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e791c9c3-3935-4f2c-98e7-e9103de68fe1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65efeb48-5351-4ca5-bcd7-3c3762abf45b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95e7bc3f-7533-4d66-b274-ca6de0f35a27",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a59460a-1be2-43aa-b7b3-329606376d1e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5117f67-6661-43ef-ae10-6a562c95562f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08991719-8f48-42c2-a273-84283c5745f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72223904-0df0-4234-8682-36cdb5c7a5eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "545217a6-e8b9-416a-af64-71b224089d4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e77f4593-bb71-4aa1-a748-a2dbb8195ece"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c4a1897-91aa-45b9-adb4-2788dbf1d3fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fdbdad4-3cf0-4794-9b9c-9b3914493779"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6c745c2-614a-4e99-bf1e-d7a3d5de036c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b89e479b-27d7-40f4-8c6c-032e1f601943"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cd76599-a1e6-4ca8-8569-4b08518bc6cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8eccb512-99a8-4b10-9652-a1e27800d77d"
            }
          }
        ]
      },
      {
        "id": "196b6760-76ab-4366-9e91-32aefec81d36",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01fc532f-ea87-4abf-9e43-8314a07142ed",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15cdfa86-abe0-4d8b-9b41-a504ab68113d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "22f0e02e-d506-467a-b5ae-5d1bd7b3437d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d58904a-cbbb-45a3-b841-f5a83ea99f70",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f05f2ed6-084f-42d7-b72b-265d28fa2c7c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 104.95422535211264,
      "responseMin": 7,
      "responseMax": 2463,
      "responseSd": 280.4883593585791,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693873921717,
      "completed": 1693873964109
    },
    "executions": [
      {
        "id": "ce01594d-752c-45a9-9c02-7c692837cd61",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "047db196-8a81-4ed0-ac31-6e4043437b1f",
          "httpRequestId": "752c966c-0054-4a98-a4ea-bbff08af23ac"
        },
        "item": {
          "id": "ce01594d-752c-45a9-9c02-7c692837cd61",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7e5db9fc-bfca-4205-abbf-32915666edab",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "96b8a288-d04f-4da9-9579-ccf8d3baff92",
        "cursor": {
          "ref": "d7e992f3-be93-4e61-b88f-13af4699b03f",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e7c699a7-1272-4adf-a275-994f2c410040"
        },
        "item": {
          "id": "96b8a288-d04f-4da9-9579-ccf8d3baff92",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f55a2aee-e91d-4665-9e91-e08320224b61",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "267fcd93-7cef-49dc-bcfa-fe1c4ce2ed5f",
        "cursor": {
          "ref": "60fd8a5f-0d05-4897-9932-240d16d28e56",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3dc37a91-3a9b-4ea1-b4cd-7bd8e3fbbe5a"
        },
        "item": {
          "id": "267fcd93-7cef-49dc-bcfa-fe1c4ce2ed5f",
          "name": "did_json"
        },
        "response": {
          "id": "b9fa951e-f082-4ce7-ba6e-d7ac8e411064",
          "status": "OK",
          "code": 200,
          "responseTime": 326,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3bd330-95af-457d-99a2-e2cabebc8d27",
        "cursor": {
          "ref": "c16b2b61-9e17-4f68-8f92-969c90c065e2",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c50cfa4-7c12-480f-a09f-8b8cef7d5e65"
        },
        "item": {
          "id": "2e3bd330-95af-457d-99a2-e2cabebc8d27",
          "name": "did:invalid"
        },
        "response": {
          "id": "1e23c849-d0a8-4d63-915b-bd2fec0477c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3bd330-95af-457d-99a2-e2cabebc8d27",
        "cursor": {
          "ref": "c16b2b61-9e17-4f68-8f92-969c90c065e2",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c50cfa4-7c12-480f-a09f-8b8cef7d5e65"
        },
        "item": {
          "id": "2e3bd330-95af-457d-99a2-e2cabebc8d27",
          "name": "did:invalid"
        },
        "response": {
          "id": "1e23c849-d0a8-4d63-915b-bd2fec0477c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249f5a79-a707-4885-b8d1-78cc43a28dc6",
        "cursor": {
          "ref": "a81bd7ea-0914-4936-8e5d-fb5320417e10",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fabd6370-b32e-4dd4-8fd1-d34fca6e3b3b"
        },
        "item": {
          "id": "249f5a79-a707-4885-b8d1-78cc43a28dc6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6fd5cba4-164f-432c-b940-1b43b3842cb8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a89366d-5bf1-48b7-b0f4-983a60cd8623",
        "cursor": {
          "ref": "255422af-305a-4e34-b664-4ad184763a87",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bfb16817-1374-4300-8e4a-6b632990d292"
        },
        "item": {
          "id": "2a89366d-5bf1-48b7-b0f4-983a60cd8623",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8c80f223-7076-4e78-bacf-755e615ba8c0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f752852-595a-460b-bb91-06643f71afda",
        "cursor": {
          "ref": "c606a637-974c-4a25-955a-3bd740b7ce06",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a10e850b-eb2b-4f43-8a3b-d617d1a82975"
        },
        "item": {
          "id": "1f752852-595a-460b-bb91-06643f71afda",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "480ce30d-ba12-4e30-a3c4-2bfd14ec70ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f565ff3-3bb9-4670-a697-95b1d1d031ab",
        "cursor": {
          "ref": "631d5240-92d2-4c11-9980-8b16c37277ca",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "70bae5a8-d1fd-45a1-9d47-82ac5a5e3f95"
        },
        "item": {
          "id": "8f565ff3-3bb9-4670-a697-95b1d1d031ab",
          "name": "identifiers"
        },
        "response": {
          "id": "1deed9d6-d531-4b08-97bd-b674ce430076",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d979e7ae-cc69-4f98-a1c7-1d9230da4c88",
        "cursor": {
          "ref": "58ca660c-ee9d-403e-8ed6-7ce877b0f41e",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e2b00863-c1ca-43c5-b1d5-f7ca19843b2e"
        },
        "item": {
          "id": "d979e7ae-cc69-4f98-a1c7-1d9230da4c88",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fe860b5e-2c5c-4f71-877b-21425b715a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d9db54-711f-4d99-a1a8-95d01b1bea45",
        "cursor": {
          "ref": "24342437-e492-4e0a-9c3d-c0d3404ad7fd",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6d04b66b-031c-4e08-8ed8-274158b303aa"
        },
        "item": {
          "id": "17d9db54-711f-4d99-a1a8-95d01b1bea45",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9dc49cfc-f94e-49b5-ab36-254328597a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53510992-e74c-4b0f-bce9-77fbf054ca5e",
        "cursor": {
          "ref": "3053c673-886d-47a5-8e6c-3a772817b3f9",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "58cd7783-73b6-4887-8d54-64935b7a8c18"
        },
        "item": {
          "id": "53510992-e74c-4b0f-bce9-77fbf054ca5e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1b5d231c-a154-497d-95ea-c10f7c5f907d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0171ddc2-0184-479e-ae9e-b7b6d75f8c35",
        "cursor": {
          "ref": "ea388dcd-6a51-4691-8096-c670309ca719",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3da3ccbe-3bd0-45cf-a180-6817fe259083"
        },
        "item": {
          "id": "0171ddc2-0184-479e-ae9e-b7b6d75f8c35",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a5425d04-f826-40b3-9b7e-6421a1245dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e10718b-877c-49f5-a57a-156e7c591b43",
        "cursor": {
          "ref": "5ed1e3a7-797a-4099-91d5-ce59e0aa4ed8",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0ec92b68-78e6-4be1-9911-bf0a8057a660"
        },
        "item": {
          "id": "1e10718b-877c-49f5-a57a-156e7c591b43",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "037fcccb-a9e6-4eb6-aff9-7257d7062b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746b07e4-693e-46c0-9fe6-d5f76e2742dc",
        "cursor": {
          "ref": "437b8259-2077-4965-82d1-e97c472328d3",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2bbd3e97-0d71-40e3-9186-94c226ea3f79"
        },
        "item": {
          "id": "746b07e4-693e-46c0-9fe6-d5f76e2742dc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "41c11580-de67-4ec4-a16e-e77bd5a1ce0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4dce9c6-7692-44f3-a4a8-55dbf027b508",
        "cursor": {
          "ref": "1c6a31a1-4a15-46b1-9c24-217207b3a426",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "958ab129-4eee-4170-9241-6d0f6e429564"
        },
        "item": {
          "id": "d4dce9c6-7692-44f3-a4a8-55dbf027b508",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "94b20f4c-34a8-41f4-9038-4d2d1ee60f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5016bcc-5251-4933-96d1-1705fd453ba3",
        "cursor": {
          "ref": "82678a48-9986-434a-a705-32c90404beaa",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "686905ad-67b9-47a8-b4a9-51a9830ff7fd"
        },
        "item": {
          "id": "f5016bcc-5251-4933-96d1-1705fd453ba3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7d510617-7df3-485e-a0a9-c572662dbabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a8cbe9-01ba-494b-9728-a13b5fcd1f0b",
        "cursor": {
          "ref": "4f3b61da-479b-453c-b948-6558bd16eba1",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "edeb8896-6524-43c3-b707-0e490de6b83a"
        },
        "item": {
          "id": "62a8cbe9-01ba-494b-9728-a13b5fcd1f0b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e61780ce-cde9-4012-a876-2771773269e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d50db2-87bb-47ed-b327-80e179a010d8",
        "cursor": {
          "ref": "10ce3e2c-f214-47ea-b59c-b461f34dc54c",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1f2fdeb6-7786-44f1-8514-c08d6dd7d7da"
        },
        "item": {
          "id": "10d50db2-87bb-47ed-b327-80e179a010d8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3af8ac15-4a24-4fdf-86da-10e971558c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f141b4f4-ef70-455d-a6ff-84f83db2cc4e",
        "cursor": {
          "ref": "fe338eaa-8843-433e-805b-77275fe01fc3",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "33f6597c-67fd-4829-b638-27f28dafa21d"
        },
        "item": {
          "id": "f141b4f4-ef70-455d-a6ff-84f83db2cc4e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b6b0e1b8-ba93-43a7-9ddd-a9c39368acb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4969d61-c297-4de3-b101-1c9d061acebf",
        "cursor": {
          "ref": "825de9a3-7476-468a-9588-60b3b5baa1aa",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "97006349-1258-45e3-ae8b-e243b2005f62"
        },
        "item": {
          "id": "b4969d61-c297-4de3-b101-1c9d061acebf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "78901d13-19fe-43dd-b46d-b9f8bbf32472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a62d10f-15b5-4b09-8ef9-61060dd17e20",
        "cursor": {
          "ref": "6aca2904-cd8f-45e5-b37c-e1e1c6397bdb",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3ffe6b34-eecd-4cec-b9d1-a4ba4e606aef"
        },
        "item": {
          "id": "8a62d10f-15b5-4b09-8ef9-61060dd17e20",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e9643afa-7fa6-445f-8d84-11ae23db76e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77277b65-150f-42d5-bc06-e4d5032f6164",
        "cursor": {
          "ref": "b115b1c3-721e-4884-a3a9-ba7e9aa50106",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "11c20a7d-36f5-4e9e-a1d8-aa921f922581"
        },
        "item": {
          "id": "77277b65-150f-42d5-bc06-e4d5032f6164",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b4a204de-bb29-4fd6-89aa-df5cb9a360a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a34d8cf-33b7-4586-a2a5-61e243c8c93e",
        "cursor": {
          "ref": "5a73bc7a-2327-4656-a50a-d6cbab56cd35",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "81a0bafb-a719-4a43-99ae-11254942efa6"
        },
        "item": {
          "id": "6a34d8cf-33b7-4586-a2a5-61e243c8c93e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dfcb755d-a8b5-43ca-9af6-dce953b0c2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a30df5e-d584-4e70-9771-e1b74e97b9bd",
        "cursor": {
          "ref": "b00bb394-32f9-4e4b-bff8-dd3ad0631467",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b7b1e0bd-1a7c-4e3f-9bb8-a80d7d66789c"
        },
        "item": {
          "id": "2a30df5e-d584-4e70-9771-e1b74e97b9bd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0c65b763-ae4e-4b8e-b082-9f8b2cbffc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b60ccd-3788-4ddb-a677-de3bb94c424f",
        "cursor": {
          "ref": "f06fb2e8-0852-456e-ab4e-663a5e4b412c",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c139aa7c-525c-455e-8719-e7ac29ee79e9"
        },
        "item": {
          "id": "06b60ccd-3788-4ddb-a677-de3bb94c424f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e9e9684f-b995-484c-ba60-9acb89cee136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d78c89-e3e3-47e8-9c4f-be1b2f2d1deb",
        "cursor": {
          "ref": "c2716a07-9f2a-4ec7-99e5-e243fbf467a2",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ea0952d0-9e75-4647-8cc3-1ac8cc8ebb1b"
        },
        "item": {
          "id": "76d78c89-e3e3-47e8-9c4f-be1b2f2d1deb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d1b53b08-fe7e-48b4-8645-f5d445e725cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947ac15e-8554-48b9-a988-64447013ec66",
        "cursor": {
          "ref": "267c463d-cfd6-497f-9386-576a0eb41b4b",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "65f9b1a6-0f72-43cf-9dcf-1f4e46dbef58"
        },
        "item": {
          "id": "947ac15e-8554-48b9-a988-64447013ec66",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7c2798f0-e50c-4af7-a0d5-312d7a100aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434d08cc-6c86-49ab-ac17-df930bad615e",
        "cursor": {
          "ref": "a8c3c955-009c-4b99-a39e-cae370210c8d",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "626e28ef-1e1a-4dbb-96eb-dde682c40364"
        },
        "item": {
          "id": "434d08cc-6c86-49ab-ac17-df930bad615e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "99dac9a6-db9f-4361-993d-7df5af0023ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c4e277-5ba4-4359-996b-621ff0335e7e",
        "cursor": {
          "ref": "2d7167b5-ab69-436b-b3e7-0431ae119baf",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c9d6707e-54a5-4f56-a7f2-9ffcd0758895"
        },
        "item": {
          "id": "f5c4e277-5ba4-4359-996b-621ff0335e7e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "901cf3c7-a65a-4bed-9f83-81f623b507c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfd79a2-8959-4a15-9cd0-f0e11e2f4745",
        "cursor": {
          "ref": "f43d8dd2-fc9d-424a-b98c-76e617f98b47",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "877c03ad-8f09-4d60-9743-021df42676e4"
        },
        "item": {
          "id": "1bfd79a2-8959-4a15-9cd0-f0e11e2f4745",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "31010975-070d-4bc3-a860-5a02a8a509f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0337423a-5b68-4b09-a867-274f2a1740aa",
        "cursor": {
          "ref": "498f3953-3bd3-4d84-a7a3-8be4fa766b89",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a342916e-2ee8-4295-813e-2e19a9666c23"
        },
        "item": {
          "id": "0337423a-5b68-4b09-a867-274f2a1740aa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "66462315-e407-47de-aa7c-aefc33521005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e0b08f-4e14-4b34-a223-11773757c793",
        "cursor": {
          "ref": "4fb0a4a1-bf6c-41be-a04d-57658fde922a",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3256d27e-f297-47b2-9846-700663d551a9"
        },
        "item": {
          "id": "b1e0b08f-4e14-4b34-a223-11773757c793",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "42fd5690-a3b3-4a09-8849-805c3047eea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f7f202-ec88-4044-9365-522b693b73ea",
        "cursor": {
          "ref": "67226a7f-f87a-4a3c-b9c0-f2ff86914ee0",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ff80d990-81a6-496c-8f15-46d9ee19b3fd"
        },
        "item": {
          "id": "97f7f202-ec88-4044-9365-522b693b73ea",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fb244cfb-9feb-4915-a57f-794efe6a0c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e056e3b1-9121-4ee2-ad3b-38b39a7ad3e9",
        "cursor": {
          "ref": "fe111ebb-ead3-43d4-9947-1eca9512285e",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "79456e0f-0984-4225-aa75-94d664228c52"
        },
        "item": {
          "id": "e056e3b1-9121-4ee2-ad3b-38b39a7ad3e9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ff0a409d-8926-4e15-9016-420308e143b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665663d2-a6ca-4e94-b028-55af273a3b20",
        "cursor": {
          "ref": "0817f8dc-a650-4001-995d-4446f0a56933",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e72a6669-48d4-451c-8905-f6e7cc29dd0a"
        },
        "item": {
          "id": "665663d2-a6ca-4e94-b028-55af273a3b20",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a43a8d61-aa2b-4107-8eec-4c9513566e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4393dd6e-af44-4db6-b1f1-4636da698525",
        "cursor": {
          "ref": "507a0c67-9f93-4c96-a38e-e9293dd0ae88",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b59bbbb0-f08e-48fc-848f-eacf3665b452"
        },
        "item": {
          "id": "4393dd6e-af44-4db6-b1f1-4636da698525",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "73908958-97f3-49b5-a396-398304baf2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25aa214e-350c-451f-bbda-fb89a57e4bdc",
        "cursor": {
          "ref": "710980ba-6216-4979-a576-e8679b122c7e",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1faa951f-b31c-4e51-b907-560c60aece99"
        },
        "item": {
          "id": "25aa214e-350c-451f-bbda-fb89a57e4bdc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "eb863a42-fb5d-4478-b04c-0d0bea40f570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e58fba-897d-4587-ab26-07a32d717fc0",
        "cursor": {
          "ref": "1e7177bd-6b77-4431-a028-2bf4aa31d76a",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ea9bfb1d-afb5-4ae0-87f3-11282a997dd4"
        },
        "item": {
          "id": "56e58fba-897d-4587-ab26-07a32d717fc0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b56f08c7-0023-4c7a-bfbc-19a6e3c913d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc7fa20-d7fc-44c7-bdc8-86251efb1b1d",
        "cursor": {
          "ref": "a3ed1118-1eb5-49cb-af81-1a1cbec41794",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e80af30b-d198-4ea7-8ce3-f807811630d2"
        },
        "item": {
          "id": "0dc7fa20-d7fc-44c7-bdc8-86251efb1b1d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e3ab93fd-d8c9-41cf-8cf0-58d6e390874b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "eb0b5b42-c398-44ea-8e6a-bbd4d09049ee",
        "cursor": {
          "ref": "2560351f-40fb-4c60-9923-3ee39402bfab",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a024d983-5150-458d-86ab-34271e20a814"
        },
        "item": {
          "id": "eb0b5b42-c398-44ea-8e6a-bbd4d09049ee",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8231e990-2279-47fe-9459-9a617ef8cc1f",
          "status": "Created",
          "code": 201,
          "responseTime": 2463,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e419f596-3b38-4172-9609-21a3c170ca18",
        "cursor": {
          "ref": "187716aa-de55-4007-9eb0-73fcfbe6bd66",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d01ce4e9-a0f9-48ac-84e4-61e4892901a9"
        },
        "item": {
          "id": "e419f596-3b38-4172-9609-21a3c170ca18",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "98755480-c2b2-4ffc-862b-e53942f5427e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c2550fa0-88ed-4508-b2fa-57b84ee5cb46",
        "cursor": {
          "ref": "671a3fba-96e9-498b-b7a0-3648ba2f4f16",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "30751fcc-9049-40ca-ad65-0f8c5464df78"
        },
        "item": {
          "id": "c2550fa0-88ed-4508-b2fa-57b84ee5cb46",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "29b334ea-e170-4d80-96fc-de6770e54da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951e818b-39ac-4380-942d-a9f8a4e7538f",
        "cursor": {
          "ref": "4ce2a430-ef68-471f-8716-a32ac66b8abf",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "99bcf2d4-71df-4f5f-b617-4beffc5d6409"
        },
        "item": {
          "id": "951e818b-39ac-4380-942d-a9f8a4e7538f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "07846ca4-f8dc-4feb-a0fb-c0ff8008ace9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "90529377-a99d-42d8-8f91-6cd7ebedc90f",
        "cursor": {
          "ref": "41e371c3-947b-4244-be23-581584c75049",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "14428268-ff46-457d-ac60-1bf23c04d4ab"
        },
        "item": {
          "id": "90529377-a99d-42d8-8f91-6cd7ebedc90f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9e11ffec-7a8e-4eff-a939-3e940737adef",
          "status": "Created",
          "code": 201,
          "responseTime": 1480,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9e414551-b567-49a7-a1a9-c5d4d4fd8cc9",
        "cursor": {
          "ref": "30d58bed-3b40-4504-8a9b-01c5274ada8c",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4bb8d6ab-6b22-4408-a271-58794a2ee7da"
        },
        "item": {
          "id": "9e414551-b567-49a7-a1a9-c5d4d4fd8cc9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4a9c869c-ae27-45ef-8fb8-2b5cb6e3a3c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4d9d71e4-2879-49c8-bf9e-0dc079656c77",
        "cursor": {
          "ref": "a065566b-342d-42c1-986e-a02b0ddaf7df",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "92e2ae92-b126-4548-ad14-c5402e2cbc37"
        },
        "item": {
          "id": "4d9d71e4-2879-49c8-bf9e-0dc079656c77",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "853fd370-4464-494f-9b81-512c039026c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 776,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9a0e1d1a-3003-4a93-9bc9-098f67e872ab",
        "cursor": {
          "ref": "5a6fe5ec-86ac-4197-9e94-66977192034c",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6bac6df4-1229-4474-9943-ced01d2e59dc"
        },
        "item": {
          "id": "9a0e1d1a-3003-4a93-9bc9-098f67e872ab",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1d2a4558-1d3e-47b0-ace8-d96a3b757ade",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f8c5609d-040c-435b-b2b8-810233c965af",
        "cursor": {
          "ref": "aaf2a4e1-3d11-40c5-aea4-90d81bd30e03",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "25c523d9-3eca-4eb8-9064-d38fbb9619c5"
        },
        "item": {
          "id": "f8c5609d-040c-435b-b2b8-810233c965af",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1e215c51-81ec-4a44-b19a-036a94b6945c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8807c2d0-d24f-4e18-a00b-706f6f84c4be",
        "cursor": {
          "ref": "58ca3e93-2264-4069-acd7-470cd6b9741b",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a38c7546-2708-4186-80ed-0a1f9f91a8d7"
        },
        "item": {
          "id": "8807c2d0-d24f-4e18-a00b-706f6f84c4be",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "491d413d-cbbc-4fcf-8f8d-5a844cadfb24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ed359f25-8fc3-445d-bcb7-9d604c7718bc",
        "cursor": {
          "ref": "b6169d21-9f49-4f0f-9f85-f961bf1d008f",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a0035dec-b167-4f55-b41b-4b5a7d4fc588"
        },
        "item": {
          "id": "ed359f25-8fc3-445d-bcb7-9d604c7718bc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "24b226b3-994a-4738-b0d8-a5b9612c2693",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d467078a-1644-4436-913e-736f560ea3c6",
        "cursor": {
          "ref": "32ab7589-2a0a-4740-9582-2024647e70e1",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ebece8aa-2345-454b-984d-383f76ef8a8d"
        },
        "item": {
          "id": "d467078a-1644-4436-913e-736f560ea3c6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "66eaa5e0-405e-420c-a4ff-4548ef42aa60",
          "status": "Created",
          "code": 201,
          "responseTime": 1038,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "765b0225-1189-45a4-b4a4-f4b85d182f2a",
        "cursor": {
          "ref": "d66768de-3b14-43db-9c14-a1885dc8387f",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "21ac5bb0-be9c-4487-8317-2ad5f66fb8d2"
        },
        "item": {
          "id": "765b0225-1189-45a4-b4a4-f4b85d182f2a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "303f87fd-7c4a-4ed9-8214-a0c93f640067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdffb33b-cf3c-41dc-8bfc-d4a5100a2dc2",
        "cursor": {
          "ref": "9e36a882-7fc2-4894-bf37-6cb572e0b95c",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "756a7d0d-6cdd-4968-9a43-7564f6be96cd"
        },
        "item": {
          "id": "bdffb33b-cf3c-41dc-8bfc-d4a5100a2dc2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fcfa67a7-24be-4788-bcc7-31e75f24879b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455d7edf-7cc1-4c53-bc59-8595826f97fe",
        "cursor": {
          "ref": "6be31918-92eb-421f-842b-139e9b3ee6ad",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5f8f32a8-58e2-42e3-863f-b79165ef37a4"
        },
        "item": {
          "id": "455d7edf-7cc1-4c53-bc59-8595826f97fe",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "dbf42e1c-cee1-4706-85ad-713ba70e7cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd444e8a-54f2-4e8b-bb89-b0bf2c1f73cc",
        "cursor": {
          "ref": "2f61c80c-706d-47f0-841b-32a669a2d729",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fc3a3efc-7f2d-40ad-8998-a2141100c1a9"
        },
        "item": {
          "id": "dd444e8a-54f2-4e8b-bb89-b0bf2c1f73cc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "628eec92-13ed-4940-8d02-9dcfb8fef7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c9532c-bf2f-46d8-a690-3c34940fd95d",
        "cursor": {
          "ref": "798dcaef-2105-4a84-a67e-e12fad3703a3",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5bbfea49-1527-4a15-8cea-a5ebe6f320b9"
        },
        "item": {
          "id": "e0c9532c-bf2f-46d8-a690-3c34940fd95d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c0e06fef-81f1-481b-9b13-9d9df6f0f331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0660d37-0216-4edc-9efb-e3134e82f0a9",
        "cursor": {
          "ref": "b0316bce-abf5-45f7-afba-92fb31d1c6e8",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b83c316d-00d0-46c9-9c93-bbfb66d24fca"
        },
        "item": {
          "id": "c0660d37-0216-4edc-9efb-e3134e82f0a9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bbd21fc1-94f4-429b-94ca-ac8ebdcce55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac8608c-c5a1-40b9-b7dd-4412d6f33089",
        "cursor": {
          "ref": "3223e042-18fa-4ab7-af6b-fd89c451bb1a",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b19915d5-3e01-4680-bd0d-f5a388fb648b"
        },
        "item": {
          "id": "2ac8608c-c5a1-40b9-b7dd-4412d6f33089",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0dbdee34-f738-4378-a90d-b710f25ab75e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1a9353-0d17-4dc4-800d-2b73c8d6f094",
        "cursor": {
          "ref": "94a47cbf-5742-43d7-a24c-99a9ddc3e735",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "95f790ef-453d-4b0e-a5f2-d0bd28fad54a"
        },
        "item": {
          "id": "0d1a9353-0d17-4dc4-800d-2b73c8d6f094",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0fd1e606-a086-4908-8592-69f8d737e815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893728e8-129c-4903-b9f5-fbc4d24a5c94",
        "cursor": {
          "ref": "9c087d1a-7583-4b95-9c1d-1998aa212d5b",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "53a6cf9b-36a1-4cba-af20-96f6f5d8c51c"
        },
        "item": {
          "id": "893728e8-129c-4903-b9f5-fbc4d24a5c94",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "be7df378-70f9-4b8a-b0b8-d1ab377b2587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55440972-e0f9-4499-98a2-80dc5504f967",
        "cursor": {
          "ref": "62a06cae-f5aa-41e6-a44b-bbd7e14612a9",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "90c702db-dc8c-4f9d-ab36-0ff8b5ec871e"
        },
        "item": {
          "id": "55440972-e0f9-4499-98a2-80dc5504f967",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "daae708e-6866-4e22-9a59-6055d084c228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279577b3-faeb-4947-9380-5e3f74be3b65",
        "cursor": {
          "ref": "b7f682aa-8159-4060-8cea-abb1c4749ade",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "982c5c01-e052-41a2-b07a-03a8f8209b08"
        },
        "item": {
          "id": "279577b3-faeb-4947-9380-5e3f74be3b65",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6f5e8cc6-4ba7-4a7e-8a28-2517187de8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb28735-a1be-4dad-a21f-ed4f3baa7e3c",
        "cursor": {
          "ref": "0173a365-4d94-4300-8af3-2c39cdea6b74",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "66cf9585-ecff-4439-a53e-f45a91885943"
        },
        "item": {
          "id": "6fb28735-a1be-4dad-a21f-ed4f3baa7e3c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f983db21-5b97-4e35-aed1-073a137076fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5960554-0e51-4f51-814a-70efbc044f74",
        "cursor": {
          "ref": "fdbc318e-8fdb-418e-b56b-d9faf0f1ac15",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "16e041db-a8c9-455a-b0a3-09694eeb582c"
        },
        "item": {
          "id": "c5960554-0e51-4f51-814a-70efbc044f74",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "094bd01c-9d04-4bbe-8d19-0167c3142354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a49eba3-7d9b-40af-aa9b-a8a9978d6ed9",
        "cursor": {
          "ref": "14be6141-92f7-479f-a15f-c3d5a762144d",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9081733b-99de-4ad2-9804-49feaa1d182e"
        },
        "item": {
          "id": "2a49eba3-7d9b-40af-aa9b-a8a9978d6ed9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f8acea17-f9a3-4172-bb59-f35fcbf522fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 739,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d411c67a-bb55-42fe-bc91-bd34f7ea09b3",
        "cursor": {
          "ref": "1776c461-366e-4b10-a450-2e8253b959cd",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4c611f62-9111-461f-9f41-4e8b2eb9b5db"
        },
        "item": {
          "id": "d411c67a-bb55-42fe-bc91-bd34f7ea09b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1d1943df-ad28-4555-a8af-5eb29e6c2c39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 757,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "156277c9-3a06-4ccd-bbf0-69c0bfcc9751",
        "cursor": {
          "ref": "18575c7f-1bf4-4e94-9cc3-09516e9b2a29",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ba137d53-7140-4fee-827f-a464b0f8775c"
        },
        "item": {
          "id": "156277c9-3a06-4ccd-bbf0-69c0bfcc9751",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "972b3518-c294-4f15-84ce-4d25a9bc6dca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "94cfc593-a61b-45d9-8434-e504718bd8ae",
        "cursor": {
          "ref": "279a1983-5743-4185-aef8-fe8db407728c",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7db90336-c562-40a7-b588-86e7ddd39803"
        },
        "item": {
          "id": "94cfc593-a61b-45d9-8434-e504718bd8ae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7efc6252-a9a4-4645-bac1-948843a1d1ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 750,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "43729404-deef-4182-8c07-3eed2bde34a5",
        "cursor": {
          "ref": "e609b40e-3c03-43ee-989e-a30a345c3908",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fbadb57b-a1ed-44e3-a212-f229fbd9a82d"
        },
        "item": {
          "id": "43729404-deef-4182-8c07-3eed2bde34a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a3b04360-d4a4-412c-a8b4-a796e6f5394c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7c0577c5-6db1-4bbf-ab26-72a1be1760b2",
        "cursor": {
          "ref": "47437488-67a5-400d-b936-b52989e8d579",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5faf8682-f084-45c7-a1b6-600997409129"
        },
        "item": {
          "id": "7c0577c5-6db1-4bbf-ab26-72a1be1760b2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "08cb91e1-e8ea-4361-b149-94547aa9f44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c859232-baec-4222-97cf-5365427e75f7",
        "cursor": {
          "ref": "3a903e13-4ce9-4f8b-8773-bda715d45724",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "77b2b5d0-85de-4f4f-831f-a6a09e7abf97"
        },
        "item": {
          "id": "6c859232-baec-4222-97cf-5365427e75f7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cb5dbfe6-40a2-4725-bea1-d776724d63ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c230217-53d6-4b63-b69e-73d92382cb3b",
        "cursor": {
          "ref": "06e0e08f-195e-4bc1-b019-d8d0456890c9",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9f04c3a7-7d77-4595-ae96-0c3c9269f323"
        },
        "item": {
          "id": "5c230217-53d6-4b63-b69e-73d92382cb3b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1da9450e-80e5-47f9-ae6c-88f27bb5f090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1564de-0551-46df-8809-f18b0440cec3",
        "cursor": {
          "ref": "aabf8229-5682-45b6-a386-cf179c2f8aea",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f11d0351-1be9-4a92-a233-8114c3a9fe5e"
        },
        "item": {
          "id": "fc1564de-0551-46df-8809-f18b0440cec3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "df8825fd-d440-4ed1-86d7-e9041696afcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fdfea0-2dbf-4585-898f-166c8e8ab03e",
        "cursor": {
          "ref": "f6df5508-d5ab-4121-b26d-1262b0225e2a",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "900b68b2-b419-40b1-8531-8e4ebb46dcfb"
        },
        "item": {
          "id": "40fdfea0-2dbf-4585-898f-166c8e8ab03e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "32193946-37c1-499b-a6f8-c89c13ada339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9800bb-06e7-4ced-9917-3cf8b10efc88",
        "cursor": {
          "ref": "59db98f9-f2db-4e3b-8d15-fb161549f5ce",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "86d178a5-e667-4f89-8367-3fa54b6bae80"
        },
        "item": {
          "id": "cb9800bb-06e7-4ced-9917-3cf8b10efc88",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7a3201db-87a4-400d-9dbe-4e503dfc86a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9499c32a-57b7-4375-92c8-50c78be33e61",
        "cursor": {
          "ref": "7b5c0382-fdc6-421e-9adb-94b9e2770811",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "23eecf79-22f2-4243-9be8-84cbb75ed6e3"
        },
        "item": {
          "id": "9499c32a-57b7-4375-92c8-50c78be33e61",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "68408c30-9591-4159-b625-ea72b29feb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7209b03-5247-4bc5-a471-e7305478efd9",
        "cursor": {
          "ref": "df975475-e9a5-4749-9e2e-67ef3ac94459",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f41c2f05-fce6-4c1a-8cec-6a8123e9f708"
        },
        "item": {
          "id": "f7209b03-5247-4bc5-a471-e7305478efd9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ef8b90a9-a274-4877-bbc5-cf9393480deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39196037-248f-4d00-bd45-571a928550c5",
        "cursor": {
          "ref": "72bb7672-ac34-4d54-bb94-f323c33e7c30",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "24a6d0e6-7c1d-46ed-b131-5745cbc08f9b"
        },
        "item": {
          "id": "39196037-248f-4d00-bd45-571a928550c5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "73f28bab-9504-4c22-8402-f5afb465dfff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14080657-27df-4bc3-920b-5bef9c597b47",
        "cursor": {
          "ref": "c9717228-a714-404a-b68c-0248f1efb920",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "75fb573c-56ea-4ea9-8472-78666fe4a53a"
        },
        "item": {
          "id": "14080657-27df-4bc3-920b-5bef9c597b47",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8d08472d-98dc-4626-847d-35bb81a14d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39eb3836-3890-4df0-93ec-7a4aa6222115",
        "cursor": {
          "ref": "80fac30d-4d60-47b2-94c5-b075795135b4",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f7f100ad-2c1f-41c1-9e88-1ebde9f33f51"
        },
        "item": {
          "id": "39eb3836-3890-4df0-93ec-7a4aa6222115",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2fada337-ef00-410a-8449-3b4debaaa368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb02922-3081-4306-805c-5c7d0279b9b1",
        "cursor": {
          "ref": "39fa40d6-f4a5-4906-ade4-d841264696a7",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6203919b-c1ea-467d-b2b2-aa5d8f200b64"
        },
        "item": {
          "id": "deb02922-3081-4306-805c-5c7d0279b9b1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a2fdbee8-5f80-413d-a2c5-b0b7f3e3d170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503a2384-0462-40be-b8d3-353ed022bef6",
        "cursor": {
          "ref": "6c61c559-b172-4556-b526-eef487ae04c4",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b746e23c-34f6-48aa-823c-77bfaf3a4fb8"
        },
        "item": {
          "id": "503a2384-0462-40be-b8d3-353ed022bef6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "36ef10bd-3388-4696-b97f-3d0e483257e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affa3f19-c4da-4f29-8101-2f8234b8252b",
        "cursor": {
          "ref": "76f37fc6-fae6-48c4-8d69-8afd800c883f",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "44acf35d-19ba-4535-8454-05d9697c790f"
        },
        "item": {
          "id": "affa3f19-c4da-4f29-8101-2f8234b8252b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "39594f1b-1146-4bf4-941a-81a50c56cdab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c76270e-5e2e-4640-9ea0-47e65c07c779",
        "cursor": {
          "ref": "4a53eb58-a20c-4900-9d34-9229ea12100f",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d516a32c-c11d-4bb2-9072-b979e0900bdc"
        },
        "item": {
          "id": "1c76270e-5e2e-4640-9ea0-47e65c07c779",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7f75b58f-1320-4d31-b2f9-081a0241fe10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555c3f51-3feb-445a-b54a-2d96cc161cd3",
        "cursor": {
          "ref": "3d3e6939-d9c5-422e-9630-5773603f04bc",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5ae53040-3932-48a7-b0c7-4404770a9d15"
        },
        "item": {
          "id": "555c3f51-3feb-445a-b54a-2d96cc161cd3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "43632dd9-be0b-4d70-abb8-9ac770ffa4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ae3515-f2ad-4303-9e4a-e92eb0399489",
        "cursor": {
          "ref": "799b8bc8-5cc7-4d3e-8cbe-fce568bd6e4d",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c1e84781-687f-4747-b3ef-8ad7c541fb49"
        },
        "item": {
          "id": "52ae3515-f2ad-4303-9e4a-e92eb0399489",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e1090977-8c1e-49de-b7d3-c48d0f80f240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f943a36-bd42-4655-8f03-45a42398a73f",
        "cursor": {
          "ref": "55c089c5-f7cd-4398-b8c3-6b526d876471",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d240b5b6-4af4-451d-8cb6-c8c1065fb33f"
        },
        "item": {
          "id": "5f943a36-bd42-4655-8f03-45a42398a73f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b52f284e-af2f-4f01-b9e1-b88d7d5e2021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647ea0ef-c394-463c-9537-70ce042c67df",
        "cursor": {
          "ref": "dce0b5d1-7abe-4b88-9068-90d0673a0f53",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "32edd16f-3e1e-4e19-b751-7d2aea2bf814"
        },
        "item": {
          "id": "647ea0ef-c394-463c-9537-70ce042c67df",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "158f402b-194c-40c6-a96b-d8f093e7291a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fc54c1-7237-4b82-b7d0-e9ac09b13124",
        "cursor": {
          "ref": "ab891440-5944-4a8e-b665-f62936c90a15",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "68bda31b-c8fb-45c2-91d6-d788ed5aff08"
        },
        "item": {
          "id": "85fc54c1-7237-4b82-b7d0-e9ac09b13124",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "995be5d2-9a04-4c5f-8df4-659d63dca10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3de44e-7b6d-4a59-b0a3-c6b0583c1ff9",
        "cursor": {
          "ref": "1a52fc80-9159-462a-83b3-65fca3756afa",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b14c8980-7923-4fca-86d1-a01964f62d10"
        },
        "item": {
          "id": "3c3de44e-7b6d-4a59-b0a3-c6b0583c1ff9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c9562107-1bfb-4367-a05e-a7ab9a62775f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1510086-25c5-4c63-9832-8e0cdcd59572",
        "cursor": {
          "ref": "bebc17d1-4a47-4aa2-a9a7-ecb42eaaceb6",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "215761f1-c991-4c7c-843d-08a009a868ef"
        },
        "item": {
          "id": "e1510086-25c5-4c63-9832-8e0cdcd59572",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "92a1da35-17c0-4dbb-803a-312d0eb40da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702d6fec-c6a2-4312-ab5e-76015be79b68",
        "cursor": {
          "ref": "6616e3e6-a9c6-412e-aa74-9ada16636678",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dd87a58f-29f3-447f-9716-19467dea45b9"
        },
        "item": {
          "id": "702d6fec-c6a2-4312-ab5e-76015be79b68",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9ebb9ffb-97be-44c2-9d57-bb44b031238d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e875d522-d064-4823-97ca-7aabbbabaef9",
        "cursor": {
          "ref": "8638a411-8073-4a5a-b2af-b74f9f8145b7",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "38d0b960-afc8-4b87-83b4-f946081eaf88"
        },
        "item": {
          "id": "e875d522-d064-4823-97ca-7aabbbabaef9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9498f1ac-674a-4653-a3a4-3c541678c7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4407a96c-0ac3-458e-9e35-ffd1e2915533",
        "cursor": {
          "ref": "e11dc1e6-e02c-4528-b1a1-10baae56afaf",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "94fe89db-16f4-4085-82b6-022a31919ff9"
        },
        "item": {
          "id": "4407a96c-0ac3-458e-9e35-ffd1e2915533",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "aa2709ee-716b-485e-854d-31bf71660033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a453397f-0d39-4083-af64-653fcaa881a4",
        "cursor": {
          "ref": "42039c56-5af9-446e-8106-6f1bc5d42ae7",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b134efb0-b690-46e9-9490-e41d5b9f3530"
        },
        "item": {
          "id": "a453397f-0d39-4083-af64-653fcaa881a4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b372a53d-0684-4f22-b048-02d8bafe996b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bab933-a027-43fd-9d56-7d593921bd51",
        "cursor": {
          "ref": "25ab8f34-8060-4b60-9ad8-bef25653935d",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0c27e95e-9972-4acb-be79-c774aeaa8ce2"
        },
        "item": {
          "id": "b1bab933-a027-43fd-9d56-7d593921bd51",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "344f7a0d-48d5-4e1d-8663-92cd3d26531b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d53538-35cc-424a-8d68-56654cd91ac2",
        "cursor": {
          "ref": "eafdca20-3933-4dc7-8fa4-dbccfb3b27e7",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "adc4ab8d-5e74-4a0b-98fe-5ae6e89502bb"
        },
        "item": {
          "id": "97d53538-35cc-424a-8d68-56654cd91ac2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "de2f09fd-2053-4398-bf7c-69f1314961a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7eca369-2a32-4b79-84ed-904187e1f0af",
        "cursor": {
          "ref": "c102a207-6466-46e2-8c6f-6c8f84b503c9",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bb190006-8b97-43f9-b251-f55ee318e5ab"
        },
        "item": {
          "id": "c7eca369-2a32-4b79-84ed-904187e1f0af",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7026e003-ac12-490a-88a7-d7261b53feeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7a1ba8-7799-4848-bd8a-e5fc0779acc9",
        "cursor": {
          "ref": "8d7b218d-fcc4-4b63-8308-fc5b3d984f4c",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3a404dc4-6d20-4e0e-a806-709ddc833df3"
        },
        "item": {
          "id": "4e7a1ba8-7799-4848-bd8a-e5fc0779acc9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7c1064e9-5ad4-459a-9031-5d6fe2362201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e53c9d-22d8-4937-9be2-e754bb46fba5",
        "cursor": {
          "ref": "071bb70e-f230-4b41-b1af-ca7ea7aad3c4",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bb5b6799-79ea-4b35-b074-cb432cd8c7f6"
        },
        "item": {
          "id": "c8e53c9d-22d8-4937-9be2-e754bb46fba5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "492a8b39-1f12-4ae1-b14f-280adf118cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37f884c-9a36-4113-93df-41fbc03d244c",
        "cursor": {
          "ref": "efa92d8e-c054-490b-9d4a-4d7db07efb69",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9e10f742-794b-4f29-a338-3f956010d620"
        },
        "item": {
          "id": "d37f884c-9a36-4113-93df-41fbc03d244c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8553ac16-e34a-48c0-8674-cc624bcdec82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c21b53f-a5cf-4641-9128-49f939ee975d",
        "cursor": {
          "ref": "ce1db9a3-3f2e-4343-bc58-2d34a4014f55",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3cc660a8-e7f4-4345-8d91-40d5936a8bde"
        },
        "item": {
          "id": "1c21b53f-a5cf-4641-9128-49f939ee975d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a285ec6a-7a8f-4240-b760-c8cf34295725",
          "status": "Created",
          "code": 201,
          "responseTime": 1650,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbe1a39-9e2a-4e51-9bd2-02648a80ca38",
        "cursor": {
          "ref": "b1229786-1b1d-4cac-9915-6b303f553cb4",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4f7e8016-d10c-4918-a501-3f397397e091"
        },
        "item": {
          "id": "9dbe1a39-9e2a-4e51-9bd2-02648a80ca38",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "17955a4a-ca80-4e6f-a08f-b11682f786dd",
          "status": "Created",
          "code": 201,
          "responseTime": 1013,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0209b6-9362-427c-b4a4-c1c844237f81",
        "cursor": {
          "ref": "68827111-830b-445a-b2fc-5590f5350f81",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fa65656a-17f3-4715-b70c-b8786a3929b3"
        },
        "item": {
          "id": "cc0209b6-9362-427c-b4a4-c1c844237f81",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "09d85b13-52eb-4d73-9d10-42917b864624",
          "status": "Created",
          "code": 201,
          "responseTime": 1049,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5ecd4f-e8f6-4b25-98b2-357294ab64f6",
        "cursor": {
          "ref": "81941230-d488-4008-912f-61aa86b4a5ba",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f22087d5-54d3-479a-9aab-3ea5e527859f"
        },
        "item": {
          "id": "bb5ecd4f-e8f6-4b25-98b2-357294ab64f6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1a7b514f-178b-45ad-b4a2-af705d68a754",
          "status": "Created",
          "code": 201,
          "responseTime": 1022,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfa28b6-976f-4add-ae7d-56daf9ea63a0",
        "cursor": {
          "ref": "18f04750-21d6-4a25-a73f-6978cbe8d901",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d132718f-359c-4b90-80c8-5fe8e428bd1b"
        },
        "item": {
          "id": "5bfa28b6-976f-4add-ae7d-56daf9ea63a0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3cd3faed-9d5b-4430-85fe-dbc51795f4f2",
          "status": "Created",
          "code": 201,
          "responseTime": 1020,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "73636896-279f-4247-93c6-afa580630214",
        "cursor": {
          "ref": "d747ae2a-3fcc-408c-a164-a42a62b7be4c",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f7503d27-62f9-4292-8c79-76c89b6260e9"
        },
        "item": {
          "id": "73636896-279f-4247-93c6-afa580630214",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "156ac96e-e00b-4daf-8744-6f842cf54510",
          "status": "Created",
          "code": 201,
          "responseTime": 1055,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0b8a1d-e517-4e9c-89fc-94bfa4f640d4",
        "cursor": {
          "ref": "bf22a413-37cf-4dd6-9a3a-8b467f063b5b",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cfb2f593-0f02-42be-a5ed-f65924a89648"
        },
        "item": {
          "id": "6c0b8a1d-e517-4e9c-89fc-94bfa4f640d4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "20d9b2d2-d472-4572-a60a-1893a1089d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa67d0b4-dce2-4951-b22d-5c4dbaced5b1",
        "cursor": {
          "ref": "a4e11231-134a-45af-910b-64f52640d50e",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1457ddef-9e4f-426a-baed-8e9c24534bd1"
        },
        "item": {
          "id": "aa67d0b4-dce2-4951-b22d-5c4dbaced5b1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4bb50396-ab72-451e-bf56-21c1d4afcade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7d53d0-83db-4429-874f-8f6f8bcaefee",
        "cursor": {
          "ref": "8920d35e-444d-4003-816d-53d14f579f7e",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6f5af847-c6bd-4c99-bea7-8d6a31a4a722"
        },
        "item": {
          "id": "0e7d53d0-83db-4429-874f-8f6f8bcaefee",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "96a462cd-0cf8-4a4f-9ef7-f1217185bb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7946c237-2261-4e75-bd71-8ef8a905cb38",
        "cursor": {
          "ref": "483564b2-c303-49c7-a1f8-b60ca1ac15fb",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2656b7cf-528a-4a34-83e5-7fea44ea946b"
        },
        "item": {
          "id": "7946c237-2261-4e75-bd71-8ef8a905cb38",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0956e92a-1107-4fb9-b16c-dec9b4f5fba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03078b77-b82f-49f7-a186-3eacb87e910d",
        "cursor": {
          "ref": "429d0254-e491-43d7-bdf3-646a1baeb1c7",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "080a1a35-014f-4e51-9a97-6e5e4d77cde2"
        },
        "item": {
          "id": "03078b77-b82f-49f7-a186-3eacb87e910d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "03a1bef3-e12c-487d-a552-52184ae73820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4aceaec-3aaa-4acf-ac29-33f644210392",
        "cursor": {
          "ref": "4f71cc2a-917f-425e-8eec-2d282aaeddc8",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "04cc252c-fd74-417d-a774-65f4ba69060f"
        },
        "item": {
          "id": "f4aceaec-3aaa-4acf-ac29-33f644210392",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "754250b8-1d7e-464d-b2bb-fb1717a9b519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1820325-a439-458f-a0d9-bdb50592f000",
        "cursor": {
          "ref": "ea732bd5-21bc-4f6b-bc66-f03b42ede9f8",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a6997dd7-42b2-4cc1-8413-fb181548e0ac"
        },
        "item": {
          "id": "b1820325-a439-458f-a0d9-bdb50592f000",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7072c327-4c77-488c-ad77-488d252a091a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddc4192-a5e6-4fee-a93c-e912a4d84888",
        "cursor": {
          "ref": "43d92575-6841-42b0-9a11-70420f3ca0e3",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bd5faa19-17d2-4f0b-a5b4-77f09db8ed58"
        },
        "item": {
          "id": "8ddc4192-a5e6-4fee-a93c-e912a4d84888",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "502a52da-533a-401b-9bc3-ca57b777c281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81de988f-a68d-448a-bf4a-986a4465683a",
        "cursor": {
          "ref": "4af0cd0b-7f77-4e3a-855e-d1dba9d23df6",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4aa32398-55c6-4176-a830-67c24e10cab5"
        },
        "item": {
          "id": "81de988f-a68d-448a-bf4a-986a4465683a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "756a7db8-f029-4de2-ad4b-0496876bd591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e7fcc1-8261-4100-8eee-ab3bf9599e44",
        "cursor": {
          "ref": "3c944464-d237-4e53-b188-c9011f173129",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b57b0aee-1a69-4e07-8fb6-a4a7b020c9da"
        },
        "item": {
          "id": "18e7fcc1-8261-4100-8eee-ab3bf9599e44",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "81976443-fa86-49a7-b1c7-9d5510244d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf00a3b-47d3-4a7b-87c0-95edac76d8fc",
        "cursor": {
          "ref": "fdab2a59-adbe-4274-9c70-ba87d2c7985e",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5361e190-580b-42c7-9b56-a03699a66d08"
        },
        "item": {
          "id": "0cf00a3b-47d3-4a7b-87c0-95edac76d8fc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2c395665-2f98-486d-9df3-ea5d24d97ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b060b91-0f30-4495-bb44-f4d3c905f58e",
        "cursor": {
          "ref": "0f376940-e4a5-4db5-b2c1-8b067972c390",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "594273b8-08cf-43fd-97ee-54f39169f923"
        },
        "item": {
          "id": "3b060b91-0f30-4495-bb44-f4d3c905f58e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ee989671-2322-44d7-8eb7-d4ee56f03eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61f8f77-2547-408a-b980-3d29c96c869e",
        "cursor": {
          "ref": "269678ac-7aff-4ec1-a3e7-74b4e7efe341",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2fe5f0b3-aff1-4547-9480-a707cbb7ff8f"
        },
        "item": {
          "id": "e61f8f77-2547-408a-b980-3d29c96c869e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d974c025-86f5-4e75-b1cf-fd73e4195d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9378c5a-526d-4164-bbca-f06a3dc69ef4",
        "cursor": {
          "ref": "0279faa7-52e1-4da0-812b-21419396e714",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "96c9be97-c1bc-46d5-8732-cc9cbcff7ef9"
        },
        "item": {
          "id": "e9378c5a-526d-4164-bbca-f06a3dc69ef4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "81c0dd2f-a025-4781-956e-406c47a7dec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05284336-ac79-4061-b35f-b073ba211d76",
        "cursor": {
          "ref": "39920310-2805-4a17-887d-910c3223ef63",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3bb2567c-9484-49d4-9c83-8bedd89f5dd9"
        },
        "item": {
          "id": "05284336-ac79-4061-b35f-b073ba211d76",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5f205559-1331-4c13-b82c-c78afaa513bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7254195-9e76-46ec-8f10-82a5e9dd7e7c",
        "cursor": {
          "ref": "10e92535-2440-4b0b-a304-5bc76882ac05",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a0d31549-efc5-4bdf-950f-3baec2c27efd"
        },
        "item": {
          "id": "f7254195-9e76-46ec-8f10-82a5e9dd7e7c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9140c374-20f2-48ec-97eb-79bac7640838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1434afb7-b5b1-48af-8c7f-5b83dfb55b4d",
        "cursor": {
          "ref": "e7950d56-9b70-4c6e-b2c3-0f9abe0e6ba4",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a9d1ef65-dc12-4c21-99d6-9e2e811b7a68"
        },
        "item": {
          "id": "1434afb7-b5b1-48af-8c7f-5b83dfb55b4d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7614fbc3-ad77-4685-a3e0-3f4f95bf8a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c309d3-6319-4cba-a63b-972a3a3f8286",
        "cursor": {
          "ref": "fb60f28c-2262-4f7a-9720-8d54d74ef0bc",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e878346a-f8fd-4642-beae-5cd077eec8b9"
        },
        "item": {
          "id": "41c309d3-6319-4cba-a63b-972a3a3f8286",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "06c904a1-b9ea-4b85-a8c9-ca64eef00b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4d0267-4a55-4062-885a-c4260ce02892",
        "cursor": {
          "ref": "46ca3163-5300-4690-93ff-b86b0f436172",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ece4cb1d-3fc8-4e43-896d-7b82bdac5e9b"
        },
        "item": {
          "id": "ba4d0267-4a55-4062-885a-c4260ce02892",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "771b6740-1c5e-4f92-819e-3ec3ad91fb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca33ff85-c2d5-4000-b3de-71b038de7cac",
        "cursor": {
          "ref": "6ae0b139-d8ea-4042-b03a-561e58c49868",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e05b562e-602b-43ed-9156-6122ae52f2c5"
        },
        "item": {
          "id": "ca33ff85-c2d5-4000-b3de-71b038de7cac",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5b405db5-53f4-4473-96cf-f4f95bae7f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad51dd80-342e-492e-947a-fef97899a251",
        "cursor": {
          "ref": "ee71efdd-782b-4bbb-8aad-d59e15b731fb",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a80aa305-c8e1-494e-989f-345ef7f07373"
        },
        "item": {
          "id": "ad51dd80-342e-492e-947a-fef97899a251",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3a05d2de-6fc8-4785-89a6-d61d6b6c6776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d789ee-3572-44c0-ad6b-7c443c0d872b",
        "cursor": {
          "ref": "fd3bd8b4-f577-4a2e-a78e-655462b0f7ae",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dc8f2467-3e55-430e-8ec2-68e368d113aa"
        },
        "item": {
          "id": "09d789ee-3572-44c0-ad6b-7c443c0d872b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "90e78cc8-5028-4e9e-a569-04afe8a42d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549dc75f-ae2c-49ca-82c8-082196c88130",
        "cursor": {
          "ref": "ecbad382-c724-4844-a42b-658c5d9cbcc2",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "da66eed0-3725-456b-81a2-6b7f48dd613e"
        },
        "item": {
          "id": "549dc75f-ae2c-49ca-82c8-082196c88130",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2e6d7635-a1dc-41c7-aec4-4299c799c57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7160ea4f-16b2-4a9a-a0e8-1aa9611db3ec",
        "cursor": {
          "ref": "5cc7d1d0-bfb8-4420-8d08-cf164109cbc1",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b95e00e6-cf37-4a2e-9497-bc7cd064782a"
        },
        "item": {
          "id": "7160ea4f-16b2-4a9a-a0e8-1aa9611db3ec",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "127c3c44-ab9a-40d9-95bb-14c337153883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c67d961-2491-43af-acd8-0bfb9a62f322",
        "cursor": {
          "ref": "9cb8a5c6-bc77-450e-8281-3189833ba19a",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fdc9db3e-7f02-4cfa-9dbd-33d7effa67f7"
        },
        "item": {
          "id": "4c67d961-2491-43af-acd8-0bfb9a62f322",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f3d61fcc-1a85-484a-8b4d-a91f7d7176b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83806e99-e372-464a-a7a5-aab25255b4a5",
        "cursor": {
          "ref": "98309ceb-e2be-4c17-959a-14bdb5ad1573",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ba930a85-b67b-4d81-873b-41455099cc7e"
        },
        "item": {
          "id": "83806e99-e372-464a-a7a5-aab25255b4a5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0107ed9c-413b-4ac9-88e4-ea68302f8467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b44e4a3-6c08-4ced-830c-8c700fde36ce",
        "cursor": {
          "ref": "d59bf186-ab46-41eb-84fa-82185e89efd2",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "dadb1fca-d8d9-4e8f-8c46-a28627b2eaca"
        },
        "item": {
          "id": "7b44e4a3-6c08-4ced-830c-8c700fde36ce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9d6cb277-d77e-4dff-9b18-493e052fd417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae510800-b394-4e8a-9ab7-a0155308bb05",
        "cursor": {
          "ref": "3dbb2626-ad93-4dd2-8205-9660bf74f7f5",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3c6cd333-6a0a-4adc-bbf7-d28fc85c1a87"
        },
        "item": {
          "id": "ae510800-b394-4e8a-9ab7-a0155308bb05",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2ccde64f-8be1-4e35-9978-a2afbeed7799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db81292-903c-48e4-bf19-a1e842810121",
        "cursor": {
          "ref": "fa27e6ee-aa8d-4704-ab82-12d7ae916d31",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "89b5a5e7-0102-48e1-9418-1f56ced42f2b"
        },
        "item": {
          "id": "7db81292-903c-48e4-bf19-a1e842810121",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6230abc3-4db3-4034-a359-9370de09d115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e6314b-c2f8-401e-bda6-8e626ad679d4",
        "cursor": {
          "ref": "ab14296a-63d9-43c7-a771-77386ab2b248",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "73cdc778-3a0b-47fc-9963-654a4b040061"
        },
        "item": {
          "id": "34e6314b-c2f8-401e-bda6-8e626ad679d4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9dd821f4-5202-4d1c-984e-52886c980079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa526a2f-3ee2-4d16-b326-18e186baa9d7",
        "cursor": {
          "ref": "8ebd21db-136f-47fe-9152-46fa5a22f89f",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "267245a5-df79-4f61-9fca-b3272612e0bc"
        },
        "item": {
          "id": "fa526a2f-3ee2-4d16-b326-18e186baa9d7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dc6235d6-f984-4a8f-a011-cb30c5686d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764959b7-e510-4dd7-960a-3c0e6910834d",
        "cursor": {
          "ref": "995a876e-f65b-4d12-b5e1-429b39f0a5eb",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a2702ac3-15df-4f58-ba7c-064fbdafa90a"
        },
        "item": {
          "id": "764959b7-e510-4dd7-960a-3c0e6910834d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2d2f48b4-547c-4632-9f77-6cca5102d211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30eeab5b-9434-4668-92be-54f41d7e4317",
        "cursor": {
          "ref": "13215334-0287-418c-b372-280c78c8d367",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "06ad4311-5fbd-4dea-bdca-9325d9df8996"
        },
        "item": {
          "id": "30eeab5b-9434-4668-92be-54f41d7e4317",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4c407df0-15c1-4332-8e40-c67e7ef533c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d11fa1-87bc-4898-8f40-0670551e3950",
        "cursor": {
          "ref": "da3f1106-7118-4ab7-bb43-e14727771419",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2567d101-3b80-4618-858b-bceea463a2e4"
        },
        "item": {
          "id": "94d11fa1-87bc-4898-8f40-0670551e3950",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "beb2df9f-d1b0-4ebb-a8e8-b62363a3c520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3508154-0ee2-4a36-b49f-f2f1ca0ff4a9",
        "cursor": {
          "ref": "e82ffeb2-a45c-4c22-ae0c-7a9cbe6b7f28",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "15afaa65-7909-4fde-a3c3-e3b3de047e01"
        },
        "item": {
          "id": "f3508154-0ee2-4a36-b49f-f2f1ca0ff4a9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a080e70e-3abb-425b-8961-58dd633b0848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d7cadf-3a0e-4810-9713-5d009090ccfa",
        "cursor": {
          "ref": "38c3907b-a902-42ff-9164-829ef5976627",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "10243240-6ddc-40df-9c90-3fd168f6f263"
        },
        "item": {
          "id": "99d7cadf-3a0e-4810-9713-5d009090ccfa",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "97d8b065-cf53-4e3b-a6cc-673e66952e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6febada-a8b7-4855-8eea-6d9fd2f5c24a",
        "cursor": {
          "ref": "f41beb4d-c282-4304-9610-4eb5b27cdd2a",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2cd6bff5-3ca3-4f97-b85c-ee3338329221"
        },
        "item": {
          "id": "a6febada-a8b7-4855-8eea-6d9fd2f5c24a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7d7f64bb-9824-426c-a4e8-3f1a318ecd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53e061b-a20a-475c-98d2-1cd02f28924c",
        "cursor": {
          "ref": "37be6247-0eaa-4695-a4da-cf14ebac2626",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b697593c-3bfb-42f0-88cd-e9a52fb53a9a"
        },
        "item": {
          "id": "b53e061b-a20a-475c-98d2-1cd02f28924c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dd4cf7dc-bb07-4e26-979c-2849027cafd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cebfae-52a8-4642-a196-d91008c9730f",
        "cursor": {
          "ref": "2f248a11-691f-42c8-9fc5-efb7d40203cb",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "70ba36df-6a67-44be-885c-f2904abb090f"
        },
        "item": {
          "id": "22cebfae-52a8-4642-a196-d91008c9730f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "03903088-dab3-4b2a-b249-47d5c8c3d835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805199ce-65d8-4e69-ad2c-b5c9ce5796cf",
        "cursor": {
          "ref": "90c2d015-c890-41a8-ba62-4175069bc06a",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "aff79079-83ac-4064-addc-443d801b627c"
        },
        "item": {
          "id": "805199ce-65d8-4e69-ad2c-b5c9ce5796cf",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "93e49cf8-7398-4365-9213-0c7a760860b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9309fa-0463-4525-b0c6-b96e31257d9a",
        "cursor": {
          "ref": "2df3b9c3-0733-4dfc-a1f7-9f618f918b62",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "dd89883d-b6ce-4d3c-b67a-562dd49169da"
        },
        "item": {
          "id": "9f9309fa-0463-4525-b0c6-b96e31257d9a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba43df88-c1c4-4d0a-9762-edf4eec44de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41593183-939f-452d-b21a-fbe7b8e4b302",
        "cursor": {
          "ref": "68bfd7d1-cf52-4265-b25d-9dc740ab64f2",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3bc85fc6-a27c-4a24-906a-34c09ea6d64a"
        },
        "item": {
          "id": "41593183-939f-452d-b21a-fbe7b8e4b302",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6f3441c6-b745-4f1c-8a80-7290eebc6643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1124d98d-8c55-4045-81e2-09a962f29d3b",
        "cursor": {
          "ref": "94111004-cd43-44c7-bcb2-91a76625f683",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e4c0afe0-c6c6-42d5-8898-752da42ab56b"
        },
        "item": {
          "id": "1124d98d-8c55-4045-81e2-09a962f29d3b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dac37eba-59b9-4fab-9119-d3bc12d76c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd240db-f627-4505-8ad0-c038943a30af",
        "cursor": {
          "ref": "31309707-3d7a-4532-a6d2-2b93c176236e",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fb01e9c2-9716-48f0-aa98-a9f91b3e5bff"
        },
        "item": {
          "id": "1fd240db-f627-4505-8ad0-c038943a30af",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "151825cc-8a98-4f79-a07e-f7d8afd3c65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f442a547-5936-4f06-bd39-bcb56c8fc477",
        "cursor": {
          "ref": "4785bc47-4f11-4185-b3a0-11cec33bca63",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c3e6d958-4f65-4f24-ba02-95f245972571"
        },
        "item": {
          "id": "f442a547-5936-4f06-bd39-bcb56c8fc477",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "888f2fc4-8800-465a-a13c-d6a5808b0c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2624d82d-bfeb-434c-8aa1-3a147ed2d6e1",
        "cursor": {
          "ref": "e393a87e-dcae-4cc6-a773-aea943a62fe3",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b4e60ab6-402d-4b05-8c05-103e5c8207c4"
        },
        "item": {
          "id": "2624d82d-bfeb-434c-8aa1-3a147ed2d6e1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "29708f35-acf6-4f6b-9a82-5a7dfa3d590d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a870b19-e465-4250-8535-1f12b3db30c5",
        "cursor": {
          "ref": "08f221fa-436d-48d8-9c33-18d6fba89964",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fa6cad2e-4789-4fac-8e0f-e99e802da97b"
        },
        "item": {
          "id": "0a870b19-e465-4250-8535-1f12b3db30c5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4ee83489-b801-4372-8081-797311f100d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683da812-323a-4f10-bb16-d815b3c1ec39",
        "cursor": {
          "ref": "62fa4c88-2aa2-4d66-b3e7-f3232154c079",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a136da26-8562-4337-b3ef-d97fa8573bbf"
        },
        "item": {
          "id": "683da812-323a-4f10-bb16-d815b3c1ec39",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a10f90c7-be65-4266-9551-d40f0dd66684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a279f0ca-96d8-4db0-8a09-e008e0af9914",
        "cursor": {
          "ref": "e65a5632-ac59-4070-a714-ebb14ec87b7b",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7f46f396-0047-411b-9c0e-756ca44cd6bb"
        },
        "item": {
          "id": "a279f0ca-96d8-4db0-8a09-e008e0af9914",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d98bceb2-1b9a-455d-ba3c-ef4b1e2b9196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2758e42-c7fd-4623-99e7-ec387038fcb0",
        "cursor": {
          "ref": "b1c93819-7368-4f5b-9ff7-307c19d65b08",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "587cb8fb-1832-426d-815d-34a3abd1da5b"
        },
        "item": {
          "id": "f2758e42-c7fd-4623-99e7-ec387038fcb0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f914dde5-3f0a-4d16-99b2-5df9f7942673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ea3a33-6e47-449e-ab18-f340ac8919c9",
        "cursor": {
          "ref": "0150e442-7164-44e0-887d-058983f13e42",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "caca9931-aeb8-4348-a8ec-f61d74c7b92a"
        },
        "item": {
          "id": "57ea3a33-6e47-449e-ab18-f340ac8919c9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2d66a8ac-723b-4bdf-9f9a-569fdf9642a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37193c47-d442-478a-9271-d0a3d0e928eb",
        "cursor": {
          "ref": "ba28b79f-f190-4622-821f-6b3d453d59a5",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "64de6046-052a-4444-a7c8-2da40e0c0c5a"
        },
        "item": {
          "id": "37193c47-d442-478a-9271-d0a3d0e928eb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "64b04340-3465-4e38-b260-dfc4245aa4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef36ae4-332e-445d-801e-09ad457646c3",
        "cursor": {
          "ref": "a21b5392-b509-4222-9118-da06a1fc5588",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fefb9883-3e2e-4e44-99d0-bb7f20434602"
        },
        "item": {
          "id": "4ef36ae4-332e-445d-801e-09ad457646c3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eec82921-3ab5-4c73-bd54-041d306edb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc274ef-1333-4537-b192-c7dcfb81d27c",
        "cursor": {
          "ref": "6e1c6750-88e0-46b4-8f36-0cd6c93e6857",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6c196e02-9542-4b36-af86-ba8a22409104"
        },
        "item": {
          "id": "ccc274ef-1333-4537-b192-c7dcfb81d27c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f4879a65-5e8d-4cb7-8625-7fff9d854d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec43a62-c5bf-49a9-9d33-2332dd0adbc7",
        "cursor": {
          "ref": "32a1c6bf-2b36-44d2-a694-c437d2fc92a9",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "06f601e9-6cfd-44f7-a153-9bf533117341"
        },
        "item": {
          "id": "2ec43a62-c5bf-49a9-9d33-2332dd0adbc7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "610a9782-9478-45cf-98af-4cdbf4fc6e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ff2ae3-b9e1-4785-a0f7-8bc765291f9d",
        "cursor": {
          "ref": "272ebf0f-b923-4556-b2f0-8311c8358701",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a8f39e2b-2146-491f-b357-0e81cf17b53a"
        },
        "item": {
          "id": "89ff2ae3-b9e1-4785-a0f7-8bc765291f9d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8192a5d9-0fe9-4842-bb91-040d3b4ef1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9c216a-9738-4a18-9e7a-162c2f7fed2b",
        "cursor": {
          "ref": "0c9047e4-5379-4ec5-ba57-948a69bec6de",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6baad6e0-d733-4852-b5b4-55e3581834b5"
        },
        "item": {
          "id": "9f9c216a-9738-4a18-9e7a-162c2f7fed2b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "aa8fa660-2d96-41e7-897e-aa9d2c4190d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9d40eb-042b-4cae-8795-e156c645aaf9",
        "cursor": {
          "ref": "7b8d59ac-d138-440f-ae0f-c378c19e4999",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5761c776-9500-4ae1-85ad-29f02032e848"
        },
        "item": {
          "id": "0f9d40eb-042b-4cae-8795-e156c645aaf9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3b98b406-81af-4a01-8706-888fb431f557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cbe2af-a133-4ce5-956c-713d4acc644c",
        "cursor": {
          "ref": "438fc9d0-9c6f-4e9a-89eb-18667389528b",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7d7e71f5-5f2e-435c-8fdf-de7354e07e3b"
        },
        "item": {
          "id": "27cbe2af-a133-4ce5-956c-713d4acc644c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dddd1c0c-c4f6-4136-bdf7-8950bdd8cbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc2e77d-6d6d-4c69-ab87-740a9f5dd55a",
        "cursor": {
          "ref": "e1ab92e6-e7d5-4e51-a5e3-bda0c1355152",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f9abfdd7-f86f-495b-9d22-19bf2e1c4f21"
        },
        "item": {
          "id": "dbc2e77d-6d6d-4c69-ab87-740a9f5dd55a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "360c8a6c-04c2-4c99-8922-015f88ad1165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81c9e6a-206f-450e-bfef-4577e361866a",
        "cursor": {
          "ref": "0c4d2706-c3b6-4fd1-adf8-39a430cdcc93",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9230e663-e617-4d3c-bab7-6870e71b1a86"
        },
        "item": {
          "id": "d81c9e6a-206f-450e-bfef-4577e361866a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "19a7c648-340e-4db1-9512-5c8a0e6e9bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1570698-0bdd-415c-988f-c3d246a3f766",
        "cursor": {
          "ref": "39fd0696-af17-457b-ba12-ea5c3b3ed305",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3891423a-e231-4599-897e-079a3cc7df0b"
        },
        "item": {
          "id": "f1570698-0bdd-415c-988f-c3d246a3f766",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e4f463bf-8c45-4684-bff2-32a43d9a91d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e55167-2b81-49d6-9b07-0e45c3abe528",
        "cursor": {
          "ref": "f10dadfa-5642-43e4-8397-1c477edaab91",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bab6696d-92bb-4de7-9aa8-75e9e6964366"
        },
        "item": {
          "id": "99e55167-2b81-49d6-9b07-0e45c3abe528",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "123014cb-998c-4e19-b0df-2ee165181221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebb6318-8fa0-4328-8a9f-2439a5c9551b",
        "cursor": {
          "ref": "40f461ac-8fce-472e-8dca-1a0bba94cced",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "aff9355e-aec3-4831-9b89-cfb7d2d080c6"
        },
        "item": {
          "id": "4ebb6318-8fa0-4328-8a9f-2439a5c9551b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "57cf6873-de3f-4cc2-92af-9348584495d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148d9e55-490d-4090-ba23-c2fd55435797",
        "cursor": {
          "ref": "cd94a5e1-83d8-4d06-b0a1-16c2d4eaf355",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "aaa8b031-962d-4db0-bc54-ee06552378c6"
        },
        "item": {
          "id": "148d9e55-490d-4090-ba23-c2fd55435797",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "04dcdfa4-ee6f-4280-881d-d237ae3ae536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d908afcc-bb8a-4da5-b1d3-4386988dec85",
        "cursor": {
          "ref": "ede7d554-0ab5-43a6-97fa-605d32f7021e",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8270c071-0f49-4a00-bb0f-110f30224d40"
        },
        "item": {
          "id": "d908afcc-bb8a-4da5-b1d3-4386988dec85",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1b8c2095-ca71-4e89-b737-5e995bf5857f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e37214d-b85b-49b9-a907-94a4be27ee3e",
        "cursor": {
          "ref": "91964c46-ebb5-4f45-bffe-d7d9e2829370",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f17ba290-9baa-40b0-9b00-cfb509f157f3"
        },
        "item": {
          "id": "1e37214d-b85b-49b9-a907-94a4be27ee3e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "41ba6c64-f549-4417-b46e-a37669877c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899a28f2-8934-480e-9204-37c503b32952",
        "cursor": {
          "ref": "c2d713a8-134b-4a86-b33d-cd971706f4eb",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "60ef02f5-03f9-48c9-bbfc-fcd4329b97bc"
        },
        "item": {
          "id": "899a28f2-8934-480e-9204-37c503b32952",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9eb42128-153b-46e8-8ef5-011788345557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d110110-f6cd-494d-a344-5e92e72e2f22",
        "cursor": {
          "ref": "481d3182-dd23-4c21-9c8d-2424daab1767",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8ea57faf-0d96-46ee-9db8-99b831d87ebe"
        },
        "item": {
          "id": "1d110110-f6cd-494d-a344-5e92e72e2f22",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "20563533-70f9-4cb6-9472-d6fd11fd90e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d79b00-ef12-4cc4-82f4-1f6c48deeee8",
        "cursor": {
          "ref": "3b297e64-ea4d-4bf5-bb90-e24b2b824ab2",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7dbe7367-3d07-43ca-acc2-f888eca15dee"
        },
        "item": {
          "id": "b7d79b00-ef12-4cc4-82f4-1f6c48deeee8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8d0cc724-712f-4bb3-8c01-93bc807d4f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ccbcf2-abaa-455b-848a-4a1dcfcc2f0a",
        "cursor": {
          "ref": "56799d69-cf91-463d-a213-ea367b47c0b8",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9e3a804c-6967-434e-bee9-fa2f15402ec3"
        },
        "item": {
          "id": "d0ccbcf2-abaa-455b-848a-4a1dcfcc2f0a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d2397b29-29d9-450c-8de9-7b9a18a5abd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3804ed-2024-497e-b01c-386804222169",
        "cursor": {
          "ref": "f07c6f6a-cb61-4079-8972-66cf253a1779",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b42e1cec-eac9-485f-ae06-8309c28469bf"
        },
        "item": {
          "id": "0e3804ed-2024-497e-b01c-386804222169",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "27f101c9-cd5e-4071-80bb-1362c39830df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1583a53a-0c45-4141-8413-be31a39ebc8f",
        "cursor": {
          "ref": "468b280b-c7d4-40a6-ade3-8ffe4f621dac",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f17d4a91-5529-4785-b73b-57731d902d78"
        },
        "item": {
          "id": "1583a53a-0c45-4141-8413-be31a39ebc8f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "603ada5e-bb4d-4d48-9247-9197644c5cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30469dd9-6f5a-4e51-92a1-b170a8f0e753",
        "cursor": {
          "ref": "5bde47b1-e181-44f1-b64f-afebc2a1991a",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c0496c6f-61be-4b15-bac4-4e2dff617df6"
        },
        "item": {
          "id": "30469dd9-6f5a-4e51-92a1-b170a8f0e753",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "78311c81-08d5-4574-8214-0445e23c67c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e182cfab-12e8-4ab2-80d1-e93593bf3fe9",
        "cursor": {
          "ref": "e432d138-1dc5-45f4-8d4a-1a9e628138f0",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1ac12fb8-146b-4323-af17-8f822542c53c"
        },
        "item": {
          "id": "e182cfab-12e8-4ab2-80d1-e93593bf3fe9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f9e9904a-3120-4950-95b4-02e6e54f1f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cdc387-cb34-40f4-88d1-449e1ecf7275",
        "cursor": {
          "ref": "9d45a2fe-fb85-45ec-ab53-49b262696de6",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5793b94d-3157-4481-b0ee-82e5dd864646"
        },
        "item": {
          "id": "f2cdc387-cb34-40f4-88d1-449e1ecf7275",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f65ae5a5-d2e2-448c-acae-6f095d35f11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce54dc7-055c-468c-97a9-72a3b69fb09e",
        "cursor": {
          "ref": "626c720b-fe02-4424-b05e-558604293e58",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7b496ab5-6324-4021-b0ac-18f09a70ce0d"
        },
        "item": {
          "id": "2ce54dc7-055c-468c-97a9-72a3b69fb09e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "72e829f4-20f6-48d7-a91e-01e101c751cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "69718125-9c29-47d7-8493-5839760e298b",
        "cursor": {
          "ref": "70458d68-08bb-4fb3-9075-bd0ff892216e",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "93995aef-9f97-4352-b6d0-2dc631106a2f"
        },
        "item": {
          "id": "69718125-9c29-47d7-8493-5839760e298b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "42dd4d4d-b577-424d-9086-5e753d9d2b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac0089b-02ae-4521-bada-7b979a5206b0",
        "cursor": {
          "ref": "57d62903-1eb7-4e5a-9481-79f84f0b43f1",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "afb51e6e-cdba-4619-90a7-168abf603c50"
        },
        "item": {
          "id": "bac0089b-02ae-4521-bada-7b979a5206b0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fe387daa-3f45-4aa6-b675-a55d0728ab07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722bfcfe-d0bb-43f5-b9da-cc7cb676b511",
        "cursor": {
          "ref": "627e3afd-b8c5-48c2-b607-ab8c79afd12c",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "010d3e29-ce54-4d47-8c08-684207fd2c3f"
        },
        "item": {
          "id": "722bfcfe-d0bb-43f5-b9da-cc7cb676b511",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4177e96b-f19d-409a-a035-7d38aec196f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7735eaa2-551c-4a05-aec6-b5c7a83ebc49",
        "cursor": {
          "ref": "25b012d9-31b1-41b0-8032-13fe375ff5f0",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dd32d687-d0dc-41d3-8dfd-69a064f7d1cf"
        },
        "item": {
          "id": "7735eaa2-551c-4a05-aec6-b5c7a83ebc49",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8183d676-a4b2-44d5-a2d4-e4392cb842ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8b568f-250a-49e5-805a-dc8e51db687e",
        "cursor": {
          "ref": "312328b9-b5eb-44c2-913b-7d3de85ac12d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9865d9d1-3bc2-4d55-8ea2-e39faed6198e"
        },
        "item": {
          "id": "2c8b568f-250a-49e5-805a-dc8e51db687e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1e65fcf9-b2b9-468f-ac32-be974b22e4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e16aff5-bc5e-49be-ae44-592e879c399f",
        "cursor": {
          "ref": "a202417e-c982-4785-9486-61d9d0427dbd",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0e3ea3e8-bd44-4ba3-91a8-e4f6474e4520"
        },
        "item": {
          "id": "8e16aff5-bc5e-49be-ae44-592e879c399f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "739992fa-9c87-4f53-8a49-ba3fc914df6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d6259e-4c55-4cfc-b6e8-d71580dc7679",
        "cursor": {
          "ref": "c5c46b10-4b73-4092-97df-221aac97304d",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "29f1a919-c31d-4000-903f-fe508852670c"
        },
        "item": {
          "id": "c3d6259e-4c55-4cfc-b6e8-d71580dc7679",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e15899e0-5a5e-4592-b97c-838d4ea1af8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bbe84a-11c2-4e30-ae3a-e89c98592ef1",
        "cursor": {
          "ref": "62238cef-6b76-4260-9b77-78101c6049b3",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "86e58b12-d206-440e-9f28-57506b8e6abc"
        },
        "item": {
          "id": "19bbe84a-11c2-4e30-ae3a-e89c98592ef1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9c73c9d4-2675-4949-8b68-68659df658a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de4d5d0-62d4-4ed5-b8c1-e1497b3cd183",
        "cursor": {
          "ref": "064eed0b-7a7a-48d4-8c74-e465ff59e86e",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "643f3ba5-a3b3-4472-ab39-274f08f435e9"
        },
        "item": {
          "id": "6de4d5d0-62d4-4ed5-b8c1-e1497b3cd183",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c26a562d-77e3-4f4c-a72d-f11b79ee6b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf815cf1-dd45-4cb6-9b3f-d84433798dbf",
        "cursor": {
          "ref": "c63e8737-6748-477b-8074-c09af333106d",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d3e7eb61-5bdc-4017-973d-cd3f0fb6c985"
        },
        "item": {
          "id": "cf815cf1-dd45-4cb6-9b3f-d84433798dbf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2e71c89b-5a68-482b-b0cc-544dcea2a12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2315b456-e851-45b3-9260-143895ce0057",
        "cursor": {
          "ref": "e54f72b9-d1f9-463f-b1fb-68e533a1fb96",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f3f2ff6b-dd9d-4561-bae7-9b11313f6723"
        },
        "item": {
          "id": "2315b456-e851-45b3-9260-143895ce0057",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "84e12b2a-cc59-421d-a889-871e4dd9ea42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d376b5d-8bee-4cf3-a5e2-40064c2a855d",
        "cursor": {
          "ref": "765141fe-5fe8-4e6b-bebc-971513830cce",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0510a7f4-3d39-4861-8956-612714ff6b18"
        },
        "item": {
          "id": "5d376b5d-8bee-4cf3-a5e2-40064c2a855d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "007ccccd-3019-4c71-8b71-b08f1e4cc937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644dd70f-65f1-45ed-b563-92094396212b",
        "cursor": {
          "ref": "67060336-a67b-4166-ab88-30ebfce3abf4",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "48112b45-e044-442c-9a22-438970d3478a"
        },
        "item": {
          "id": "644dd70f-65f1-45ed-b563-92094396212b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5a5fd0bf-29fd-47b8-b2f5-d21c813a26e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9569af69-2d3b-46c1-81b5-53a57355cf4b",
        "cursor": {
          "ref": "ddb410f8-5f2d-4410-a07f-9b638b02a8d2",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "955c7cb5-5ffd-45e7-8242-5e44febe5df4"
        },
        "item": {
          "id": "9569af69-2d3b-46c1-81b5-53a57355cf4b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8b68eb89-c8b2-4d82-81aa-a92aa7d537eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8067c59-5d85-485f-bd4c-eb3be9f5c3ed",
        "cursor": {
          "ref": "c7153b88-5a48-4d53-a7c3-7d15a42f8302",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e751e122-c1fa-4090-9293-1f2c4966f4b6"
        },
        "item": {
          "id": "d8067c59-5d85-485f-bd4c-eb3be9f5c3ed",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5fe9bfb9-38b6-4604-8d4a-0028e3c82406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68ba34c-1ae8-4d74-82c8-7bbd6781dc61",
        "cursor": {
          "ref": "13e698a0-38d5-4da3-a25a-7dcbba33f91e",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "aab04f3b-d884-429f-ac87-ded60232b390"
        },
        "item": {
          "id": "f68ba34c-1ae8-4d74-82c8-7bbd6781dc61",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b183b318-8d1e-4437-b919-909cbae7eadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f5f546-90a1-41de-ae11-23d3bb15cfac",
        "cursor": {
          "ref": "f41e522b-313e-40d4-8c49-437e4ebd0101",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "403e2c70-ae16-4f9d-aa0b-5122a148bf03"
        },
        "item": {
          "id": "e6f5f546-90a1-41de-ae11-23d3bb15cfac",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bb308577-0ab6-4b8b-9eeb-92cb3427106b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e01d3a3-5d88-4a90-974d-d6724262b113",
        "cursor": {
          "ref": "d9b9f16a-8fb0-46c3-86d4-bd1d751a1ecc",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b53f0813-a5b3-477b-a191-9a785b4bfb19"
        },
        "item": {
          "id": "3e01d3a3-5d88-4a90-974d-d6724262b113",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a6ad746-d680-4436-9596-cb8fb509f653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6d9841-240f-4413-8f04-a89b508291ca",
        "cursor": {
          "ref": "6f0b56e0-ab3b-4991-8e75-81c04e1c53c0",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e7e2c79e-9875-491c-98e2-1815c79d77cc"
        },
        "item": {
          "id": "3f6d9841-240f-4413-8f04-a89b508291ca",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8bd09b4f-f0be-4a69-a0af-f101cc5af6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b30c1dc-9853-4d28-bb7b-04127d1b2f95",
        "cursor": {
          "ref": "014c960b-c129-4742-bd63-dc54609d6bc6",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a18b088c-1590-471a-a8f2-80b780c81d76"
        },
        "item": {
          "id": "2b30c1dc-9853-4d28-bb7b-04127d1b2f95",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f95675ea-6270-4ce1-b6f5-61ed935c97b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d2547a-fe80-47df-a875-30e3295b58fe",
        "cursor": {
          "ref": "6c10d18a-ff31-4914-86ed-62a4706900fe",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "71550675-9a77-4011-9b66-7672738baf54"
        },
        "item": {
          "id": "76d2547a-fe80-47df-a875-30e3295b58fe",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cbeeb02d-a57c-480a-8137-e31c6c276ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63c0469-8d41-460a-9988-bc718e4fdc89",
        "cursor": {
          "ref": "ceec3155-029c-4570-ae0b-4dd379e8bf8f",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bc653ef6-806f-441b-8f94-9779c81827ba"
        },
        "item": {
          "id": "d63c0469-8d41-460a-9988-bc718e4fdc89",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f002617e-33b0-4913-802a-bc4131256e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246b50cf-fdb3-402e-b474-214fd40c96ab",
        "cursor": {
          "ref": "507c114e-5f56-4e51-baf2-9d3927a17b6d",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "db4bff84-658e-472b-80d1-28ce34d43047"
        },
        "item": {
          "id": "246b50cf-fdb3-402e-b474-214fd40c96ab",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ec5ed55e-0311-4230-aa44-ac98f0e9de70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b70ec56-c605-41a9-ba2b-e5d9587874fe",
        "cursor": {
          "ref": "eef670ea-869d-48be-bd1c-73000105fa0b",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e79d13a1-79f4-4a5e-b2bc-f601aed606b0"
        },
        "item": {
          "id": "6b70ec56-c605-41a9-ba2b-e5d9587874fe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d69db344-214f-4b53-b8b9-6aa7a1dc372c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb13739-82ea-4e31-b827-a3cb4190cb4b",
        "cursor": {
          "ref": "eda5e770-eb75-4efa-b181-7102be598409",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b4804561-4e54-4ff4-893d-d72637c6ecc9"
        },
        "item": {
          "id": "deb13739-82ea-4e31-b827-a3cb4190cb4b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c47a9e32-4af8-4c17-b1c2-f88bdbd13b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566ed5be-3362-466a-a242-c5751642257c",
        "cursor": {
          "ref": "342e2df9-a3c8-4d4d-938f-241b716a9819",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4d9bc919-0a54-4e09-99ed-71fa13f19d35"
        },
        "item": {
          "id": "566ed5be-3362-466a-a242-c5751642257c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c92e2b8a-72e7-4531-9b68-89a0653c4a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad78a257-0218-4c44-9cec-ce94ff27da45",
        "cursor": {
          "ref": "172214da-b347-4bbc-96c2-b2b189d363f9",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ce3bc529-367a-48b7-992e-1422f1c4247d"
        },
        "item": {
          "id": "ad78a257-0218-4c44-9cec-ce94ff27da45",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c447f197-ae84-417d-a0e6-41cba8edff55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227463e8-6a44-4d37-bcef-f40f4d97c0a9",
        "cursor": {
          "ref": "09c8b1fa-479d-4717-b61e-53c740c4826e",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cf47216b-d7c7-4d55-982e-69e0c5bb66ec"
        },
        "item": {
          "id": "227463e8-6a44-4d37-bcef-f40f4d97c0a9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a6c97e57-1ef4-4a7c-910c-b846cce683cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e340fffe-4744-4463-be66-e8e41b88c40c",
        "cursor": {
          "ref": "04d27260-dfcd-40b5-bef4-5016fad76f63",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fc3ca2df-456e-4aab-bd9b-80d32c63061e"
        },
        "item": {
          "id": "e340fffe-4744-4463-be66-e8e41b88c40c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2d28756f-660b-4a34-8ec4-c938e3ae3c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621b2c3a-14e5-4af8-854f-7b122304841c",
        "cursor": {
          "ref": "68550684-0214-4c3d-b64c-1b1ef8f7097d",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e6379744-a6d5-463a-b31c-c0edd8bf4541"
        },
        "item": {
          "id": "621b2c3a-14e5-4af8-854f-7b122304841c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0a04ebc4-45bd-4670-9370-413b4ff1ca2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "1d2fb853-cef9-4940-9cf2-ad1ec79cea20",
        "cursor": {
          "ref": "c88f0559-d2d7-4f14-8f92-280664054edc",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c42ba16e-9d74-416e-a0f7-5b1b49dec3e7"
        },
        "item": {
          "id": "1d2fb853-cef9-4940-9cf2-ad1ec79cea20",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5b514c61-53bb-413a-992a-697abf63ffda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e1a96335-165e-42d3-aa4d-ec6df0bbd7ef",
        "cursor": {
          "ref": "56f4690a-4d55-482c-8808-29816dfbe31f",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5b0fabec-733d-44ed-bd7c-a5b85a733457"
        },
        "item": {
          "id": "e1a96335-165e-42d3-aa4d-ec6df0bbd7ef",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d145af7d-a964-4fe8-b3c4-a76e65e54f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "32802d92-a6fb-40cc-b284-e4d36d1f3e1d",
        "cursor": {
          "ref": "1a867d67-47f0-4c0b-8f78-e018d8ceab83",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "504ec0f9-6622-44e0-9df0-15a6ed18a3c5"
        },
        "item": {
          "id": "32802d92-a6fb-40cc-b284-e4d36d1f3e1d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f3e7f31f-0ac9-4312-b0e2-973f689d3f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e34183e-7162-4443-89f2-fb7acd5b2919",
        "cursor": {
          "ref": "65680bd8-c58b-4913-9c94-dc73c5eb263d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5ea2f300-aead-4912-80d0-a2b0bd906bc6"
        },
        "item": {
          "id": "1e34183e-7162-4443-89f2-fb7acd5b2919",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "58f89c66-9082-4920-bf5c-6b8b07451d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "06804fce-a736-455f-b098-ffe921db0ef6",
        "cursor": {
          "ref": "f10642fe-09ba-4821-96e4-3c215f2408c6",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "123d133e-c921-462d-b268-c39295e860cf"
        },
        "item": {
          "id": "06804fce-a736-455f-b098-ffe921db0ef6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cae05bf6-3e34-4b60-b963-aaee70d987be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1232,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1c610c27-e277-4cf9-9ab1-c4c37a5c2075",
        "cursor": {
          "ref": "9f4c9c59-7bde-4441-9468-cc09f387eb5e",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "815f9233-43a7-4038-bc33-782b0e7a4f6f"
        },
        "item": {
          "id": "1c610c27-e277-4cf9-9ab1-c4c37a5c2075",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "40d3e50a-9dfb-4ac8-b4a9-b0ef0e3e2f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4564dced-03b1-434b-9b41-b7dfd076fc9d",
        "cursor": {
          "ref": "1ecf8ce2-bdcf-4b0c-b992-947bd016e6f5",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5e7dae2c-bfed-41c8-af6a-978c849a6fc1"
        },
        "item": {
          "id": "4564dced-03b1-434b-9b41-b7dfd076fc9d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "52b54f9f-31c4-4279-ad3a-24824014d722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "31ab4500-8c33-429d-bd11-49715da07209",
        "cursor": {
          "ref": "6772f673-4068-4d36-b089-94795e8441bd",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ecd86beb-238b-4ea2-ae75-e108581bfe16"
        },
        "item": {
          "id": "31ab4500-8c33-429d-bd11-49715da07209",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f3a6bbe3-36a3-48fc-91a4-b5e840aa285e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f4c6fabf-b4f4-4fa8-9670-95af0c293a73",
        "cursor": {
          "ref": "42deb36a-612d-401f-98b6-2e0ff8a9c12d",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "19fc8a0f-100d-4f61-9bbd-a59a900b8e60"
        },
        "item": {
          "id": "f4c6fabf-b4f4-4fa8-9670-95af0c293a73",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3d00215c-17a8-447d-8fca-b6f16dca38dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f6c32d76-c104-4699-805c-23c319b1ede2",
        "cursor": {
          "ref": "91087a33-783d-4dfd-b838-5bfd00a7fe81",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bbe41094-ee39-40a6-b2c7-9557734130bf"
        },
        "item": {
          "id": "f6c32d76-c104-4699-805c-23c319b1ede2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5c5c6d8b-c59e-43c3-aa78-6eb5b1ac12a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760efd7d-6da0-42cb-a62e-018f81a38fc1",
        "cursor": {
          "ref": "d8cdac66-5d93-4322-8a74-8cf2184deac8",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ab154534-9023-4e8e-bb28-f878bff52e43"
        },
        "item": {
          "id": "760efd7d-6da0-42cb-a62e-018f81a38fc1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b500c3dd-824e-4f1d-8e61-8901e12dd4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958d29d7-73d3-4a24-9cf8-f20ef5536c93",
        "cursor": {
          "ref": "458b00f5-d5f5-40bc-a210-a514530fe440",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ef3f768d-8585-4715-ae7e-226895257c30"
        },
        "item": {
          "id": "958d29d7-73d3-4a24-9cf8-f20ef5536c93",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8f2e4e23-0c6d-4a5c-8eaf-85143b78e196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629b7f1b-416e-4faa-8328-305b18d3705b",
        "cursor": {
          "ref": "bdb2e2a2-b4f1-4415-860e-cb7934d78f74",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9c209b54-249d-47fa-ba9a-df0b83dc2174"
        },
        "item": {
          "id": "629b7f1b-416e-4faa-8328-305b18d3705b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c35253cc-ee8a-44d5-99b3-e5ae5c4e0f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6424f81-e7df-4e97-b395-f21cd87b39cd",
        "cursor": {
          "ref": "e0a0310f-5cda-4781-8edb-8809374eafb8",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "083155a1-846f-4d7a-a394-df7cf3b9509a"
        },
        "item": {
          "id": "a6424f81-e7df-4e97-b395-f21cd87b39cd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "431bf54b-57ed-49af-bc70-246c7a1377b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252381a9-b449-4ca4-a2cf-b03d68e58174",
        "cursor": {
          "ref": "25d59a2b-a807-4c61-98b0-a7857f392cf0",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "546bbd33-194f-4183-ac48-1e99a7de45ea"
        },
        "item": {
          "id": "252381a9-b449-4ca4-a2cf-b03d68e58174",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2eca4c57-ca82-4506-9de9-5f9ab7e0e806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3330e8f-83d1-4b32-bbaf-0b38aa7ffb8f",
        "cursor": {
          "ref": "84f11430-6417-4d1f-83c5-dab54b740a77",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "07251bee-8970-43a0-b06a-27e9ad123d1b"
        },
        "item": {
          "id": "e3330e8f-83d1-4b32-bbaf-0b38aa7ffb8f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "eb071395-462e-4afd-8a02-7200f7ee7b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d946a7a-8659-4711-83a1-92d01597783a",
        "cursor": {
          "ref": "4407b04b-f7d8-4372-a695-8cb393725ede",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ae9958d5-33a9-4cbd-8d5e-e8e199ec1064"
        },
        "item": {
          "id": "7d946a7a-8659-4711-83a1-92d01597783a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2713e30d-e1a0-4844-8d72-84aa83604171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75656e04-2aa5-4f05-8d37-48cecda69289",
        "cursor": {
          "ref": "b961cd91-08eb-4ec1-9a4c-79fd4488e582",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "241b34ca-03a6-431c-814a-21a1b8307210"
        },
        "item": {
          "id": "75656e04-2aa5-4f05-8d37-48cecda69289",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0681257c-9e46-4073-a7fe-718895c0c354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f5a8f1-db28-4610-8c56-550dd02d9f94",
        "cursor": {
          "ref": "24ec13b6-431a-4f3b-a6a1-6b7d9553e1cb",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cde2a501-c5d0-4344-8629-3a4944d1585c"
        },
        "item": {
          "id": "97f5a8f1-db28-4610-8c56-550dd02d9f94",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f97b8078-cd20-49ef-964a-7290de90febe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2073f854-ac81-4d58-bb04-d33d2c0ffae1",
        "cursor": {
          "ref": "8a1ff60f-6438-49e3-aa42-8996e3b61703",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fb7cb629-888c-459c-8fe6-bc892abf26b3"
        },
        "item": {
          "id": "2073f854-ac81-4d58-bb04-d33d2c0ffae1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d5b284dd-392d-4ab7-9bfa-b9b15158a954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437e9cdd-8e35-4ac7-8660-5f9745f566f8",
        "cursor": {
          "ref": "85b1d236-dee5-43da-ad7f-cf66117b65ce",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bbcc5a1c-9ad3-4e56-ad2b-2cf6dc0c8fad"
        },
        "item": {
          "id": "437e9cdd-8e35-4ac7-8660-5f9745f566f8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3f2a175c-036a-4cbb-8eb1-446373ed2093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7d3e3e-13ac-44e7-a3f3-c18274c9b81f",
        "cursor": {
          "ref": "00311610-7089-4fa6-a631-d3d9b8ff7d68",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "81127a86-6658-4bb4-975c-4c8a8daf60a9"
        },
        "item": {
          "id": "0b7d3e3e-13ac-44e7-a3f3-c18274c9b81f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7bcb740e-f95d-4045-ae17-125dbd02360b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b5a9fd-912c-4b6b-8115-4a2ef6198b28",
        "cursor": {
          "ref": "f853f182-94bb-4071-8823-5d56c92c6c9d",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c360f77c-e5c9-4f3e-915e-80d8aa236957"
        },
        "item": {
          "id": "81b5a9fd-912c-4b6b-8115-4a2ef6198b28",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "14b9158c-156d-4647-afab-089825f71e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 780,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "1dcaad83-5928-4136-893a-04d4459eef46",
        "cursor": {
          "ref": "153c1cf8-cd5f-4aff-b175-0f8e89145b83",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "596de077-ec12-4897-a6ab-20be752a7ad1"
        },
        "item": {
          "id": "1dcaad83-5928-4136-893a-04d4459eef46",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "74155a10-0beb-4f25-a04b-bf4c6198176c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 766,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "baf46dfa-ce56-4795-a86a-1376c9343acc",
        "cursor": {
          "ref": "7020b394-423d-4ec6-bf5b-e5f7faf11d8f",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a4b4824a-60e3-4529-bd49-f09d95880a97"
        },
        "item": {
          "id": "baf46dfa-ce56-4795-a86a-1376c9343acc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "677a2619-470c-412d-8c2b-0e640ac4ac62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6bfaba05-ca09-45f8-a984-a7745f201efb",
        "cursor": {
          "ref": "87b662e0-ec12-4f33-9da6-e4d94a551b5d",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f7ff6796-e8b6-4d44-8a8c-c3cb8a8e5821"
        },
        "item": {
          "id": "6bfaba05-ca09-45f8-a984-a7745f201efb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e6d80ad6-c97c-4567-b770-43932e424874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 733,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b5f923be-3811-4221-b1a6-000e1850636b",
        "cursor": {
          "ref": "8f0a1856-3740-418a-a3d5-26e44a850838",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d1ca6128-0795-490d-a0d8-5bb0f347e626"
        },
        "item": {
          "id": "b5f923be-3811-4221-b1a6-000e1850636b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c055ef9a-fb16-4589-9d88-6ffe08ba9dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a96124f0-ab8e-44ec-b7c4-8e998f78b51a",
        "cursor": {
          "ref": "b309683b-0a4e-46af-b5cf-c930cd2fb17c",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "547adb6a-240f-43f3-8c29-948bf4aa702c"
        },
        "item": {
          "id": "a96124f0-ab8e-44ec-b7c4-8e998f78b51a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "234efef6-0a1b-47be-babb-1e31742e684e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0602190-afeb-49d5-b9f5-ad23a716b277",
        "cursor": {
          "ref": "f9b8ce20-4ca5-4f7a-9666-2a4017492ab7",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ed4cc08b-d121-456e-9eed-7aeedeb047f3"
        },
        "item": {
          "id": "b0602190-afeb-49d5-b9f5-ad23a716b277",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "50402ca9-3e5e-4583-95e8-1762da0ca235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91159a03-d0a2-459d-a95d-a6f491687e8e",
        "cursor": {
          "ref": "6f5788bd-ab5d-42c2-80b6-6f9e830e6e8c",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d7134b72-2bec-4f47-9db3-1c2cb8ee3411"
        },
        "item": {
          "id": "91159a03-d0a2-459d-a95d-a6f491687e8e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "14883ab7-26ce-4bc0-88e0-59746b24910e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0320c9-c5b8-40ba-aeb4-e20e64457b21",
        "cursor": {
          "ref": "f2b51fe1-1340-43f7-b0f4-5749a13dfc50",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a3a07484-fbaf-481e-bfec-50a8895494e9"
        },
        "item": {
          "id": "2c0320c9-c5b8-40ba-aeb4-e20e64457b21",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f737cb54-d860-44d7-8e09-15f8a607196f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6199244-85ed-4c21-87e2-cc88237acac7",
        "cursor": {
          "ref": "e12b86f5-797d-4e19-a7b1-f230846a2356",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6b0e118e-b82d-4838-8563-7d2e23b5c04f"
        },
        "item": {
          "id": "b6199244-85ed-4c21-87e2-cc88237acac7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f21c3b91-93d7-470a-bc30-075146099314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b775e14-f94c-406a-a2dc-bf1df1773652",
        "cursor": {
          "ref": "8ab271f1-7eff-4da6-86e4-15ab383a1721",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82f5803a-c8a0-4af0-b961-dcc38317c9de"
        },
        "item": {
          "id": "7b775e14-f94c-406a-a2dc-bf1df1773652",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5c1c70d5-448f-4c51-99d8-372a5a86e403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd657eb8-be5e-4b4b-9e18-4374df7ec558",
        "cursor": {
          "ref": "8457b696-3c35-445d-a9f5-03165cd96a07",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fa2479fb-6774-4b06-89b8-51258b90aa06"
        },
        "item": {
          "id": "fd657eb8-be5e-4b4b-9e18-4374df7ec558",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "85dc58a7-a193-4388-9fce-991bc10346ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b81ab95-a1b8-47f6-9816-c1a6fab0126a",
        "cursor": {
          "ref": "5ac2974b-3c95-497c-a0a7-1951296bac5b",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7b69b2c2-5bf9-45c6-98fc-2d03feeef453"
        },
        "item": {
          "id": "2b81ab95-a1b8-47f6-9816-c1a6fab0126a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3b7efa6b-6e75-4ef4-aac8-a5ce62f2c8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85aeaf26-8c9d-4777-9b5b-582757e7316d",
        "cursor": {
          "ref": "438c93d9-9bcf-4f90-938e-763f88bb3539",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e2051f1b-4170-436e-a2bb-0281dab6b9b9"
        },
        "item": {
          "id": "85aeaf26-8c9d-4777-9b5b-582757e7316d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3871a235-0028-4065-8091-6a21830fc65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9450a699-0382-41c5-874c-a19d2e4e693d",
        "cursor": {
          "ref": "d12bfdab-411b-40ab-8db5-e2226e939d94",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f0626950-26f9-40c1-ac13-766432e93d52"
        },
        "item": {
          "id": "9450a699-0382-41c5-874c-a19d2e4e693d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c9d60206-7f52-471b-8277-f00f7d0002e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4db0cc-657f-488c-bf7b-3ce254d15123",
        "cursor": {
          "ref": "862b0dd9-ec06-4d71-8043-fed35c619c2c",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "501d0442-48d8-447d-aa5b-4db5c9bdc486"
        },
        "item": {
          "id": "1c4db0cc-657f-488c-bf7b-3ce254d15123",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cdb46ef1-55b3-4e91-af81-99b280e6a436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3fc9ba4-3832-4dcd-a608-37c22f79f807",
        "cursor": {
          "ref": "6417479f-c3e6-4cd1-a5d6-cbd2e0064111",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7600f0d4-9841-4165-8ca2-d44204258aac"
        },
        "item": {
          "id": "c3fc9ba4-3832-4dcd-a608-37c22f79f807",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "df6cc9da-a169-4663-af95-b31beb16703d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ea0eec-d389-44ed-aad5-2b30d4f53888",
        "cursor": {
          "ref": "d74838c9-4be4-452b-992e-11e5112dded3",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2271f99f-8999-4348-aec9-f01439f0dfb3"
        },
        "item": {
          "id": "43ea0eec-d389-44ed-aad5-2b30d4f53888",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "426c6d56-313d-475d-8ca3-32c8dd4c4719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69eaada-b178-4778-a4fa-05db22dd6af6",
        "cursor": {
          "ref": "140b9c9c-d45f-4bb5-848f-bd193c83af9e",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3ab7ecf6-f8d1-4f2c-96a5-61cfab7d77a5"
        },
        "item": {
          "id": "b69eaada-b178-4778-a4fa-05db22dd6af6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9def4cb9-a22a-429b-871f-75974170f6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a571fe-4da0-49b6-9515-93c3a16528eb",
        "cursor": {
          "ref": "ac9dd806-47e0-48a3-85af-a2b83af6e404",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0c97d15f-6c7f-4aa8-af6f-c46f6ed6e95d"
        },
        "item": {
          "id": "84a571fe-4da0-49b6-9515-93c3a16528eb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "66bdc920-090c-4646-923a-b37bb11f7d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b78be4-70f4-449a-820c-531a4e9a4ee4",
        "cursor": {
          "ref": "f930467a-92d3-4910-82bf-0f616474ae7f",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ec23d67f-7778-4bdc-b956-9c71c7a561f7"
        },
        "item": {
          "id": "98b78be4-70f4-449a-820c-531a4e9a4ee4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6547c1b4-ccef-454b-a2bc-1947d8b4ab2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03baa33-44ee-4115-9f6b-ed66105b2570",
        "cursor": {
          "ref": "2840f628-cb9a-40db-b5ea-30db80563e00",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4de71696-b1c9-4ab2-b3ac-89088f556786"
        },
        "item": {
          "id": "b03baa33-44ee-4115-9f6b-ed66105b2570",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5d9480dd-443d-4098-abad-40de89dc98a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b85ea13-fe41-46ab-9fa2-41876fa2cabb",
        "cursor": {
          "ref": "ac06fd73-9213-45bb-9e40-36aa7cb789e9",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "a8f9ace6-01b8-41ce-bdcf-595a95837665"
        },
        "item": {
          "id": "8b85ea13-fe41-46ab-9fa2-41876fa2cabb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "03723370-55a3-4c3a-81db-ed73523131ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50a4929-ab1f-482c-9ebd-f90126986ecc",
        "cursor": {
          "ref": "26b52b41-3a1a-487b-99d8-0c1924b88446",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "cc03ebd1-5e3f-4917-9576-140e3c6c47e3"
        },
        "item": {
          "id": "d50a4929-ab1f-482c-9ebd-f90126986ecc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a675926e-d017-4a14-bade-2e84cc02018e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcc9aa4-afe3-40c8-ad78-5f74f0b19e76",
        "cursor": {
          "ref": "f01ea67f-e72d-4fef-a69c-42ff1b0d07d5",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "749edcfb-9d65-4f36-9a42-a928f4f189c3"
        },
        "item": {
          "id": "0bcc9aa4-afe3-40c8-ad78-5f74f0b19e76",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1b006404-3e00-48c8-94af-0497e5a898b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2512852d-5bfd-444c-a87d-165c29d2d41d",
        "cursor": {
          "ref": "9e89fcb8-01b7-4bf7-bf8f-0908f847275f",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "60a651fe-220c-4f79-9f75-77eb12fad299"
        },
        "item": {
          "id": "2512852d-5bfd-444c-a87d-165c29d2d41d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "98e9d486-a313-42e3-9bc9-7a3b865027eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f175b4c0-79df-407b-802b-7e0fae5962c0",
        "cursor": {
          "ref": "006512fa-ac70-4de5-8f83-67b1229ff403",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1c5190a8-42ee-465b-8581-e18c91396f45"
        },
        "item": {
          "id": "f175b4c0-79df-407b-802b-7e0fae5962c0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "abd26796-5ac3-43f5-a834-137f9e6d2162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f245238e-5b27-40d7-bf00-ca5b36898724",
        "cursor": {
          "ref": "77eacb9d-5867-4a48-a0b4-f94723987eff",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d3201254-a8cd-4a5b-aa1f-539e9c36a09e"
        },
        "item": {
          "id": "f245238e-5b27-40d7-bf00-ca5b36898724",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "82999484-0e1d-4a04-844f-0bd0c563c1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50af6fe9-c542-44d5-8aa9-2de29c50138a",
        "cursor": {
          "ref": "a36fe709-3cbe-4c1c-a8a4-8054da18b6ac",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1604e79c-e68e-4330-bb3f-d586b34bb209"
        },
        "item": {
          "id": "50af6fe9-c542-44d5-8aa9-2de29c50138a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8be52023-d800-4289-96f1-362ec2ca92df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dae376a-4bc5-4d31-8a65-976004f9f1b2",
        "cursor": {
          "ref": "a1609f3c-8e1b-46af-9fd8-e44456e4f917",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3a3016af-4c2a-4e39-9535-51ac4e158596"
        },
        "item": {
          "id": "0dae376a-4bc5-4d31-8a65-976004f9f1b2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1adee2b9-de17-4f3e-ab76-3214bbc8f82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb6aaa8-0db2-49dd-a6f0-3aa26ec28951",
        "cursor": {
          "ref": "10563061-e09b-4b4b-be89-c8e971658024",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "89569f06-39b0-48b6-a101-fcf21e7e2baa"
        },
        "item": {
          "id": "9fb6aaa8-0db2-49dd-a6f0-3aa26ec28951",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c8713627-5fb2-4b7e-ba83-f2acdd49c9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928e3e09-662c-4fd4-9d5e-6864f23dc00e",
        "cursor": {
          "ref": "db81f433-0962-41d9-acb4-d5371294c189",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "107c8549-6018-4a5d-b030-ecc501fd2446"
        },
        "item": {
          "id": "928e3e09-662c-4fd4-9d5e-6864f23dc00e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d9fd9d2b-597d-445c-b7e6-785c16f68a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae0a1da-fd33-4fec-a7b3-eea8bde677e1",
        "cursor": {
          "ref": "7ec15323-dded-4d7f-82f7-3b7592dbe741",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "312bd093-edea-424e-88c7-dda748fb4c2b"
        },
        "item": {
          "id": "fae0a1da-fd33-4fec-a7b3-eea8bde677e1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7beca283-9fdf-4a3e-aaff-4366f579728a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0bbe12-d34b-4dfe-ae82-82716c525a09",
        "cursor": {
          "ref": "82af5b5f-8d85-4155-96bf-b9b6f10228e7",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e67b84a6-79d4-4033-8099-9982b00e7166"
        },
        "item": {
          "id": "0c0bbe12-d34b-4dfe-ae82-82716c525a09",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2f0e3f43-08ef-4563-b5f8-614f2de70148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e19ca43-dadd-479b-b2e9-ae2d304c5463",
        "cursor": {
          "ref": "e250c948-16b1-4a96-96ec-ac2d04bd5c9c",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "dc8d261b-7978-47f9-98e1-7b01b64f1a5f"
        },
        "item": {
          "id": "2e19ca43-dadd-479b-b2e9-ae2d304c5463",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "04ddc09b-8f81-4944-8e47-b81c9ec908d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7febae-56e1-48ab-93fd-42d63699514a",
        "cursor": {
          "ref": "e8fd6662-7745-4bfe-94b1-5ead3dd3f9fd",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "54ff26dc-d21b-4141-ad15-7e62ec72967d"
        },
        "item": {
          "id": "ec7febae-56e1-48ab-93fd-42d63699514a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "38ae10d4-378a-4be6-9b7c-fb80377e6b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685104de-28c3-426d-8708-10ae90bac01c",
        "cursor": {
          "ref": "d9d0572a-c5b9-44c7-9183-ae5e89922381",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ba6f557c-fbac-4e18-9bbd-743136d4ac33"
        },
        "item": {
          "id": "685104de-28c3-426d-8708-10ae90bac01c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "80c1b793-19fd-443c-be07-59959413d6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68682ff5-1789-4300-9cf0-eeeb33c0b215",
        "cursor": {
          "ref": "20779448-0aeb-4cc8-af8f-cee00c80f677",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "b216f844-1d0f-4d09-9d46-3bb8a4cb2bef"
        },
        "item": {
          "id": "68682ff5-1789-4300-9cf0-eeeb33c0b215",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6b68b435-45aa-44f9-b43a-3b6a62f63cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf5b25c-2d88-412e-b01c-de47877a55e2",
        "cursor": {
          "ref": "d7a1b17b-5bc8-472d-8390-d87c1aa6cfad",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "5daad798-3a02-438a-bd01-7c9c1b2536df"
        },
        "item": {
          "id": "faf5b25c-2d88-412e-b01c-de47877a55e2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8b90400f-a39e-4bb6-a9b7-478540ad4f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd3fd93-901b-41df-a05f-79a9150d203b",
        "cursor": {
          "ref": "a9fe9750-8958-435d-b409-4374388505ca",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "8303b4ed-3d5c-4172-b332-f9492cc70ea2"
        },
        "item": {
          "id": "1fd3fd93-901b-41df-a05f-79a9150d203b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d82c5774-684b-4ea1-9bc1-6ebcef605481",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739e0544-dafc-45d5-8dde-b806a667feb2",
        "cursor": {
          "ref": "b99f1e63-efc0-4aec-8225-c1de6398bc5a",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "22236ea9-e2b9-4007-be53-41887bad39b3"
        },
        "item": {
          "id": "739e0544-dafc-45d5-8dde-b806a667feb2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fcb8c930-21db-445a-9674-0d18df57c9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fa450f-dd1e-44e0-a68c-75559844df74",
        "cursor": {
          "ref": "f93d7363-3165-45d7-a41f-9cb7552cf366",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3b202518-b97c-4c60-84fc-8fc7a77ad171"
        },
        "item": {
          "id": "d7fa450f-dd1e-44e0-a68c-75559844df74",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a93c101e-993c-49d1-8bef-e245ce3887cf",
          "status": "OK",
          "code": 200,
          "responseTime": 760,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "58356ba9-2524-4ec2-80f2-63468fd85c03",
        "cursor": {
          "ref": "7ede9e5c-3c96-49a1-b9ad-856d3ec98f52",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d53a3e84-8c5d-4bea-b963-900f8d7c2868"
        },
        "item": {
          "id": "58356ba9-2524-4ec2-80f2-63468fd85c03",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f3bbea00-d5d3-4420-a404-d705376d13d5",
          "status": "OK",
          "code": 200,
          "responseTime": 1227,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "731f0b5a-310b-4d02-9376-208d857ac8c0",
        "cursor": {
          "ref": "8e03a81c-2bc9-47a2-bf15-27b109dcf2e2",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "67e9a520-be2e-40f9-b245-f1d5825387c8"
        },
        "item": {
          "id": "731f0b5a-310b-4d02-9376-208d857ac8c0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abe9d53e-206e-426e-a144-ef1ae11b7716",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731f0b5a-310b-4d02-9376-208d857ac8c0",
        "cursor": {
          "ref": "8e03a81c-2bc9-47a2-bf15-27b109dcf2e2",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "67e9a520-be2e-40f9-b245-f1d5825387c8"
        },
        "item": {
          "id": "731f0b5a-310b-4d02-9376-208d857ac8c0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abe9d53e-206e-426e-a144-ef1ae11b7716",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf4fb16-a96f-475a-88dd-1f4b65ec6a4d",
        "cursor": {
          "ref": "908cee34-75ce-46bc-b6dd-91714ea5affb",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "953f5ce1-6e97-4069-a297-cf0f5e6a50c7"
        },
        "item": {
          "id": "bcf4fb16-a96f-475a-88dd-1f4b65ec6a4d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a2ee39bc-b7ac-4fb9-8ac6-5d215ec448f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e7bc3f-7533-4d66-b274-ca6de0f35a27",
        "cursor": {
          "ref": "a4c25970-980e-4968-8263-f26988512663",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f2699e0e-1d8b-432b-8dbd-900b5e2e661d"
        },
        "item": {
          "id": "95e7bc3f-7533-4d66-b274-ca6de0f35a27",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c6e0b724-b0bc-4135-b1c8-73dc6c80769d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}